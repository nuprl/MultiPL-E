name: HumanEval_126_is_sorted
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tint len = lst.size();\n\tfor (int i = 0; i < len - 1; i++) {\n\t\t\
    if (lst[i] > lst[i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpwfq_c0hy: /tmp/tmpwfq_c0hy.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::sort(lst.begin(), lst.end());\n\tfor (int i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] == lst[i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp6jyi7lvl: /tmp/tmp6jyi7lvl.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::vector<long>::iterator it;\n\tfor (it = lst.begin(); it != lst.end()\
    \ - 1; it++) {\n\t\tif (*it > *(it + 1))\n\t\t\treturn false;\n\t}\n\treturn true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::sort(lst.begin(), lst.end());\n\tfor (int i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] == lst[i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp5wqjnxnc: /tmp/tmp5wqjnxnc.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1) {\n\t\treturn true;\n\t}\n\tfor (int i = 0; i\
    \ < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i + 1]) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1)\n\t\treturn true;\n\tfor (int i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] > lst[i + 1])\n\t\t\treturn false;\n\t}\n\treturn\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::sort(lst.begin(), lst.end());\n\tfor (int i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] == lst[i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpmfng9t09: /tmp/tmpmfng9t09.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1)\n\t\treturn true;\n\tfor (int i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] > lst[i + 1])\n\t\t\treturn false;\n\t}\n\treturn\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::sort(lst.begin(), lst.end());\n\tfor (int i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] == lst[i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmphoz0qkxt: /tmp/tmphoz0qkxt.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1)\n\t\treturn true;\n\tfor (int i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] > lst[i + 1])\n\t\t\treturn false;\n\t}\n\treturn\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1) {\n\t\treturn true;\n\t}\n\tfor (int i = 0; i\
    \ < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i + 1]) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::vector<long>::iterator it;\n\tit = std::unique(lst.begin(), lst.end());\n\
    \tlst.resize(std::distance(lst.begin(), it));\n\tif (std::is_sorted(lst.begin(),\
    \ lst.end())) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\n\
    int main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpev_42xgs: /tmp/tmpev_42xgs.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::vector<long>::iterator it = lst.begin();\n\tstd::vector<long>::iterator\
    \ it2 = lst.begin();\n\tit2++;\n\tfor (; it2 != lst.end(); it++, it2++) {\n\t\t\
    if (*it > *it2) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1) {\n\t\treturn true;\n\t}\n\tfor (int i = 0; i\
    \ < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i + 1]) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i\
    \ + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1) {\n\t\treturn true;\n\t}\n\tfor (int i = 0; i\
    \ < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i + 1]) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::vector<long>::iterator it;\n\tfor (it = lst.begin(); it != lst.end()\
    \ - 1; it++) {\n\t\tif (*it > *(it + 1)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::sort(lst.begin(), lst.end());\n\tfor (int i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] == lst[i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp1t2e6a85: /tmp/tmp1t2e6a85.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::sort(lst.begin(), lst.end());\n\tfor (int i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] == lst[i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpv71803tu: /tmp/tmpv71803tu.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1)\n\t\treturn true;\n\tfor (int i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] > lst[i + 1])\n\t\t\treturn false;\n\t}\n\treturn\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1)\n\t\treturn true;\n\tfor (int i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] > lst[i + 1])\n\t\t\treturn false;\n\t}\n\treturn\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::sort(lst.begin(), lst.end());\n\tfor (int i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] == lst[i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpjpvxwbe_: /tmp/tmpjpvxwbe_.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1)\n\t\treturn true;\n\tfor (int i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] > lst[i + 1])\n\t\t\treturn false;\n\t}\n\treturn\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1) {\n\t\treturn true;\n\t}\n\tfor (int i = 0; i\
    \ < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i + 1]) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::vector<long>::iterator it;\n\tit = std::unique(lst.begin(), lst.end());\n\
    \tlst.resize(std::distance(lst.begin(), it));\n\tif (std::is_sorted(lst.begin(),\
    \ lst.end()))\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpnhlwx1xu: /tmp/tmpnhlwx1xu.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1) {\n\t\treturn true;\n\t}\n\tfor (int i = 0; i\
    \ < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i + 1]) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1) {\n\t\treturn true;\n\t}\n\tfor (int i = 0; i\
    \ < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i + 1]) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::vector<long> temp = lst;\n\tstd::sort(temp.begin(), temp.end());\n\
    \tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (lst[i] != temp[i]) {\n\t\t\t\
    return false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpiksd5hio: /tmp/tmpiksd5hio.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::vector<long>::iterator it;\n\tit = std::unique(lst.begin(), lst.end());\n\
    \tlst.resize(std::distance(lst.begin(), it));\n\treturn std::is_sorted(lst.begin(),\
    \ lst.end());\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp3ir4hvlb: /tmp/tmp3ir4hvlb.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1)\n\t\treturn true;\n\tfor (int i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] > lst[i + 1])\n\t\t\treturn false;\n\t}\n\treturn\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1) {\n\t\treturn true;\n\t}\n\tfor (int i = 0; i\
    \ < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i + 1]) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tint n = lst.size();\n\tfor (int i = 0; i < n - 1; i++) {\n\t\tif (lst[i]\
    \ > lst[i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp8hgfjpab: /tmp/tmp8hgfjpab.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tint i = 0;\n\twhile (i < lst.size() - 1) {\n\t\tif (lst[i] > lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::vector<long>::iterator it;\n\tit = std::unique(lst.begin(), lst.end());\n\
    \tlst.resize(std::distance(lst.begin(), it));\n\tif (std::is_sorted(lst.begin(),\
    \ lst.end()))\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp8hqrbxmc: /tmp/tmp8hqrbxmc.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1)\n\t\treturn true;\n\tfor (int i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] > lst[i + 1])\n\t\t\treturn false;\n\t}\n\treturn\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1)\n\t\treturn true;\n\tfor (int i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] > lst[i + 1])\n\t\t\treturn false;\n\t}\n\treturn\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1) {\n\t\treturn true;\n\t}\n\tfor (int i = 0; i\
    \ < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i + 1]) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::vector<long>::iterator it;\n\tfor (it = lst.begin(); it != lst.end()\
    \ - 1; it++) {\n\t\tif (*it > *(it + 1)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1)\n\t\treturn true;\n\tfor (int i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] > lst[i + 1])\n\t\t\treturn false;\n\t}\n\treturn\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::set<long> s;\n\tfor (auto i : lst)\n\t\ts.insert(i);\n\tif (s.size()\
    \ != lst.size())\n\t\treturn false;\n\tfor (int i = 0; i < lst.size() - 1; i++)\n\
    \t\tif (lst[i] > lst[i + 1])\n\t\t\treturn false;\n\treturn true;\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1)\n\t\treturn true;\n\tfor (int i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] > lst[i + 1])\n\t\t\treturn false;\n\t}\n\treturn\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1)\n\t\treturn true;\n\tfor (int i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] > lst[i + 1])\n\t\t\treturn false;\n\t}\n\treturn\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1) return true;\n\tfor (int i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] > lst[i + 1]) return false;\n\t}\n\treturn true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::sort(lst.begin(), lst.end());\n\tfor (int i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] == lst[i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp65jm3tfx: /tmp/tmp65jm3tfx.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tint n = lst.size();\n\tfor (int i = 0; i < n - 1; i++) {\n\t\tif (lst[i]\
    \ > lst[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nint main() {\n \
    \   auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpod7820zh: /tmp/tmpod7820zh.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1) {\n\t\treturn true;\n\t}\n\tfor (int i = 0; i\
    \ < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i + 1]) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1)\n\t\treturn true;\n\tfor (int i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] >= lst[i + 1])\n\t\t\treturn false;\n\t}\n\treturn\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1)\n\t\treturn true;\n\tfor (int i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] > lst[i + 1])\n\t\t\treturn false;\n\t}\n\treturn\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1) {\n\t\treturn true;\n\t}\n\tfor (int i = 0; i\
    \ < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i + 1]) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1) {\n\t\treturn true;\n\t}\n\tfor (int i = 0; i\
    \ < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i + 1]) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::vector<long>::iterator it;\n\tfor (it = lst.begin(); it != lst.end()\
    \ - 1; it++) {\n\t\tif (*it > *(it + 1)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1) {\n\t\treturn true;\n\t}\n\tfor (int i = 0; i\
    \ < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i + 1]) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1) {\n\t\treturn true;\n\t}\n\tfor (int i = 0; i\
    \ < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i + 1]) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1) {\n\t\treturn true;\n\t}\n\tfor (int i = 0; i\
    \ < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i + 1]) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1) {\n\t\treturn true;\n\t}\n\tfor (int i = 0; i\
    \ < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i + 1]) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1) return true;\n\tfor (int i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] > lst[i + 1]) return false;\n\t}\n\treturn true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1)\n\t\treturn true;\n\tfor (int i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] > lst[i + 1])\n\t\t\treturn false;\n\t}\n\treturn\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1)\n\t\treturn true;\n\tfor (int i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] >= lst[i + 1])\n\t\t\treturn false;\n\t}\n\treturn\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::vector<long>::iterator it;\n\tstd::vector<long>::iterator it2;\n\
    \tfor (it = lst.begin(); it != lst.end(); it++) {\n\t\tfor (it2 = it + 1; it2\
    \ != lst.end(); it2++) {\n\t\t\tif (*it > *it2) {\n\t\t\t\treturn false;\n\t\t\
    \t}\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp54v52a2b: /tmp/tmp54v52a2b.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::vector<long>::iterator it;\n\tit = std::unique(lst.begin(), lst.end());\n\
    \tlst.resize(std::distance(lst.begin(), it));\n\tif (std::is_sorted(lst.begin(),\
    \ lst.end()))\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpcltagzvm: /tmp/tmpcltagzvm.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::sort(lst.begin(), lst.end());\n\tfor (int i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] == lst[i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpjstync68: /tmp/tmpjstync68.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1) {\n\t\treturn true;\n\t}\n\tfor (int i = 0; i\
    \ < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i + 1]) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1) return true;\n\tfor (int i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] > lst[i + 1]) return false;\n\t}\n\treturn true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1) {\n\t\treturn true;\n\t}\n\tfor (int i = 0; i\
    \ < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i + 1]) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::vector<long>::iterator it;\n\tit = std::unique(lst.begin(), lst.end());\n\
    \tlst.resize(std::distance(lst.begin(), it));\n\tif (std::is_sorted(lst.begin(),\
    \ lst.end())) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\n\
    int main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpf24vucuz: /tmp/tmpf24vucuz.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1)\n\t\treturn true;\n\tfor (int i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] > lst[i + 1])\n\t\t\treturn false;\n\t}\n\treturn\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::vector<long> temp;\n\tfor (int i = 0; i < lst.size(); i++) {\n\
    \t\ttemp.push_back(lst[i]);\n\t}\n\tstd::sort(temp.begin(), temp.end());\n\tfor\
    \ (int i = 0; i < lst.size(); i++) {\n\t\tif (lst[i] != temp[i]) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp1o7i_32v: /tmp/tmp1o7i_32v.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::sort(lst.begin(), lst.end());\n\tfor (int i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] == lst[i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp0xl7_3m9: /tmp/tmp0xl7_3m9.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1) return true;\n\tfor (int i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] >= lst[i + 1]) return false;\n\t}\n\treturn true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::vector<long>::iterator it;\n\tit = std::unique(lst.begin(), lst.end());\n\
    \tlst.resize(std::distance(lst.begin(), it));\n\tfor (int i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] > lst[i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::sort(lst.begin(), lst.end());\n\tfor (int i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] == lst[i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpdgq2iz_r: /tmp/tmpdgq2iz_r.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::vector<long> sorted_lst = lst;\n\tstd::sort(sorted_lst.begin(),\
    \ sorted_lst.end());\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (lst[i]\
    \ != sorted_lst[i]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint\
    \ main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp20a57gla: /tmp/tmp20a57gla.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1)\n\t\treturn true;\n\tfor (int i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] >= lst[i + 1])\n\t\t\treturn false;\n\t}\n\treturn\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1)\n\t\treturn true;\n\tfor (int i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] > lst[i + 1])\n\t\t\treturn false;\n\t}\n\treturn\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::vector<long> temp;\n\tfor (int i = 0; i < lst.size(); i++) {\n\
    \t\ttemp.push_back(lst[i]);\n\t}\n\tstd::sort(temp.begin(), temp.end());\n\tfor\
    \ (int i = 0; i < lst.size(); i++) {\n\t\tif (lst[i] != temp[i]) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpizhu0r_s: /tmp/tmpizhu0r_s.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1)\n\t\treturn true;\n\tfor (int i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] > lst[i + 1])\n\t\t\treturn false;\n\t}\n\treturn\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1) {\n\t\treturn true;\n\t}\n\tfor (int i = 0; i\
    \ < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i + 1]) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::vector<long>::iterator it;\n\tit = std::unique(lst.begin(), lst.end());\n\
    \tlst.resize(std::distance(lst.begin(), it));\n\tif (std::is_sorted(lst.begin(),\
    \ lst.end())) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\n\
    int main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp1i6vrzsg: /tmp/tmp1i6vrzsg.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::vector<long>::iterator it;\n\tit = std::unique(lst.begin(), lst.end());\n\
    \tlst.resize(std::distance(lst.begin(), it));\n\tfor (int i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] > lst[i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tint i = 0;\n\twhile (i < lst.size() - 1) {\n\t\tif (lst[i] > lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::set<long> s;\n\tfor (auto i : lst) {\n\t\ts.insert(i);\n\t}\n\
    \tif (s.size() != lst.size()) {\n\t\treturn false;\n\t}\n\tfor (int i = 0; i <\
    \ lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i + 1]) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1) {\n\t\treturn true;\n\t}\n\tfor (int i = 0; i\
    \ < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i + 1]) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1) {\n\t\treturn true;\n\t}\n\tfor (int i = 0; i\
    \ < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i + 1]) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tint i = 0;\n\twhile (i < lst.size() - 1) {\n\t\tif (lst[i] > lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::vector<long>::iterator it;\n\tit = std::unique(lst.begin(), lst.end());\n\
    \tlst.resize(std::distance(lst.begin(), it));\n\tif (std::is_sorted(lst.begin(),\
    \ lst.end())) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\n\
    int main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmptz0gkaru: /tmp/tmptz0gkaru.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::vector<long> sorted_lst = lst;\n\tstd::sort(sorted_lst.begin(),\
    \ sorted_lst.end());\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (lst[i]\
    \ != sorted_lst[i]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint\
    \ main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpc8adp6xj: /tmp/tmpc8adp6xj.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1) return true;\n\tfor (int i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] > lst[i + 1]) return false;\n\t}\n\treturn true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::vector<long>::iterator it;\n\tit = std::unique(lst.begin(), lst.end());\n\
    \tlst.resize(std::distance(lst.begin(), it));\n\tif (std::is_sorted(lst.begin(),\
    \ lst.end())) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\n\
    int main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp9domxrww: /tmp/tmp9domxrww.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1) {\n\t\treturn true;\n\t}\n\tfor (int i = 0; i\
    \ < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i + 1]) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
