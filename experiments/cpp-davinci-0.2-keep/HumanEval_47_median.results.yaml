name: HumanEval_47_median
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    float med;\n\
    \    int n = l.size();\n    if(n%2 == 0)\n    {\n        med = (l[n/2] + l[(n/2)-1])/2.0;\n\
    \    }\n    else\n    {\n        med = l[n/2];\n    }\n    return med;\n}\nint\
    \ main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpr8tkplqu: /tmp/tmpr8tkplqu.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    int n = l.size();\n    if(n%2 == 0)\n    {\n        return\
    \ (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n   \
    \ }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp_knqlrba: /tmp/tmp_knqlrba.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    int n = l.size();\n    if(n%2==0)\n    {\n        return\
    \ (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n   \
    \ }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpmk4e7qqc: /tmp/tmpmk4e7qqc.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    if(n%2 == 0)\n        return (l[n/2] + l[n/2-1])/2.0;\n    else\n\
    \        return l[n/2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp7d9a5d6m: /tmp/tmp7d9a5d6m.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // TODO:\
    \ Implement this function.\n    int n = l.size();\n    if(n%2==0)\n    {\n   \
    \     return (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n\
    \    }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp4la8f7nd: /tmp/tmp4la8f7nd.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ > 0);\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n  \
    \      return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n \
    \       return l[l.size() / 2];\n    }\n}\nint main() {\n    auto candidate =\
    \ median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    int n = l.size();\n    if(n%2 == 0)\n    {\n        return\
    \ (l[n/2] + l[n/2 - 1])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n\
    \    }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpkgkcu4i4: /tmp/tmpkgkcu4i4.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  assert(l.size()\
    \ > 0);\n  std::sort(l.begin(), l.end());\n  if (l.size() % 2 == 0) {\n    return\
    \ (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.size()\
    \ / 2];\n  }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    int n = l.size();\n    if(n%2 == 0)\n    {\n        return\
    \ (l[n/2] + l[n/2 - 1])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n\
    \    }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpzblp857e: /tmp/tmpzblp857e.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    float median;\n\
    \    int n = l.size();\n    if (n % 2 == 0) {\n        median = (l[n / 2] + l[n\
    \ / 2 - 1]) / 2.0;\n    } else {\n        median = l[n / 2];\n    }\n    return\
    \ median;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp1psy855k: /tmp/tmp1psy855k.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ > 0);\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n  \
    \      return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n \
    \       return l[l.size() / 2];\n    }\n}\nint main() {\n    auto candidate =\
    \ median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  // TODO:\
    \ Implement me!\n  return 0.0;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpb8sh5yu0: /tmp/tmpb8sh5yu0.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ > 0);\n    std::sort(l.begin(), l.end());\n    int size = l.size();\n    if\
    \ (size % 2 == 0) {\n        return (l[size / 2] + l[size / 2 - 1]) / 2.0;\n \
    \   } else {\n        return l[size / 2];\n    }\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ > 0);\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n  \
    \      return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n \
    \       return l[l.size() / 2];\n    }\n}\nint main() {\n    auto candidate =\
    \ median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    float median;\n    int n = l.size();\n    if(n%2==0)\n \
    \   {\n        median = (l[n/2] + l[(n/2)-1])/2.0;\n    }\n    else\n    {\n \
    \       median = l[n/2];\n    }\n    return median;\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1,\
    \ (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpnchku2yy: /tmp/tmpnchku2yy.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    std::sort(l.begin(), l.end());\n    if (n % 2 == 0) {\n     \
    \   return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n\
    \ / 2];\n    }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    int size = l.size();\n    if (size % 2 == 0)\n        return\
    \ (l[size / 2 - 1] + l[size / 2]) / 2.0;\n    else\n        return l[size / 2];\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    int n = l.size();\n    if(n%2 == 0)\n    {\n        return\
    \ (l[n/2] + l[n/2 - 1])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n\
    \    }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmppcp560eq: /tmp/tmppcp560eq.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    if(n%2 == 0)\n        return (l[n/2] + l[n/2 - 1])/2.0;\n   \
    \ else\n        return l[n/2];\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpanl20bok: /tmp/tmpanl20bok.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\tint n = l.size();\n\
    \tif (n == 0) {\n\t\treturn 0;\n\t}\n\tif (n % 2 == 0) {\n\t\treturn (l[n / 2]\
    \ + l[n / 2 - 1]) / 2.0;\n\t}\n\telse {\n\t\treturn l[n / 2];\n\t}\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpqcardfov: /tmp/tmpqcardfov.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    if(n%2==0)\n        return (l[n/2]+l[n/2-1])/2.0;\n    else\n\
    \        return l[n/2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp289gnsmz: /tmp/tmp289gnsmz.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\tint n = l.size();\n\
    \tif (n == 0) {\n\t\treturn 0;\n\t}\n\tif (n % 2 == 0) {\n\t\treturn (l[n / 2]\
    \ + l[n / 2 - 1]) / 2.0;\n\t}\n\telse {\n\t\treturn l[n / 2];\n\t}\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpil9cfvnd: /tmp/tmpil9cfvnd.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    if(n%2==0)\n        return (l[n/2]+l[n/2-1])/2.0;\n    else\n\
    \        return l[n/2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp0q29kjh9: /tmp/tmp0q29kjh9.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    if(n%2 == 0)\n        return (l[n/2] + l[n/2 - 1])/2.0;\n   \
    \ else\n        return l[n/2];\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpny060l2p: /tmp/tmpny060l2p.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ > 0);\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n  \
    \      return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n \
    \       return l[l.size() / 2];\n    }\n}\nint main() {\n    auto candidate =\
    \ median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ > 0);\n    std::sort(l.begin(), l.end());\n    int n = l.size();\n    if (n\
    \ % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n\
    \        return l[n / 2];\n    }\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // TODO:\
    \ Implement me!\n    int n = l.size();\n    if(n%2==0){\n        return (l[n/2]+l[n/2-1])/2.0;\n\
    \    }\n    else{\n        return l[n/2];\n    }\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpy1g4q0lr: /tmp/tmpy1g4q0lr.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    if(n%2 == 0)\n        return (float)(l[n/2-1] + l[n/2])/2;\n\
    \    else\n        return (float)l[n/2];\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpsgrktjro: /tmp/tmpsgrktjro.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\t// TODO:\
    \ Implement this function.\n\t// You may need to sort the vector l first.\n\t\
    // Please use std::sort(l.begin(), l.end());\n\tstd::sort(l.begin(), l.end());\n\
    \tint size = l.size();\n\tif (size % 2 == 0) {\n\t\treturn (l[size / 2] + l[size\
    \ / 2 - 1]) / 2.0;\n\t}\n\telse {\n\t\treturn l[size / 2];\n\t}\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    std::sort(l.begin(),l.end());\n    int n=l.size();\n   \
    \ if(n%2==0)\n    {\n        return (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n\
    \    {\n        return l[n/2];\n    }\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    int n = l.size();\n    if(n%2==0)\n    {\n        return\
    \ (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n   \
    \ }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp1n7zuv4l: /tmp/tmp1n7zuv4l.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\tint n = l.size();\n\
    \tif (n == 0)\n\t\treturn 0;\n\tif (n % 2 == 0)\n\t\treturn (l[n / 2] + l[n /\
    \ 2 - 1]) / 2.0;\n\telse\n\t\treturn l[n / 2];\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpptzjj1b0: /tmp/tmpptzjj1b0.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    if(n%2==0)\n        return (l[n/2]+l[n/2-1])/2.0;\n    else\n\
    \        return l[n/2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp2eefkczb: /tmp/tmp2eefkczb.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ != 0);\n    int n = l.size();\n    if(n%2 == 0)\n        return (l[n/2] + l[n/2-1])/2.0;\n\
    \    else\n        return l[n/2];\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpxnrn8jm7: /tmp/tmpxnrn8jm7.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // write\
    \ your code here\n    int n = l.size();\n    if(n%2==0)\n    {\n        return\
    \ (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n   \
    \ }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpame1yxcy: /tmp/tmpame1yxcy.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    if(n%2==0)\n        return (l[n/2-1]+l[n/2])/2.0;\n    else\n\
    \        return l[n/2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmptvp4pm6z: /tmp/tmptvp4pm6z.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    int size = l.size();\n    if (size % 2 == 0) {\n        return\
    \ (l[size / 2 - 1] + l[size / 2]) / 2.0;\n    } else {\n        return l[size\
    \ / 2];\n    }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    int n = l.size();\n    if(n%2 == 0)\n    {\n        return\
    \ (l[n/2] + l[n/2 - 1])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n\
    \    }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpralk2cck: /tmp/tmpralk2cck.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // TODO\n\
    \    std::sort(l.begin(), l.end());\n    int n = l.size();\n    if(n%2 == 0)\n\
    \        return (l[n/2] + l[n/2-1])/2.0;\n    else\n        return l[n/2];\n}\n\
    int main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    sort(l.begin(), l.end());\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n \
    \   }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    int n = l.size();\n    if(n%2==0)\n    {\n        return\
    \ (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n   \
    \ }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp54dvllgf: /tmp/tmp54dvllgf.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ > 0);\n    std::sort(l.begin(), l.end());\n    int n = l.size();\n    if (n\
    \ % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n\
    \        return l[n / 2];\n    }\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    int size = l.size();\n    if (size % 2 == 0) {\n        return\
    \ (l[size / 2 - 1] + l[size / 2]) / 2.0;\n    } else {\n        return l[size\
    \ / 2];\n    }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    if(n%2==0)\n        return (l[n/2-1]+l[n/2])/2.0;\n    else\n\
    \        return l[n/2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpsjpyho59: /tmp/tmpsjpyho59.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here.\n    int n = l.size();\n    if(n%2==0){\n        return (float)(l[n/2]+l[n/2-1])/2;\n\
    \    }\n    else{\n        return (float)l[n/2];\n    }\n}\nint main() {\n   \
    \ auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpls21tpb7: /tmp/tmpls21tpb7.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    if(n%2 == 0)\n        return (l[n/2-1] + l[n/2])/2.0;\n    else\n\
    \        return l[n/2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp0kk_tlrf: /tmp/tmp0kk_tlrf.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    sort(l.begin(),l.end());\n    int n=l.size();\n    if(n%2==0)\n\
    \    {\n        return (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n    {\n      \
    \  return l[n/2];\n    }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // TODO:\
    \ Implement me!\n    std::sort(l.begin(), l.end());\n    int n = l.size();\n \
    \   if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n\
    \    return l[n / 2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // TODO:\
    \ Implement this function.\n    std::sort(l.begin(), l.end());\n    int n = l.size();\n\
    \    if(n%2 == 0)\n        return (l[n/2] + l[n/2 - 1])/2.0;\n    else\n     \
    \   return l[n/2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // TODO:\
    \ Implement me!\n    std::sort(l.begin(), l.end());\n    int size = l.size();\n\
    \    if (size % 2 == 0) {\n        return (l[size / 2] + l[size / 2 - 1]) / 2.0;\n\
    \    }\n    else {\n        return l[size / 2];\n    }\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1,\
    \ (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    int size = l.size();\n    if (size % 2 == 0) {\n        return\
    \ (l[size / 2] + l[size / 2 - 1]) / 2.0;\n    } else {\n        return l[size\
    \ / 2];\n    }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\tint n = l.size();\n\
    \tif (n % 2 == 0)\n\t\treturn (l[n / 2] + l[n / 2 - 1]) / 2.0;\n\telse\n\t\treturn\
    \ l[n / 2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpg9g34c62: /tmp/tmpg9g34c62.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    if(n%2 == 0)\n        return (l[n/2] + l[n/2 - 1])/2.0;\n   \
    \ else\n        return l[n/2];\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpqqgmq2rr: /tmp/tmpqqgmq2rr.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ > 0);\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n  \
    \      return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n \
    \       return l[l.size() / 2];\n    }\n}\nint main() {\n    auto candidate =\
    \ median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\tint n = l.size();\n\
    \tif (n % 2 == 0) {\n\t\treturn (l[n / 2] + l[n / 2 - 1]) / 2.0;\n\t}\n\telse\
    \ {\n\t\treturn l[n / 2];\n\t}\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpt7f5ib4f: /tmp/tmpt7f5ib4f.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\t// Write\
    \ your code here\n\t// To print results to the standard output you can use Printf\n\
    \t// Example: Printf(\"%s\\n\", \"Hello world!\");\n\tint n = l.size();\n\tif\
    \ (n % 2 == 0) {\n\t\treturn (l[n / 2] + l[n / 2 - 1]) / 2.0;\n\t}\n\telse {\n\
    \t\treturn l[n / 2];\n\t}\n}\nint main() {\n    auto candidate = median;\n   \
    \ assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10, (long)4,\
    \ (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp5ay83ny4: /tmp/tmp5ay83ny4.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    if(n%2 == 0)\n        return (l[n/2] + l[n/2 - 1])/2.0;\n   \
    \ else\n        return l[n/2];\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp2n_2dqok: /tmp/tmp2n_2dqok.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    float med;\n\
    \    int n = l.size();\n    if(n%2==0)\n        med = (l[n/2] + l[n/2 - 1])/2.0;\n\
    \    else\n        med = l[n/2];\n    return med;\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp5fkk0d2m: /tmp/tmp5fkk0d2m.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    if(n%2 == 0)\n        return (l[n/2] + l[n/2-1])/2.0;\n    else\n\
    \        return l[n/2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpec3auv1p: /tmp/tmpec3auv1p.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    if(n%2 == 0)\n        return (float)(l[n/2] + l[n/2 - 1])/2;\n\
    \    else\n        return l[n/2];\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpitlmw3kv: /tmp/tmpitlmw3kv.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    int n = l.size();\n    if(n%2==0)\n    {\n        return\
    \ (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n   \
    \ }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpryhurkr1: /tmp/tmpryhurkr1.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    int n = l.size();\n    if(n%2==0)\n    {\n        return\
    \ (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n   \
    \ }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp2uvfuqv4: /tmp/tmp2uvfuqv4.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // TODO:\
    \ implement this function.\n    // You may need to sort the vector l first.\n\
    \    // Please use std::sort(l.begin(), l.end()); to sort the vector l.\n    std::sort(l.begin(),\
    \ l.end());\n    int size = l.size();\n    if (size % 2 == 0) {\n        return\
    \ (l[size / 2] + l[size / 2 - 1]) / 2.0;\n    } else {\n        return l[size\
    \ / 2];\n    }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    if(n%2 == 0)\n        return (l[n/2] + l[n/2 - 1])/2.0;\n   \
    \ else\n        return l[n/2];\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpizcde_a9: /tmp/tmpizcde_a9.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    if(n%2==0)\n        return (l[n/2-1]+l[n/2])/2.0;\n    else\n\
    \        return l[n/2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpwnkm7sd7: /tmp/tmpwnkm7sd7.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\tint n = l.size();\n\
    \tif (n % 2 == 0)\n\t\treturn (l[n / 2] + l[n / 2 - 1]) / 2.0;\n\telse\n\t\treturn\
    \ l[n / 2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpoduehigo: /tmp/tmpoduehigo.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    if(n%2 == 0)\n        return (l[n/2] + l[n/2 - 1])/2.0;\n   \
    \ else\n        return l[n/2];\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmplfzmighe: /tmp/tmplfzmighe.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    int n = l.size();\n    if(n%2==0)\n    {\n        return\
    \ (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n   \
    \ }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpcpo9r4wc: /tmp/tmpcpo9r4wc.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    if(n%2 == 0) {\n        return (l[n/2] + l[n/2 - 1])/2.0;\n \
    \   }\n    else {\n        return l[n/2];\n    }\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp7135c5ij: /tmp/tmp7135c5ij.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\t// Write\
    \ your code here\n\t// To print results to the standard output you can use Printf\n\
    \t// Example: Printf(\"%s\\n\", \"Hello world!\");\n\tstd::sort(l.begin(), l.end());\n\
    \tint n = l.size();\n\tif (n % 2 == 0) {\n\t\treturn (l[n / 2] + l[n / 2 - 1])\
    \ / 2.0;\n\t}\n\telse {\n\t\treturn l[n / 2];\n\t}\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1,\
    \ (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    int n = l.size();\n    if(n%2==0)\n    {\n        return\
    \ (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n   \
    \ }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpwumjfl_s: /tmp/tmpwumjfl_s.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()>0);\n\
    \    std::sort(l.begin(),l.end());\n    if(l.size()%2==0)\n        return (l[l.size()/2]+l[l.size()/2-1])/2.0;\n\
    \    else\n        return l[l.size()/2];\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\t// Write\
    \ your code here\n\tstd::sort(l.begin(), l.end());\n\tint n = l.size();\n\tif\
    \ (n % 2 == 0)\n\t\treturn (l[n / 2] + l[n / 2 - 1]) / 2.0;\n\telse\n\t\treturn\
    \ l[n / 2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    int n = l.size();\n    if(n%2==0)\n    {\n        return\
    \ (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n   \
    \ }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp311fhr1r: /tmp/tmp311fhr1r.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    int n = l.size();\n    if(n%2 == 0)\n    {\n        return\
    \ (l[n/2] + l[n/2 - 1])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n\
    \    }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmplsrwihuv: /tmp/tmplsrwihuv.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    int n = l.size();\n    if(n%2==0)\n    {\n        return\
    \ (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n   \
    \ }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpj7wtytwu: /tmp/tmpj7wtytwu.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // TODO:\
    \ Implement me!\n    int n = l.size();\n    if(n%2==0){\n        return (l[n/2]+l[n/2-1])/2.0;\n\
    \    }\n    else{\n        return l[n/2];\n    }\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp29c2uft7: /tmp/tmp29c2uft7.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\t// Write\
    \ your code here\n\tint n = l.size();\n\tif (n % 2 == 0) {\n\t\treturn (l[n /\
    \ 2] + l[n / 2 - 1]) / 2.0;\n\t}\n\telse {\n\t\treturn l[n / 2];\n\t}\n}\nint\
    \ main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp90e9ujeg: /tmp/tmp90e9ujeg.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    if(n%2==0)\n        return (l[n/2]+l[n/2-1])/2.0;\n    else\n\
    \        return l[n/2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp553e6pxr: /tmp/tmp553e6pxr.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    std::sort(l.begin(),l.end());\n    int n=l.size();\n   \
    \ if(n%2==0)\n    {\n        return (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n\
    \    {\n        return l[n/2];\n    }\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    if(n%2 == 0)\n        return (l[n/2] + l[n/2 - 1])/2.0;\n   \
    \ else\n        return l[n/2];\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpalpkgn5d: /tmp/tmpalpkgn5d.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    int n = l.size();\n    if(n%2 == 0)\n    {\n        return\
    \ (l[n/2-1]+l[n/2])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n   \
    \ }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpw2nbtq4q: /tmp/tmpw2nbtq4q.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Your\
    \ code here\n    int n = l.size();\n    if(n%2==0)\n    {\n        return (l[n/2]+l[n/2-1])/2.0;\n\
    \    }\n    else\n    {\n        return l[n/2];\n    }\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1,\
    \ (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp3jw3ap1e: /tmp/tmp3jw3ap1e.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ > 0);\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n / 2]\
    \ + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }\n}\nint\
    \ main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpqmwqcz4a: /tmp/tmpqmwqcz4a.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // TODO:\
    \ Implement this function.\n    std::sort(l.begin(), l.end());\n    int n = l.size();\n\
    \    if(n%2==0)\n    {\n        return (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n\
    \    {\n        return l[n/2];\n    }\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    std::sort(l.begin(),l.end());\n    int n=l.size();\n   \
    \ if(n%2==0)\n    {\n        return (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n\
    \    {\n        return l[n/2];\n    }\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    if(n%2 == 0)\n        return (l[n/2] + l[n/2-1])/2.0;\n    else\n\
    \        return l[n/2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp5qnwez9q: /tmp/tmp5qnwez9q.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    if(n%2 == 0)\n        return (l[n/2] + l[n/2-1])/2.0;\n    else\n\
    \        return l[n/2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpqb59obsq: /tmp/tmpqb59obsq.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ > 0);\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n  \
    \      return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n \
    \       return l[l.size() / 2];\n    }\n}\nint main() {\n    auto candidate =\
    \ median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    int n = l.size();\n    if(n%2==0)\n    {\n        return\
    \ (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n   \
    \ }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpdr3nxypb: /tmp/tmpdr3nxypb.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ > 0);\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n  \
    \      return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n \
    \       return l[l.size() / 2];\n    }\n}\nint main() {\n    auto candidate =\
    \ median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    if(n%2==0)\n        return (l[n/2]+l[n/2-1])/2.0;\n    else\n\
    \        return l[n/2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp8hmwzqqh: /tmp/tmp8hmwzqqh.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    int n = l.size();\n    if(n%2==0)\n    {\n        return\
    \ (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n   \
    \ }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpf0p4854e: /tmp/tmpf0p4854e.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ > 0);\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n  \
    \      return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n \
    \       return l[l.size() / 2];\n    }\n}\nint main() {\n    auto candidate =\
    \ median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ > 0);\n    sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n       \
    \ return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n      \
    \  return l[l.size() / 2];\n    }\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ > 0);\n    std::sort(l.begin(), l.end());\n    int n = l.size();\n    if (n\
    \ % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n\
    \        return l[n / 2];\n    }\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    if(n%2==0)\n        return (l[n/2-1]+l[n/2])/2.0;\n    else\n\
    \        return l[n/2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp74l3as3z: /tmp/tmp74l3as3z.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    if(n%2 == 0)\n        return (l[n/2] + l[n/2 - 1])/2.0;\n   \
    \ else\n        return l[n/2];\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpriaypqhg: /tmp/tmpriaypqhg.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0)\n        return (l[n /\
    \ 2 - 1] + l[n / 2]) / 2.0;\n    else\n        return l[n / 2];\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    int n = l.size();\n    if(n%2 == 0)\n    {\n        return\
    \ (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n   \
    \ }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp9f2srvhx: /tmp/tmp9f2srvhx.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ > 0);\n    sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n       \
    \ return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n      \
    \  return l[l.size() / 2];\n    }\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // TODO:\
    \ Implement me!\n    std::sort(l.begin(), l.end());\n    int n = l.size();\n \
    \   if (n % 2 == 0)\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0;\n    else\n\
    \        return l[n / 2];\n}\nint main() {\n    auto candidate = median;\n   \
    \ assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10, (long)4,\
    \ (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // TODO:\
    \ Implement this function.\n    std::sort(l.begin(), l.end());\n    int n = l.size();\n\
    \    if(n % 2 == 0)\n        return (l[n/2] + l[n/2 - 1])/2.0;\n    else\n   \
    \     return l[n/2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    if(n%2==0)\n        return (l[n/2]+l[n/2-1])/2.0;\n    else\n\
    \        return l[n/2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpk8fto8wr: /tmp/tmpk8fto8wr.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }\n}\n\
    int main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    int n = l.size();\n    if(n%2==0)\n    {\n        return\
    \ (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n   \
    \ }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpa6jx7ktl: /tmp/tmpa6jx7ktl.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    int n = l.size();\n    if(n%2==0)\n    {\n        return\
    \ (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n   \
    \ }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp0v1cnx2z: /tmp/tmp0v1cnx2z.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    std::sort(l.begin(),l.end());\n    int n=l.size();\n   \
    \ if(n%2==0)\n    {\n        return (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n\
    \    {\n        return l[n/2];\n    }\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    int n = l.size();\n    if(n%2==0)\n    {\n        return\
    \ (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n   \
    \ }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp_x9k0xar: /tmp/tmp_x9k0xar.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ > 0);\n    sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n       \
    \ return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n      \
    \  return l[l.size() / 2];\n    }\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // write\
    \ your code here\n    int n = l.size();\n    if(n%2 == 0)\n    {\n        return\
    \ (l[n/2] + l[n/2 - 1])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n\
    \    }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpbzxa5h4b: /tmp/tmpbzxa5h4b.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ > 0);\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n  \
    \      return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n \
    \       return l[l.size() / 2];\n    }\n}\nint main() {\n    auto candidate =\
    \ median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    int n = l.size();\n    if(n%2==0)\n    {\n        return\
    \ (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n   \
    \ }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpjk_5q4v0: /tmp/tmpjk_5q4v0.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    std::sort(l.begin(),l.end());\n    int n=l.size();\n   \
    \ if(n%2==0)\n    {\n        return (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n\
    \    {\n        return l[n/2];\n    }\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    int n = l.size();\n    if(n%2==0)\n    {\n        return\
    \ (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n   \
    \ }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpznyhvc4j: /tmp/tmpznyhvc4j.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    if(n%2)\n        return l[n/2];\n    else\n        return (l[n/2]\
    \ + l[n/2-1])/2.0;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpdckacd2s: /tmp/tmpdckacd2s.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    int n = l.size();\n    if(n%2==0)\n    {\n        return\
    \ (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n   \
    \ }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp8_8gbi5i: /tmp/tmp8_8gbi5i.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ > 0);\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n  \
    \      return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n \
    \       return l[l.size() / 2];\n    }\n}\nint main() {\n    auto candidate =\
    \ median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    if(n%2 == 0)\n        return (l[n/2-1] + l[n/2])/2.0;\n    else\n\
    \        return l[n/2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpluwn60pq: /tmp/tmpluwn60pq.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int size\
    \ = l.size();\n    if(size%2==0){\n        return (l[size/2]+l[size/2-1])/2.0;\n\
    \    }\n    else{\n        return l[size/2];\n    }\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1,\
    \ (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpylvour17: /tmp/tmpylvour17.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    std::sort(l.begin(),l.end());\n    int n=l.size();\n   \
    \ if(n%2==0)\n    {\n        return (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n\
    \    {\n        return l[n/2];\n    }\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ > 0);\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n  \
    \      return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n \
    \       return l[l.size() / 2];\n    }\n}\nint main() {\n    auto candidate =\
    \ median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    int n = l.size();\n    if(n%2==0)\n    {\n        return\
    \ (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n   \
    \ }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp2_pi_r4g: /tmp/tmp2_pi_r4g.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // write\
    \ your code here\n    int n = l.size();\n    if(n%2==0)\n    {\n        return\
    \ (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n   \
    \ }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp0uz_flns: /tmp/tmp0uz_flns.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    int n = l.size();\n    if(n%2 == 0)\n    {\n        return\
    \ (l[n/2] + l[n/2 - 1])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n\
    \    }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpjs39gvt3: /tmp/tmpjs39gvt3.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    std::sort(l.begin(),l.end());\n    int n=l.size();\n   \
    \ if(n%2==0)\n    {\n        return (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n\
    \    {\n        return l[n/2];\n    }\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    std::sort(l.begin(),l.end());\n    int n=l.size();\n   \
    \ if(n%2==0)\n    {\n        return (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n\
    \    {\n        return l[n/2];\n    }\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ > 0);\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n  \
    \      return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n \
    \       return l[l.size() / 2];\n    }\n}\nint main() {\n    auto candidate =\
    \ median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ > 0);\n    std::sort(l.begin(), l.end());\n    int n = l.size();\n    if (n\
    \ % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n\
    \        return l[n / 2];\n    }\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    std::sort(l.begin(), l.end());\n    if (n % 2 == 0) {\n     \
    \   return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n\
    \ / 2];\n    }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // TODO:\
    \ Implement me!\n    float median;\n    int size = l.size();\n    if(size % 2\
    \ == 0){\n        median = (l[size/2] + l[size/2 - 1])/2.0;\n    }else{\n    \
    \    median = l[size/2];\n    }\n    return median;\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1,\
    \ (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmphm1i0bnv: /tmp/tmphm1i0bnv.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    if(n == 0)\n        return 0;\n    if(n % 2 == 0)\n        return\
    \ (l[n/2] + l[n/2 - 1]) / 2.0;\n    else\n        return l[n/2];\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpu2bedxnq: /tmp/tmpu2bedxnq.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    if(n%2==0)\n        return (l[n/2]+l[n/2-1])/2.0;\n    else\n\
    \        return l[n/2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp5s43mtt5: /tmp/tmp5s43mtt5.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ > 0);\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n  \
    \      return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n \
    \       return l[l.size() / 2];\n    }\n}\nint main() {\n    auto candidate =\
    \ median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    if(n%2 == 0)\n        return (l[n/2] + l[n/2 - 1])/2.0;\n   \
    \ else\n        return l[n/2];\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpdve_g60v: /tmp/tmpdve_g60v.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ > 0);\n    std::sort(l.begin(), l.end());\n    int mid = l.size() / 2;\n   \
    \ if (l.size() % 2 == 0) {\n        return (l[mid] + l[mid - 1]) / 2.0;\n    }\
    \ else {\n        return l[mid];\n    }\n}\nint main() {\n    auto candidate =\
    \ median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  // TODO:\
    \ Implement me!\n  int n = l.size();\n  if(n%2==0)\n  {\n    return (l[n/2]+l[n/2-1])/2.0;\n\
    \  }\n  else\n  {\n    return l[n/2];\n  }\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmphcrbx1ae: /tmp/tmphcrbx1ae.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\t// TODO:\
    \ Implement median.\n\tint n = l.size();\n\tsort(l.begin(), l.end());\n\tif (n\
    \ % 2 == 0)\n\t\treturn (l[n / 2] + l[n / 2 - 1]) / 2.0;\n\telse\n\t\treturn l[n\
    \ / 2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    if(n == 0)\n        return 0;\n    if(n == 1)\n        return\
    \ l[0];\n    if(n == 2)\n        return (l[0] + l[1])/2.0;\n    if(n % 2 == 0)\n\
    \        return (l[n/2] + l[n/2 - 1])/2.0;\n    else\n        return l[n/2];\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp6vxc3m21: /tmp/tmp6vxc3m21.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    if(n%2==0)\n        return (l[n/2]+l[n/2-1])/2.0;\n    else\n\
    \        return l[n/2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmps7jsrd4u: /tmp/tmps7jsrd4u.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    int n = l.size();\n    if(n%2 == 0)\n    {\n        return\
    \ (l[n/2] + l[n/2 - 1])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n\
    \    }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpw3j_3x7q: /tmp/tmpw3j_3x7q.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }\n}\n\
    int main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    if(n%2 == 0)\n        return (l[n/2-1] + l[n/2])/2.0;\n    else\n\
    \        return l[n/2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp4hikbtti: /tmp/tmp4hikbtti.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    int n = l.size();\n    if(n%2==0)\n    {\n        return\
    \ (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n   \
    \ }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp7kb7sef_: /tmp/tmp7kb7sef_.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\t// Write\
    \ your code here\n\tstd::sort(l.begin(), l.end());\n\tint n = l.size();\n\tif\
    \ (n % 2 == 0) {\n\t\treturn (l[n / 2] + l[n / 2 - 1]) / 2.0;\n\t}\n\telse {\n\
    \t\treturn l[n / 2];\n\t}\n}\nint main() {\n    auto candidate = median;\n   \
    \ assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10, (long)4,\
    \ (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ > 0);\n    std::sort(l.begin(), l.end());\n    int n = l.size();\n    if (n\
    \ % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n\
    \        return l[n / 2];\n    }\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    int n = l.size();\n    if(n%2 == 0)\n    {\n        return\
    \ (l[n/2] + l[n/2 - 1])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n\
    \    }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp5_89_9d6: /tmp/tmp5_89_9d6.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    int n = l.size();\n    if(n%2==0)\n    {\n        return\
    \ (l[n/2-1]+l[n/2])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n   \
    \ }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpuxet02j6: /tmp/tmpuxet02j6.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ > 0);\n    int n = l.size();\n    std::sort(l.begin(), l.end());\n    if (n\
    \ % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n\
    \        return l[n / 2];\n    }\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    int n = l.size();\n    if(n%2==0)\n    {\n        return\
    \ (float)(l[n/2]+l[n/2-1])/2;\n    }\n    else\n    {\n        return (float)l[n/2];\n\
    \    }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpbjvgz5sc: /tmp/tmpbjvgz5sc.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    if(n%2==0)\n        return (l[n/2]+l[n/2-1])/2.0;\n    else\n\
    \        return l[n/2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpebahl8ur: /tmp/tmpebahl8ur.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    if(n%2==0)\n        return (l[n/2]+l[n/2-1])/2.0;\n    else\n\
    \        return l[n/2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpwtxb8_m_: /tmp/tmpwtxb8_m_.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\tstd::sort(l.begin(),\
    \ l.end());\n\tint n = l.size();\n\tif (n % 2 == 0) {\n\t\treturn (l[n / 2] +\
    \ l[n / 2 - 1]) / 2.0;\n\t}\n\telse {\n\t\treturn l[n / 2];\n\t}\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    int n = l.size();\n    if(n%2==0)\n    {\n        return\
    \ (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n   \
    \ }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpelm3t0hn: /tmp/tmpelm3t0hn.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    int n = l.size();\n    if(n%2==0)\n    {\n        return\
    \ (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n   \
    \ }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpdzz2c9ke: /tmp/tmpdzz2c9ke.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    int n = l.size();\n    if(n%2==0)\n    {\n        return\
    \ (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n   \
    \ }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpwg9n_sl3: /tmp/tmpwg9n_sl3.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    if(n%2==0)\n        return (l[n/2]+l[n/2-1])/2.0;\n    else\n\
    \        return l[n/2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpri2626aw: /tmp/tmpri2626aw.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    if(n%2==0)\n        return (l[n/2-1]+l[n/2])/2.0;\n    else\n\
    \        return l[n/2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpq2nv_oe9: /tmp/tmpq2nv_oe9.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\t// Write\
    \ your code here\n\t// To print results to the standard output you can use Printf\n\
    \t// Example: Printf(\"%s\\n\", \"Hello world!\");\n\tint n = l.size();\n\tif\
    \ (n == 0)\n\t\treturn 0;\n\tif (n % 2 == 0)\n\t\treturn (l[n / 2] + l[n / 2 -\
    \ 1]) / 2.0;\n\telse\n\t\treturn l[n / 2];\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpsnz3sr8b: /tmp/tmpsnz3sr8b.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // TODO:\
    \ Implement median function.\n    // You can use std::sort(l.begin(), l.end())\
    \ to sort the list.\n    // You can use std::size(l) to get the size of the list.\n\
    \    // You can use std::nth_element(l.begin(), l.begin() + i, l.end()) to get\
    \ the i-th smallest element.\n    // You can use std::accumulate(l.begin(), l.end(),\
    \ 0) to get the sum of all elements.\n    // You can use std::distance(l.begin(),\
    \ it) to get the index of an iterator.\n    // You can use std::vector<long>::iterator\
    \ to iterate the list.\n    // You can use std::vector<long>::const_iterator to\
    \ iterate the list in a const function.\n    // You can use std::vector<long>::reverse_iterator\
    \ to iterate the list in reverse order.\n    // You can use std::vector<long>::const_reverse_iterator\
    \ to iterate the list in reverse order in a const function.\n    // You can use\
    \ std::vector<long>::insert(it, val) to insert val before the iterator it.\n \
    \   // You can use std::vector<long>::erase(it) to erase the element at the iterator\
    \ it.\n    // You can use std::vector<long>::push_back(val) to append val to the\
    \ end of the list.\n    // You can use std::vector<long>::pop_back() to remove\
    \ the last element of the list.\n    // You can use std::vector<long>::clear()\
    \ to remove all elements of the list.\n    // You can use std::vector<long>::empty()\
    \ to check if the list is empty.\n    // You can use std::vector<long>::size()\
    \ to get the size of the list.\n    // You can use std::vector<long>::front()\
    \ to get the first element of the list.\n    // You can use std::vector<long>::back()\
    \ to get the last element of the list.\n    // You can use std::vector<long>::begin()\
    \ to get the iterator to the first element of the list.\n    // You can use std::vector<long>::\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmposxc6yx8: /tmp/tmposxc6yx8.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    int n = l.size();\n    if(n%2==0)\n    {\n        return\
    \ (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n   \
    \ }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpcka_4ozi: /tmp/tmpcka_4ozi.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    sort(l.begin(), l.end());\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n \
    \   }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  // TODO:\
    \ Implement me!\n  std::sort(l.begin(), l.end());\n  int n = l.size();\n  if(n%2\
    \ == 0)\n  {\n    return (l[n/2] + l[n/2 - 1])/2.0;\n  }\n  else\n  {\n    return\
    \ l[n/2];\n  }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    int n = l.size();\n    if(n%2 == 0)\n    {\n        return\
    \ (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n   \
    \ }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpkrj19_m9: /tmp/tmpkrj19_m9.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    int n = l.size();\n    sort(l.begin(), l.end());\n    if(n%2\
    \ == 0)\n        return (l[n/2] + l[n/2 - 1])/2.0;\n    else\n        return l[n/2];\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\t// Write\
    \ your code here\n\t// To print results to the standard output you can use Printf\n\
    \t// Example: Printf(\"%s\\n\", \"Hello world!\");\n\tint n = l.size();\n\tsort(l.begin(),\
    \ l.end());\n\tif (n % 2 == 0)\n\t\treturn (l[n / 2] + l[n / 2 - 1]) / 2.0;\n\t\
    else\n\t\treturn l[n / 2];\n}\nint main() {\n    auto candidate = median;\n  \
    \  assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10, (long)4,\
    \ (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    int n = l.size();\n    if(n%2 == 0)\n    {\n        return\
    \ (l[n/2] + l[n/2 - 1])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n\
    \    }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpwlaugilc: /tmp/tmpwlaugilc.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // TODO:\
    \ Implement me!\n    int n = l.size();\n    if(n%2 == 0)\n    {\n        return\
    \ (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n   \
    \ }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp1lupcsdz: /tmp/tmp1lupcsdz.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    sort(l.begin(), l.end());\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n \
    \   }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ > 0);\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n  \
    \      return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n \
    \       return l[l.size() / 2];\n    }\n}\nint main() {\n    auto candidate =\
    \ median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    if(n%2 == 0)\n        return (l[n/2] + l[n/2 - 1])/2.0;\n   \
    \ else\n        return l[n/2];\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp81oa3udh: /tmp/tmp81oa3udh.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // TODO:\
    \ Implement median function.\n    std::sort(l.begin(), l.end());\n    int n =\
    \ l.size();\n    if(n%2==0)\n    {\n        return (l[n/2]+l[n/2-1])/2.0;\n  \
    \  }\n    else\n    {\n        return l[n/2];\n    }\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1,\
    \ (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    std::sort(l.begin(),l.end());\n    int n=l.size();\n   \
    \ if(n%2==0)\n    {\n        return (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n\
    \    {\n        return l[n/2];\n    }\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\tint n = l.size();\n\
    \tif (n % 2 == 0) {\n\t\treturn (l[n / 2] + l[n / 2 - 1]) / 2.0;\n\t}\n\telse\
    \ {\n\t\treturn l[n / 2];\n\t}\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp5ate97j6: /tmp/tmp5ate97j6.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    if(n==0)return 0;\n    if(n==1)return l[0];\n    if(n==2)return\
    \ (l[0]+l[1])/2.0;\n    if(n%2==0){\n        return (l[n/2]+l[n/2-1])/2.0;\n \
    \   }\n    else{\n        return l[n/2];\n    }\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpyv5idv3a: /tmp/tmpyv5idv3a.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\tint n = l.size();\n\
    \tif (n % 2 == 0) {\n\t\treturn (l[n / 2] + l[n / 2 - 1]) / 2.0;\n\t}\n\telse\
    \ {\n\t\treturn l[n / 2];\n\t}\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpko6pow6q: /tmp/tmpko6pow6q.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    std::sort(l.begin(),l.end());\n    int n=l.size();\n   \
    \ if(n%2==0)\n    {\n        return (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n\
    \    {\n        return l[n/2];\n    }\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    int n = l.size();\n    if(n%2==0)\n    {\n        return\
    \ (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n   \
    \ }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmplxdfyr6m: /tmp/tmplxdfyr6m.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ > 0);\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n  \
    \      return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n \
    \       return l[l.size() / 2];\n    }\n}\nint main() {\n    auto candidate =\
    \ median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
    \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
    \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
