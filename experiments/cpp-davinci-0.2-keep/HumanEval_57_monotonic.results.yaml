name: HumanEval_57_monotonic
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool inc = true;\n\
    \    bool dec = true;\n    for (int i = 0; i < l.size() - 1; i++) {\n        if\
    \ (l[i] > l[i + 1]) {\n            inc = false;\n        }\n        if (l[i] <\
    \ l[i + 1]) {\n            dec = false;\n        }\n    }\n    return inc || dec;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    if (l.size() <= 1)\
    \ {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < l[i -\
    \ 1]) {\n            increasing = false;\n        }\n        if (l[i] > l[i -\
    \ 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    // Your code here\n\
    \    bool increasing = true;\n    bool decreasing = true;\n    for(int i = 0;\
    \ i < l.size()-1; i++){\n        if(l[i] > l[i+1]){\n            increasing =\
    \ false;\n        }\n        if(l[i] < l[i+1]){\n            decreasing = false;\n\
    \        }\n    }\n    return increasing || decreasing;\n}\nint main() {\n   \
    \ auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    if (l.size() <= 1)\
    \ {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < l[i -\
    \ 1]) {\n            increasing = false;\n        }\n        if (l[i] > l[i -\
    \ 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool is_increasing\
    \ = true;\n    bool is_decreasing = true;\n    for (int i = 0; i < l.size() -\
    \ 1; i++) {\n        if (l[i] > l[i + 1]) {\n            is_increasing = false;\n\
    \        }\n        if (l[i] < l[i + 1]) {\n            is_decreasing = false;\n\
    \        }\n    }\n    return is_increasing || is_decreasing;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    if (l.size() == 0)\
    \ {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    for (int i = 0; i < l.size() - 1; i++) {\n        if (l[i] > l[i\
    \ + 1]) {\n            increasing = false;\n        }\n        if (l[i] < l[i\
    \ + 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int n = l.size();\n\
    \    if(n == 1) return true;\n    bool inc = false, dec = false;\n    for(int\
    \ i = 0; i < n-1; i++) {\n        if(l[i] < l[i+1]) {\n            inc = true;\n\
    \        }\n        if(l[i] > l[i+1]) {\n            dec = true;\n        }\n\
    \    }\n    return (inc && !dec) || (!inc && dec);\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpnwphpn8u: /tmp/tmpnwphpn8u.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int i = 0;\n    int\
    \ j = l.size() - 1;\n    while (i < j) {\n        if (l[i] < l[i + 1]) {\n   \
    \         i++;\n        } else if (l[i] > l[i + 1]) {\n            i++;\n    \
    \    } else {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpg5knr1be: /tmp/tmpg5knr1be.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int n = l.size();\n\
    \    if(n == 1) return true;\n    int i = 0;\n    while(i < n - 1 && l[i] == l[i\
    \ + 1]) i++;\n    if(i == n - 1) return true;\n    bool increasing = l[i] < l[i\
    \ + 1];\n    for(int j = i + 1; j < n; j++) {\n        if(increasing && l[j] <\
    \ l[j - 1]) return false;\n        if(!increasing && l[j] > l[j - 1]) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int i = 0;\n    int\
    \ j = l.size() - 1;\n    while (i < j) {\n        if (l[i] > l[i + 1]) {\n   \
    \         while (i < j) {\n                if (l[i] < l[i + 1]) {\n          \
    \          return false;\n                }\n                i++;\n          \
    \  }\n        } else if (l[i] < l[i + 1]) {\n            while (i < j) {\n   \
    \             if (l[i] > l[i + 1]) {\n                    return false;\n    \
    \            }\n                i++;\n            }\n        } else {\n      \
    \      i++;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int flag = 0;\n \
    \   for(int i = 0; i < l.size()-1; i++) {\n        if(l[i] < l[i+1]) {\n     \
    \       flag = 1;\n            break;\n        }\n        else if(l[i] > l[i+1])\
    \ {\n            flag = 2;\n            break;\n        }\n    }\n    if(flag\
    \ == 0) {\n        return true;\n    }\n    else if(flag == 1) {\n        for(int\
    \ i = 0; i < l.size()-1; i++) {\n            if(l[i] > l[i+1]) {\n           \
    \     return false;\n            }\n        }\n        return true;\n    }\n \
    \   else {\n        for(int i = 0; i < l.size()-1; i++) {\n            if(l[i]\
    \ < l[i+1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n}\nint main() {\n    auto candidate = monotonic;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool is_increasing\
    \ = true;\n    bool is_decreasing = true;\n    for (int i = 0; i < l.size() -\
    \ 1; i++) {\n        if (l[i] > l[i + 1]) {\n            is_increasing = false;\n\
    \        }\n        if (l[i] < l[i + 1]) {\n            is_decreasing = false;\n\
    \        }\n    }\n    return is_increasing || is_decreasing;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    // Write your code\
    \ here\n    int flag = 0;\n    for(int i = 0; i < l.size()-1; i++){\n        if(l[i]\
    \ < l[i+1]){\n            flag = 1;\n            break;\n        }\n        else\
    \ if(l[i] > l[i+1]){\n            flag = 2;\n            break;\n        }\n \
    \   }\n    if(flag == 0)\n        return true;\n    for(int i = 0; i < l.size()-1;\
    \ i++){\n        if(flag == 1){\n            if(l[i] > l[i+1])\n             \
    \   return false;\n        }\n        else if(flag == 2){\n            if(l[i]\
    \ < l[i+1])\n                return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    if (l.size() == 0)\
    \ {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    for (int i = 0; i < l.size() - 1; i++) {\n        if (l[i] > l[i\
    \ + 1]) {\n            increasing = false;\n        }\n        if (l[i] < l[i\
    \ + 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    // Your code here\n\
    \    int n = l.size();\n    if(n == 1) return true;\n    bool inc = true, dec\
    \ = true;\n    for(int i = 1; i < n; i++) {\n        if(l[i] < l[i-1]) inc = false;\n\
    \        if(l[i] > l[i-1]) dec = false;\n    }\n    return inc || dec;\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    if (l.size() <= 1)\
    \ {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < l[i -\
    \ 1]) {\n            increasing = false;\n        }\n        if (l[i] > l[i -\
    \ 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int n = l.size();\n\
    \    if(n <= 1)\n        return true;\n    if(l[0] < l[1]) {\n        for(int\
    \ i = 1; i < n; i++) {\n            if(l[i] < l[i-1])\n                return\
    \ false;\n        }\n    }\n    else {\n        for(int i = 1; i < n; i++) {\n\
    \            if(l[i] > l[i-1])\n                return false;\n        }\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    // Write your code\
    \ here\n    bool flag = true;\n    if(l.size() == 1)\n        return true;\n \
    \   for(int i = 0; i < l.size()-1; i++){\n        if(l[i] > l[i+1]){\n       \
    \     flag = false;\n            break;\n        }\n    }\n    if(flag)\n    \
    \    return true;\n    for(int i = 0; i < l.size()-1; i++){\n        if(l[i] <\
    \ l[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool is_increasing\
    \ = true;\n    bool is_decreasing = true;\n    for (int i = 0; i < l.size() -\
    \ 1; i++) {\n        if (l[i] > l[i + 1]) {\n            is_increasing = false;\n\
    \        }\n        if (l[i] < l[i + 1]) {\n            is_decreasing = false;\n\
    \        }\n    }\n    return is_increasing || is_decreasing;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    // Your code here\n\
    \    bool increasing = true;\n    bool decreasing = true;\n    for(int i = 0;\
    \ i < l.size()-1; i++){\n        if(l[i] > l[i+1]){\n            increasing =\
    \ false;\n        }\n        if(l[i] < l[i+1]){\n            decreasing = false;\n\
    \        }\n    }\n    return increasing || decreasing;\n}\nint main() {\n   \
    \ auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int i = 0;\n    int\
    \ j = 1;\n    int k = 2;\n    int n = l.size();\n    if (n == 1) {\n        return\
    \ true;\n    }\n    if (n == 2) {\n        if (l[i] == l[j]) {\n            return\
    \ true;\n        }\n        else {\n            return false;\n        }\n   \
    \ }\n    if (n == 3) {\n        if (l[i] == l[j] && l[j] == l[k]) {\n        \
    \    return true;\n        }\n        else if (l[i] < l[j] && l[j] < l[k]) {\n\
    \            return true;\n        }\n        else if (l[i] > l[j] && l[j] > l[k])\
    \ {\n            return true;\n        }\n        else {\n            return false;\n\
    \        }\n    }\n    if (n > 3) {\n        if (l[i] == l[j] && l[j] == l[k])\
    \ {\n            return true;\n        }\n        else if (l[i] < l[j] && l[j]\
    \ < l[k]) {\n            for (int i = 0; i < n - 1; i++) {\n                if\
    \ (l[i] > l[i + 1]) {\n                    return false;\n                }\n\
    \            }\n            return true;\n        }\n        else if (l[i] > l[j]\
    \ && l[j] > l[k]) {\n            for (int i = 0; i < n - 1; i++) {\n         \
    \       if (l[i] < l[i + 1]) {\n                    return false;\n          \
    \      }\n            }\n            return true;\n        }\n        else {\n\
    \            return false;\n        }\n    }\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpj0rt_bt5: /tmp/tmpj0rt_bt5.cpp:71: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool is_increasing\
    \ = true;\n    bool is_decreasing = true;\n    for (int i = 0; i < l.size() -\
    \ 1; i++) {\n        if (l[i] < l[i + 1]) {\n            is_decreasing = false;\n\
    \        }\n        if (l[i] > l[i + 1]) {\n            is_increasing = false;\n\
    \        }\n    }\n    return is_increasing || is_decreasing;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n  bool increasing = true;\n\
    \  bool decreasing = true;\n  for (int i = 0; i < l.size() - 1; i++) {\n    if\
    \ (l[i] < l[i + 1]) {\n      decreasing = false;\n    }\n    if (l[i] > l[i +\
    \ 1]) {\n      increasing = false;\n    }\n  }\n  return increasing || decreasing;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool inc = true;\n\
    \    bool dec = true;\n    for (int i = 0; i < l.size() - 1; i++) {\n        if\
    \ (l[i] > l[i + 1]) {\n            inc = false;\n        }\n        if (l[i] <\
    \ l[i + 1]) {\n            dec = false;\n        }\n    }\n    return inc || dec;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    if (l.size() == 0)\
    \ {\n        return true;\n    }\n    int direction = 0;\n    for (int i = 0;\
    \ i < l.size() - 1; i++) {\n        if (l[i] < l[i + 1]) {\n            if (direction\
    \ == 0) {\n                direction = 1;\n            } else if (direction ==\
    \ -1) {\n                return false;\n            }\n        } else if (l[i]\
    \ > l[i + 1]) {\n            if (direction == 0) {\n                direction\
    \ = -1;\n            } else if (direction == 1) {\n                return false;\n\
    \            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    if (l.size() == 0)\
    \ {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    for (int i = 0; i < l.size() - 1; i++) {\n        if (l[i] > l[i\
    \ + 1]) {\n            increasing = false;\n        }\n        if (l[i] < l[i\
    \ + 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n  bool increasing = true;\n\
    \  bool decreasing = true;\n  for (int i = 0; i < l.size() - 1; i++) {\n    if\
    \ (l[i] > l[i + 1]) {\n      increasing = false;\n    }\n    if (l[i] < l[i +\
    \ 1]) {\n      decreasing = false;\n    }\n  }\n  return increasing || decreasing;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool is_increasing\
    \ = true;\n    bool is_decreasing = true;\n    for (int i = 0; i < l.size() -\
    \ 1; i++) {\n        if (l[i] < l[i + 1]) {\n            is_decreasing = false;\n\
    \        }\n        if (l[i] > l[i + 1]) {\n            is_increasing = false;\n\
    \        }\n    }\n    return is_increasing || is_decreasing;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    if (l.size() <= 1)\
    \ return true;\n    bool increasing = true;\n    bool decreasing = true;\n   \
    \ for (int i = 1; i < l.size(); i++) {\n        if (l[i] < l[i-1]) increasing\
    \ = false;\n        if (l[i] > l[i-1]) decreasing = false;\n    }\n    return\
    \ increasing || decreasing;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    if (l.size() <= 1)\
    \ {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < l[i -\
    \ 1]) {\n            increasing = false;\n        }\n        if (l[i] > l[i -\
    \ 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool inc = true;\n\
    \    bool dec = true;\n    for (int i = 0; i < l.size() - 1; i++) {\n        if\
    \ (l[i] > l[i + 1]) {\n            inc = false;\n        }\n        if (l[i] <\
    \ l[i + 1]) {\n            dec = false;\n        }\n    }\n    return inc || dec;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int n = l.size();\n\
    \    if(n == 1) return true;\n    int i = 0;\n    int j = 1;\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    while(j < n){\n        if(l[i] < l[j]){\n\
    \            decreasing = false;\n        }\n        if(l[i] > l[j]){\n      \
    \      increasing = false;\n        }\n        i++;\n        j++;\n    }\n   \
    \ return increasing || decreasing;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int n = l.size();\n\
    \    if(n <= 1) return true;\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    for(int i = 1; i < n; i++) {\n        if(l[i] < l[i-1]) increasing\
    \ = false;\n        if(l[i] > l[i-1]) decreasing = false;\n    }\n    return increasing\
    \ || decreasing;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool is_increasing\
    \ = true;\n    bool is_decreasing = true;\n    for (int i = 0; i < l.size() -\
    \ 1; i++) {\n        if (l[i] > l[i + 1]) {\n            is_increasing = false;\n\
    \        }\n        if (l[i] < l[i + 1]) {\n            is_decreasing = false;\n\
    \        }\n    }\n    return is_increasing || is_decreasing;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int n = l.size();\n\
    \    if(n == 1)\n        return true;\n    int i = 0;\n    int j = 1;\n    bool\
    \ increasing = false;\n    bool decreasing = false;\n    while(j < n) {\n    \
    \    if(l[i] < l[j]) {\n            increasing = true;\n            break;\n \
    \       }\n        else if(l[i] > l[j]) {\n            decreasing = true;\n  \
    \          break;\n        }\n        i++;\n        j++;\n    }\n    if(increasing)\
    \ {\n        for(int i = 0; i < n-1; i++) {\n            if(l[i] > l[i+1])\n \
    \               return false;\n        }\n    }\n    else if(decreasing) {\n \
    \       for(int i = 0; i < n-1; i++) {\n            if(l[i] < l[i+1])\n      \
    \          return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool is_increasing\
    \ = true;\n    bool is_decreasing = true;\n    for (int i = 0; i < l.size() -\
    \ 1; i++) {\n        if (l[i] > l[i + 1]) {\n            is_increasing = false;\n\
    \        }\n        if (l[i] < l[i + 1]) {\n            is_decreasing = false;\n\
    \        }\n    }\n    return is_increasing || is_decreasing;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int n = l.size();\n\
    \    if(n == 1)\n        return true;\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    for(int i = 1; i < n; i++) {\n        if(l[i] < l[i-1])\n     \
    \       increasing = false;\n        if(l[i] > l[i-1])\n            decreasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}\nint main() {\n   \
    \ auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int i = 0;\n    int\
    \ j = 1;\n    int k = 2;\n    if (l.size() == 0) {\n        return true;\n   \
    \ }\n    if (l.size() == 1) {\n        return true;\n    }\n    if (l.size() ==\
    \ 2) {\n        if (l[i] <= l[j]) {\n            return true;\n        }\n   \
    \     else {\n            return false;\n        }\n    }\n    if (l[i] <= l[j]\
    \ && l[j] <= l[k]) {\n        while (k < l.size()) {\n            if (l[i] <=\
    \ l[j] && l[j] <= l[k]) {\n                i++;\n                j++;\n      \
    \          k++;\n            }\n            else {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    else if (l[i] >= l[j]\
    \ && l[j] >= l[k]) {\n        while (k < l.size()) {\n            if (l[i] >=\
    \ l[j] && l[j] >= l[k]) {\n                i++;\n                j++;\n      \
    \          k++;\n            }\n            else {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    else {\n        return\
    \ false;\n    }\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    if (l.size() <= 1)\
    \ return true;\n    bool increasing = l[0] < l[1];\n    for (int i = 1; i < l.size()\
    \ - 1; i++) {\n        if (increasing) {\n            if (l[i] > l[i + 1]) return\
    \ false;\n        } else {\n            if (l[i] < l[i + 1]) return false;\n \
    \       }\n    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    if (l.size() <= 1)\
    \ {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < l[i -\
    \ 1]) {\n            increasing = false;\n        }\n        if (l[i] > l[i -\
    \ 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    if (l.size() == 0)\
    \ return true;\n    bool increasing = true;\n    bool decreasing = true;\n   \
    \ for (int i = 1; i < l.size(); i++) {\n        if (l[i] < l[i-1]) increasing\
    \ = false;\n        if (l[i] > l[i-1]) decreasing = false;\n    }\n    return\
    \ increasing || decreasing;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    if (l.size() <= 1)\
    \ {\n        return true;\n    }\n    bool increasing = false;\n    bool decreasing\
    \ = false;\n    for (int i = 0; i < l.size() - 1; i++) {\n        if (l[i] < l[i\
    \ + 1]) {\n            increasing = true;\n        }\n        if (l[i] > l[i +\
    \ 1]) {\n            decreasing = true;\n        }\n    }\n    return increasing\
    \ ^ decreasing;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpnyria18b: /tmp/tmpnyria18b.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    if (l.size() <= 1)\
    \ {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < l[i -\
    \ 1]) {\n            increasing = false;\n        }\n        if (l[i] > l[i -\
    \ 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    if (l.size() <= 1)\
    \ {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < l[i -\
    \ 1]) {\n            increasing = false;\n        }\n        if (l[i] > l[i -\
    \ 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    if (l.size() == 0)\
    \ {\n        return true;\n    }\n    bool is_increasing = true;\n    bool is_decreasing\
    \ = true;\n    for (int i = 0; i < l.size() - 1; i++) {\n        if (l[i] > l[i\
    \ + 1]) {\n            is_increasing = false;\n        }\n        if (l[i] < l[i\
    \ + 1]) {\n            is_decreasing = false;\n        }\n    }\n    return is_increasing\
    \ || is_decreasing;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool isIncreasing\
    \ = true;\n    bool isDecreasing = true;\n    for (int i = 0; i < l.size() - 1;\
    \ i++) {\n        if (l[i] < l[i + 1]) {\n            isDecreasing = false;\n\
    \        }\n        if (l[i] > l[i + 1]) {\n            isIncreasing = false;\n\
    \        }\n    }\n    return isIncreasing || isDecreasing;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n  bool increasing = true;\n\
    \  bool decreasing = true;\n  for (int i = 0; i < l.size() - 1; i++) {\n    if\
    \ (l[i] < l[i + 1]) {\n      decreasing = false;\n    }\n    if (l[i] > l[i +\
    \ 1]) {\n      increasing = false;\n    }\n  }\n  return increasing || decreasing;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    if (l.size() < 2)\
    \ return true;\n    bool increasing = l[0] < l[1];\n    for (int i = 1; i < l.size()\
    \ - 1; i++) {\n        if (increasing) {\n            if (l[i] > l[i + 1]) return\
    \ false;\n        } else {\n            if (l[i] < l[i + 1]) return false;\n \
    \       }\n    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int n = l.size();\n\
    \    if(n == 1) return true;\n    bool inc = false, dec = false;\n    for(int\
    \ i = 0; i < n-1; i++) {\n        if(l[i] < l[i+1]) {\n            inc = true;\n\
    \        }\n        if(l[i] > l[i+1]) {\n            dec = true;\n        }\n\
    \    }\n    return inc ^ dec;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmporznb9iq: /tmp/tmporznb9iq.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int i = 0;\n    int\
    \ j = 1;\n    int k = 2;\n    while(k < l.size()){\n        if(l[i] < l[j] &&\
    \ l[j] < l[k]){\n            i++;\n            j++;\n            k++;\n      \
    \  }\n        else if(l[i] > l[j] && l[j] > l[k]){\n            i++;\n       \
    \     j++;\n            k++;\n        }\n        else{\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpkxwits1_: /tmp/tmpkxwits1_.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    if (l.size() == 0)\
    \ return true;\n    bool increasing = true;\n    bool decreasing = true;\n   \
    \ for (int i = 1; i < l.size(); i++) {\n        if (l[i] < l[i-1]) increasing\
    \ = false;\n        if (l[i] > l[i-1]) decreasing = false;\n    }\n    return\
    \ increasing || decreasing;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    if (l.size() <= 1)\
    \ {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < l[i -\
    \ 1]) {\n            increasing = false;\n        }\n        if (l[i] > l[i -\
    \ 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int inc = 0;\n  \
    \  int dec = 0;\n    for (int i = 0; i < l.size() - 1; i++) {\n        if (l[i]\
    \ < l[i + 1]) {\n            inc++;\n        }\n        if (l[i] > l[i + 1]) {\n\
    \            dec++;\n        }\n    }\n    if (inc == l.size() - 1 || dec == l.size()\
    \ - 1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n  \
    \  auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpgatrndyg: /tmp/tmpgatrndyg.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    if (l.size() <= 1)\
    \ return true;\n    bool increasing = true;\n    bool decreasing = true;\n   \
    \ for (int i = 1; i < l.size(); i++) {\n        if (l[i] < l[i-1]) increasing\
    \ = false;\n        if (l[i] > l[i-1]) decreasing = false;\n    }\n    return\
    \ increasing || decreasing;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    if (l.size() <= 1)\
    \ {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < l[i -\
    \ 1]) {\n            increasing = false;\n        }\n        if (l[i] > l[i -\
    \ 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool is_increasing\
    \ = true;\n    bool is_decreasing = true;\n    for (int i = 0; i < l.size() -\
    \ 1; i++) {\n        if (l[i] > l[i + 1]) {\n            is_increasing = false;\n\
    \        }\n        if (l[i] < l[i + 1]) {\n            is_decreasing = false;\n\
    \        }\n    }\n    return is_increasing || is_decreasing;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    if (l.size() == 0)\
    \ {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    for (int i = 0; i < l.size() - 1; i++) {\n        if (l[i] > l[i\
    \ + 1]) {\n            increasing = false;\n        }\n        if (l[i] < l[i\
    \ + 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    if (l.size() == 0)\
    \ {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    for (int i = 0; i < l.size() - 1; i++) {\n        if (l[i] < l[i\
    \ + 1]) {\n            decreasing = false;\n        }\n        if (l[i] > l[i\
    \ + 1]) {\n            increasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n  if (l.size() < 2) {\n\
    \    return true;\n  }\n  bool increasing = l[0] < l[1];\n  for (int i = 1; i\
    \ < l.size() - 1; i++) {\n    if (increasing) {\n      if (l[i] > l[i + 1]) {\n\
    \        return false;\n      }\n    } else {\n      if (l[i] < l[i + 1]) {\n\
    \        return false;\n      }\n    }\n  }\n  return true;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int n = l.size();\n\
    \    if(n == 1)\n        return true;\n    bool increasing = l[1] > l[0];\n  \
    \  for(int i = 1; i < n; i++) {\n        if(increasing) {\n            if(l[i]\
    \ < l[i-1])\n                return false;\n        }\n        else {\n      \
    \      if(l[i] > l[i-1])\n                return false;\n        }\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    if (l.size() <= 1)\
    \ {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < l[i -\
    \ 1]) {\n            increasing = false;\n        }\n        if (l[i] > l[i -\
    \ 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool inc = true;\n\
    \    bool dec = true;\n    for (int i = 0; i < l.size() - 1; i++) {\n        if\
    \ (l[i] > l[i + 1]) {\n            inc = false;\n        }\n        if (l[i] <\
    \ l[i + 1]) {\n            dec = false;\n        }\n    }\n    return inc || dec;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    if (l.size() == 0)\
    \ return true;\n    int direction = 0;\n    for (int i = 1; i < l.size(); i++)\
    \ {\n        if (l[i] > l[i-1]) {\n            if (direction == -1) return false;\n\
    \            direction = 1;\n        } else if (l[i] < l[i-1]) {\n           \
    \ if (direction == 1) return false;\n            direction = -1;\n        }\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int n = l.size();\n\
    \    if(n == 1)\n        return true;\n    int i = 0;\n    while(i < n-1 && l[i]\
    \ == l[i+1])\n        i++;\n    if(i == n-1)\n        return true;\n    if(l[i]\
    \ < l[i+1]) {\n        for(int j = i; j < n-1; j++) {\n            if(l[j] > l[j+1])\n\
    \                return false;\n        }\n    }\n    else {\n        for(int\
    \ j = i; j < n-1; j++) {\n            if(l[j] < l[j+1])\n                return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    // Write your code\
    \ here\n    bool increasing = true;\n    bool decreasing = true;\n    for(int\
    \ i = 0; i < l.size()-1; i++){\n        if(l[i] > l[i+1]){\n            increasing\
    \ = false;\n        }\n        if(l[i] < l[i+1]){\n            decreasing = false;\n\
    \        }\n    }\n    return increasing || decreasing;\n}\nint main() {\n   \
    \ auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    if (l.size() == 0)\
    \ {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    for (int i = 0; i < l.size() - 1; i++) {\n        if (l[i] > l[i\
    \ + 1]) {\n            increasing = false;\n        }\n        if (l[i] < l[i\
    \ + 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int i = 0;\n    int\
    \ j = 1;\n    int k = 2;\n    int len = l.size();\n    if (len < 3) {\n      \
    \  return true;\n    }\n    if (l[i] < l[j] && l[j] < l[k]) {\n        for (int\
    \ m = 3; m < len; m++) {\n            if (l[m] < l[m - 1]) {\n               \
    \ return false;\n            }\n        }\n        return true;\n    }\n    if\
    \ (l[i] > l[j] && l[j] > l[k]) {\n        for (int m = 3; m < len; m++) {\n  \
    \          if (l[m] > l[m - 1]) {\n                return false;\n           \
    \ }\n        }\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpxqgepe3q: /tmp/tmpxqgepe3q.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n  bool is_increasing\
    \ = true;\n  bool is_decreasing = true;\n  for (int i = 0; i < l.size() - 1; i++)\
    \ {\n    if (l[i] < l[i + 1]) {\n      is_decreasing = false;\n    }\n    if (l[i]\
    \ > l[i + 1]) {\n      is_increasing = false;\n    }\n  }\n  return is_increasing\
    \ || is_decreasing;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
