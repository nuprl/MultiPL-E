name: HumanEval_117_select_words
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpyi4axgzi: /tmp/tmpyi4axgzi.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int consonants = 0;\n\
    \        for (auto c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                consonants++;\n            }\n \
    \       }\n        if (consonants == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp853ud3l_: /tmp/tmp853ud3l_.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n  std::vector<std::string> words;\n  std::stringstream ss(s);\n\
    \  std::string word;\n  while (ss >> word) {\n    int count = 0;\n    for (char\
    \ c : word) {\n      if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c !=\
    \ 'u') {\n        count++;\n      }\n    }\n    if (count == n) {\n      words.push_back(word);\n\
    \    }\n  }\n  return words;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpzzmiouk8: /tmp/tmpzzmiouk8.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::string word = \"\
    \";\n    int consonants = 0;\n    for (int i = 0; i < s.length(); i++) {\n   \
    \     if (s[i] != ' ') {\n            word += s[i];\n            if (s[i] != 'a'\
    \ && s[i] != 'e' && s[i] != 'i' && s[i] != 'o' && s[i] != 'u') {\n           \
    \     consonants++;\n            }\n        } else {\n            if (consonants\
    \ == n) {\n                result.push_back(word);\n            }\n          \
    \  word = \"\";\n            consonants = 0;\n        }\n    }\n    if (consonants\
    \ == n) {\n        result.push_back(word);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpkr3bzopb: /tmp/tmpkr3bzopb.cpp:43: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> words;\n    std::string word;\n \
    \   int consonants = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if\
    \ (s[i] != ' ') {\n            word += s[i];\n            if (s[i] != 'a' && s[i]\
    \ != 'e' && s[i] != 'i' && s[i] != 'o' && s[i] != 'u') {\n                consonants++;\n\
    \            }\n        } else {\n            if (consonants == n) {\n       \
    \         words.push_back(word);\n            }\n            word = \"\";\n  \
    \          consonants = 0;\n        }\n    }\n    if (consonants == n) {\n   \
    \     words.push_back(word);\n    }\n    return words;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpx1qf6zll: /tmp/tmpx1qf6zll.cpp:43: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpjbm3jkgs: /tmp/tmpjbm3jkgs.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (int i = 0; i < word.size(); i++) {\n            if (word[i] != 'a'\
    \ && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u') {\n\
    \                count++;\n            }\n        }\n        if (count == n) {\n\
    \            result.push_back(word);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary\
    \ had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp36s6qpje: /tmp/tmp36s6qpje.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                count++;\n            }\n      \
    \  }\n        if (word.size() - count == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpd2y1r05o: /tmp/tmpd2y1r05o.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpd3hnulj7: /tmp/tmpd3hnulj7.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpzo8pgs8t: /tmp/tmpzo8pgs8t.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpv_i62sp_: /tmp/tmpv_i62sp_.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> words;\n    std::string word;\n \
    \   std::stringstream ss(s);\n    while (ss >> word) {\n        if (std::count_if(word.begin(),\
    \ word.end(), [](char c) {\n            return c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u';\n        }) == n) {\n            words.push_back(word);\n\
    \        }\n    }\n    return words;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpybca_x28: /tmp/tmpybca_x28.cpp:33: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpxcqtw8_z: /tmp/tmpxcqtw8_z.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp3ogpxgiw: /tmp/tmp3ogpxgiw.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::string word;\n\
    \    std::stringstream ss(s);\n    while (ss >> word) {\n        int count = 0;\n\
    \        for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpfkdnow0h: /tmp/tmpfkdnow0h.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmprrv4_lyn: /tmp/tmprrv4_lyn.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (auto c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpp72ykjms: /tmp/tmpp72ykjms.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                count++;\n            }\n      \
    \  }\n        if (word.size() - count == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpfmw1gyu0: /tmp/tmpfmw1gyu0.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp8qfflafp: /tmp/tmp8qfflafp.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::string word;\n\
    \    std::stringstream ss(s);\n    while (ss >> word) {\n        int count = 0;\n\
    \        for (auto c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpsmcqnbk7: /tmp/tmpsmcqnbk7.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpo3ckvg8w: /tmp/tmpo3ckvg8w.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpky8yuebg: /tmp/tmpky8yuebg.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int consonants = 0;\n\
    \        for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                consonants++;\n            }\n \
    \       }\n        if (consonants == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpe7shp8kh: /tmp/tmpe7shp8kh.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int consonants = 0;\n\
    \        for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                consonants++;\n            }\n \
    \       }\n        if (consonants == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp8ev3kp5k: /tmp/tmp8ev3kp5k.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpjxj9ctwm: /tmp/tmpjxj9ctwm.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> words;\n    std::string word;\n \
    \   std::stringstream ss(s);\n    while (ss >> word) {\n        if (std::count_if(word.begin(),\
    \ word.end(), [](char c) {\n            return c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u';\n        }) == n) {\n            words.push_back(word);\n\
    \        }\n    }\n    return words;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpirslgewd: /tmp/tmpirslgewd.cpp:33: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpoanq2dj8: /tmp/tmpoanq2dj8.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmphi4vx_fm: /tmp/tmphi4vx_fm.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpgoy05ipc: /tmp/tmpgoy05ipc.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpkxrevb2p: /tmp/tmpkxrevb2p.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpm6xpm8xw: /tmp/tmpm6xpm8xw.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpip_06e76: /tmp/tmpip_06e76.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int consonants = 0;\n\
    \        for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                consonants++;\n            }\n \
    \       }\n        if (consonants == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpw1oij6_8: /tmp/tmpw1oij6_8.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    std::stringstream ss(s);\n    while(ss >> temp){\n        int count = 0;\n\
    \        for(int i = 0; i < temp.size(); i++){\n            if(temp[i] != 'a'\
    \ && temp[i] != 'e' && temp[i] != 'i' && temp[i] != 'o' && temp[i] != 'u'){\n\
    \                count++;\n            }\n        }\n        if(count == n){\n\
    \            result.push_back(temp);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary\
    \ had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpxrrna64x: /tmp/tmpxrrna64x.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpy6wq6l4l: /tmp/tmpy6wq6l4l.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::string word;\n\
    \    std::istringstream iss(s);\n    while (iss >> word) {\n        int consonants\
    \ = 0;\n        for (char c : word) {\n            if (c != 'a' && c != 'e' &&\
    \ c != 'i' && c != 'o' && c != 'u') {\n                consonants++;\n       \
    \     }\n        }\n        if (consonants == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmptpy04z4c: /tmp/tmptpy04z4c.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::string word = \"\
    \";\n    int count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if\
    \ (s[i] == ' ') {\n            if (count == n) {\n                result.push_back(word);\n\
    \            }\n            word = \"\";\n            count = 0;\n        } else\
    \ {\n            word += s[i];\n            if (s[i] != 'a' && s[i] != 'e' &&\
    \ s[i] != 'i' && s[i] != 'o' && s[i] != 'u') {\n                count++;\n   \
    \         }\n        }\n    }\n    if (count == n) {\n        result.push_back(word);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpl5379r0u: /tmp/tmpl5379r0u.cpp:43: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (auto c : word) {\n            if (c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                count++;\n            }\n      \
    \  }\n        if (word.size() - count == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp20e6fpsw: /tmp/tmp20e6fpsw.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        long count = 0;\n  \
    \      for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpqco8vtb0: /tmp/tmpqco8vtb0.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        long count = 0;\n  \
    \      for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp0q2gwljb: /tmp/tmp0q2gwljb.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        long consonants = 0;\n\
    \        for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                consonants++;\n            }\n \
    \       }\n        if (consonants == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpgt32evro: /tmp/tmpgt32evro.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::string word;\n\
    \    std::stringstream ss(s);\n    while (ss >> word) {\n        int count = 0;\n\
    \        for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpnbcl3dkr: /tmp/tmpnbcl3dkr.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpy32k5bq_: /tmp/tmpy32k5bq_.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpswsdklr_: /tmp/tmpswsdklr_.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> words;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (std::count_if(word.begin(),\
    \ word.end(), [](char c) {\n            return !std::string(\"aeiou\").find(c);\n\
    \        }) == n) {\n            words.push_back(word);\n        }\n    }\n  \
    \  return words;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp8jyktfw7: /tmp/tmp8jyktfw7.cpp:29: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> words;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (std::count_if(word.begin(),\
    \ word.end(), [](char c) {\n            return c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u';\n        }) == n) {\n            words.push_back(word);\n\
    \        }\n    }\n    return words;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpd11kzkmb: /tmp/tmpd11kzkmb.cpp:33: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpkdj43pk5: /tmp/tmpkdj43pk5.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmppyn7_5xz: /tmp/tmppyn7_5xz.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                count++;\n            }\n      \
    \  }\n        if (word.size() - count == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpef4i302z: /tmp/tmpef4i302z.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp1ujpwcsl: /tmp/tmp1ujpwcsl.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (auto c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp4siz6iz8: /tmp/tmp4siz6iz8.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> words;\n    std::string word;\n \
    \   std::stringstream ss(s);\n    while (ss >> word) {\n        int count = 0;\n\
    \        for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            words.push_back(word);\n        }\n\
    \    }\n    return words;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpacts70zh: /tmp/tmpacts70zh.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp9f0hvlgm: /tmp/tmp9f0hvlgm.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp_tl8p8ua: /tmp/tmp_tl8p8ua.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> words;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int consonants = 0;\n\
    \        for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                consonants++;\n            }\n \
    \       }\n        if (consonants == n) {\n            words.push_back(word);\n\
    \        }\n    }\n    return words;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpvpjwhmtp: /tmp/tmpvpjwhmtp.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (auto c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpyjyme3ue: /tmp/tmpyjyme3ue.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (std::count_if(word.begin(),\
    \ word.end(), [](char c) {\n            return c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u';\n        }) == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp65oe6ksg: /tmp/tmp65oe6ksg.cpp:33: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> words;\n    std::string word;\n \
    \   std::stringstream ss(s);\n    while (ss >> word) {\n        int consonants\
    \ = 0;\n        for (char c : word) {\n            if (c != 'a' && c != 'e' &&\
    \ c != 'i' && c != 'o' && c != 'u') {\n                consonants++;\n       \
    \     }\n        }\n        if (consonants == n) {\n            words.push_back(word);\n\
    \        }\n    }\n    return words;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmppahi4r4p: /tmp/tmppahi4r4p.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpakxcdkkl: /tmp/tmpakxcdkkl.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int consonants = 0;\n\
    \        for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                consonants++;\n            }\n \
    \       }\n        if (consonants == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpxvfc8f8a: /tmp/tmpxvfc8f8a.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (auto c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpai56rydz: /tmp/tmpai56rydz.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (std::count_if(word.begin(),\
    \ word.end(), [](char c) {\n            return c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u';\n        }) == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpc0e6017h: /tmp/tmpc0e6017h.cpp:33: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpovc44eub: /tmp/tmpovc44eub.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpqvb5u2er: /tmp/tmpqvb5u2er.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int consonants = 0;\n\
    \        for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                consonants++;\n            }\n \
    \       }\n        if (consonants == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpjt02ov7y: /tmp/tmpjt02ov7y.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::string word;\n\
    \    std::stringstream ss(s);\n    while (ss >> word) {\n        int count = 0;\n\
    \        for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmph7da1k1c: /tmp/tmph7da1k1c.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::string word = \"\
    \";\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n\
    \            if (word.length() == n) {\n                result.push_back(word);\n\
    \            }\n            word = \"\";\n        } else {\n            word +=\
    \ s[i];\n        }\n    }\n    if (word.length() == n) {\n        result.push_back(word);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpbae0oqhs: /tmp/tmpbae0oqhs.cpp:34: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp1duqy7bq: /tmp/tmp1duqy7bq.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> words;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (int i = 0; i < word.size(); i++) {\n            if (word[i] != 'a'\
    \ && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u') {\n\
    \                count++;\n            }\n        }\n        if (count == n) {\n\
    \            words.push_back(word);\n        }\n    }\n    return words;\n}\n\
    int main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary\
    \ had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmplx2pioi0: /tmp/tmplx2pioi0.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int consonants = 0;\n\
    \        for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                consonants++;\n            }\n \
    \       }\n        if (consonants == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpafrvdczx: /tmp/tmpafrvdczx.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (std::count_if(word.begin(),\
    \ word.end(), [](char c) {\n            return std::string(\"aeiou\").find(c)\
    \ == std::string::npos;\n        }) == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp7_j5a5fy: /tmp/tmp7_j5a5fy.cpp:33: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpkebrmmb7: /tmp/tmpkebrmmb7.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int consonants = 0;\n\
    \        for (auto c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                consonants++;\n            }\n \
    \       }\n        if (consonants == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpyb8iq5d2: /tmp/tmpyb8iq5d2.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpkrn5s72j: /tmp/tmpkrn5s72j.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpcabhd4qz: /tmp/tmpcabhd4qz.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp14qoyf15: /tmp/tmp14qoyf15.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (int i = 0; i < word.size(); i++) {\n            if (word[i] != 'a'\
    \ && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u') {\n\
    \                count++;\n            }\n        }\n        if (count == n) {\n\
    \            result.push_back(word);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary\
    \ had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpirqu487x: /tmp/tmpirqu487x.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int consonants = 0;\n\
    \        for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                consonants++;\n            }\n \
    \       }\n        if (consonants == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpik7o4ink: /tmp/tmpik7o4ink.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpsbz412of: /tmp/tmpsbz412of.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::string word = \"\
    \";\n    int consonants = 0;\n    for (int i = 0; i < s.length(); i++) {\n   \
    \     if (s[i] != ' ') {\n            word += s[i];\n            if (s[i] != 'a'\
    \ && s[i] != 'e' && s[i] != 'i' && s[i] != 'o' && s[i] != 'u') {\n           \
    \     consonants++;\n            }\n        } else {\n            if (consonants\
    \ == n) {\n                result.push_back(word);\n            }\n          \
    \  word = \"\";\n            consonants = 0;\n        }\n    }\n    if (consonants\
    \ == n) {\n        result.push_back(word);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp1_mc82dk: /tmp/tmp1_mc82dk.cpp:43: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        long count = 0;\n  \
    \      for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpnvb0tqgw: /tmp/tmpnvb0tqgw.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (std::count_if(word.begin(),\
    \ word.end(), [](char c) {\n            return c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u';\n        }) == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpx8zlbwf7: /tmp/tmpx8zlbwf7.cpp:33: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int consonants = 0;\n\
    \        for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                consonants++;\n            }\n \
    \       }\n        if (consonants == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpr4vm1b92: /tmp/tmpr4vm1b92.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> words;\n    std::string word = \"\
    \";\n    int consonants = 0;\n    for (int i = 0; i < s.length(); i++) {\n   \
    \     if (s[i] == ' ') {\n            if (consonants == n) {\n               \
    \ words.push_back(word);\n            }\n            word = \"\";\n          \
    \  consonants = 0;\n        } else {\n            word += s[i];\n            if\
    \ (s[i] != 'a' && s[i] != 'e' && s[i] != 'i' && s[i] != 'o' && s[i] != 'u') {\n\
    \                consonants++;\n            }\n        }\n    }\n    if (consonants\
    \ == n) {\n        words.push_back(word);\n    }\n    return words;\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp8dt28kfk: /tmp/tmp8dt28kfk.cpp:43: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpmvnuqqqw: /tmp/tmpmvnuqqqw.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> words;\n    std::string word = \"\
    \";\n    for (char c : s) {\n        if (c == ' ') {\n            if (word.size()\
    \ > 0) {\n                if (count_consonants(word) == n) {\n               \
    \     words.push_back(word);\n                }\n                word = \"\";\n\
    \            }\n        } else {\n            word += c;\n        }\n    }\n \
    \   if (word.size() > 0) {\n        if (count_consonants(word) == n) {\n     \
    \       words.push_back(word);\n        }\n    }\n    return words;\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxir200bo.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpxir200bo.cpp:20:21: error:\
    \ \u2018count_consonants\u2019 was not declared in this scope\n   20 |       \
    \          if (count_consonants(word) == n) {\n      |                     ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpxir200bo.cpp:30:13: error: \u2018count_consonants\u2019 was not declared\
    \ in this scope\n   30 |         if (count_consonants(word) == n) {\n      | \
    \            ^~~~~~~~~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::string word;\n\
    \    std::stringstream ss(s);\n    while (ss >> word) {\n        int count = 0;\n\
    \        for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpal1x6y_0: /tmp/tmpal1x6y_0.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp_7gl37s3: /tmp/tmp_7gl37s3.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (auto c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpyjbm4big: /tmp/tmpyjbm4big.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> words;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int consonants = 0;\n\
    \        for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                consonants++;\n            }\n \
    \       }\n        if (consonants == n) {\n            words.push_back(word);\n\
    \        }\n    }\n    return words;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmprii7mfyk: /tmp/tmprii7mfyk.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (std::count_if(word.begin(),\
    \ word.end(), [](char c) {\n            return c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u';\n        }) == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpvi5n4qr4: /tmp/tmpvi5n4qr4.cpp:33: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (std::count_if(word.begin(),\
    \ word.end(), [](char c) {\n            return c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u';\n        }) == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpkgne0l5o: /tmp/tmpkgne0l5o.cpp:33: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpovc25nfv: /tmp/tmpovc25nfv.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp94oup2wd: /tmp/tmp94oup2wd.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while(ss >> word) {\n        int count = 0;\n    \
    \    for(char c : word) {\n            if(c != 'a' && c != 'e' && c != 'i' &&\
    \ c != 'o' && c != 'u') {\n                count++;\n            }\n        }\n\
    \        if(count == n) {\n            res.push_back(word);\n        }\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpb954mpis: /tmp/tmpb954mpis.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> words;\n    std::string word;\n \
    \   std::stringstream ss(s);\n    while (ss >> word) {\n        if (std::count_if(word.begin(),\
    \ word.end(), [](char c) {\n            return c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u';\n        }) == n) {\n            words.push_back(word);\n\
    \        }\n    }\n    return words;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp810n4w2x: /tmp/tmp810n4w2x.cpp:33: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> words;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                count++;\n            }\n      \
    \  }\n        if (word.size() - count == n) {\n            words.push_back(word);\n\
    \        }\n    }\n    return words;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmprgmlv3sb: /tmp/tmprgmlv3sb.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int consonants = 0;\n\
    \        for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                consonants++;\n            }\n \
    \       }\n        if (consonants == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpukoqjblx: /tmp/tmpukoqjblx.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::string word = \"\
    \";\n    int count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if\
    \ (s[i] == ' ') {\n            if (count == n) {\n                result.push_back(word);\n\
    \            }\n            word = \"\";\n            count = 0;\n        } else\
    \ {\n            word += s[i];\n            if (s[i] != 'a' && s[i] != 'e' &&\
    \ s[i] != 'i' && s[i] != 'o' && s[i] != 'u') {\n                count++;\n   \
    \         }\n        }\n    }\n    if (count == n) {\n        result.push_back(word);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp9yii79hr: /tmp/tmp9yii79hr.cpp:43: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int consonants = 0;\n\
    \        for (auto c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                consonants++;\n            }\n \
    \       }\n        if (consonants == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpwriy1eut: /tmp/tmpwriy1eut.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        long consonants = 0;\n\
    \        for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                consonants++;\n            }\n \
    \       }\n        if (consonants == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp_jbmipgc: /tmp/tmp_jbmipgc.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::string word;\n\
    \    std::stringstream ss(s);\n    while (ss >> word) {\n        int consonants\
    \ = 0;\n        for (char c : word) {\n            if (c != 'a' && c != 'e' &&\
    \ c != 'i' && c != 'o' && c != 'u') {\n                consonants++;\n       \
    \     }\n        }\n        if (consonants == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpzzqfx2yu: /tmp/tmpzzqfx2yu.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpgate5nxm: /tmp/tmpgate5nxm.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> words;\n    std::string word = \"\
    \";\n    int consonants = 0;\n    for (int i = 0; i < s.length(); i++) {\n   \
    \     if (s[i] == ' ') {\n            if (consonants == n) {\n               \
    \ words.push_back(word);\n            }\n            word = \"\";\n          \
    \  consonants = 0;\n        } else {\n            word += s[i];\n            if\
    \ (s[i] != 'a' && s[i] != 'e' && s[i] != 'i' && s[i] != 'o' && s[i] != 'u') {\n\
    \                consonants++;\n            }\n        }\n    }\n    if (consonants\
    \ == n) {\n        words.push_back(word);\n    }\n    return words;\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpr6p7weq8: /tmp/tmpr6p7weq8.cpp:43: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n  std::vector<std::string> result;\n  std::stringstream ss(s);\n\
    \  std::string word;\n  while (ss >> word) {\n    int consonants = 0;\n    for\
    \ (char c : word) {\n      if (c != 'a' && c != 'e' && c != 'i' && c != 'o' &&\
    \ c != 'u') {\n        consonants++;\n      }\n    }\n    if (consonants == n)\
    \ {\n      result.push_back(word);\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp59bygion: /tmp/tmp59bygion.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpk4_t3iig: /tmp/tmpk4_t3iig.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int consonants = 0;\n\
    \        for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                consonants++;\n            }\n \
    \       }\n        if (consonants == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmps_69_sj5: /tmp/tmps_69_sj5.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int consonants = 0;\n\
    \        for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                consonants++;\n            }\n \
    \       }\n        if (consonants == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpc0jaixj7: /tmp/tmpc0jaixj7.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> words;\n    std::string word;\n \
    \   int consonants = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if\
    \ (s[i] != ' ') {\n            word += s[i];\n            if (s[i] != 'a' && s[i]\
    \ != 'e' && s[i] != 'i' && s[i] != 'o' && s[i] != 'u') {\n                consonants++;\n\
    \            }\n        } else {\n            if (consonants == n) {\n       \
    \         words.push_back(word);\n            }\n            word = \"\";\n  \
    \          consonants = 0;\n        }\n    }\n    if (consonants == n) {\n   \
    \     words.push_back(word);\n    }\n    return words;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp4s9ztfqa: /tmp/tmp4s9ztfqa.cpp:43: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpm5om8wty: /tmp/tmpm5om8wty.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmptjwn0ooc: /tmp/tmptjwn0ooc.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int consonants = 0;\n\
    \        for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                consonants++;\n            }\n \
    \       }\n        if (consonants == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpwg8anu9k: /tmp/tmpwg8anu9k.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpl68fcrh9: /tmp/tmpl68fcrh9.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> words;\n    std::string word;\n \
    \   std::stringstream ss(s);\n    while (ss >> word) {\n        if (std::count_if(word.begin(),\
    \ word.end(), [](char c) {\n            return !std::isalpha(c);\n        }) ==\
    \ n) {\n            words.push_back(word);\n        }\n    }\n    return words;\n\
    }\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpcxu9ti2z: /tmp/tmpcxu9ti2z.cpp:29: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        long consonants = 0;\n\
    \        for (auto c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                consonants++;\n            }\n \
    \       }\n        if (consonants == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpu094m8m4: /tmp/tmpu094m8m4.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int consonants = 0;\n\
    \        for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                consonants++;\n            }\n \
    \       }\n        if (consonants == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpphwor2sa: /tmp/tmpphwor2sa.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int consonants = 0;\n\
    \        for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                consonants++;\n            }\n \
    \       }\n        if (consonants == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpfevye6uh: /tmp/tmpfevye6uh.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    std::string word = \"\"\
    ;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n  \
    \          if (word.length() == n) {\n                res.push_back(word);\n \
    \           }\n            word = \"\";\n        } else {\n            word +=\
    \ s[i];\n        }\n    }\n    if (word.length() == n) {\n        res.push_back(word);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpwlpfijpg: /tmp/tmpwlpfijpg.cpp:34: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (auto c : word) {\n            if (c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                count++;\n            }\n      \
    \  }\n        if (word.size() - count == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp0r_dczhq: /tmp/tmp0r_dczhq.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> words;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (std::count_if(word.begin(),\
    \ word.end(), [](char c) {\n            return !std::string(\"aeiou\").find(c);\n\
    \        }) == n) {\n            words.push_back(word);\n        }\n    }\n  \
    \  return words;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpbsqbzalu: /tmp/tmpbsqbzalu.cpp:29: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::string word;\n\
    \    std::stringstream ss(s);\n    while (ss >> word) {\n        int count = 0;\n\
    \        for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp4ye64yjq: /tmp/tmp4ye64yjq.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::string word;\n\
    \    std::stringstream ss(s);\n    while (ss >> word) {\n        int count = 0;\n\
    \        for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpuz5m_197: /tmp/tmpuz5m_197.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp98vjkjca: /tmp/tmp98vjkjca.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpyl8ur802: /tmp/tmpyl8ur802.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> words;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (auto c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            words.push_back(word);\n        }\n\
    \    }\n    return words;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpbmb_6e5q: /tmp/tmpbmb_6e5q.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::string temp = \"\
    \";\n    int count = 0;\n    for(int i = 0; i < s.length(); i++){\n        if(s[i]\
    \ == ' '){\n            if(count == n){\n                result.push_back(temp);\n\
    \            }\n            temp = \"\";\n            count = 0;\n        }else{\n\
    \            if(s[i] != 'a' && s[i] != 'e' && s[i] != 'i' && s[i] != 'o' && s[i]\
    \ != 'u'){\n                count++;\n            }\n            temp += s[i];\n\
    \        }\n    }\n    if(count == n){\n        result.push_back(temp);\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = select_words;\n   \
    \ assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmplc5eff87: /tmp/tmplc5eff87.cpp:43: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int consonants = 0;\n\
    \        for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                consonants++;\n            }\n \
    \       }\n        if (consonants == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmplc_husw4: /tmp/tmplc_husw4.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> words;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int consonants = 0;\n\
    \        for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                consonants++;\n            }\n \
    \       }\n        if (consonants == n) {\n            words.push_back(word);\n\
    \        }\n    }\n    return words;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpnwe7yf3x: /tmp/tmpnwe7yf3x.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::string word = \"\
    \";\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n\
    \            if (word.length() == n) {\n                result.push_back(word);\n\
    \            }\n            word = \"\";\n        } else {\n            word +=\
    \ s[i];\n        }\n    }\n    if (word.length() == n) {\n        result.push_back(word);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmprs3s9g8d: /tmp/tmprs3s9g8d.cpp:34: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int consonants = 0;\n\
    \        for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                consonants++;\n            }\n \
    \       }\n        if (consonants == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmplfxuy0mf: /tmp/tmplfxuy0mf.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int consonants = 0;\n\
    \        for (auto c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                consonants++;\n            }\n \
    \       }\n        if (consonants == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpb9q59pdo: /tmp/tmpb9q59pdo.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp_sx9eo9m: /tmp/tmp_sx9eo9m.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (std::count_if(word.begin(),\
    \ word.end(), [](char c) {\n            return c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u';\n        }) == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpv5pa_9m6: /tmp/tmpv5pa_9m6.cpp:33: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp4s4dnf5v: /tmp/tmp4s4dnf5v.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::string word;\n\
    \    std::stringstream ss(s);\n    while (ss >> word) {\n        if (std::count_if(word.begin(),\
    \ word.end(), [](char c) {\n            return c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u';\n        }) == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpc1mkf1jv: /tmp/tmpc1mkf1jv.cpp:33: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> words;\n    std::string word = \"\
    \";\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n\
    \            if (word.length() == n) {\n                words.push_back(word);\n\
    \            }\n            word = \"\";\n        } else {\n            word +=\
    \ s[i];\n        }\n    }\n    if (word.length() == n) {\n        words.push_back(word);\n\
    \    }\n    return words;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpeq6virrw: /tmp/tmpeq6virrw.cpp:34: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmps5j62gl5: /tmp/tmps5j62gl5.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> words;\n    std::string word = \"\
    \";\n    int consonants = 0;\n    for (int i = 0; i < s.length(); i++) {\n   \
    \     if (s[i] == ' ') {\n            if (consonants == n) {\n               \
    \ words.push_back(word);\n            }\n            word = \"\";\n          \
    \  consonants = 0;\n        } else {\n            word += s[i];\n            if\
    \ (s[i] != 'a' && s[i] != 'e' && s[i] != 'i' && s[i] != 'o' && s[i] != 'u') {\n\
    \                consonants++;\n            }\n        }\n    }\n    if (consonants\
    \ == n) {\n        words.push_back(word);\n    }\n    return words;\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpjvgz2td8: /tmp/tmpjvgz2td8.cpp:43: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::string word = \"\
    \";\n    int consonants = 0;\n    for (int i = 0; i < s.length(); i++) {\n   \
    \     if (s[i] != ' ') {\n            word += s[i];\n            if (s[i] != 'a'\
    \ && s[i] != 'e' && s[i] != 'i' && s[i] != 'o' && s[i] != 'u') {\n           \
    \     consonants++;\n            }\n        } else {\n            if (consonants\
    \ == n) {\n                result.push_back(word);\n            }\n          \
    \  word = \"\";\n            consonants = 0;\n        }\n    }\n    if (consonants\
    \ == n) {\n        result.push_back(word);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpmrt0pzly: /tmp/tmpmrt0pzly.cpp:43: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (auto c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpm70iuwhi: /tmp/tmpm70iuwhi.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (std::count_if(word.begin(),\
    \ word.end(), [](char c) {\n            return c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u';\n        }) == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp6fbf7gto: /tmp/tmp6fbf7gto.cpp:33: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpx06a0mbn: /tmp/tmpx06a0mbn.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int consonants = 0;\n\
    \        for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                consonants++;\n            }\n \
    \       }\n        if (consonants == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpvcx9p14c: /tmp/tmpvcx9p14c.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (std::count_if(word.begin(),\
    \ word.end(), [](char c) {\n            return c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u';\n        }) == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpj07nupy7: /tmp/tmpj07nupy7.cpp:33: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int consonants = 0;\n\
    \        for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                consonants++;\n            }\n \
    \       }\n        if (consonants == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpoxcjtpog: /tmp/tmpoxcjtpog.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::string word;\n\
    \    int count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i]\
    \ == ' ') {\n            if (count == n) {\n                result.push_back(word);\n\
    \            }\n            word = \"\";\n            count = 0;\n        } else\
    \ {\n            if (s[i] != 'a' && s[i] != 'e' && s[i] != 'i' && s[i] != 'o'\
    \ && s[i] != 'u') {\n                count++;\n            }\n            word\
    \ += s[i];\n        }\n    }\n    if (count == n) {\n        result.push_back(word);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpymea5965: /tmp/tmpymea5965.cpp:43: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpcrqoax7n: /tmp/tmpcrqoax7n.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::string word;\n\
    \    std::stringstream ss(s);\n    while (ss >> word) {\n        int count = 0;\n\
    \        for (char c : word) {\n            if (c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                count++;\n            }\n      \
    \  }\n        if (word.size() - count == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpow9tvab4: /tmp/tmpow9tvab4.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::string word = \"\
    \";\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n\
    \            if (word.length() == n) {\n                result.push_back(word);\n\
    \            }\n            word = \"\";\n        } else {\n            word +=\
    \ s[i];\n        }\n    }\n    if (word.length() == n) {\n        result.push_back(word);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpo03e244b: /tmp/tmpo03e244b.cpp:34: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmppy0yl3m3: /tmp/tmppy0yl3m3.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpzqkgdxtl: /tmp/tmpzqkgdxtl.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> words;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int consonants = 0;\n\
    \        for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                consonants++;\n            }\n \
    \       }\n        if (consonants == n) {\n            words.push_back(word);\n\
    \        }\n    }\n    return words;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp3p7rgwax: /tmp/tmp3p7rgwax.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int consonants = 0;\n\
    \        for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                consonants++;\n            }\n \
    \       }\n        if (consonants == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpgfz4c92z: /tmp/tmpgfz4c92z.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int consonants = 0;\n\
    \        for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                consonants++;\n            }\n \
    \       }\n        if (consonants == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp_hlyvtdu: /tmp/tmp_hlyvtdu.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::string word;\n\
    \    std::stringstream ss(s);\n    while (ss >> word) {\n        int count = 0;\n\
    \        for (auto c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmputxdx4qa: /tmp/tmputxdx4qa.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (auto c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpgl1927un: /tmp/tmpgl1927un.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp5vap3kh0: /tmp/tmp5vap3kh0.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpc22ghs84: /tmp/tmpc22ghs84.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int consonants = 0;\n\
    \        for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                consonants++;\n            }\n \
    \       }\n        if (consonants == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpqi0zmyv6: /tmp/tmpqi0zmyv6.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmplybazsg4: /tmp/tmplybazsg4.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> words;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            words.push_back(word);\n        }\n\
    \    }\n    return words;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpbgstsn0v: /tmp/tmpbgstsn0v.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::string word;\n\
    \    std::stringstream ss(s);\n    while (ss >> word) {\n        int count = 0;\n\
    \        for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpn4c47z38: /tmp/tmpn4c47z38.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (std::count_if(word.begin(),\
    \ word.end(), [](char c) { return !std::isalpha(c); }) == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpl2ggi_lx: /tmp/tmpl2ggi_lx.cpp:27: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (auto c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpq6ukx4do: /tmp/tmpq6ukx4do.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> words;\n    std::string word;\n \
    \   for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n     \
    \       if (word.length() == n) {\n                words.push_back(word);\n  \
    \          }\n            word = \"\";\n        } else {\n            word +=\
    \ s[i];\n        }\n    }\n    if (word.length() == n) {\n        words.push_back(word);\n\
    \    }\n    return words;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpqzkp1eet: /tmp/tmpqzkp1eet.cpp:34: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp1f75r7cf: /tmp/tmp1f75r7cf.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpcu__sy2y: /tmp/tmpcu__sy2y.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (auto c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpioi5o0hs: /tmp/tmpioi5o0hs.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (auto c : word) {\n            if (c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                count++;\n            }\n      \
    \  }\n        if (word.size() - count == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp7_emyg70: /tmp/tmp7_emyg70.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmprveztldj: /tmp/tmprveztldj.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> words;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            words.push_back(word);\n        }\n\
    \    }\n    return words;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp_h5we3lo: /tmp/tmp_h5we3lo.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int consonants = 0;\n\
    \        for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                consonants++;\n            }\n \
    \       }\n        if (consonants == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpn5lkm1id: /tmp/tmpn5lkm1id.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char ch : word) {\n            if (ch != 'a' && ch != 'e' && ch !=\
    \ 'i' && ch != 'o' && ch != 'u') {\n                count++;\n            }\n\
    \        }\n        if (count == n) {\n            result.push_back(word);\n \
    \       }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp8casw6ev: /tmp/tmp8casw6ev.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp5w2akqyk: /tmp/tmp5w2akqyk.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpiewx7trt: /tmp/tmpiewx7trt.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp99t1tb3q: /tmp/tmp99t1tb3q.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmprrkc5c35: /tmp/tmprrkc5c35.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (std::count_if(word.begin(),\
    \ word.end(), [](char c) {\n            return c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u';\n        }) == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpl39aedih: /tmp/tmpl39aedih.cpp:33: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::string word = \"\
    \";\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n\
    \            if (word.length() == n) {\n                result.push_back(word);\n\
    \            }\n            word = \"\";\n        } else {\n            word +=\
    \ s[i];\n        }\n    }\n    if (word.length() == n) {\n        result.push_back(word);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmphlc4gwt1: /tmp/tmphlc4gwt1.cpp:34: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (std::count_if(word.begin(),\
    \ word.end(), [](char c) {\n            return c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u';\n        }) == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpit9uoabu: /tmp/tmpit9uoabu.cpp:33: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> words;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (auto c : word) {\n            if (c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                count++;\n            }\n      \
    \  }\n        if (word.size() - count == n) {\n            words.push_back(word);\n\
    \        }\n    }\n    return words;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpn0a4yjtt: /tmp/tmpn0a4yjtt.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int consonants = 0;\n\
    \        for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                consonants++;\n            }\n \
    \       }\n        if (consonants == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpg_8ig1tg: /tmp/tmpg_8ig1tg.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (auto c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpsez4d5q4: /tmp/tmpsez4d5q4.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpu95qcek5: /tmp/tmpu95qcek5.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (auto c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpgauo9jcj: /tmp/tmpgauo9jcj.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (std::count_if(word.begin(),\
    \ word.end(), [](char c) {\n            return c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u';\n        }) == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp7s84wopy: /tmp/tmp7s84wopy.cpp:33: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp7rzh4nxt: /tmp/tmp7rzh4nxt.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp37qtpy6p: /tmp/tmp37qtpy6p.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> words;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        long consonants = 0;\n\
    \        for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                consonants++;\n            }\n \
    \       }\n        if (consonants == n) {\n            words.push_back(word);\n\
    \        }\n    }\n    return words;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpc_os0tpc: /tmp/tmpc_os0tpc.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (auto c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpwvsbc3vs: /tmp/tmpwvsbc3vs.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp79uy9pcq: /tmp/tmp79uy9pcq.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::string word = \"\
    \";\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n\
    \            if (word.length() == n) {\n                result.push_back(word);\n\
    \            }\n            word = \"\";\n        } else {\n            word +=\
    \ s[i];\n        }\n    }\n    if (word.length() == n) {\n        result.push_back(word);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpf1z8r5ya: /tmp/tmpf1z8r5ya.cpp:34: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (int i = 0; i < word.size(); i++) {\n            if (word[i] != 'a'\
    \ && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u') {\n\
    \                count++;\n            }\n        }\n        if (count == n) {\n\
    \            result.push_back(word);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary\
    \ had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmppt6exscx: /tmp/tmppt6exscx.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (auto c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp9b_h56vw: /tmp/tmp9b_h56vw.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmptgh1fhy5: /tmp/tmptgh1fhy5.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::string word = \"\
    \";\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n\
    \            if (word.length() == n) {\n                result.push_back(word);\n\
    \            }\n            word = \"\";\n        } else {\n            word +=\
    \ s[i];\n        }\n    }\n    if (word.length() == n) {\n        result.push_back(word);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpgv81zpfb: /tmp/tmpgv81zpfb.cpp:34: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpgz2sq2pe: /tmp/tmpgz2sq2pe.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpu0be5l6r: /tmp/tmpu0be5l6r.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpv0u3imfo: /tmp/tmpv0u3imfo.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::string word;\n\
    \    std::stringstream ss(s);\n    while (ss >> word) {\n        int count = 0;\n\
    \        for (char c : word) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                count++;\n            }\n      \
    \  }\n        if (count == n) {\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpfxp7986y: /tmp/tmpfxp7986y.cpp:37: int main(): Assertion `candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"}))' failed.\n"
  exit_code: -6
  status: Exception
