name: HumanEval_81_numerical_letter_grade
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ ans;\n    for(int i = 0; i < grades.size(); i++){\n        if(grades[i] >= 4.0)\
    \ ans.push_back(\"A+\");\n        else if(grades[i] >= 3.7) ans.push_back(\"A\"\
    );\n        else if(grades[i] >= 3.3) ans.push_back(\"A-\");\n        else if(grades[i]\
    \ >= 3.0) ans.push_back(\"B+\");\n        else if(grades[i] >= 2.7) ans.push_back(\"\
    B\");\n        else if(grades[i] >= 2.3) ans.push_back(\"B-\");\n        else\
    \ if(grades[i] >= 2.0) ans.push_back(\"C+\");\n        else if(grades[i] >= 1.7)\
    \ ans.push_back(\"C\");\n        else if(grades[i] >= 1.3) ans.push_back(\"C-\"\
    );\n        else if(grades[i] >= 1.0) ans.push_back(\"D+\");\n        else if(grades[i]\
    \ >= 0.7) ans.push_back(\"D\");\n        else if(grades[i] >= 0.0) ans.push_back(\"\
    D-\");\n        else ans.push_back(\"E\");\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpm4xso5uj: /tmp/tmpm4xso5uj.cpp:45: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp59ovzbl3: /tmp/tmp59ovzbl3.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n      \
    \      result.push_back(\"A\");\n        } else if (grade > 3.3) {\n         \
    \   result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n           \
    \ result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpu87zaa6v: /tmp/tmpu87zaa6v.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp0qwhoazg: /tmp/tmp0qwhoazg.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n\tstd::vector<std::string>\
    \ result;\n\tfor (int i = 0; i < grades.size(); i++) {\n\t\tif (grades[i] == 4.0)\
    \ {\n\t\t\tresult.push_back(\"A+\");\n\t\t}\n\t\telse if (grades[i] > 3.7) {\n\
    \t\t\tresult.push_back(\"A\");\n\t\t}\n\t\telse if (grades[i] > 3.3) {\n\t\t\t\
    result.push_back(\"A-\");\n\t\t}\n\t\telse if (grades[i] > 3.0) {\n\t\t\tresult.push_back(\"\
    B+\");\n\t\t}\n\t\telse if (grades[i] > 2.7) {\n\t\t\tresult.push_back(\"B\");\n\
    \t\t}\n\t\telse if (grades[i] > 2.3) {\n\t\t\tresult.push_back(\"B-\");\n\t\t\
    }\n\t\telse if (grades[i] > 2.0) {\n\t\t\tresult.push_back(\"C+\");\n\t\t}\n\t\
    \telse if (grades[i] > 1.7) {\n\t\t\tresult.push_back(\"C\");\n\t\t}\n\t\telse\
    \ if (grades[i] > 1.3) {\n\t\t\tresult.push_back(\"C-\");\n\t\t}\n\t\telse if\
    \ (grades[i] > 1.0) {\n\t\t\tresult.push_back(\"D+\");\n\t\t}\n\t\telse if (grades[i]\
    \ > 0.7) {\n\t\t\tresult.push_back(\"D\");\n\t\t}\n\t\telse if (grades[i] > 0.0)\
    \ {\n\t\t\tresult.push_back(\"D-\");\n\t\t}\n\t\telse {\n\t\t\tresult.push_back(\"\
    E\");\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpah5lfwgr: /tmp/tmpah5lfwgr.cpp:71: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp6t528uc5: /tmp/tmp6t528uc5.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n  std::vector<std::string>\
    \ letter_grades;\n  for (int i = 0; i < grades.size(); i++) {\n    if (grades[i]\
    \ >= 4.0) {\n      letter_grades.push_back(\"A+\");\n    } else if (grades[i]\
    \ >= 3.7) {\n      letter_grades.push_back(\"A\");\n    } else if (grades[i] >=\
    \ 3.3) {\n      letter_grades.push_back(\"A-\");\n    } else if (grades[i] >=\
    \ 3.0) {\n      letter_grades.push_back(\"B+\");\n    } else if (grades[i] >=\
    \ 2.7) {\n      letter_grades.push_back(\"B\");\n    } else if (grades[i] >= 2.3)\
    \ {\n      letter_grades.push_back(\"B-\");\n    } else if (grades[i] >= 2.0)\
    \ {\n      letter_grades.push_back(\"C+\");\n    } else if (grades[i] >= 1.7)\
    \ {\n      letter_grades.push_back(\"C\");\n    } else if (grades[i] >= 1.3) {\n\
    \      letter_grades.push_back(\"C-\");\n    } else if (grades[i] >= 1.0) {\n\
    \      letter_grades.push_back(\"D+\");\n    } else if (grades[i] >= 0.7) {\n\
    \      letter_grades.push_back(\"D\");\n    } else if (grades[i] >= 0.0) {\n \
    \     letter_grades.push_back(\"D-\");\n    } else {\n      letter_grades.push_back(\"\
    E\");\n    }\n  }\n  return letter_grades;\n}\nint main() {\n    auto candidate\
    \ = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpxiyrdg8p: /tmp/tmpxiyrdg8p.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n\
    \            letter_grades.push_back(\"A+\");\n        } else if (grade >= 3.7)\
    \ {\n            letter_grades.push_back(\"A\");\n        } else if (grade >=\
    \ 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grade\
    \ >= 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grade\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grade\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grade\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grade\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grade\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grade\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grade\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grade\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpowbrm40j: /tmp/tmpowbrm40j.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpshtnqax0: /tmp/tmpshtnqax0.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpzj4czr9i: /tmp/tmpzj4czr9i.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n  std::vector<std::string>\
    \ letter_grades;\n  for (int i = 0; i < grades.size(); i++) {\n    if (grades[i]\
    \ == 4.0) {\n      letter_grades.push_back(\"A+\");\n    } else if (grades[i]\
    \ > 3.7) {\n      letter_grades.push_back(\"A\");\n    } else if (grades[i] >\
    \ 3.3) {\n      letter_grades.push_back(\"A-\");\n    } else if (grades[i] > 3.0)\
    \ {\n      letter_grades.push_back(\"B+\");\n    } else if (grades[i] > 2.7) {\n\
    \      letter_grades.push_back(\"B\");\n    } else if (grades[i] > 2.3) {\n  \
    \    letter_grades.push_back(\"B-\");\n    } else if (grades[i] > 2.0) {\n   \
    \   letter_grades.push_back(\"C+\");\n    } else if (grades[i] > 1.7) {\n    \
    \  letter_grades.push_back(\"C\");\n    } else if (grades[i] > 1.3) {\n      letter_grades.push_back(\"\
    C-\");\n    } else if (grades[i] > 1.0) {\n      letter_grades.push_back(\"D+\"\
    );\n    } else if (grades[i] > 0.7) {\n      letter_grades.push_back(\"D\");\n\
    \    } else if (grades[i] > 0.0) {\n      letter_grades.push_back(\"D-\");\n \
    \   } else {\n      letter_grades.push_back(\"E\");\n    }\n  }\n  return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmptfxfe52l: /tmp/tmptfxfe52l.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n      \
    \      result.push_back(\"A\");\n        } else if (grade > 3.3) {\n         \
    \   result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n           \
    \ result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmptstqffzh: /tmp/tmptstqffzh.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp0lecmr5z: /tmp/tmp0lecmr5z.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmptcr6ci7h: /tmp/tmptcr6ci7h.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpd5480n9h: /tmp/tmpd5480n9h.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpql5swof1: /tmp/tmpql5swof1.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (float grade : grades) {\n        if (grade >= 4.0)\
    \ {\n            letter_grades.push_back(\"A+\");\n        } else if (grade >=\
    \ 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grade\
    \ >= 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grade\
    \ >= 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grade\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grade\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grade\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grade\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grade\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grade\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grade\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grade\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp7dlm13tj: /tmp/tmp7dlm13tj.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpif4ywn72: /tmp/tmpif4ywn72.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpb_cbwmic: /tmp/tmpb_cbwmic.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpgwxp1871: /tmp/tmpgwxp1871.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpwickw7jj: /tmp/tmpwickw7jj.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n      \
    \      result.push_back(\"A\");\n        } else if (grade > 3.3) {\n         \
    \   result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n           \
    \ result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpbp3cd0_k: /tmp/tmpbp3cd0_k.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n\
    \            letter_grades.push_back(\"A+\");\n        } else if (grade >= 3.7)\
    \ {\n            letter_grades.push_back(\"A\");\n        } else if (grade >=\
    \ 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grade\
    \ >= 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grade\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grade\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grade\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grade\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grade\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grade\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grade\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grade\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmps4phoip5: /tmp/tmps4phoip5.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp9h070xmu: /tmp/tmp9h070xmu.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpg0dg1wjd: /tmp/tmpg0dg1wjd.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmptjfjq8i4: /tmp/tmptjfjq8i4.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpofbub_x4: /tmp/tmpofbub_x4.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n\tstd::vector<std::string>\
    \ result;\n\tfor (int i = 0; i < grades.size(); i++) {\n\t\tif (grades[i] >= 4.0)\
    \ {\n\t\t\tresult.push_back(\"A+\");\n\t\t}\n\t\telse if (grades[i] >= 3.7) {\n\
    \t\t\tresult.push_back(\"A\");\n\t\t}\n\t\telse if (grades[i] >= 3.3) {\n\t\t\t\
    result.push_back(\"A-\");\n\t\t}\n\t\telse if (grades[i] >= 3.0) {\n\t\t\tresult.push_back(\"\
    B+\");\n\t\t}\n\t\telse if (grades[i] >= 2.7) {\n\t\t\tresult.push_back(\"B\"\
    );\n\t\t}\n\t\telse if (grades[i] >= 2.3) {\n\t\t\tresult.push_back(\"B-\");\n\
    \t\t}\n\t\telse if (grades[i] >= 2.0) {\n\t\t\tresult.push_back(\"C+\");\n\t\t\
    }\n\t\telse if (grades[i] >= 1.7) {\n\t\t\tresult.push_back(\"C\");\n\t\t}\n\t\
    \telse if (grades[i] >= 1.3) {\n\t\t\tresult.push_back(\"C-\");\n\t\t}\n\t\telse\
    \ if (grades[i] >= 1.0) {\n\t\t\tresult.push_back(\"D+\");\n\t\t}\n\t\telse if\
    \ (grades[i] >= 0.7) {\n\t\t\tresult.push_back(\"D\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 0.0) {\n\t\t\tresult.push_back(\"D-\");\n\t\t}\n\t\telse {\n\t\t\tresult.push_back(\"\
    E\");\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp7_yl1wec: /tmp/tmp7_yl1wec.cpp:71: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpphw_ztlg: /tmp/tmpphw_ztlg.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpj71cpfht: /tmp/tmpj71cpfht.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpwn_q85gh: /tmp/tmpwn_q85gh.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmptd4ein9i: /tmp/tmptd4ein9i.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpx0sjfbbe: /tmp/tmpx0sjfbbe.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp_6fi7hpv: /tmp/tmp_6fi7hpv.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpax98o2q0: /tmp/tmpax98o2q0.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n      \
    \      result.push_back(\"A\");\n        } else if (grade > 3.3) {\n         \
    \   result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n           \
    \ result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpxmfkmrux: /tmp/tmpxmfkmrux.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmps9o4cf66: /tmp/tmps9o4cf66.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpv2z5ug4w: /tmp/tmpv2z5ug4w.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp_03ipux3: /tmp/tmp_03ipux3.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpymwqltfr: /tmp/tmpymwqltfr.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp0o9_pgc8: /tmp/tmp0o9_pgc8.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmprcjg4cc1: /tmp/tmprcjg4cc1.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpywz9ly34: /tmp/tmpywz9ly34.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n      \
    \      result.push_back(\"A\");\n        } else if (grade > 3.3) {\n         \
    \   result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n           \
    \ result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpwq3u_v0e: /tmp/tmpwq3u_v0e.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmppa_f5b1y: /tmp/tmppa_f5b1y.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n\
    \            letter_grades.push_back(\"A+\");\n        } else if (grade > 3.7)\
    \ {\n            letter_grades.push_back(\"A\");\n        } else if (grade > 3.3)\
    \ {\n            letter_grades.push_back(\"A-\");\n        } else if (grade >\
    \ 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grade\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grade\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grade\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grade\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grade\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grade\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grade\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grade\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpxex8oor3: /tmp/tmpxex8oor3.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpvccazrl2: /tmp/tmpvccazrl2.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpih7brc85: /tmp/tmpih7brc85.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp48l78_bx: /tmp/tmp48l78_bx.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n      \
    \      result.push_back(\"A\");\n        } else if (grade > 3.3) {\n         \
    \   result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n           \
    \ result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpgkmrh875: /tmp/tmpgkmrh875.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpgfsxh8or: /tmp/tmpgfsxh8or.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpj2zbkw_l: /tmp/tmpj2zbkw_l.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpe0fkabu5: /tmp/tmpe0fkabu5.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpbfidiom6: /tmp/tmpbfidiom6.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp2755d3hh: /tmp/tmp2755d3hh.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpzabp6dv7: /tmp/tmpzabp6dv7.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmplje8d86c: /tmp/tmplje8d86c.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp1fx_t_9r: /tmp/tmp1fx_t_9r.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpnr12hlsu: /tmp/tmpnr12hlsu.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmprb4pwoll: /tmp/tmprb4pwoll.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp3z7x036c: /tmp/tmp3z7x036c.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpau9rj3bj: /tmp/tmpau9rj3bj.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade == 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade > 3.3) {\n        \
    \    result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n          \
    \  result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpg613gqwi: /tmp/tmpg613gqwi.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpmfyd96yt: /tmp/tmpmfyd96yt.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp84gbx00f: /tmp/tmp84gbx00f.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp357pptwi: /tmp/tmp357pptwi.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp7gqgbhat: /tmp/tmp7gqgbhat.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpaa9ow5e1: /tmp/tmpaa9ow5e1.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n\tstd::vector<std::string>\
    \ result;\n\tfor (int i = 0; i < grades.size(); i++) {\n\t\tif (grades[i] >= 4.0)\
    \ {\n\t\t\tresult.push_back(\"A+\");\n\t\t}\n\t\telse if (grades[i] >= 3.7) {\n\
    \t\t\tresult.push_back(\"A\");\n\t\t}\n\t\telse if (grades[i] >= 3.3) {\n\t\t\t\
    result.push_back(\"A-\");\n\t\t}\n\t\telse if (grades[i] >= 3.0) {\n\t\t\tresult.push_back(\"\
    B+\");\n\t\t}\n\t\telse if (grades[i] >= 2.7) {\n\t\t\tresult.push_back(\"B\"\
    );\n\t\t}\n\t\telse if (grades[i] >= 2.3) {\n\t\t\tresult.push_back(\"B-\");\n\
    \t\t}\n\t\telse if (grades[i] >= 2.0) {\n\t\t\tresult.push_back(\"C+\");\n\t\t\
    }\n\t\telse if (grades[i] >= 1.7) {\n\t\t\tresult.push_back(\"C\");\n\t\t}\n\t\
    \telse if (grades[i] >= 1.3) {\n\t\t\tresult.push_back(\"C-\");\n\t\t}\n\t\telse\
    \ if (grades[i] >= 1.0) {\n\t\t\tresult.push_back(\"D+\");\n\t\t}\n\t\telse if\
    \ (grades[i] >= 0.7) {\n\t\t\tresult.push_back(\"D\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 0.0) {\n\t\t\tresult.push_back(\"D-\");\n\t\t}\n\t\telse {\n\t\t\tresult.push_back(\"\
    E\");\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpt68owbg5: /tmp/tmpt68owbg5.cpp:71: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpawa3qgqo: /tmp/tmpawa3qgqo.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpuhol8o0n: /tmp/tmpuhol8o0n.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp1_b26i1v: /tmp/tmp1_b26i1v.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpmoh6l9iw: /tmp/tmpmoh6l9iw.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmptyyew6az: /tmp/tmptyyew6az.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp1_l_pemc: /tmp/tmp1_l_pemc.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpw_r6nfgz: /tmp/tmpw_r6nfgz.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ > 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmppcxmxs9m: /tmp/tmppcxmxs9m.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpzgupwrsl: /tmp/tmpzgupwrsl.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpwxhyfdxk: /tmp/tmpwxhyfdxk.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpnc3z6a4p: /tmp/tmpnc3z6a4p.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpwvwup2y4: /tmp/tmpwvwup2y4.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpva7c6t0h: /tmp/tmpva7c6t0h.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp3y56i6sd: /tmp/tmp3y56i6sd.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (float grade : grades) {\n        if (grade >= 4.0)\
    \ {\n            letter_grades.push_back(\"A+\");\n        } else if (grade >=\
    \ 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grade\
    \ >= 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grade\
    \ >= 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grade\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grade\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grade\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grade\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grade\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grade\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grade\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grade\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpty_45ick: /tmp/tmpty_45ick.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpmcnuyygf: /tmp/tmpmcnuyygf.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpgjdf13_6: /tmp/tmpgjdf13_6.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n      \
    \      result.push_back(\"A\");\n        } else if (grade > 3.3) {\n         \
    \   result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n           \
    \ result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp4x7npju4: /tmp/tmp4x7npju4.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp8nzu4kpo: /tmp/tmp8nzu4kpo.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmppdpmg38d: /tmp/tmppdpmg38d.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n  std::vector<std::string>\
    \ result;\n  for (int i = 0; i < grades.size(); i++) {\n    if (grades[i] == 4.0)\
    \ {\n      result.push_back(\"A+\");\n    } else if (grades[i] > 3.7) {\n    \
    \  result.push_back(\"A\");\n    } else if (grades[i] > 3.3) {\n      result.push_back(\"\
    A-\");\n    } else if (grades[i] > 3.0) {\n      result.push_back(\"B+\");\n \
    \   } else if (grades[i] > 2.7) {\n      result.push_back(\"B\");\n    } else\
    \ if (grades[i] > 2.3) {\n      result.push_back(\"B-\");\n    } else if (grades[i]\
    \ > 2.0) {\n      result.push_back(\"C+\");\n    } else if (grades[i] > 1.7) {\n\
    \      result.push_back(\"C\");\n    } else if (grades[i] > 1.3) {\n      result.push_back(\"\
    C-\");\n    } else if (grades[i] > 1.0) {\n      result.push_back(\"D+\");\n \
    \   } else if (grades[i] > 0.7) {\n      result.push_back(\"D\");\n    } else\
    \ if (grades[i] > 0.0) {\n      result.push_back(\"D-\");\n    } else {\n    \
    \  result.push_back(\"E\");\n    }\n  }\n  return result;\n}\nint main() {\n \
    \   auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp8xzhdmjl: /tmp/tmp8xzhdmjl.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpbke7dn_j: /tmp/tmpbke7dn_j.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpagmy31oo: /tmp/tmpagmy31oo.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp9z51kgbe: /tmp/tmp9z51kgbe.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmphfpvwnmg: /tmp/tmphfpvwnmg.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpdywaphid: /tmp/tmpdywaphid.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpyc79bv9c: /tmp/tmpyc79bv9c.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpqfjtkziv: /tmp/tmpqfjtkziv.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n      \
    \      result.push_back(\"A\");\n        } else if (grade > 3.3) {\n         \
    \   result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n           \
    \ result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp3mnsi6zh: /tmp/tmp3mnsi6zh.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpk7r2j3iw: /tmp/tmpk7r2j3iw.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp688c9vj0: /tmp/tmp688c9vj0.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpwiu3p30j: /tmp/tmpwiu3p30j.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmplg_hm9xf: /tmp/tmplg_hm9xf.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (float grade : grades) {\n        if (grade >= 4.0)\
    \ {\n            letter_grades.push_back(\"A+\");\n        } else if (grade >=\
    \ 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grade\
    \ >= 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grade\
    \ >= 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grade\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grade\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grade\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grade\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grade\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grade\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grade\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grade\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpb4yypi7m: /tmp/tmpb4yypi7m.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpyf32pjvd: /tmp/tmpyf32pjvd.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpk0vmqp6l: /tmp/tmpk0vmqp6l.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp7cy7_29w: /tmp/tmp7cy7_29w.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmplup5_t84: /tmp/tmplup5_t84.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n\tstd::vector<std::string>\
    \ result;\n\tfor (int i = 0; i < grades.size(); i++) {\n\t\tif (grades[i] == 4.0)\
    \ {\n\t\t\tresult.push_back(\"A+\");\n\t\t}\n\t\telse if (grades[i] >= 3.7) {\n\
    \t\t\tresult.push_back(\"A\");\n\t\t}\n\t\telse if (grades[i] >= 3.3) {\n\t\t\t\
    result.push_back(\"A-\");\n\t\t}\n\t\telse if (grades[i] >= 3.0) {\n\t\t\tresult.push_back(\"\
    B+\");\n\t\t}\n\t\telse if (grades[i] >= 2.7) {\n\t\t\tresult.push_back(\"B\"\
    );\n\t\t}\n\t\telse if (grades[i] >= 2.3) {\n\t\t\tresult.push_back(\"B-\");\n\
    \t\t}\n\t\telse if (grades[i] >= 2.0) {\n\t\t\tresult.push_back(\"C+\");\n\t\t\
    }\n\t\telse if (grades[i] >= 1.7) {\n\t\t\tresult.push_back(\"C\");\n\t\t}\n\t\
    \telse if (grades[i] >= 1.3) {\n\t\t\tresult.push_back(\"C-\");\n\t\t}\n\t\telse\
    \ if (grades[i] >= 1.0) {\n\t\t\tresult.push_back(\"D+\");\n\t\t}\n\t\telse if\
    \ (grades[i] >= 0.7) {\n\t\t\tresult.push_back(\"D\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 0.0) {\n\t\t\tresult.push_back(\"D-\");\n\t\t}\n\t\telse {\n\t\t\tresult.push_back(\"\
    E\");\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpmje7yx2h: /tmp/tmpmje7yx2h.cpp:71: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp9903wxhm: /tmp/tmp9903wxhm.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (float grade : grades) {\n        if (grade == 4.0)\
    \ {\n            letter_grades.push_back(\"A+\");\n        } else if (grade >\
    \ 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grade\
    \ > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grade\
    \ > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grade\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grade\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grade\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grade\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grade\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grade\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grade\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grade\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpxln_o840: /tmp/tmpxln_o840.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpoo3l56ut: /tmp/tmpoo3l56ut.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpt9yu98rs: /tmp/tmpt9yu98rs.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n\
    \            letter_grades.push_back(\"A+\");\n        } else if (grade >= 3.7)\
    \ {\n            letter_grades.push_back(\"A\");\n        } else if (grade >=\
    \ 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grade\
    \ >= 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grade\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grade\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grade\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grade\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grade\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grade\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grade\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grade\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpdzmaftdw: /tmp/tmpdzmaftdw.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmphj4n1_uv: /tmp/tmphj4n1_uv.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpgjj2zxrw: /tmp/tmpgjj2zxrw.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n      \
    \      result.push_back(\"A\");\n        } else if (grade > 3.3) {\n         \
    \   result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n           \
    \ result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp2c210l9e: /tmp/tmp2c210l9e.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpb2nyoqqz: /tmp/tmpb2nyoqqz.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpg8bsvk4f: /tmp/tmpg8bsvk4f.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpfa571szr: /tmp/tmpfa571szr.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n  std::vector<std::string>\
    \ result;\n  for (auto grade : grades) {\n    if (grade >= 4.0) {\n      result.push_back(\"\
    A+\");\n    } else if (grade >= 3.7) {\n      result.push_back(\"A\");\n    }\
    \ else if (grade >= 3.3) {\n      result.push_back(\"A-\");\n    } else if (grade\
    \ >= 3.0) {\n      result.push_back(\"B+\");\n    } else if (grade >= 2.7) {\n\
    \      result.push_back(\"B\");\n    } else if (grade >= 2.3) {\n      result.push_back(\"\
    B-\");\n    } else if (grade >= 2.0) {\n      result.push_back(\"C+\");\n    }\
    \ else if (grade >= 1.7) {\n      result.push_back(\"C\");\n    } else if (grade\
    \ >= 1.3) {\n      result.push_back(\"C-\");\n    } else if (grade >= 1.0) {\n\
    \      result.push_back(\"D+\");\n    } else if (grade >= 0.7) {\n      result.push_back(\"\
    D\");\n    } else if (grade >= 0.0) {\n      result.push_back(\"D-\");\n    }\
    \ else {\n      result.push_back(\"E\");\n    }\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp0uwmjoo2: /tmp/tmp0uwmjoo2.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n\tstd::vector<std::string>\
    \ result;\n\tfor (int i = 0; i < grades.size(); i++) {\n\t\tif (grades[i] >= 4.0)\
    \ {\n\t\t\tresult.push_back(\"A+\");\n\t\t}\n\t\telse if (grades[i] >= 3.7) {\n\
    \t\t\tresult.push_back(\"A\");\n\t\t}\n\t\telse if (grades[i] >= 3.3) {\n\t\t\t\
    result.push_back(\"A-\");\n\t\t}\n\t\telse if (grades[i] >= 3.0) {\n\t\t\tresult.push_back(\"\
    B+\");\n\t\t}\n\t\telse if (grades[i] >= 2.7) {\n\t\t\tresult.push_back(\"B\"\
    );\n\t\t}\n\t\telse if (grades[i] >= 2.3) {\n\t\t\tresult.push_back(\"B-\");\n\
    \t\t}\n\t\telse if (grades[i] >= 2.0) {\n\t\t\tresult.push_back(\"C+\");\n\t\t\
    }\n\t\telse if (grades[i] >= 1.7) {\n\t\t\tresult.push_back(\"C\");\n\t\t}\n\t\
    \telse if (grades[i] >= 1.3) {\n\t\t\tresult.push_back(\"C-\");\n\t\t}\n\t\telse\
    \ if (grades[i] >= 1.0) {\n\t\t\tresult.push_back(\"D+\");\n\t\t}\n\t\telse if\
    \ (grades[i] >= 0.7) {\n\t\t\tresult.push_back(\"D\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 0.0) {\n\t\t\tresult.push_back(\"D-\");\n\t\t}\n\t\telse {\n\t\t\tresult.push_back(\"\
    E\");\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpjfwbishv: /tmp/tmpjfwbishv.cpp:71: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp640c9ohe: /tmp/tmp640c9ohe.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmph1wk6z4m: /tmp/tmph1wk6z4m.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpvr9a13ax: /tmp/tmpvr9a13ax.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpqtajpk9l: /tmp/tmpqtajpk9l.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpq8m281yj: /tmp/tmpq8m281yj.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpozrlnamw: /tmp/tmpozrlnamw.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmphvdf9f6p: /tmp/tmphvdf9f6p.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpdjoo9eqp: /tmp/tmpdjoo9eqp.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpqo32zx4k: /tmp/tmpqo32zx4k.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n      \
    \      result.push_back(\"A\");\n        } else if (grade > 3.3) {\n         \
    \   result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n           \
    \ result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpx1mkmly0: /tmp/tmpx1mkmly0.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpv036jr41: /tmp/tmpv036jr41.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpaa9aea6_: /tmp/tmpaa9aea6_.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpz1pljxar: /tmp/tmpz1pljxar.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpz77mnoi4: /tmp/tmpz77mnoi4.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpwp4l987_: /tmp/tmpwp4l987_.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade == 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade > 3.3) {\n        \
    \    result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n          \
    \  result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpzqi2dzmc: /tmp/tmpzqi2dzmc.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp4atav86_: /tmp/tmp4atav86_.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp1zffgv2x: /tmp/tmp1zffgv2x.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp8ypjjwrw: /tmp/tmp8ypjjwrw.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp4nfxqhzt: /tmp/tmp4nfxqhzt.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpnc79wxhj: /tmp/tmpnc79wxhj.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmptg1qffy0: /tmp/tmptg1qffy0.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmptt29v6o0: /tmp/tmptt29v6o0.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpopqps547: /tmp/tmpopqps547.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpal2vpvzt: /tmp/tmpal2vpvzt.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpe8vczk9c: /tmp/tmpe8vczk9c.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpvpbbakfz: /tmp/tmpvpbbakfz.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n\
    \            letter_grades.push_back(\"A+\");\n        } else if (grade >= 3.7)\
    \ {\n            letter_grades.push_back(\"A\");\n        } else if (grade >=\
    \ 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grade\
    \ >= 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grade\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grade\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grade\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grade\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grade\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grade\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grade\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grade\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpuvj7gbds: /tmp/tmpuvj7gbds.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp9z8rj63s: /tmp/tmp9z8rj63s.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpzuxmi72i: /tmp/tmpzuxmi72i.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n\tstd::vector<std::string>\
    \ letter_grades;\n\tfor (int i = 0; i < grades.size(); i++) {\n\t\tif (grades[i]\
    \ >= 4.0) {\n\t\t\tletter_grades.push_back(\"A+\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 3.7) {\n\t\t\tletter_grades.push_back(\"A\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 3.3) {\n\t\t\tletter_grades.push_back(\"A-\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 3.0) {\n\t\t\tletter_grades.push_back(\"B+\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 2.7) {\n\t\t\tletter_grades.push_back(\"B\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 2.3) {\n\t\t\tletter_grades.push_back(\"B-\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 2.0) {\n\t\t\tletter_grades.push_back(\"C+\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 1.7) {\n\t\t\tletter_grades.push_back(\"C\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 1.3) {\n\t\t\tletter_grades.push_back(\"C-\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 1.0) {\n\t\t\tletter_grades.push_back(\"D+\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 0.7) {\n\t\t\tletter_grades.push_back(\"D\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 0.0) {\n\t\t\tletter_grades.push_back(\"D-\");\n\t\t}\n\t\telse {\n\t\t\t\
    letter_grades.push_back(\"E\");\n\t\t}\n\t}\n\treturn letter_grades;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp33x02hdr: /tmp/tmp33x02hdr.cpp:71: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n\
    \            letter_grades.push_back(\"A+\");\n        } else if (grade >= 3.7)\
    \ {\n            letter_grades.push_back(\"A\");\n        } else if (grade >=\
    \ 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grade\
    \ >= 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grade\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grade\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grade\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grade\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grade\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grade\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grade\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grade\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpl71_701i: /tmp/tmpl71_701i.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpw0nel6e9: /tmp/tmpw0nel6e9.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp7fau9drz: /tmp/tmp7fau9drz.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpr1hlzv89: /tmp/tmpr1hlzv89.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmplf4p9kq0: /tmp/tmplf4p9kq0.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n  std::vector<std::string>\
    \ result;\n  for (auto grade : grades) {\n    if (grade >= 4.0) {\n      result.push_back(\"\
    A+\");\n    } else if (grade >= 3.7) {\n      result.push_back(\"A\");\n    }\
    \ else if (grade >= 3.3) {\n      result.push_back(\"A-\");\n    } else if (grade\
    \ >= 3.0) {\n      result.push_back(\"B+\");\n    } else if (grade >= 2.7) {\n\
    \      result.push_back(\"B\");\n    } else if (grade >= 2.3) {\n      result.push_back(\"\
    B-\");\n    } else if (grade >= 2.0) {\n      result.push_back(\"C+\");\n    }\
    \ else if (grade >= 1.7) {\n      result.push_back(\"C\");\n    } else if (grade\
    \ >= 1.3) {\n      result.push_back(\"C-\");\n    } else if (grade >= 1.0) {\n\
    \      result.push_back(\"D+\");\n    } else if (grade >= 0.7) {\n      result.push_back(\"\
    D\");\n    } else if (grade >= 0.0) {\n      result.push_back(\"D-\");\n    }\
    \ else {\n      result.push_back(\"E\");\n    }\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpmpc_t_ds: /tmp/tmpmpc_t_ds.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmptj5vk3or: /tmp/tmptj5vk3or.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpt1lscjzd: /tmp/tmpt1lscjzd.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n\tstd::vector<std::string>\
    \ result;\n\tfor (int i = 0; i < grades.size(); i++) {\n\t\tif (grades[i] == 4.0)\
    \ {\n\t\t\tresult.push_back(\"A+\");\n\t\t}\n\t\telse if (grades[i] > 3.7) {\n\
    \t\t\tresult.push_back(\"A\");\n\t\t}\n\t\telse if (grades[i] > 3.3) {\n\t\t\t\
    result.push_back(\"A-\");\n\t\t}\n\t\telse if (grades[i] > 3.0) {\n\t\t\tresult.push_back(\"\
    B+\");\n\t\t}\n\t\telse if (grades[i] > 2.7) {\n\t\t\tresult.push_back(\"B\");\n\
    \t\t}\n\t\telse if (grades[i] > 2.3) {\n\t\t\tresult.push_back(\"B-\");\n\t\t\
    }\n\t\telse if (grades[i] > 2.0) {\n\t\t\tresult.push_back(\"C+\");\n\t\t}\n\t\
    \telse if (grades[i] > 1.7) {\n\t\t\tresult.push_back(\"C\");\n\t\t}\n\t\telse\
    \ if (grades[i] > 1.3) {\n\t\t\tresult.push_back(\"C-\");\n\t\t}\n\t\telse if\
    \ (grades[i] > 1.0) {\n\t\t\tresult.push_back(\"D+\");\n\t\t}\n\t\telse if (grades[i]\
    \ > 0.7) {\n\t\t\tresult.push_back(\"D\");\n\t\t}\n\t\telse if (grades[i] > 0.0)\
    \ {\n\t\t\tresult.push_back(\"D-\");\n\t\t}\n\t\telse {\n\t\t\tresult.push_back(\"\
    E\");\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp4bjlaxsf: /tmp/tmp4bjlaxsf.cpp:71: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmps5la_oii: /tmp/tmps5la_oii.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpojaol_ax: /tmp/tmpojaol_ax.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpzjyar8k_: /tmp/tmpzjyar8k_.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp47z8pr42: /tmp/tmp47z8pr42.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n      \
    \      result.push_back(\"A\");\n        } else if (grade > 3.3) {\n         \
    \   result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n           \
    \ result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpf3vloz3j: /tmp/tmpf3vloz3j.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n      \
    \      result.push_back(\"A\");\n        } else if (grade > 3.3) {\n         \
    \   result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n           \
    \ result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpejhszq45: /tmp/tmpejhszq45.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n\tstd::vector<std::string>\
    \ result;\n\tfor (int i = 0; i < grades.size(); i++) {\n\t\tif (grades[i] == 4.0)\
    \ {\n\t\t\tresult.push_back(\"A+\");\n\t\t}\n\t\telse if (grades[i] > 3.7) {\n\
    \t\t\tresult.push_back(\"A\");\n\t\t}\n\t\telse if (grades[i] > 3.3) {\n\t\t\t\
    result.push_back(\"A-\");\n\t\t}\n\t\telse if (grades[i] > 3.0) {\n\t\t\tresult.push_back(\"\
    B+\");\n\t\t}\n\t\telse if (grades[i] > 2.7) {\n\t\t\tresult.push_back(\"B\");\n\
    \t\t}\n\t\telse if (grades[i] > 2.3) {\n\t\t\tresult.push_back(\"B-\");\n\t\t\
    }\n\t\telse if (grades[i] > 2.0) {\n\t\t\tresult.push_back(\"C+\");\n\t\t}\n\t\
    \telse if (grades[i] > 1.7) {\n\t\t\tresult.push_back(\"C\");\n\t\t}\n\t\telse\
    \ if (grades[i] > 1.3) {\n\t\t\tresult.push_back(\"C-\");\n\t\t}\n\t\telse if\
    \ (grades[i] > 1.0) {\n\t\t\tresult.push_back(\"D+\");\n\t\t}\n\t\telse if (grades[i]\
    \ > 0.7) {\n\t\t\tresult.push_back(\"D\");\n\t\t}\n\t\telse if (grades[i] > 0.0)\
    \ {\n\t\t\tresult.push_back(\"D-\");\n\t\t}\n\t\telse {\n\t\t\tresult.push_back(\"\
    E\");\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpmdz6fwfz: /tmp/tmpmdz6fwfz.cpp:71: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade == 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade > 3.3) {\n        \
    \    result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n          \
    \  result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp4tbi6hay: /tmp/tmp4tbi6hay.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp0bz1wdoy: /tmp/tmp0bz1wdoy.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp7z2jv4ml: /tmp/tmp7z2jv4ml.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpn0jdg32b: /tmp/tmpn0jdg32b.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp_0pi98j5: /tmp/tmp_0pi98j5.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n  std::vector<std::string>\
    \ result;\n  for (int i = 0; i < grades.size(); i++) {\n    if (grades[i] >= 4.0)\
    \ {\n      result.push_back(\"A+\");\n    } else if (grades[i] >= 3.7) {\n   \
    \   result.push_back(\"A\");\n    } else if (grades[i] >= 3.3) {\n      result.push_back(\"\
    A-\");\n    } else if (grades[i] >= 3.0) {\n      result.push_back(\"B+\");\n\
    \    } else if (grades[i] >= 2.7) {\n      result.push_back(\"B\");\n    } else\
    \ if (grades[i] >= 2.3) {\n      result.push_back(\"B-\");\n    } else if (grades[i]\
    \ >= 2.0) {\n      result.push_back(\"C+\");\n    } else if (grades[i] >= 1.7)\
    \ {\n      result.push_back(\"C\");\n    } else if (grades[i] >= 1.3) {\n    \
    \  result.push_back(\"C-\");\n    } else if (grades[i] >= 1.0) {\n      result.push_back(\"\
    D+\");\n    } else if (grades[i] >= 0.7) {\n      result.push_back(\"D\");\n \
    \   } else if (grades[i] >= 0.0) {\n      result.push_back(\"D-\");\n    } else\
    \ {\n      result.push_back(\"E\");\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmph3azbho5: /tmp/tmph3azbho5.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpwx64agbb: /tmp/tmpwx64agbb.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpbkp8lu4w: /tmp/tmpbkp8lu4w.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n      \
    \      result.push_back(\"A\");\n        } else if (grade > 3.3) {\n         \
    \   result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n           \
    \ result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp_rqhg3ub: /tmp/tmp_rqhg3ub.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n\tstd::vector<std::string>\
    \ letter_grades;\n\tfor (float grade : grades) {\n\t\tif (grade >= 4.0) {\n\t\t\
    \tletter_grades.push_back(\"A+\");\n\t\t}\n\t\telse if (grade >= 3.7) {\n\t\t\t\
    letter_grades.push_back(\"A\");\n\t\t}\n\t\telse if (grade >= 3.3) {\n\t\t\tletter_grades.push_back(\"\
    A-\");\n\t\t}\n\t\telse if (grade >= 3.0) {\n\t\t\tletter_grades.push_back(\"\
    B+\");\n\t\t}\n\t\telse if (grade >= 2.7) {\n\t\t\tletter_grades.push_back(\"\
    B\");\n\t\t}\n\t\telse if (grade >= 2.3) {\n\t\t\tletter_grades.push_back(\"B-\"\
    );\n\t\t}\n\t\telse if (grade >= 2.0) {\n\t\t\tletter_grades.push_back(\"C+\"\
    );\n\t\t}\n\t\telse if (grade >= 1.7) {\n\t\t\tletter_grades.push_back(\"C\");\n\
    \t\t}\n\t\telse if (grade >= 1.3) {\n\t\t\tletter_grades.push_back(\"C-\");\n\t\
    \t}\n\t\telse if (grade >= 1.0) {\n\t\t\tletter_grades.push_back(\"D+\");\n\t\t\
    }\n\t\telse if (grade >= 0.7) {\n\t\t\tletter_grades.push_back(\"D\");\n\t\t}\n\
    \t\telse if (grade >= 0.0) {\n\t\t\tletter_grades.push_back(\"D-\");\n\t\t}\n\t\
    \telse {\n\t\t\tletter_grades.push_back(\"E\");\n\t\t}\n\t}\n\treturn letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpls7q9fb9: /tmp/tmpls7q9fb9.cpp:71: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpod1r4b72: /tmp/tmpod1r4b72.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpm7kavnal: /tmp/tmpm7kavnal.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpkx1n06a6: /tmp/tmpkx1n06a6.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n      \
    \      result.push_back(\"A\");\n        } else if (grade > 3.3) {\n         \
    \   result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n           \
    \ result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmptd7td40h: /tmp/tmptd7td40h.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpkprm9tye: /tmp/tmpkprm9tye.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpdqlu_7te: /tmp/tmpdqlu_7te.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp4nl77esy: /tmp/tmp4nl77esy.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp5frki4uj: /tmp/tmp5frki4uj.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp95nigqbd: /tmp/tmp95nigqbd.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmplanbx96o: /tmp/tmplanbx96o.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpe4hzmeol: /tmp/tmpe4hzmeol.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpjgrwpn5k: /tmp/tmpjgrwpn5k.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmppep8pu17: /tmp/tmppep8pu17.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpxjnzi18d: /tmp/tmpxjnzi18d.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n      \
    \      result.push_back(\"A\");\n        } else if (grade > 3.3) {\n         \
    \   result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n           \
    \ result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpht5_q5ax: /tmp/tmpht5_q5ax.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpegr4ddmy: /tmp/tmpegr4ddmy.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp_2zd4o6u: /tmp/tmp_2zd4o6u.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpyy1edlli: /tmp/tmpyy1edlli.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n  std::vector<std::string>\
    \ result;\n  for (auto grade : grades) {\n    if (grade >= 4.0) {\n      result.push_back(\"\
    A+\");\n    } else if (grade >= 3.7) {\n      result.push_back(\"A\");\n    }\
    \ else if (grade >= 3.3) {\n      result.push_back(\"A-\");\n    } else if (grade\
    \ >= 3.0) {\n      result.push_back(\"B+\");\n    } else if (grade >= 2.7) {\n\
    \      result.push_back(\"B\");\n    } else if (grade >= 2.3) {\n      result.push_back(\"\
    B-\");\n    } else if (grade >= 2.0) {\n      result.push_back(\"C+\");\n    }\
    \ else if (grade >= 1.7) {\n      result.push_back(\"C\");\n    } else if (grade\
    \ >= 1.3) {\n      result.push_back(\"C-\");\n    } else if (grade >= 1.0) {\n\
    \      result.push_back(\"D+\");\n    } else if (grade >= 0.7) {\n      result.push_back(\"\
    D\");\n    } else if (grade >= 0.0) {\n      result.push_back(\"D-\");\n    }\
    \ else {\n      result.push_back(\"E\");\n    }\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp0v6f21tx: /tmp/tmp0v6f21tx.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpht4dj68u: /tmp/tmpht4dj68u.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp04wdlf0h: /tmp/tmp04wdlf0h.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpjgz12tjb: /tmp/tmpjgz12tjb.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
