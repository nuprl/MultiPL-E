name: HumanEval_81_numerical_letter_grade
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ ans;\n    for(int i = 0; i < grades.size(); i++){\n        if(grades[i] >= 4.0)\
    \ ans.push_back(\"A+\");\n        else if(grades[i] >= 3.7) ans.push_back(\"A\"\
    );\n        else if(grades[i] >= 3.3) ans.push_back(\"A-\");\n        else if(grades[i]\
    \ >= 3.0) ans.push_back(\"B+\");\n        else if(grades[i] >= 2.7) ans.push_back(\"\
    B\");\n        else if(grades[i] >= 2.3) ans.push_back(\"B-\");\n        else\
    \ if(grades[i] >= 2.0) ans.push_back(\"C+\");\n        else if(grades[i] >= 1.7)\
    \ ans.push_back(\"C\");\n        else if(grades[i] >= 1.3) ans.push_back(\"C-\"\
    );\n        else if(grades[i] >= 1.0) ans.push_back(\"D+\");\n        else if(grades[i]\
    \ >= 0.7) ans.push_back(\"D\");\n        else if(grades[i] >= 0.0) ans.push_back(\"\
    D-\");\n        else ans.push_back(\"E\");\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpm4xso5uj: /tmp/tmpm4xso5uj.cpp:45: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp59ovzbl3: /tmp/tmp59ovzbl3.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n      \
    \      result.push_back(\"A\");\n        } else if (grade > 3.3) {\n         \
    \   result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n           \
    \ result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpu87zaa6v: /tmp/tmpu87zaa6v.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp0qwhoazg: /tmp/tmp0qwhoazg.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n\tstd::vector<std::string>\
    \ result;\n\tfor (int i = 0; i < grades.size(); i++) {\n\t\tif (grades[i] == 4.0)\
    \ {\n\t\t\tresult.push_back(\"A+\");\n\t\t}\n\t\telse if (grades[i] > 3.7) {\n\
    \t\t\tresult.push_back(\"A\");\n\t\t}\n\t\telse if (grades[i] > 3.3) {\n\t\t\t\
    result.push_back(\"A-\");\n\t\t}\n\t\telse if (grades[i] > 3.0) {\n\t\t\tresult.push_back(\"\
    B+\");\n\t\t}\n\t\telse if (grades[i] > 2.7) {\n\t\t\tresult.push_back(\"B\");\n\
    \t\t}\n\t\telse if (grades[i] > 2.3) {\n\t\t\tresult.push_back(\"B-\");\n\t\t\
    }\n\t\telse if (grades[i] > 2.0) {\n\t\t\tresult.push_back(\"C+\");\n\t\t}\n\t\
    \telse if (grades[i] > 1.7) {\n\t\t\tresult.push_back(\"C\");\n\t\t}\n\t\telse\
    \ if (grades[i] > 1.3) {\n\t\t\tresult.push_back(\"C-\");\n\t\t}\n\t\telse if\
    \ (grades[i] > 1.0) {\n\t\t\tresult.push_back(\"D+\");\n\t\t}\n\t\telse if (grades[i]\
    \ > 0.7) {\n\t\t\tresult.push_back(\"D\");\n\t\t}\n\t\telse if (grades[i] > 0.0)\
    \ {\n\t\t\tresult.push_back(\"D-\");\n\t\t}\n\t\telse {\n\t\t\tresult.push_back(\"\
    E\");\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpah5lfwgr: /tmp/tmpah5lfwgr.cpp:71: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp6t528uc5: /tmp/tmp6t528uc5.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n  std::vector<std::string>\
    \ letter_grades;\n  for (int i = 0; i < grades.size(); i++) {\n    if (grades[i]\
    \ >= 4.0) {\n      letter_grades.push_back(\"A+\");\n    } else if (grades[i]\
    \ >= 3.7) {\n      letter_grades.push_back(\"A\");\n    } else if (grades[i] >=\
    \ 3.3) {\n      letter_grades.push_back(\"A-\");\n    } else if (grades[i] >=\
    \ 3.0) {\n      letter_grades.push_back(\"B+\");\n    } else if (grades[i] >=\
    \ 2.7) {\n      letter_grades.push_back(\"B\");\n    } else if (grades[i] >= 2.3)\
    \ {\n      letter_grades.push_back(\"B-\");\n    } else if (grades[i] >= 2.0)\
    \ {\n      letter_grades.push_back(\"C+\");\n    } else if (grades[i] >= 1.7)\
    \ {\n      letter_grades.push_back(\"C\");\n    } else if (grades[i] >= 1.3) {\n\
    \      letter_grades.push_back(\"C-\");\n    } else if (grades[i] >= 1.0) {\n\
    \      letter_grades.push_back(\"D+\");\n    } else if (grades[i] >= 0.7) {\n\
    \      letter_grades.push_back(\"D\");\n    } else if (grades[i] >= 0.0) {\n \
    \     letter_grades.push_back(\"D-\");\n    } else {\n      letter_grades.push_back(\"\
    E\");\n    }\n  }\n  return letter_grades;\n}\nint main() {\n    auto candidate\
    \ = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpxiyrdg8p: /tmp/tmpxiyrdg8p.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n\
    \            letter_grades.push_back(\"A+\");\n        } else if (grade >= 3.7)\
    \ {\n            letter_grades.push_back(\"A\");\n        } else if (grade >=\
    \ 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grade\
    \ >= 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grade\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grade\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grade\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grade\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grade\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grade\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grade\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grade\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpowbrm40j: /tmp/tmpowbrm40j.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpshtnqax0: /tmp/tmpshtnqax0.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpzj4czr9i: /tmp/tmpzj4czr9i.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n  std::vector<std::string>\
    \ letter_grades;\n  for (int i = 0; i < grades.size(); i++) {\n    if (grades[i]\
    \ == 4.0) {\n      letter_grades.push_back(\"A+\");\n    } else if (grades[i]\
    \ > 3.7) {\n      letter_grades.push_back(\"A\");\n    } else if (grades[i] >\
    \ 3.3) {\n      letter_grades.push_back(\"A-\");\n    } else if (grades[i] > 3.0)\
    \ {\n      letter_grades.push_back(\"B+\");\n    } else if (grades[i] > 2.7) {\n\
    \      letter_grades.push_back(\"B\");\n    } else if (grades[i] > 2.3) {\n  \
    \    letter_grades.push_back(\"B-\");\n    } else if (grades[i] > 2.0) {\n   \
    \   letter_grades.push_back(\"C+\");\n    } else if (grades[i] > 1.7) {\n    \
    \  letter_grades.push_back(\"C\");\n    } else if (grades[i] > 1.3) {\n      letter_grades.push_back(\"\
    C-\");\n    } else if (grades[i] > 1.0) {\n      letter_grades.push_back(\"D+\"\
    );\n    } else if (grades[i] > 0.7) {\n      letter_grades.push_back(\"D\");\n\
    \    } else if (grades[i] > 0.0) {\n      letter_grades.push_back(\"D-\");\n \
    \   } else {\n      letter_grades.push_back(\"E\");\n    }\n  }\n  return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmptfxfe52l: /tmp/tmptfxfe52l.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n      \
    \      result.push_back(\"A\");\n        } else if (grade > 3.3) {\n         \
    \   result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n           \
    \ result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmptstqffzh: /tmp/tmptstqffzh.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp0lecmr5z: /tmp/tmp0lecmr5z.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmptcr6ci7h: /tmp/tmptcr6ci7h.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpd5480n9h: /tmp/tmpd5480n9h.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpql5swof1: /tmp/tmpql5swof1.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (float grade : grades) {\n        if (grade >= 4.0)\
    \ {\n            letter_grades.push_back(\"A+\");\n        } else if (grade >=\
    \ 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grade\
    \ >= 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grade\
    \ >= 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grade\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grade\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grade\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grade\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grade\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grade\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grade\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grade\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp7dlm13tj: /tmp/tmp7dlm13tj.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpif4ywn72: /tmp/tmpif4ywn72.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpb_cbwmic: /tmp/tmpb_cbwmic.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpgwxp1871: /tmp/tmpgwxp1871.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpwickw7jj: /tmp/tmpwickw7jj.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n      \
    \      result.push_back(\"A\");\n        } else if (grade > 3.3) {\n         \
    \   result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n           \
    \ result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpbp3cd0_k: /tmp/tmpbp3cd0_k.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n\
    \            letter_grades.push_back(\"A+\");\n        } else if (grade >= 3.7)\
    \ {\n            letter_grades.push_back(\"A\");\n        } else if (grade >=\
    \ 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grade\
    \ >= 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grade\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grade\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grade\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grade\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grade\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grade\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grade\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grade\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmps4phoip5: /tmp/tmps4phoip5.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp9h070xmu: /tmp/tmp9h070xmu.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpg0dg1wjd: /tmp/tmpg0dg1wjd.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmptjfjq8i4: /tmp/tmptjfjq8i4.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpofbub_x4: /tmp/tmpofbub_x4.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n\tstd::vector<std::string>\
    \ result;\n\tfor (int i = 0; i < grades.size(); i++) {\n\t\tif (grades[i] >= 4.0)\
    \ {\n\t\t\tresult.push_back(\"A+\");\n\t\t}\n\t\telse if (grades[i] >= 3.7) {\n\
    \t\t\tresult.push_back(\"A\");\n\t\t}\n\t\telse if (grades[i] >= 3.3) {\n\t\t\t\
    result.push_back(\"A-\");\n\t\t}\n\t\telse if (grades[i] >= 3.0) {\n\t\t\tresult.push_back(\"\
    B+\");\n\t\t}\n\t\telse if (grades[i] >= 2.7) {\n\t\t\tresult.push_back(\"B\"\
    );\n\t\t}\n\t\telse if (grades[i] >= 2.3) {\n\t\t\tresult.push_back(\"B-\");\n\
    \t\t}\n\t\telse if (grades[i] >= 2.0) {\n\t\t\tresult.push_back(\"C+\");\n\t\t\
    }\n\t\telse if (grades[i] >= 1.7) {\n\t\t\tresult.push_back(\"C\");\n\t\t}\n\t\
    \telse if (grades[i] >= 1.3) {\n\t\t\tresult.push_back(\"C-\");\n\t\t}\n\t\telse\
    \ if (grades[i] >= 1.0) {\n\t\t\tresult.push_back(\"D+\");\n\t\t}\n\t\telse if\
    \ (grades[i] >= 0.7) {\n\t\t\tresult.push_back(\"D\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 0.0) {\n\t\t\tresult.push_back(\"D-\");\n\t\t}\n\t\telse {\n\t\t\tresult.push_back(\"\
    E\");\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp7_yl1wec: /tmp/tmp7_yl1wec.cpp:71: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpphw_ztlg: /tmp/tmpphw_ztlg.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpj71cpfht: /tmp/tmpj71cpfht.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpwn_q85gh: /tmp/tmpwn_q85gh.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmptd4ein9i: /tmp/tmptd4ein9i.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpx0sjfbbe: /tmp/tmpx0sjfbbe.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp_6fi7hpv: /tmp/tmp_6fi7hpv.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpax98o2q0: /tmp/tmpax98o2q0.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n      \
    \      result.push_back(\"A\");\n        } else if (grade > 3.3) {\n         \
    \   result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n           \
    \ result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpxmfkmrux: /tmp/tmpxmfkmrux.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmps9o4cf66: /tmp/tmps9o4cf66.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpv2z5ug4w: /tmp/tmpv2z5ug4w.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp_03ipux3: /tmp/tmp_03ipux3.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpymwqltfr: /tmp/tmpymwqltfr.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp0o9_pgc8: /tmp/tmp0o9_pgc8.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmprcjg4cc1: /tmp/tmprcjg4cc1.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpywz9ly34: /tmp/tmpywz9ly34.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n      \
    \      result.push_back(\"A\");\n        } else if (grade > 3.3) {\n         \
    \   result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n           \
    \ result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpwq3u_v0e: /tmp/tmpwq3u_v0e.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmppa_f5b1y: /tmp/tmppa_f5b1y.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n\
    \            letter_grades.push_back(\"A+\");\n        } else if (grade > 3.7)\
    \ {\n            letter_grades.push_back(\"A\");\n        } else if (grade > 3.3)\
    \ {\n            letter_grades.push_back(\"A-\");\n        } else if (grade >\
    \ 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grade\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grade\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grade\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grade\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grade\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grade\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grade\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grade\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpxex8oor3: /tmp/tmpxex8oor3.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpvccazrl2: /tmp/tmpvccazrl2.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpih7brc85: /tmp/tmpih7brc85.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp48l78_bx: /tmp/tmp48l78_bx.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n      \
    \      result.push_back(\"A\");\n        } else if (grade > 3.3) {\n         \
    \   result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n           \
    \ result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpgkmrh875: /tmp/tmpgkmrh875.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpgfsxh8or: /tmp/tmpgfsxh8or.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpj2zbkw_l: /tmp/tmpj2zbkw_l.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpe0fkabu5: /tmp/tmpe0fkabu5.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpbfidiom6: /tmp/tmpbfidiom6.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp2755d3hh: /tmp/tmp2755d3hh.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpzabp6dv7: /tmp/tmpzabp6dv7.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmplje8d86c: /tmp/tmplje8d86c.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp1fx_t_9r: /tmp/tmp1fx_t_9r.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpnr12hlsu: /tmp/tmpnr12hlsu.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmprb4pwoll: /tmp/tmprb4pwoll.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp3z7x036c: /tmp/tmp3z7x036c.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpau9rj3bj: /tmp/tmpau9rj3bj.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade == 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade > 3.3) {\n        \
    \    result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n          \
    \  result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpg613gqwi: /tmp/tmpg613gqwi.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpmfyd96yt: /tmp/tmpmfyd96yt.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp84gbx00f: /tmp/tmp84gbx00f.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp357pptwi: /tmp/tmp357pptwi.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp7gqgbhat: /tmp/tmp7gqgbhat.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpaa9ow5e1: /tmp/tmpaa9ow5e1.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n\tstd::vector<std::string>\
    \ result;\n\tfor (int i = 0; i < grades.size(); i++) {\n\t\tif (grades[i] >= 4.0)\
    \ {\n\t\t\tresult.push_back(\"A+\");\n\t\t}\n\t\telse if (grades[i] >= 3.7) {\n\
    \t\t\tresult.push_back(\"A\");\n\t\t}\n\t\telse if (grades[i] >= 3.3) {\n\t\t\t\
    result.push_back(\"A-\");\n\t\t}\n\t\telse if (grades[i] >= 3.0) {\n\t\t\tresult.push_back(\"\
    B+\");\n\t\t}\n\t\telse if (grades[i] >= 2.7) {\n\t\t\tresult.push_back(\"B\"\
    );\n\t\t}\n\t\telse if (grades[i] >= 2.3) {\n\t\t\tresult.push_back(\"B-\");\n\
    \t\t}\n\t\telse if (grades[i] >= 2.0) {\n\t\t\tresult.push_back(\"C+\");\n\t\t\
    }\n\t\telse if (grades[i] >= 1.7) {\n\t\t\tresult.push_back(\"C\");\n\t\t}\n\t\
    \telse if (grades[i] >= 1.3) {\n\t\t\tresult.push_back(\"C-\");\n\t\t}\n\t\telse\
    \ if (grades[i] >= 1.0) {\n\t\t\tresult.push_back(\"D+\");\n\t\t}\n\t\telse if\
    \ (grades[i] >= 0.7) {\n\t\t\tresult.push_back(\"D\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 0.0) {\n\t\t\tresult.push_back(\"D-\");\n\t\t}\n\t\telse {\n\t\t\tresult.push_back(\"\
    E\");\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpt68owbg5: /tmp/tmpt68owbg5.cpp:71: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpawa3qgqo: /tmp/tmpawa3qgqo.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpuhol8o0n: /tmp/tmpuhol8o0n.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp1_b26i1v: /tmp/tmp1_b26i1v.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpmoh6l9iw: /tmp/tmpmoh6l9iw.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmptyyew6az: /tmp/tmptyyew6az.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp1_l_pemc: /tmp/tmp1_l_pemc.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpw_r6nfgz: /tmp/tmpw_r6nfgz.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ > 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmppcxmxs9m: /tmp/tmppcxmxs9m.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpzgupwrsl: /tmp/tmpzgupwrsl.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpwxhyfdxk: /tmp/tmpwxhyfdxk.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpnc3z6a4p: /tmp/tmpnc3z6a4p.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpwvwup2y4: /tmp/tmpwvwup2y4.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpva7c6t0h: /tmp/tmpva7c6t0h.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp3y56i6sd: /tmp/tmp3y56i6sd.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (float grade : grades) {\n        if (grade >= 4.0)\
    \ {\n            letter_grades.push_back(\"A+\");\n        } else if (grade >=\
    \ 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grade\
    \ >= 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grade\
    \ >= 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grade\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grade\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grade\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grade\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grade\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grade\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grade\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grade\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpty_45ick: /tmp/tmpty_45ick.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpmcnuyygf: /tmp/tmpmcnuyygf.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpgjdf13_6: /tmp/tmpgjdf13_6.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n      \
    \      result.push_back(\"A\");\n        } else if (grade > 3.3) {\n         \
    \   result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n           \
    \ result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp4x7npju4: /tmp/tmp4x7npju4.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp8nzu4kpo: /tmp/tmp8nzu4kpo.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmppdpmg38d: /tmp/tmppdpmg38d.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n  std::vector<std::string>\
    \ result;\n  for (int i = 0; i < grades.size(); i++) {\n    if (grades[i] == 4.0)\
    \ {\n      result.push_back(\"A+\");\n    } else if (grades[i] > 3.7) {\n    \
    \  result.push_back(\"A\");\n    } else if (grades[i] > 3.3) {\n      result.push_back(\"\
    A-\");\n    } else if (grades[i] > 3.0) {\n      result.push_back(\"B+\");\n \
    \   } else if (grades[i] > 2.7) {\n      result.push_back(\"B\");\n    } else\
    \ if (grades[i] > 2.3) {\n      result.push_back(\"B-\");\n    } else if (grades[i]\
    \ > 2.0) {\n      result.push_back(\"C+\");\n    } else if (grades[i] > 1.7) {\n\
    \      result.push_back(\"C\");\n    } else if (grades[i] > 1.3) {\n      result.push_back(\"\
    C-\");\n    } else if (grades[i] > 1.0) {\n      result.push_back(\"D+\");\n \
    \   } else if (grades[i] > 0.7) {\n      result.push_back(\"D\");\n    } else\
    \ if (grades[i] > 0.0) {\n      result.push_back(\"D-\");\n    } else {\n    \
    \  result.push_back(\"E\");\n    }\n  }\n  return result;\n}\nint main() {\n \
    \   auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp8xzhdmjl: /tmp/tmp8xzhdmjl.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpbke7dn_j: /tmp/tmpbke7dn_j.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpagmy31oo: /tmp/tmpagmy31oo.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp9z51kgbe: /tmp/tmp9z51kgbe.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmphfpvwnmg: /tmp/tmphfpvwnmg.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpdywaphid: /tmp/tmpdywaphid.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpyc79bv9c: /tmp/tmpyc79bv9c.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpqfjtkziv: /tmp/tmpqfjtkziv.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n      \
    \      result.push_back(\"A\");\n        } else if (grade > 3.3) {\n         \
    \   result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n           \
    \ result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp3mnsi6zh: /tmp/tmp3mnsi6zh.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpk7r2j3iw: /tmp/tmpk7r2j3iw.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp688c9vj0: /tmp/tmp688c9vj0.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpwiu3p30j: /tmp/tmpwiu3p30j.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmplg_hm9xf: /tmp/tmplg_hm9xf.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (float grade : grades) {\n        if (grade >= 4.0)\
    \ {\n            letter_grades.push_back(\"A+\");\n        } else if (grade >=\
    \ 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grade\
    \ >= 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grade\
    \ >= 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grade\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grade\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grade\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grade\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grade\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grade\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grade\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grade\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpb4yypi7m: /tmp/tmpb4yypi7m.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpyf32pjvd: /tmp/tmpyf32pjvd.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpk0vmqp6l: /tmp/tmpk0vmqp6l.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp7cy7_29w: /tmp/tmp7cy7_29w.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmplup5_t84: /tmp/tmplup5_t84.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n\tstd::vector<std::string>\
    \ result;\n\tfor (int i = 0; i < grades.size(); i++) {\n\t\tif (grades[i] == 4.0)\
    \ {\n\t\t\tresult.push_back(\"A+\");\n\t\t}\n\t\telse if (grades[i] >= 3.7) {\n\
    \t\t\tresult.push_back(\"A\");\n\t\t}\n\t\telse if (grades[i] >= 3.3) {\n\t\t\t\
    result.push_back(\"A-\");\n\t\t}\n\t\telse if (grades[i] >= 3.0) {\n\t\t\tresult.push_back(\"\
    B+\");\n\t\t}\n\t\telse if (grades[i] >= 2.7) {\n\t\t\tresult.push_back(\"B\"\
    );\n\t\t}\n\t\telse if (grades[i] >= 2.3) {\n\t\t\tresult.push_back(\"B-\");\n\
    \t\t}\n\t\telse if (grades[i] >= 2.0) {\n\t\t\tresult.push_back(\"C+\");\n\t\t\
    }\n\t\telse if (grades[i] >= 1.7) {\n\t\t\tresult.push_back(\"C\");\n\t\t}\n\t\
    \telse if (grades[i] >= 1.3) {\n\t\t\tresult.push_back(\"C-\");\n\t\t}\n\t\telse\
    \ if (grades[i] >= 1.0) {\n\t\t\tresult.push_back(\"D+\");\n\t\t}\n\t\telse if\
    \ (grades[i] >= 0.7) {\n\t\t\tresult.push_back(\"D\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 0.0) {\n\t\t\tresult.push_back(\"D-\");\n\t\t}\n\t\telse {\n\t\t\tresult.push_back(\"\
    E\");\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpmje7yx2h: /tmp/tmpmje7yx2h.cpp:71: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp9903wxhm: /tmp/tmp9903wxhm.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (float grade : grades) {\n        if (grade == 4.0)\
    \ {\n            letter_grades.push_back(\"A+\");\n        } else if (grade >\
    \ 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grade\
    \ > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grade\
    \ > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grade\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grade\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grade\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grade\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grade\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grade\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grade\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grade\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpxln_o840: /tmp/tmpxln_o840.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpoo3l56ut: /tmp/tmpoo3l56ut.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpt9yu98rs: /tmp/tmpt9yu98rs.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n\
    \            letter_grades.push_back(\"A+\");\n        } else if (grade >= 3.7)\
    \ {\n            letter_grades.push_back(\"A\");\n        } else if (grade >=\
    \ 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grade\
    \ >= 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grade\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grade\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grade\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grade\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grade\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grade\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grade\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grade\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpdzmaftdw: /tmp/tmpdzmaftdw.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmphj4n1_uv: /tmp/tmphj4n1_uv.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpgjj2zxrw: /tmp/tmpgjj2zxrw.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n      \
    \      result.push_back(\"A\");\n        } else if (grade > 3.3) {\n         \
    \   result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n           \
    \ result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp2c210l9e: /tmp/tmp2c210l9e.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpb2nyoqqz: /tmp/tmpb2nyoqqz.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpg8bsvk4f: /tmp/tmpg8bsvk4f.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpfa571szr: /tmp/tmpfa571szr.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n  std::vector<std::string>\
    \ result;\n  for (auto grade : grades) {\n    if (grade >= 4.0) {\n      result.push_back(\"\
    A+\");\n    } else if (grade >= 3.7) {\n      result.push_back(\"A\");\n    }\
    \ else if (grade >= 3.3) {\n      result.push_back(\"A-\");\n    } else if (grade\
    \ >= 3.0) {\n      result.push_back(\"B+\");\n    } else if (grade >= 2.7) {\n\
    \      result.push_back(\"B\");\n    } else if (grade >= 2.3) {\n      result.push_back(\"\
    B-\");\n    } else if (grade >= 2.0) {\n      result.push_back(\"C+\");\n    }\
    \ else if (grade >= 1.7) {\n      result.push_back(\"C\");\n    } else if (grade\
    \ >= 1.3) {\n      result.push_back(\"C-\");\n    } else if (grade >= 1.0) {\n\
    \      result.push_back(\"D+\");\n    } else if (grade >= 0.7) {\n      result.push_back(\"\
    D\");\n    } else if (grade >= 0.0) {\n      result.push_back(\"D-\");\n    }\
    \ else {\n      result.push_back(\"E\");\n    }\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp0uwmjoo2: /tmp/tmp0uwmjoo2.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n\tstd::vector<std::string>\
    \ result;\n\tfor (int i = 0; i < grades.size(); i++) {\n\t\tif (grades[i] >= 4.0)\
    \ {\n\t\t\tresult.push_back(\"A+\");\n\t\t}\n\t\telse if (grades[i] >= 3.7) {\n\
    \t\t\tresult.push_back(\"A\");\n\t\t}\n\t\telse if (grades[i] >= 3.3) {\n\t\t\t\
    result.push_back(\"A-\");\n\t\t}\n\t\telse if (grades[i] >= 3.0) {\n\t\t\tresult.push_back(\"\
    B+\");\n\t\t}\n\t\telse if (grades[i] >= 2.7) {\n\t\t\tresult.push_back(\"B\"\
    );\n\t\t}\n\t\telse if (grades[i] >= 2.3) {\n\t\t\tresult.push_back(\"B-\");\n\
    \t\t}\n\t\telse if (grades[i] >= 2.0) {\n\t\t\tresult.push_back(\"C+\");\n\t\t\
    }\n\t\telse if (grades[i] >= 1.7) {\n\t\t\tresult.push_back(\"C\");\n\t\t}\n\t\
    \telse if (grades[i] >= 1.3) {\n\t\t\tresult.push_back(\"C-\");\n\t\t}\n\t\telse\
    \ if (grades[i] >= 1.0) {\n\t\t\tresult.push_back(\"D+\");\n\t\t}\n\t\telse if\
    \ (grades[i] >= 0.7) {\n\t\t\tresult.push_back(\"D\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 0.0) {\n\t\t\tresult.push_back(\"D-\");\n\t\t}\n\t\telse {\n\t\t\tresult.push_back(\"\
    E\");\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpjfwbishv: /tmp/tmpjfwbishv.cpp:71: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp640c9ohe: /tmp/tmp640c9ohe.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmph1wk6z4m: /tmp/tmph1wk6z4m.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpvr9a13ax: /tmp/tmpvr9a13ax.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpqtajpk9l: /tmp/tmpqtajpk9l.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpq8m281yj: /tmp/tmpq8m281yj.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpozrlnamw: /tmp/tmpozrlnamw.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmphvdf9f6p: /tmp/tmphvdf9f6p.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpdjoo9eqp: /tmp/tmpdjoo9eqp.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpqo32zx4k: /tmp/tmpqo32zx4k.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n      \
    \      result.push_back(\"A\");\n        } else if (grade > 3.3) {\n         \
    \   result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n           \
    \ result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpx1mkmly0: /tmp/tmpx1mkmly0.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpv036jr41: /tmp/tmpv036jr41.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpaa9aea6_: /tmp/tmpaa9aea6_.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpz1pljxar: /tmp/tmpz1pljxar.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpz77mnoi4: /tmp/tmpz77mnoi4.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpwp4l987_: /tmp/tmpwp4l987_.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade == 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade > 3.3) {\n        \
    \    result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n          \
    \  result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpzqi2dzmc: /tmp/tmpzqi2dzmc.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp4atav86_: /tmp/tmp4atav86_.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp1zffgv2x: /tmp/tmp1zffgv2x.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp8ypjjwrw: /tmp/tmp8ypjjwrw.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp4nfxqhzt: /tmp/tmp4nfxqhzt.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpnc79wxhj: /tmp/tmpnc79wxhj.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmptg1qffy0: /tmp/tmptg1qffy0.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmptt29v6o0: /tmp/tmptt29v6o0.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpopqps547: /tmp/tmpopqps547.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpal2vpvzt: /tmp/tmpal2vpvzt.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpe8vczk9c: /tmp/tmpe8vczk9c.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpvpbbakfz: /tmp/tmpvpbbakfz.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n\
    \            letter_grades.push_back(\"A+\");\n        } else if (grade >= 3.7)\
    \ {\n            letter_grades.push_back(\"A\");\n        } else if (grade >=\
    \ 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grade\
    \ >= 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grade\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grade\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grade\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grade\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grade\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grade\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grade\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grade\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpuvj7gbds: /tmp/tmpuvj7gbds.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp9z8rj63s: /tmp/tmp9z8rj63s.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpzuxmi72i: /tmp/tmpzuxmi72i.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n\tstd::vector<std::string>\
    \ letter_grades;\n\tfor (int i = 0; i < grades.size(); i++) {\n\t\tif (grades[i]\
    \ >= 4.0) {\n\t\t\tletter_grades.push_back(\"A+\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 3.7) {\n\t\t\tletter_grades.push_back(\"A\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 3.3) {\n\t\t\tletter_grades.push_back(\"A-\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 3.0) {\n\t\t\tletter_grades.push_back(\"B+\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 2.7) {\n\t\t\tletter_grades.push_back(\"B\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 2.3) {\n\t\t\tletter_grades.push_back(\"B-\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 2.0) {\n\t\t\tletter_grades.push_back(\"C+\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 1.7) {\n\t\t\tletter_grades.push_back(\"C\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 1.3) {\n\t\t\tletter_grades.push_back(\"C-\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 1.0) {\n\t\t\tletter_grades.push_back(\"D+\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 0.7) {\n\t\t\tletter_grades.push_back(\"D\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 0.0) {\n\t\t\tletter_grades.push_back(\"D-\");\n\t\t}\n\t\telse {\n\t\t\t\
    letter_grades.push_back(\"E\");\n\t\t}\n\t}\n\treturn letter_grades;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp33x02hdr: /tmp/tmp33x02hdr.cpp:71: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n\
    \            letter_grades.push_back(\"A+\");\n        } else if (grade >= 3.7)\
    \ {\n            letter_grades.push_back(\"A\");\n        } else if (grade >=\
    \ 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grade\
    \ >= 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grade\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grade\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grade\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grade\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grade\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grade\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grade\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grade\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpl71_701i: /tmp/tmpl71_701i.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpw0nel6e9: /tmp/tmpw0nel6e9.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp7fau9drz: /tmp/tmp7fau9drz.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpr1hlzv89: /tmp/tmpr1hlzv89.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmplf4p9kq0: /tmp/tmplf4p9kq0.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n  std::vector<std::string>\
    \ result;\n  for (auto grade : grades) {\n    if (grade >= 4.0) {\n      result.push_back(\"\
    A+\");\n    } else if (grade >= 3.7) {\n      result.push_back(\"A\");\n    }\
    \ else if (grade >= 3.3) {\n      result.push_back(\"A-\");\n    } else if (grade\
    \ >= 3.0) {\n      result.push_back(\"B+\");\n    } else if (grade >= 2.7) {\n\
    \      result.push_back(\"B\");\n    } else if (grade >= 2.3) {\n      result.push_back(\"\
    B-\");\n    } else if (grade >= 2.0) {\n      result.push_back(\"C+\");\n    }\
    \ else if (grade >= 1.7) {\n      result.push_back(\"C\");\n    } else if (grade\
    \ >= 1.3) {\n      result.push_back(\"C-\");\n    } else if (grade >= 1.0) {\n\
    \      result.push_back(\"D+\");\n    } else if (grade >= 0.7) {\n      result.push_back(\"\
    D\");\n    } else if (grade >= 0.0) {\n      result.push_back(\"D-\");\n    }\
    \ else {\n      result.push_back(\"E\");\n    }\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpmpc_t_ds: /tmp/tmpmpc_t_ds.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmptj5vk3or: /tmp/tmptj5vk3or.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpt1lscjzd: /tmp/tmpt1lscjzd.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n\tstd::vector<std::string>\
    \ result;\n\tfor (int i = 0; i < grades.size(); i++) {\n\t\tif (grades[i] == 4.0)\
    \ {\n\t\t\tresult.push_back(\"A+\");\n\t\t}\n\t\telse if (grades[i] > 3.7) {\n\
    \t\t\tresult.push_back(\"A\");\n\t\t}\n\t\telse if (grades[i] > 3.3) {\n\t\t\t\
    result.push_back(\"A-\");\n\t\t}\n\t\telse if (grades[i] > 3.0) {\n\t\t\tresult.push_back(\"\
    B+\");\n\t\t}\n\t\telse if (grades[i] > 2.7) {\n\t\t\tresult.push_back(\"B\");\n\
    \t\t}\n\t\telse if (grades[i] > 2.3) {\n\t\t\tresult.push_back(\"B-\");\n\t\t\
    }\n\t\telse if (grades[i] > 2.0) {\n\t\t\tresult.push_back(\"C+\");\n\t\t}\n\t\
    \telse if (grades[i] > 1.7) {\n\t\t\tresult.push_back(\"C\");\n\t\t}\n\t\telse\
    \ if (grades[i] > 1.3) {\n\t\t\tresult.push_back(\"C-\");\n\t\t}\n\t\telse if\
    \ (grades[i] > 1.0) {\n\t\t\tresult.push_back(\"D+\");\n\t\t}\n\t\telse if (grades[i]\
    \ > 0.7) {\n\t\t\tresult.push_back(\"D\");\n\t\t}\n\t\telse if (grades[i] > 0.0)\
    \ {\n\t\t\tresult.push_back(\"D-\");\n\t\t}\n\t\telse {\n\t\t\tresult.push_back(\"\
    E\");\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp4bjlaxsf: /tmp/tmp4bjlaxsf.cpp:71: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmps5la_oii: /tmp/tmps5la_oii.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpojaol_ax: /tmp/tmpojaol_ax.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpzjyar8k_: /tmp/tmpzjyar8k_.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp47z8pr42: /tmp/tmp47z8pr42.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n      \
    \      result.push_back(\"A\");\n        } else if (grade > 3.3) {\n         \
    \   result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n           \
    \ result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpf3vloz3j: /tmp/tmpf3vloz3j.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n      \
    \      result.push_back(\"A\");\n        } else if (grade > 3.3) {\n         \
    \   result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n           \
    \ result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpejhszq45: /tmp/tmpejhszq45.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n\tstd::vector<std::string>\
    \ result;\n\tfor (int i = 0; i < grades.size(); i++) {\n\t\tif (grades[i] == 4.0)\
    \ {\n\t\t\tresult.push_back(\"A+\");\n\t\t}\n\t\telse if (grades[i] > 3.7) {\n\
    \t\t\tresult.push_back(\"A\");\n\t\t}\n\t\telse if (grades[i] > 3.3) {\n\t\t\t\
    result.push_back(\"A-\");\n\t\t}\n\t\telse if (grades[i] > 3.0) {\n\t\t\tresult.push_back(\"\
    B+\");\n\t\t}\n\t\telse if (grades[i] > 2.7) {\n\t\t\tresult.push_back(\"B\");\n\
    \t\t}\n\t\telse if (grades[i] > 2.3) {\n\t\t\tresult.push_back(\"B-\");\n\t\t\
    }\n\t\telse if (grades[i] > 2.0) {\n\t\t\tresult.push_back(\"C+\");\n\t\t}\n\t\
    \telse if (grades[i] > 1.7) {\n\t\t\tresult.push_back(\"C\");\n\t\t}\n\t\telse\
    \ if (grades[i] > 1.3) {\n\t\t\tresult.push_back(\"C-\");\n\t\t}\n\t\telse if\
    \ (grades[i] > 1.0) {\n\t\t\tresult.push_back(\"D+\");\n\t\t}\n\t\telse if (grades[i]\
    \ > 0.7) {\n\t\t\tresult.push_back(\"D\");\n\t\t}\n\t\telse if (grades[i] > 0.0)\
    \ {\n\t\t\tresult.push_back(\"D-\");\n\t\t}\n\t\telse {\n\t\t\tresult.push_back(\"\
    E\");\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpmdz6fwfz: /tmp/tmpmdz6fwfz.cpp:71: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade == 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade > 3.3) {\n        \
    \    result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n          \
    \  result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp4tbi6hay: /tmp/tmp4tbi6hay.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp0bz1wdoy: /tmp/tmp0bz1wdoy.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp7z2jv4ml: /tmp/tmp7z2jv4ml.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpn0jdg32b: /tmp/tmpn0jdg32b.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp_0pi98j5: /tmp/tmp_0pi98j5.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n  std::vector<std::string>\
    \ result;\n  for (int i = 0; i < grades.size(); i++) {\n    if (grades[i] >= 4.0)\
    \ {\n      result.push_back(\"A+\");\n    } else if (grades[i] >= 3.7) {\n   \
    \   result.push_back(\"A\");\n    } else if (grades[i] >= 3.3) {\n      result.push_back(\"\
    A-\");\n    } else if (grades[i] >= 3.0) {\n      result.push_back(\"B+\");\n\
    \    } else if (grades[i] >= 2.7) {\n      result.push_back(\"B\");\n    } else\
    \ if (grades[i] >= 2.3) {\n      result.push_back(\"B-\");\n    } else if (grades[i]\
    \ >= 2.0) {\n      result.push_back(\"C+\");\n    } else if (grades[i] >= 1.7)\
    \ {\n      result.push_back(\"C\");\n    } else if (grades[i] >= 1.3) {\n    \
    \  result.push_back(\"C-\");\n    } else if (grades[i] >= 1.0) {\n      result.push_back(\"\
    D+\");\n    } else if (grades[i] >= 0.7) {\n      result.push_back(\"D\");\n \
    \   } else if (grades[i] >= 0.0) {\n      result.push_back(\"D-\");\n    } else\
    \ {\n      result.push_back(\"E\");\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmph3azbho5: /tmp/tmph3azbho5.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpwx64agbb: /tmp/tmpwx64agbb.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpbkp8lu4w: /tmp/tmpbkp8lu4w.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n      \
    \      result.push_back(\"A\");\n        } else if (grade > 3.3) {\n         \
    \   result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n           \
    \ result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp_rqhg3ub: /tmp/tmp_rqhg3ub.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n\tstd::vector<std::string>\
    \ letter_grades;\n\tfor (float grade : grades) {\n\t\tif (grade >= 4.0) {\n\t\t\
    \tletter_grades.push_back(\"A+\");\n\t\t}\n\t\telse if (grade >= 3.7) {\n\t\t\t\
    letter_grades.push_back(\"A\");\n\t\t}\n\t\telse if (grade >= 3.3) {\n\t\t\tletter_grades.push_back(\"\
    A-\");\n\t\t}\n\t\telse if (grade >= 3.0) {\n\t\t\tletter_grades.push_back(\"\
    B+\");\n\t\t}\n\t\telse if (grade >= 2.7) {\n\t\t\tletter_grades.push_back(\"\
    B\");\n\t\t}\n\t\telse if (grade >= 2.3) {\n\t\t\tletter_grades.push_back(\"B-\"\
    );\n\t\t}\n\t\telse if (grade >= 2.0) {\n\t\t\tletter_grades.push_back(\"C+\"\
    );\n\t\t}\n\t\telse if (grade >= 1.7) {\n\t\t\tletter_grades.push_back(\"C\");\n\
    \t\t}\n\t\telse if (grade >= 1.3) {\n\t\t\tletter_grades.push_back(\"C-\");\n\t\
    \t}\n\t\telse if (grade >= 1.0) {\n\t\t\tletter_grades.push_back(\"D+\");\n\t\t\
    }\n\t\telse if (grade >= 0.7) {\n\t\t\tletter_grades.push_back(\"D\");\n\t\t}\n\
    \t\telse if (grade >= 0.0) {\n\t\t\tletter_grades.push_back(\"D-\");\n\t\t}\n\t\
    \telse {\n\t\t\tletter_grades.push_back(\"E\");\n\t\t}\n\t}\n\treturn letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpls7q9fb9: /tmp/tmpls7q9fb9.cpp:71: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpod1r4b72: /tmp/tmpod1r4b72.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpm7kavnal: /tmp/tmpm7kavnal.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpkx1n06a6: /tmp/tmpkx1n06a6.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n      \
    \      result.push_back(\"A\");\n        } else if (grade > 3.3) {\n         \
    \   result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n           \
    \ result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmptd7td40h: /tmp/tmptd7td40h.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpkprm9tye: /tmp/tmpkprm9tye.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpdqlu_7te: /tmp/tmpdqlu_7te.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp4nl77esy: /tmp/tmp4nl77esy.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp5frki4uj: /tmp/tmp5frki4uj.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp95nigqbd: /tmp/tmp95nigqbd.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmplanbx96o: /tmp/tmplanbx96o.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpe4hzmeol: /tmp/tmpe4hzmeol.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpjgrwpn5k: /tmp/tmpjgrwpn5k.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmppep8pu17: /tmp/tmppep8pu17.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpxjnzi18d: /tmp/tmpxjnzi18d.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n      \
    \      result.push_back(\"A\");\n        } else if (grade > 3.3) {\n         \
    \   result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n           \
    \ result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpht5_q5ax: /tmp/tmpht5_q5ax.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpegr4ddmy: /tmp/tmpegr4ddmy.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp_2zd4o6u: /tmp/tmp_2zd4o6u.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpyy1edlli: /tmp/tmpyy1edlli.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n  std::vector<std::string>\
    \ result;\n  for (auto grade : grades) {\n    if (grade >= 4.0) {\n      result.push_back(\"\
    A+\");\n    } else if (grade >= 3.7) {\n      result.push_back(\"A\");\n    }\
    \ else if (grade >= 3.3) {\n      result.push_back(\"A-\");\n    } else if (grade\
    \ >= 3.0) {\n      result.push_back(\"B+\");\n    } else if (grade >= 2.7) {\n\
    \      result.push_back(\"B\");\n    } else if (grade >= 2.3) {\n      result.push_back(\"\
    B-\");\n    } else if (grade >= 2.0) {\n      result.push_back(\"C+\");\n    }\
    \ else if (grade >= 1.7) {\n      result.push_back(\"C\");\n    } else if (grade\
    \ >= 1.3) {\n      result.push_back(\"C-\");\n    } else if (grade >= 1.0) {\n\
    \      result.push_back(\"D+\");\n    } else if (grade >= 0.7) {\n      result.push_back(\"\
    D\");\n    } else if (grade >= 0.0) {\n      result.push_back(\"D-\");\n    }\
    \ else {\n      result.push_back(\"E\");\n    }\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp0v6f21tx: /tmp/tmp0v6f21tx.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpht4dj68u: /tmp/tmpht4dj68u.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp04wdlf0h: /tmp/tmp04wdlf0h.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpjgz12tjb: /tmp/tmpjgz12tjb.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ ans;\n    for(int i = 0; i < grades.size(); i++){\n        if(grades[i] >= 4.0)\
    \ ans.push_back(\"A+\");\n        else if(grades[i] >= 3.7) ans.push_back(\"A\"\
    );\n        else if(grades[i] >= 3.3) ans.push_back(\"A-\");\n        else if(grades[i]\
    \ >= 3.0) ans.push_back(\"B+\");\n        else if(grades[i] >= 2.7) ans.push_back(\"\
    B\");\n        else if(grades[i] >= 2.3) ans.push_back(\"B-\");\n        else\
    \ if(grades[i] >= 2.0) ans.push_back(\"C+\");\n        else if(grades[i] >= 1.7)\
    \ ans.push_back(\"C\");\n        else if(grades[i] >= 1.3) ans.push_back(\"C-\"\
    );\n        else if(grades[i] >= 1.0) ans.push_back(\"D+\");\n        else if(grades[i]\
    \ >= 0.7) ans.push_back(\"D\");\n        else if(grades[i] >= 0.0) ans.push_back(\"\
    D-\");\n        else ans.push_back(\"E\");\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpyturcvhp: /tmp/tmpyturcvhp.cpp:45: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpnp56mnxn: /tmp/tmpnp56mnxn.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n      \
    \      result.push_back(\"A\");\n        } else if (grade > 3.3) {\n         \
    \   result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n           \
    \ result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmplbir865d: /tmp/tmplbir865d.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmphik3j1ih: /tmp/tmphik3j1ih.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n\tstd::vector<std::string>\
    \ result;\n\tfor (int i = 0; i < grades.size(); i++) {\n\t\tif (grades[i] == 4.0)\
    \ {\n\t\t\tresult.push_back(\"A+\");\n\t\t}\n\t\telse if (grades[i] > 3.7) {\n\
    \t\t\tresult.push_back(\"A\");\n\t\t}\n\t\telse if (grades[i] > 3.3) {\n\t\t\t\
    result.push_back(\"A-\");\n\t\t}\n\t\telse if (grades[i] > 3.0) {\n\t\t\tresult.push_back(\"\
    B+\");\n\t\t}\n\t\telse if (grades[i] > 2.7) {\n\t\t\tresult.push_back(\"B\");\n\
    \t\t}\n\t\telse if (grades[i] > 2.3) {\n\t\t\tresult.push_back(\"B-\");\n\t\t\
    }\n\t\telse if (grades[i] > 2.0) {\n\t\t\tresult.push_back(\"C+\");\n\t\t}\n\t\
    \telse if (grades[i] > 1.7) {\n\t\t\tresult.push_back(\"C\");\n\t\t}\n\t\telse\
    \ if (grades[i] > 1.3) {\n\t\t\tresult.push_back(\"C-\");\n\t\t}\n\t\telse if\
    \ (grades[i] > 1.0) {\n\t\t\tresult.push_back(\"D+\");\n\t\t}\n\t\telse if (grades[i]\
    \ > 0.7) {\n\t\t\tresult.push_back(\"D\");\n\t\t}\n\t\telse if (grades[i] > 0.0)\
    \ {\n\t\t\tresult.push_back(\"D-\");\n\t\t}\n\t\telse {\n\t\t\tresult.push_back(\"\
    E\");\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpn9rik361: /tmp/tmpn9rik361.cpp:71: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpv8cx81k5: /tmp/tmpv8cx81k5.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n  std::vector<std::string>\
    \ letter_grades;\n  for (int i = 0; i < grades.size(); i++) {\n    if (grades[i]\
    \ >= 4.0) {\n      letter_grades.push_back(\"A+\");\n    } else if (grades[i]\
    \ >= 3.7) {\n      letter_grades.push_back(\"A\");\n    } else if (grades[i] >=\
    \ 3.3) {\n      letter_grades.push_back(\"A-\");\n    } else if (grades[i] >=\
    \ 3.0) {\n      letter_grades.push_back(\"B+\");\n    } else if (grades[i] >=\
    \ 2.7) {\n      letter_grades.push_back(\"B\");\n    } else if (grades[i] >= 2.3)\
    \ {\n      letter_grades.push_back(\"B-\");\n    } else if (grades[i] >= 2.0)\
    \ {\n      letter_grades.push_back(\"C+\");\n    } else if (grades[i] >= 1.7)\
    \ {\n      letter_grades.push_back(\"C\");\n    } else if (grades[i] >= 1.3) {\n\
    \      letter_grades.push_back(\"C-\");\n    } else if (grades[i] >= 1.0) {\n\
    \      letter_grades.push_back(\"D+\");\n    } else if (grades[i] >= 0.7) {\n\
    \      letter_grades.push_back(\"D\");\n    } else if (grades[i] >= 0.0) {\n \
    \     letter_grades.push_back(\"D-\");\n    } else {\n      letter_grades.push_back(\"\
    E\");\n    }\n  }\n  return letter_grades;\n}\nint main() {\n    auto candidate\
    \ = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpxzcxnpf3: /tmp/tmpxzcxnpf3.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n\
    \            letter_grades.push_back(\"A+\");\n        } else if (grade >= 3.7)\
    \ {\n            letter_grades.push_back(\"A\");\n        } else if (grade >=\
    \ 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grade\
    \ >= 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grade\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grade\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grade\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grade\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grade\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grade\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grade\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grade\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpvynbht7n: /tmp/tmpvynbht7n.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp5e64ex7_: /tmp/tmp5e64ex7_.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpwmhynolt: /tmp/tmpwmhynolt.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n  std::vector<std::string>\
    \ letter_grades;\n  for (int i = 0; i < grades.size(); i++) {\n    if (grades[i]\
    \ == 4.0) {\n      letter_grades.push_back(\"A+\");\n    } else if (grades[i]\
    \ > 3.7) {\n      letter_grades.push_back(\"A\");\n    } else if (grades[i] >\
    \ 3.3) {\n      letter_grades.push_back(\"A-\");\n    } else if (grades[i] > 3.0)\
    \ {\n      letter_grades.push_back(\"B+\");\n    } else if (grades[i] > 2.7) {\n\
    \      letter_grades.push_back(\"B\");\n    } else if (grades[i] > 2.3) {\n  \
    \    letter_grades.push_back(\"B-\");\n    } else if (grades[i] > 2.0) {\n   \
    \   letter_grades.push_back(\"C+\");\n    } else if (grades[i] > 1.7) {\n    \
    \  letter_grades.push_back(\"C\");\n    } else if (grades[i] > 1.3) {\n      letter_grades.push_back(\"\
    C-\");\n    } else if (grades[i] > 1.0) {\n      letter_grades.push_back(\"D+\"\
    );\n    } else if (grades[i] > 0.7) {\n      letter_grades.push_back(\"D\");\n\
    \    } else if (grades[i] > 0.0) {\n      letter_grades.push_back(\"D-\");\n \
    \   } else {\n      letter_grades.push_back(\"E\");\n    }\n  }\n  return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpx19mlruv: /tmp/tmpx19mlruv.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n      \
    \      result.push_back(\"A\");\n        } else if (grade > 3.3) {\n         \
    \   result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n           \
    \ result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmprg7j0ail: /tmp/tmprg7j0ail.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpqy_t7v6i: /tmp/tmpqy_t7v6i.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpy3gz5e8g: /tmp/tmpy3gz5e8g.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpy863dhml: /tmp/tmpy863dhml.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpi8f3gny2: /tmp/tmpi8f3gny2.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (float grade : grades) {\n        if (grade >= 4.0)\
    \ {\n            letter_grades.push_back(\"A+\");\n        } else if (grade >=\
    \ 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grade\
    \ >= 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grade\
    \ >= 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grade\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grade\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grade\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grade\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grade\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grade\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grade\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grade\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpl1a7irwl: /tmp/tmpl1a7irwl.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmphfit4kja: /tmp/tmphfit4kja.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp27xfj63m: /tmp/tmp27xfj63m.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp2uys48ya: /tmp/tmp2uys48ya.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpxjtt3fct: /tmp/tmpxjtt3fct.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n      \
    \      result.push_back(\"A\");\n        } else if (grade > 3.3) {\n         \
    \   result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n           \
    \ result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmphmywxti8: /tmp/tmphmywxti8.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n\
    \            letter_grades.push_back(\"A+\");\n        } else if (grade >= 3.7)\
    \ {\n            letter_grades.push_back(\"A\");\n        } else if (grade >=\
    \ 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grade\
    \ >= 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grade\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grade\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grade\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grade\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grade\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grade\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grade\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grade\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpntxhk6dt: /tmp/tmpntxhk6dt.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmph3xi8bie: /tmp/tmph3xi8bie.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpbh76htes: /tmp/tmpbh76htes.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpyjnscdeq: /tmp/tmpyjnscdeq.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp6b80guuh: /tmp/tmp6b80guuh.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n\tstd::vector<std::string>\
    \ result;\n\tfor (int i = 0; i < grades.size(); i++) {\n\t\tif (grades[i] >= 4.0)\
    \ {\n\t\t\tresult.push_back(\"A+\");\n\t\t}\n\t\telse if (grades[i] >= 3.7) {\n\
    \t\t\tresult.push_back(\"A\");\n\t\t}\n\t\telse if (grades[i] >= 3.3) {\n\t\t\t\
    result.push_back(\"A-\");\n\t\t}\n\t\telse if (grades[i] >= 3.0) {\n\t\t\tresult.push_back(\"\
    B+\");\n\t\t}\n\t\telse if (grades[i] >= 2.7) {\n\t\t\tresult.push_back(\"B\"\
    );\n\t\t}\n\t\telse if (grades[i] >= 2.3) {\n\t\t\tresult.push_back(\"B-\");\n\
    \t\t}\n\t\telse if (grades[i] >= 2.0) {\n\t\t\tresult.push_back(\"C+\");\n\t\t\
    }\n\t\telse if (grades[i] >= 1.7) {\n\t\t\tresult.push_back(\"C\");\n\t\t}\n\t\
    \telse if (grades[i] >= 1.3) {\n\t\t\tresult.push_back(\"C-\");\n\t\t}\n\t\telse\
    \ if (grades[i] >= 1.0) {\n\t\t\tresult.push_back(\"D+\");\n\t\t}\n\t\telse if\
    \ (grades[i] >= 0.7) {\n\t\t\tresult.push_back(\"D\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 0.0) {\n\t\t\tresult.push_back(\"D-\");\n\t\t}\n\t\telse {\n\t\t\tresult.push_back(\"\
    E\");\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp2blw2jyq: /tmp/tmp2blw2jyq.cpp:71: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp949ln2ui: /tmp/tmp949ln2ui.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpd3dggw1d: /tmp/tmpd3dggw1d.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpdty5rcnp: /tmp/tmpdty5rcnp.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp3hrybwvd: /tmp/tmp3hrybwvd.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpnj6uoy53: /tmp/tmpnj6uoy53.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpetpv8uf8: /tmp/tmpetpv8uf8.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp1utrv3ux: /tmp/tmp1utrv3ux.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n      \
    \      result.push_back(\"A\");\n        } else if (grade > 3.3) {\n         \
    \   result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n           \
    \ result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp4qtx2_3u: /tmp/tmp4qtx2_3u.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpxtgourz4: /tmp/tmpxtgourz4.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpthgaw5t7: /tmp/tmpthgaw5t7.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmppz4i6itr: /tmp/tmppz4i6itr.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp2_ljasgr: /tmp/tmp2_ljasgr.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpxmmq5v0v: /tmp/tmpxmmq5v0v.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpdzdfo4_2: /tmp/tmpdzdfo4_2.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpi1ff9vj9: /tmp/tmpi1ff9vj9.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n      \
    \      result.push_back(\"A\");\n        } else if (grade > 3.3) {\n         \
    \   result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n           \
    \ result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp54y94p21: /tmp/tmp54y94p21.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp_u7qhuks: /tmp/tmp_u7qhuks.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n\
    \            letter_grades.push_back(\"A+\");\n        } else if (grade > 3.7)\
    \ {\n            letter_grades.push_back(\"A\");\n        } else if (grade > 3.3)\
    \ {\n            letter_grades.push_back(\"A-\");\n        } else if (grade >\
    \ 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grade\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grade\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grade\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grade\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grade\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grade\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grade\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grade\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp8lgjqmxy: /tmp/tmp8lgjqmxy.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp8b1oqtme: /tmp/tmp8b1oqtme.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpxsk1jtqk: /tmp/tmpxsk1jtqk.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpxaghutrm: /tmp/tmpxaghutrm.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n      \
    \      result.push_back(\"A\");\n        } else if (grade > 3.3) {\n         \
    \   result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n           \
    \ result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp5s7oo790: /tmp/tmp5s7oo790.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpsm936xry: /tmp/tmpsm936xry.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpsblyvuqa: /tmp/tmpsblyvuqa.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmphjpm1i15: /tmp/tmphjpm1i15.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpm5o4xl8_: /tmp/tmpm5o4xl8_.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpkbkpzez4: /tmp/tmpkbkpzez4.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpd08_vf51: /tmp/tmpd08_vf51.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp1gmpd02s: /tmp/tmp1gmpd02s.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp8wz88vog: /tmp/tmp8wz88vog.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp05czav8l: /tmp/tmp05czav8l.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpf4bw3ake: /tmp/tmpf4bw3ake.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp72m36vep: /tmp/tmp72m36vep.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmptdm17_nc: /tmp/tmptdm17_nc.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade == 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade > 3.3) {\n        \
    \    result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n          \
    \  result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp9vaz8ybl: /tmp/tmp9vaz8ybl.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp_p3bnwqi: /tmp/tmp_p3bnwqi.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp2n92bwc9: /tmp/tmp2n92bwc9.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp2qxr8qji: /tmp/tmp2qxr8qji.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp53ssv4bz: /tmp/tmp53ssv4bz.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpd4be4x88: /tmp/tmpd4be4x88.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n\tstd::vector<std::string>\
    \ result;\n\tfor (int i = 0; i < grades.size(); i++) {\n\t\tif (grades[i] >= 4.0)\
    \ {\n\t\t\tresult.push_back(\"A+\");\n\t\t}\n\t\telse if (grades[i] >= 3.7) {\n\
    \t\t\tresult.push_back(\"A\");\n\t\t}\n\t\telse if (grades[i] >= 3.3) {\n\t\t\t\
    result.push_back(\"A-\");\n\t\t}\n\t\telse if (grades[i] >= 3.0) {\n\t\t\tresult.push_back(\"\
    B+\");\n\t\t}\n\t\telse if (grades[i] >= 2.7) {\n\t\t\tresult.push_back(\"B\"\
    );\n\t\t}\n\t\telse if (grades[i] >= 2.3) {\n\t\t\tresult.push_back(\"B-\");\n\
    \t\t}\n\t\telse if (grades[i] >= 2.0) {\n\t\t\tresult.push_back(\"C+\");\n\t\t\
    }\n\t\telse if (grades[i] >= 1.7) {\n\t\t\tresult.push_back(\"C\");\n\t\t}\n\t\
    \telse if (grades[i] >= 1.3) {\n\t\t\tresult.push_back(\"C-\");\n\t\t}\n\t\telse\
    \ if (grades[i] >= 1.0) {\n\t\t\tresult.push_back(\"D+\");\n\t\t}\n\t\telse if\
    \ (grades[i] >= 0.7) {\n\t\t\tresult.push_back(\"D\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 0.0) {\n\t\t\tresult.push_back(\"D-\");\n\t\t}\n\t\telse {\n\t\t\tresult.push_back(\"\
    E\");\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpug6ekro3: /tmp/tmpug6ekro3.cpp:71: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpc8geci7h: /tmp/tmpc8geci7h.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpcbe9p_2a: /tmp/tmpcbe9p_2a.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp2vnp44wq: /tmp/tmp2vnp44wq.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpxmv11n_4: /tmp/tmpxmv11n_4.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpufj8_y2b: /tmp/tmpufj8_y2b.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp_414hxrt: /tmp/tmp_414hxrt.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpcurj_1u5: /tmp/tmpcurj_1u5.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ > 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpf7k8e_a5: /tmp/tmpf7k8e_a5.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpfp9ogp7j: /tmp/tmpfp9ogp7j.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp_gka9w8b: /tmp/tmp_gka9w8b.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpeay7snyo: /tmp/tmpeay7snyo.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpd2vp4a9j: /tmp/tmpd2vp4a9j.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpdfjszhx4: /tmp/tmpdfjszhx4.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp1hvlekhs: /tmp/tmp1hvlekhs.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (float grade : grades) {\n        if (grade >= 4.0)\
    \ {\n            letter_grades.push_back(\"A+\");\n        } else if (grade >=\
    \ 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grade\
    \ >= 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grade\
    \ >= 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grade\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grade\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grade\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grade\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grade\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grade\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grade\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grade\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmppkxmthly: /tmp/tmppkxmthly.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmptnsfc0k0: /tmp/tmptnsfc0k0.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp79vvyq9t: /tmp/tmp79vvyq9t.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n      \
    \      result.push_back(\"A\");\n        } else if (grade > 3.3) {\n         \
    \   result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n           \
    \ result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp1524a6v7: /tmp/tmp1524a6v7.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpx1_sg7yg: /tmp/tmpx1_sg7yg.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp11tha0b7: /tmp/tmp11tha0b7.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n  std::vector<std::string>\
    \ result;\n  for (int i = 0; i < grades.size(); i++) {\n    if (grades[i] == 4.0)\
    \ {\n      result.push_back(\"A+\");\n    } else if (grades[i] > 3.7) {\n    \
    \  result.push_back(\"A\");\n    } else if (grades[i] > 3.3) {\n      result.push_back(\"\
    A-\");\n    } else if (grades[i] > 3.0) {\n      result.push_back(\"B+\");\n \
    \   } else if (grades[i] > 2.7) {\n      result.push_back(\"B\");\n    } else\
    \ if (grades[i] > 2.3) {\n      result.push_back(\"B-\");\n    } else if (grades[i]\
    \ > 2.0) {\n      result.push_back(\"C+\");\n    } else if (grades[i] > 1.7) {\n\
    \      result.push_back(\"C\");\n    } else if (grades[i] > 1.3) {\n      result.push_back(\"\
    C-\");\n    } else if (grades[i] > 1.0) {\n      result.push_back(\"D+\");\n \
    \   } else if (grades[i] > 0.7) {\n      result.push_back(\"D\");\n    } else\
    \ if (grades[i] > 0.0) {\n      result.push_back(\"D-\");\n    } else {\n    \
    \  result.push_back(\"E\");\n    }\n  }\n  return result;\n}\nint main() {\n \
    \   auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpqb5taq0x: /tmp/tmpqb5taq0x.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpakljda4l: /tmp/tmpakljda4l.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp3thfh0ah: /tmp/tmp3thfh0ah.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp9ys93zg6: /tmp/tmp9ys93zg6.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmps6dp049b: /tmp/tmps6dp049b.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpmgq8albl: /tmp/tmpmgq8albl.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp7it7u1wj: /tmp/tmp7it7u1wj.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpy_98mkfa: /tmp/tmpy_98mkfa.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n      \
    \      result.push_back(\"A\");\n        } else if (grade > 3.3) {\n         \
    \   result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n           \
    \ result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp66rsuw2o: /tmp/tmp66rsuw2o.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpgs1h2g1b: /tmp/tmpgs1h2g1b.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp4md8_t89: /tmp/tmp4md8_t89.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpq626yfh5: /tmp/tmpq626yfh5.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpl0i6xtjc: /tmp/tmpl0i6xtjc.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (float grade : grades) {\n        if (grade >= 4.0)\
    \ {\n            letter_grades.push_back(\"A+\");\n        } else if (grade >=\
    \ 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grade\
    \ >= 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grade\
    \ >= 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grade\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grade\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grade\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grade\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grade\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grade\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grade\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grade\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpmchsi2yf: /tmp/tmpmchsi2yf.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpbu4a2alp: /tmp/tmpbu4a2alp.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpopall5cy: /tmp/tmpopall5cy.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmps0jev4_o: /tmp/tmps0jev4_o.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp8xeqlpny: /tmp/tmp8xeqlpny.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n\tstd::vector<std::string>\
    \ result;\n\tfor (int i = 0; i < grades.size(); i++) {\n\t\tif (grades[i] == 4.0)\
    \ {\n\t\t\tresult.push_back(\"A+\");\n\t\t}\n\t\telse if (grades[i] >= 3.7) {\n\
    \t\t\tresult.push_back(\"A\");\n\t\t}\n\t\telse if (grades[i] >= 3.3) {\n\t\t\t\
    result.push_back(\"A-\");\n\t\t}\n\t\telse if (grades[i] >= 3.0) {\n\t\t\tresult.push_back(\"\
    B+\");\n\t\t}\n\t\telse if (grades[i] >= 2.7) {\n\t\t\tresult.push_back(\"B\"\
    );\n\t\t}\n\t\telse if (grades[i] >= 2.3) {\n\t\t\tresult.push_back(\"B-\");\n\
    \t\t}\n\t\telse if (grades[i] >= 2.0) {\n\t\t\tresult.push_back(\"C+\");\n\t\t\
    }\n\t\telse if (grades[i] >= 1.7) {\n\t\t\tresult.push_back(\"C\");\n\t\t}\n\t\
    \telse if (grades[i] >= 1.3) {\n\t\t\tresult.push_back(\"C-\");\n\t\t}\n\t\telse\
    \ if (grades[i] >= 1.0) {\n\t\t\tresult.push_back(\"D+\");\n\t\t}\n\t\telse if\
    \ (grades[i] >= 0.7) {\n\t\t\tresult.push_back(\"D\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 0.0) {\n\t\t\tresult.push_back(\"D-\");\n\t\t}\n\t\telse {\n\t\t\tresult.push_back(\"\
    E\");\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpjy058j_1: /tmp/tmpjy058j_1.cpp:71: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp308n2q_w: /tmp/tmp308n2q_w.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (float grade : grades) {\n        if (grade == 4.0)\
    \ {\n            letter_grades.push_back(\"A+\");\n        } else if (grade >\
    \ 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grade\
    \ > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grade\
    \ > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grade\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grade\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grade\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grade\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grade\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grade\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grade\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grade\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp83au875u: /tmp/tmp83au875u.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpvme9ecqf: /tmp/tmpvme9ecqf.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpjdvig9yw: /tmp/tmpjdvig9yw.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n\
    \            letter_grades.push_back(\"A+\");\n        } else if (grade >= 3.7)\
    \ {\n            letter_grades.push_back(\"A\");\n        } else if (grade >=\
    \ 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grade\
    \ >= 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grade\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grade\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grade\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grade\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grade\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grade\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grade\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grade\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp3n09zqhw: /tmp/tmp3n09zqhw.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpuo5xthry: /tmp/tmpuo5xthry.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp3zjoro1h: /tmp/tmp3zjoro1h.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n      \
    \      result.push_back(\"A\");\n        } else if (grade > 3.3) {\n         \
    \   result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n           \
    \ result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpc5uywjcr: /tmp/tmpc5uywjcr.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp08vtb_8h: /tmp/tmp08vtb_8h.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp7pcsgz6l: /tmp/tmp7pcsgz6l.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpswh5ct_y: /tmp/tmpswh5ct_y.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n  std::vector<std::string>\
    \ result;\n  for (auto grade : grades) {\n    if (grade >= 4.0) {\n      result.push_back(\"\
    A+\");\n    } else if (grade >= 3.7) {\n      result.push_back(\"A\");\n    }\
    \ else if (grade >= 3.3) {\n      result.push_back(\"A-\");\n    } else if (grade\
    \ >= 3.0) {\n      result.push_back(\"B+\");\n    } else if (grade >= 2.7) {\n\
    \      result.push_back(\"B\");\n    } else if (grade >= 2.3) {\n      result.push_back(\"\
    B-\");\n    } else if (grade >= 2.0) {\n      result.push_back(\"C+\");\n    }\
    \ else if (grade >= 1.7) {\n      result.push_back(\"C\");\n    } else if (grade\
    \ >= 1.3) {\n      result.push_back(\"C-\");\n    } else if (grade >= 1.0) {\n\
    \      result.push_back(\"D+\");\n    } else if (grade >= 0.7) {\n      result.push_back(\"\
    D\");\n    } else if (grade >= 0.0) {\n      result.push_back(\"D-\");\n    }\
    \ else {\n      result.push_back(\"E\");\n    }\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp497x6b60: /tmp/tmp497x6b60.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n\tstd::vector<std::string>\
    \ result;\n\tfor (int i = 0; i < grades.size(); i++) {\n\t\tif (grades[i] >= 4.0)\
    \ {\n\t\t\tresult.push_back(\"A+\");\n\t\t}\n\t\telse if (grades[i] >= 3.7) {\n\
    \t\t\tresult.push_back(\"A\");\n\t\t}\n\t\telse if (grades[i] >= 3.3) {\n\t\t\t\
    result.push_back(\"A-\");\n\t\t}\n\t\telse if (grades[i] >= 3.0) {\n\t\t\tresult.push_back(\"\
    B+\");\n\t\t}\n\t\telse if (grades[i] >= 2.7) {\n\t\t\tresult.push_back(\"B\"\
    );\n\t\t}\n\t\telse if (grades[i] >= 2.3) {\n\t\t\tresult.push_back(\"B-\");\n\
    \t\t}\n\t\telse if (grades[i] >= 2.0) {\n\t\t\tresult.push_back(\"C+\");\n\t\t\
    }\n\t\telse if (grades[i] >= 1.7) {\n\t\t\tresult.push_back(\"C\");\n\t\t}\n\t\
    \telse if (grades[i] >= 1.3) {\n\t\t\tresult.push_back(\"C-\");\n\t\t}\n\t\telse\
    \ if (grades[i] >= 1.0) {\n\t\t\tresult.push_back(\"D+\");\n\t\t}\n\t\telse if\
    \ (grades[i] >= 0.7) {\n\t\t\tresult.push_back(\"D\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 0.0) {\n\t\t\tresult.push_back(\"D-\");\n\t\t}\n\t\telse {\n\t\t\tresult.push_back(\"\
    E\");\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpue8fprig: /tmp/tmpue8fprig.cpp:71: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpfdd20u36: /tmp/tmpfdd20u36.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpk5dp1vg_: /tmp/tmpk5dp1vg_.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp6zuijiyd: /tmp/tmp6zuijiyd.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpuw7k8hmo: /tmp/tmpuw7k8hmo.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpxuwzkx27: /tmp/tmpxuwzkx27.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp95inql9h: /tmp/tmp95inql9h.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp6gy6djno: /tmp/tmp6gy6djno.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpuop8xi9x: /tmp/tmpuop8xi9x.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp744f6rjy: /tmp/tmp744f6rjy.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n      \
    \      result.push_back(\"A\");\n        } else if (grade > 3.3) {\n         \
    \   result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n           \
    \ result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpoia0z0l3: /tmp/tmpoia0z0l3.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmph4d79v7z: /tmp/tmph4d79v7z.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpu_shxv7u: /tmp/tmpu_shxv7u.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpr2ttzyck: /tmp/tmpr2ttzyck.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpn723me56: /tmp/tmpn723me56.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp9qt9xo22: /tmp/tmp9qt9xo22.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade == 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade > 3.3) {\n        \
    \    result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n          \
    \  result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp6j4li12o: /tmp/tmp6j4li12o.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpg2_l6dxj: /tmp/tmpg2_l6dxj.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp280cb95p: /tmp/tmp280cb95p.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmphose3aaa: /tmp/tmphose3aaa.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpknbpmctn: /tmp/tmpknbpmctn.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp8lnfg13w: /tmp/tmp8lnfg13w.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp3v9ifs8d: /tmp/tmp3v9ifs8d.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpcpr4hdi4: /tmp/tmpcpr4hdi4.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp5a1j_596: /tmp/tmp5a1j_596.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpgolre7g8: /tmp/tmpgolre7g8.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpzg4bx8np: /tmp/tmpzg4bx8np.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpld7h_llj: /tmp/tmpld7h_llj.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n\
    \            letter_grades.push_back(\"A+\");\n        } else if (grade >= 3.7)\
    \ {\n            letter_grades.push_back(\"A\");\n        } else if (grade >=\
    \ 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grade\
    \ >= 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grade\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grade\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grade\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grade\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grade\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grade\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grade\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grade\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpk2jsr71y: /tmp/tmpk2jsr71y.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpr9dhzp32: /tmp/tmpr9dhzp32.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp0f002x41: /tmp/tmp0f002x41.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n\tstd::vector<std::string>\
    \ letter_grades;\n\tfor (int i = 0; i < grades.size(); i++) {\n\t\tif (grades[i]\
    \ >= 4.0) {\n\t\t\tletter_grades.push_back(\"A+\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 3.7) {\n\t\t\tletter_grades.push_back(\"A\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 3.3) {\n\t\t\tletter_grades.push_back(\"A-\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 3.0) {\n\t\t\tletter_grades.push_back(\"B+\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 2.7) {\n\t\t\tletter_grades.push_back(\"B\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 2.3) {\n\t\t\tletter_grades.push_back(\"B-\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 2.0) {\n\t\t\tletter_grades.push_back(\"C+\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 1.7) {\n\t\t\tletter_grades.push_back(\"C\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 1.3) {\n\t\t\tletter_grades.push_back(\"C-\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 1.0) {\n\t\t\tletter_grades.push_back(\"D+\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 0.7) {\n\t\t\tletter_grades.push_back(\"D\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 0.0) {\n\t\t\tletter_grades.push_back(\"D-\");\n\t\t}\n\t\telse {\n\t\t\t\
    letter_grades.push_back(\"E\");\n\t\t}\n\t}\n\treturn letter_grades;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp0g70j4zc: /tmp/tmp0g70j4zc.cpp:71: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n\
    \            letter_grades.push_back(\"A+\");\n        } else if (grade >= 3.7)\
    \ {\n            letter_grades.push_back(\"A\");\n        } else if (grade >=\
    \ 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grade\
    \ >= 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grade\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grade\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grade\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grade\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grade\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grade\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grade\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grade\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpzocpb_5w: /tmp/tmpzocpb_5w.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp15xd9wpu: /tmp/tmp15xd9wpu.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpadis2_xq: /tmp/tmpadis2_xq.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpphuyxpsy: /tmp/tmpphuyxpsy.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp_i2l5k2o: /tmp/tmp_i2l5k2o.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n  std::vector<std::string>\
    \ result;\n  for (auto grade : grades) {\n    if (grade >= 4.0) {\n      result.push_back(\"\
    A+\");\n    } else if (grade >= 3.7) {\n      result.push_back(\"A\");\n    }\
    \ else if (grade >= 3.3) {\n      result.push_back(\"A-\");\n    } else if (grade\
    \ >= 3.0) {\n      result.push_back(\"B+\");\n    } else if (grade >= 2.7) {\n\
    \      result.push_back(\"B\");\n    } else if (grade >= 2.3) {\n      result.push_back(\"\
    B-\");\n    } else if (grade >= 2.0) {\n      result.push_back(\"C+\");\n    }\
    \ else if (grade >= 1.7) {\n      result.push_back(\"C\");\n    } else if (grade\
    \ >= 1.3) {\n      result.push_back(\"C-\");\n    } else if (grade >= 1.0) {\n\
    \      result.push_back(\"D+\");\n    } else if (grade >= 0.7) {\n      result.push_back(\"\
    D\");\n    } else if (grade >= 0.0) {\n      result.push_back(\"D-\");\n    }\
    \ else {\n      result.push_back(\"E\");\n    }\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpq7kel6w8: /tmp/tmpq7kel6w8.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpew5bjoe3: /tmp/tmpew5bjoe3.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp370vrg_q: /tmp/tmp370vrg_q.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n\tstd::vector<std::string>\
    \ result;\n\tfor (int i = 0; i < grades.size(); i++) {\n\t\tif (grades[i] == 4.0)\
    \ {\n\t\t\tresult.push_back(\"A+\");\n\t\t}\n\t\telse if (grades[i] > 3.7) {\n\
    \t\t\tresult.push_back(\"A\");\n\t\t}\n\t\telse if (grades[i] > 3.3) {\n\t\t\t\
    result.push_back(\"A-\");\n\t\t}\n\t\telse if (grades[i] > 3.0) {\n\t\t\tresult.push_back(\"\
    B+\");\n\t\t}\n\t\telse if (grades[i] > 2.7) {\n\t\t\tresult.push_back(\"B\");\n\
    \t\t}\n\t\telse if (grades[i] > 2.3) {\n\t\t\tresult.push_back(\"B-\");\n\t\t\
    }\n\t\telse if (grades[i] > 2.0) {\n\t\t\tresult.push_back(\"C+\");\n\t\t}\n\t\
    \telse if (grades[i] > 1.7) {\n\t\t\tresult.push_back(\"C\");\n\t\t}\n\t\telse\
    \ if (grades[i] > 1.3) {\n\t\t\tresult.push_back(\"C-\");\n\t\t}\n\t\telse if\
    \ (grades[i] > 1.0) {\n\t\t\tresult.push_back(\"D+\");\n\t\t}\n\t\telse if (grades[i]\
    \ > 0.7) {\n\t\t\tresult.push_back(\"D\");\n\t\t}\n\t\telse if (grades[i] > 0.0)\
    \ {\n\t\t\tresult.push_back(\"D-\");\n\t\t}\n\t\telse {\n\t\t\tresult.push_back(\"\
    E\");\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpqeug49sf: /tmp/tmpqeug49sf.cpp:71: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpon2q2_zh: /tmp/tmpon2q2_zh.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpkisednxp: /tmp/tmpkisednxp.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpixs0r4hy: /tmp/tmpixs0r4hy.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpb69ru49t: /tmp/tmpb69ru49t.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n      \
    \      result.push_back(\"A\");\n        } else if (grade > 3.3) {\n         \
    \   result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n           \
    \ result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpm4mzz78u: /tmp/tmpm4mzz78u.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n      \
    \      result.push_back(\"A\");\n        } else if (grade > 3.3) {\n         \
    \   result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n           \
    \ result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmphpb3zkom: /tmp/tmphpb3zkom.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n\tstd::vector<std::string>\
    \ result;\n\tfor (int i = 0; i < grades.size(); i++) {\n\t\tif (grades[i] == 4.0)\
    \ {\n\t\t\tresult.push_back(\"A+\");\n\t\t}\n\t\telse if (grades[i] > 3.7) {\n\
    \t\t\tresult.push_back(\"A\");\n\t\t}\n\t\telse if (grades[i] > 3.3) {\n\t\t\t\
    result.push_back(\"A-\");\n\t\t}\n\t\telse if (grades[i] > 3.0) {\n\t\t\tresult.push_back(\"\
    B+\");\n\t\t}\n\t\telse if (grades[i] > 2.7) {\n\t\t\tresult.push_back(\"B\");\n\
    \t\t}\n\t\telse if (grades[i] > 2.3) {\n\t\t\tresult.push_back(\"B-\");\n\t\t\
    }\n\t\telse if (grades[i] > 2.0) {\n\t\t\tresult.push_back(\"C+\");\n\t\t}\n\t\
    \telse if (grades[i] > 1.7) {\n\t\t\tresult.push_back(\"C\");\n\t\t}\n\t\telse\
    \ if (grades[i] > 1.3) {\n\t\t\tresult.push_back(\"C-\");\n\t\t}\n\t\telse if\
    \ (grades[i] > 1.0) {\n\t\t\tresult.push_back(\"D+\");\n\t\t}\n\t\telse if (grades[i]\
    \ > 0.7) {\n\t\t\tresult.push_back(\"D\");\n\t\t}\n\t\telse if (grades[i] > 0.0)\
    \ {\n\t\t\tresult.push_back(\"D-\");\n\t\t}\n\t\telse {\n\t\t\tresult.push_back(\"\
    E\");\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpnzulytt8: /tmp/tmpnzulytt8.cpp:71: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade == 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade > 3.3) {\n        \
    \    result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n          \
    \  result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmphwn7a748: /tmp/tmphwn7a748.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n   \
    \         result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n    \
    \        result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n      \
    \      result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n       \
    \     result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n          \
    \  result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n           \
    \ result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n\
    \        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n  \
    \      } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n   \
    \     } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpg79c0kvm: /tmp/tmpg79c0kvm.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp0366g9ei: /tmp/tmp0366g9ei.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpdvgizvsp: /tmp/tmpdvgizvsp.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpzxvspi1z: /tmp/tmpzxvspi1z.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n  std::vector<std::string>\
    \ result;\n  for (int i = 0; i < grades.size(); i++) {\n    if (grades[i] >= 4.0)\
    \ {\n      result.push_back(\"A+\");\n    } else if (grades[i] >= 3.7) {\n   \
    \   result.push_back(\"A\");\n    } else if (grades[i] >= 3.3) {\n      result.push_back(\"\
    A-\");\n    } else if (grades[i] >= 3.0) {\n      result.push_back(\"B+\");\n\
    \    } else if (grades[i] >= 2.7) {\n      result.push_back(\"B\");\n    } else\
    \ if (grades[i] >= 2.3) {\n      result.push_back(\"B-\");\n    } else if (grades[i]\
    \ >= 2.0) {\n      result.push_back(\"C+\");\n    } else if (grades[i] >= 1.7)\
    \ {\n      result.push_back(\"C\");\n    } else if (grades[i] >= 1.3) {\n    \
    \  result.push_back(\"C-\");\n    } else if (grades[i] >= 1.0) {\n      result.push_back(\"\
    D+\");\n    } else if (grades[i] >= 0.7) {\n      result.push_back(\"D\");\n \
    \   } else if (grades[i] >= 0.0) {\n      result.push_back(\"D-\");\n    } else\
    \ {\n      result.push_back(\"E\");\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpkxer4xmt: /tmp/tmpkxer4xmt.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp4y47niin: /tmp/tmp4y47niin.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpmj8yjzzx: /tmp/tmpmj8yjzzx.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n      \
    \      result.push_back(\"A\");\n        } else if (grade > 3.3) {\n         \
    \   result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n           \
    \ result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpdr681c_h: /tmp/tmpdr681c_h.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n\tstd::vector<std::string>\
    \ letter_grades;\n\tfor (float grade : grades) {\n\t\tif (grade >= 4.0) {\n\t\t\
    \tletter_grades.push_back(\"A+\");\n\t\t}\n\t\telse if (grade >= 3.7) {\n\t\t\t\
    letter_grades.push_back(\"A\");\n\t\t}\n\t\telse if (grade >= 3.3) {\n\t\t\tletter_grades.push_back(\"\
    A-\");\n\t\t}\n\t\telse if (grade >= 3.0) {\n\t\t\tletter_grades.push_back(\"\
    B+\");\n\t\t}\n\t\telse if (grade >= 2.7) {\n\t\t\tletter_grades.push_back(\"\
    B\");\n\t\t}\n\t\telse if (grade >= 2.3) {\n\t\t\tletter_grades.push_back(\"B-\"\
    );\n\t\t}\n\t\telse if (grade >= 2.0) {\n\t\t\tletter_grades.push_back(\"C+\"\
    );\n\t\t}\n\t\telse if (grade >= 1.7) {\n\t\t\tletter_grades.push_back(\"C\");\n\
    \t\t}\n\t\telse if (grade >= 1.3) {\n\t\t\tletter_grades.push_back(\"C-\");\n\t\
    \t}\n\t\telse if (grade >= 1.0) {\n\t\t\tletter_grades.push_back(\"D+\");\n\t\t\
    }\n\t\telse if (grade >= 0.7) {\n\t\t\tletter_grades.push_back(\"D\");\n\t\t}\n\
    \t\telse if (grade >= 0.0) {\n\t\t\tletter_grades.push_back(\"D-\");\n\t\t}\n\t\
    \telse {\n\t\t\tletter_grades.push_back(\"E\");\n\t\t}\n\t}\n\treturn letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpb3yny9o7: /tmp/tmpb3yny9o7.cpp:71: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpm_049qff: /tmp/tmpm_049qff.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmptbcz32e1: /tmp/tmptbcz32e1.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp7obock1l: /tmp/tmp7obock1l.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n      \
    \      result.push_back(\"A\");\n        } else if (grade > 3.3) {\n         \
    \   result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n           \
    \ result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpj4uvsa1k: /tmp/tmpj4uvsa1k.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpp0ec6v4p: /tmp/tmpp0ec6v4p.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpdjvj7woq: /tmp/tmpdjvj7woq.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpvmzu1voz: /tmp/tmpvmzu1voz.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp9zllve3k: /tmp/tmp9zllve3k.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp_9nly3to: /tmp/tmp_9nly3to.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpdy2qbqq2: /tmp/tmpdy2qbqq2.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpzy463bzn: /tmp/tmpzy463bzn.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpafgf774l: /tmp/tmpafgf774l.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmph163vb8m: /tmp/tmph163vb8m.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp7cax4jg6: /tmp/tmp7cax4jg6.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n      \
    \      result.push_back(\"A\");\n        } else if (grade > 3.3) {\n         \
    \   result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n           \
    \ result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n   \
    \     } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n     \
    \   } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n       \
    \ } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else\
    \ if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp3tfyqmol: /tmp/tmp3tfyqmol.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp3e04gqt1: /tmp/tmp3e04gqt1.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp0vi80i2v: /tmp/tmp0vi80i2v.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp4fm5vdzu: /tmp/tmp4fm5vdzu.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n  std::vector<std::string>\
    \ result;\n  for (auto grade : grades) {\n    if (grade >= 4.0) {\n      result.push_back(\"\
    A+\");\n    } else if (grade >= 3.7) {\n      result.push_back(\"A\");\n    }\
    \ else if (grade >= 3.3) {\n      result.push_back(\"A-\");\n    } else if (grade\
    \ >= 3.0) {\n      result.push_back(\"B+\");\n    } else if (grade >= 2.7) {\n\
    \      result.push_back(\"B\");\n    } else if (grade >= 2.3) {\n      result.push_back(\"\
    B-\");\n    } else if (grade >= 2.0) {\n      result.push_back(\"C+\");\n    }\
    \ else if (grade >= 1.7) {\n      result.push_back(\"C\");\n    } else if (grade\
    \ >= 1.3) {\n      result.push_back(\"C-\");\n    } else if (grade >= 1.0) {\n\
    \      result.push_back(\"D+\");\n    } else if (grade >= 0.7) {\n      result.push_back(\"\
    D\");\n    } else if (grade >= 0.0) {\n      result.push_back(\"D-\");\n    }\
    \ else {\n      result.push_back(\"E\");\n    }\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpxrtsvoox: /tmp/tmpxrtsvoox.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmppudac_44: /tmp/tmppudac_44.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmpobyhgvk5: /tmp/tmpobyhgvk5.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ result;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n    \
    \        result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n     \
    \       result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n       \
    \     result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n        \
    \    result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n         \
    \   result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n           \
    \ result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n\
    \        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n \
    \       } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n   \
    \     } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n    \
    \    } else {\n            result.push_back(\"E\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n   \
    \ assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  stdout: ''
  stderr: "tmp7hw19kqh: /tmp/tmp7hw19kqh.cpp:59: int main(): Assertion `candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))' failed.\n"
  exit_code: -6
  status: Exception
