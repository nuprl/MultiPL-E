language: cpp
name: HumanEval_108_count_nums
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long count = 0;\n \
    \ for (int i = 0; i < arr.size(); i++) {\n    long sum = 0;\n    if (arr[i] <\
    \ 0) {\n      sum += arr[i] * -1;\n    } else {\n      sum += arr[i];\n    }\n\
    \    while (sum > 0) {\n      sum -= sum % 10;\n      sum /= 10;\n    }\n    if\
    \ (sum != 0) {\n      count++;\n    }\n  }\n  return count;\n}\nint main() {\n\
    \    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp297kdkqx: /tmp/tmp297kdkqx.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpwomqd2d5: /tmp/tmpwomqd2d5.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum = sum\
    \ / 10;\n            if (sum > 0) {\n                count++;\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp1wmueoqb: /tmp/tmp1wmueoqb.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum >= 10) {\n            long\
    \ digit = sum % 10;\n            sum = sum / 10;\n            sum += digit;\n\
    \        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n \
    \   return count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpojv1yil2: /tmp/tmpojv1yil2.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpvgfa1q8y: /tmp/tmpvgfa1q8y.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum = sum\
    \ / 10;\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp4rpf6d6w: /tmp/tmp4rpf6d6w.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = -num;\n        }\n\
    \        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n \
    \   return count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp3ygmt5pq: /tmp/tmp3ygmt5pq.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum -=\
    \ sum % 10;\n            sum /= 10;\n        }\n        if (sum != 0) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2,\
    \ (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpxxgwo8_w: /tmp/tmpxxgwo8_w.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmptt439h0b: /tmp/tmptt439h0b.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum = sum\
    \ / 10;\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpypm31yf6: /tmp/tmpypm31yf6.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp7o8jiygg: /tmp/tmp7o8jiygg.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            long digit\
    \ = sum % 10;\n            sum = sum / 10;\n            count += digit;\n    \
    \    }\n        if (count > 0) {\n            count = 1;\n        } else {\n \
    \           count = 0;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp9_6xprwj: /tmp/tmp9_6xprwj.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpxsp34rny: /tmp/tmpxsp34rny.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = -num;\n        }\n\
    \        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n \
    \   return count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp3t8ykh35: /tmp/tmp3t8ykh35.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ n = arr[i];\n        if (n < 0) {\n            n = -n;\n        }\n        while\
    \ (n > 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n   \
    \     if (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpmkfxpql7: /tmp/tmpmkfxpql7.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long ans = 0;\n \
    \   for(int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if(arr[i]\
    \ < 0) {\n            sum += arr[i] * -1;\n        } else {\n            sum +=\
    \ arr[i];\n        }\n        while(sum > 0) {\n            sum -= sum % 10;\n\
    \            sum /= 10;\n        }\n        if(sum > 0) {\n            ans++;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpmok9vl7q: /tmp/tmpmok9vl7q.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long count = 0;\n \
    \ for (int i = 0; i < arr.size(); i++) {\n    long sum = 0;\n    long num = arr[i];\n\
    \    if (num < 0) {\n      num = num * -1;\n    }\n    while (num > 0) {\n   \
    \   sum += num % 10;\n      num = num / 10;\n    }\n    if (sum > 0) {\n     \
    \ count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate =\
    \ count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpmspechlg: /tmp/tmpmspechlg.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long count = 0;\n \
    \ for (long i = 0; i < arr.size(); i++) {\n    long sum = 0;\n    long num = arr[i];\n\
    \    if (num < 0) {\n      num = num * -1;\n    }\n    while (num > 0) {\n   \
    \   sum += num % 10;\n      num = num / 10;\n    }\n    if (sum > 0) {\n     \
    \ count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate =\
    \ count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpwjbvdg35: /tmp/tmpwjbvdg35.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            arr[i] = arr[i] * -1;\n        }\n        while\
    \ (arr[i] > 0) {\n            sum += arr[i] % 10;\n            arr[i] = arr[i]\
    \ / 10;\n        }\n        if (sum > 0) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2j3pk0ua: /tmp/tmp2j3pk0ua.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = -num;\n        }\n\
    \        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n \
    \   return count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp6je5uv3e: /tmp/tmp6je5uv3e.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num != 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpkjmbjf4a: /tmp/tmpkjmbjf4a.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (auto i = arr.begin(); i != arr.end(); i++) {\n        long sum = 0;\n\
    \        if (*i < 0) {\n            sum += *i;\n            sum *= -1;\n     \
    \   } else {\n            sum += *i;\n        }\n        while (sum > 0) {\n \
    \           sum -= sum % 10;\n            sum /= 10;\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2l6rfbdw: /tmp/tmp2l6rfbdw.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum -=\
    \ sum % 10;\n            sum /= 10;\n        }\n        if (sum > 0) {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2,\
    \ (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpbwcn_i9h: /tmp/tmpbwcn_i9h.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum = sum\
    \ / 10;\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmphtlkajd_: /tmp/tmphtlkajd_.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum -=\
    \ sum % 10;\n            sum /= 10;\n        }\n        if (sum != 0) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2,\
    \ (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp582l9fky: /tmp/tmp582l9fky.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum = sum\
    \ / 10;\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpdrx7c1_x: /tmp/tmpdrx7c1_x.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (auto i : arr) {\n        long sum = 0;\n        if (i < 0) {\n     \
    \       sum += i * -1;\n        } else {\n            sum += i;\n        }\n \
    \       while (sum > 0) {\n            sum -= sum % 10;\n            sum /= 10;\n\
    \        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n \
    \   return count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpru12lfyp: /tmp/tmpru12lfyp.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmphtw_1fwr: /tmp/tmphtw_1fwr.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = -num;\n        }\n\
    \        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n \
    \   return count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpvogh8tcz: /tmp/tmpvogh8tcz.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum = sum\
    \ % 10;\n            sum = sum / 10;\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp7ttbxfni: /tmp/tmp7ttbxfni.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (auto i : arr) {\n        long sum = 0;\n        if (i < 0) {\n     \
    \       sum += i % 10;\n            i = i / 10;\n        }\n        while (i >\
    \ 0) {\n            sum += i % 10;\n            i = i / 10;\n        }\n     \
    \   if (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp96paykuo: /tmp/tmp96paykuo.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)12,
    (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long count = 0;\n \
    \ for (long i = 0; i < arr.size(); i++) {\n    long sum = 0;\n    long num = arr[i];\n\
    \    if (num < 0) {\n      num = num * -1;\n    }\n    while (num > 0) {\n   \
    \   sum += num % 10;\n      num = num / 10;\n    }\n    if (sum > 0) {\n     \
    \ count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate =\
    \ count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmppsd758i8: /tmp/tmppsd758i8.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (auto i : arr) {\n        long sum = 0;\n        if (i < 0) {\n     \
    \       sum += i * -1;\n        } else {\n            sum += i;\n        }\n \
    \       while (sum > 0) {\n            sum -= sum % 10;\n            sum /= 10;\n\
    \        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n \
    \   return count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpmirlv10v: /tmp/tmpmirlv10v.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpdrhjbyt2: /tmp/tmpdrhjbyt2.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = -num;\n        }\n\
    \        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n \
    \   return count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpl9eylzfh: /tmp/tmpl9eylzfh.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum = sum\
    \ / 10;\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp9id775p8: /tmp/tmp9id775p8.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum -=\
    \ sum % 10;\n            sum /= 10;\n        }\n        if (sum != 0) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2,\
    \ (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpmxmns4g0: /tmp/tmpmxmns4g0.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = -num;\n        }\n\
    \        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n \
    \   return count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp0vn6duc3: /tmp/tmp0vn6duc3.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpe_5kcbst: /tmp/tmpe_5kcbst.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpc4r78f0c: /tmp/tmpc4r78f0c.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpq_rssto2: /tmp/tmpq_rssto2.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp1frg1mnl: /tmp/tmp1frg1mnl.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum = sum\
    \ / 10;\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpc2yu10a2: /tmp/tmpc2yu10a2.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum = sum\
    \ / 10;\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp678o0981: /tmp/tmp678o0981.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            arr[i] = arr[i] * -1;\n        }\n        while\
    \ (arr[i] != 0) {\n            sum += arr[i] % 10;\n            arr[i] = arr[i]\
    \ / 10;\n        }\n        if (sum > 0) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmphc39z23c: /tmp/tmphc39z23c.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long count = 0;\n \
    \ for (int i = 0; i < arr.size(); i++) {\n    long sum = 0;\n    if (arr[i] <\
    \ 0) {\n      sum += arr[i] * -1;\n    } else {\n      sum += arr[i];\n    }\n\
    \    while (sum > 0) {\n      sum = sum / 10;\n      count++;\n    }\n  }\n  return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp9e3pd9d4: /tmp/tmp9e3pd9d4.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum = sum\
    \ / 10;\n            if (sum > 0) {\n                count++;\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpj1hnzkgd: /tmp/tmpj1hnzkgd.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpi9mtsul9: /tmp/tmpi9mtsul9.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp974a35x8: /tmp/tmp974a35x8.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (auto i : arr) {\n        long sum = 0;\n        if (i < 0) {\n     \
    \       sum += i % 10;\n            i /= 10;\n        }\n        while (i > 0)\
    \ {\n            sum += i % 10;\n            i /= 10;\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpmelpsvx5: /tmp/tmpmelpsvx5.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)12,
    (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (auto i : arr) {\n        long sum = 0;\n        if (i < 0) {\n     \
    \       sum += i * -1;\n        } else {\n            sum += i;\n        }\n \
    \       while (sum > 0) {\n            sum -= sum % 10;\n            sum /= 10;\n\
    \        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n \
    \   return count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpfkicfo2d: /tmp/tmpfkicfo2d.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpp0xucrs6: /tmp/tmpp0xucrs6.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum = sum\
    \ / 10;\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2_as70r_: /tmp/tmp2_as70r_.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum -=\
    \ sum % 10;\n            sum /= 10;\n        }\n        if (sum > 0) {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2,\
    \ (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpsla82adc: /tmp/tmpsla82adc.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp92dxcsrb: /tmp/tmp92dxcsrb.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = -num;\n        }\n\
    \        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n \
    \   return count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpoqu5u6lq: /tmp/tmpoqu5u6lq.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum = sum\
    \ / 10;\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp8rgnu1d4: /tmp/tmp8rgnu1d4.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp9iqmz1po: /tmp/tmp9iqmz1po.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum = sum\
    \ / 10;\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpkw28u320: /tmp/tmpkw28u320.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmph54wrlil: /tmp/tmph54wrlil.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            long digit\
    \ = sum % 10;\n            sum /= 10;\n            sum += digit;\n        }\n\
    \        if (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (auto i : arr) {\n        long sum = 0;\n        if (i < 0) {\n     \
    \       i = -i;\n        }\n        while (i > 0) {\n            sum += i % 10;\n\
    \            i /= 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp00sznsb6: /tmp/tmp00sznsb6.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum = sum\
    \ / 10;\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpimp68zpb: /tmp/tmpimp68zpb.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp83p4t4j2: /tmp/tmp83p4t4j2.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpccfma7cx: /tmp/tmpccfma7cx.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpyh5w3lrx: /tmp/tmpyh5w3lrx.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            long digit\
    \ = sum % 10;\n            sum = sum / 10;\n            sum += digit;\n      \
    \  }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp694eiwcp: /tmp/tmp694eiwcp.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (auto i : arr) {\n        if (i < 0) {\n            i = -i;\n       \
    \ }\n        long sum = 0;\n        while (i > 0) {\n            sum += i % 10;\n\
    \            i /= 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpun8qcvb9: /tmp/tmpun8qcvb9.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            sum += num;\n           \
    \ num = -num;\n        }\n        while (num > 0) {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if (sum > 0) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp9zaw9l_j: /tmp/tmp9zaw9l_j.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)12,
    (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum -=\
    \ sum % 10;\n            sum /= 10;\n        }\n        if (sum > 0) {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2,\
    \ (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpvmv5uf4k: /tmp/tmpvmv5uf4k.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp8frfnnnd: /tmp/tmp8frfnnnd.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum = sum\
    \ % 10;\n            sum /= 10;\n        }\n        if (sum > 0) {\n         \
    \   count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpvfxuw364: /tmp/tmpvfxuw364.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum = sum\
    \ / 10;\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2rpi2xs3: /tmp/tmp2rpi2xs3.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum = sum\
    \ / 10;\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpdsre5zod: /tmp/tmpdsre5zod.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (auto i : arr) {\n        long sum = 0;\n        if (i < 0) {\n     \
    \       i = -i;\n        }\n        while (i > 0) {\n            sum += i % 10;\n\
    \            i /= 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmplmjbctdy: /tmp/tmplmjbctdy.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long count = 0;\n \
    \ for (long i = 0; i < arr.size(); i++) {\n    long sum = 0;\n    if (arr[i] <\
    \ 0) {\n      sum += arr[i] * -1;\n    } else {\n      sum += arr[i];\n    }\n\
    \    while (sum > 0) {\n      sum = sum % 10;\n      sum /= 10;\n    }\n    if\
    \ (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n}\nint main() {\n\
    \    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpjf9eb_aq: /tmp/tmpjf9eb_aq.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum = sum\
    \ / 10;\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp44_zyckg: /tmp/tmp44_zyckg.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum = sum\
    \ / 10;\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp4qcyul0p: /tmp/tmp4qcyul0p.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum = sum\
    \ / 10;\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp8ctpfe1k: /tmp/tmp8ctpfe1k.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (auto i = arr.begin(); i != arr.end(); i++) {\n        long sum = 0;\n\
    \        long num = *i;\n        if (num < 0) {\n            num = -num;\n   \
    \     }\n        while (num > 0) {\n            sum += num % 10;\n           \
    \ num /= 10;\n        }\n        if (sum > 0) {\n            count++;\n      \
    \  }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpadno6uhl: /tmp/tmpadno6uhl.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            long digit\
    \ = sum % 10;\n            sum = sum / 10;\n            count += digit;\n    \
    \    }\n        if (count > 0) {\n            count = 1;\n        } else {\n \
    \           count = 0;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpb_lrztfj: /tmp/tmpb_lrztfj.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmps89g10qk: /tmp/tmps89g10qk.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpa2tipt6i: /tmp/tmpa2tipt6i.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num != 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpws9t1k79: /tmp/tmpws9t1k79.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum -=\
    \ sum % 10;\n            sum /= 10;\n        }\n        if (sum > 0) {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2,\
    \ (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp05r86kib: /tmp/tmp05r86kib.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            long digit\
    \ = sum % 10;\n            sum /= 10;\n            sum += digit;\n        }\n\
    \        if (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmphf9gf49f: /tmp/tmphf9gf49f.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum -=\
    \ sum % 10;\n            sum /= 10;\n        }\n        if (sum != 0) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2,\
    \ (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpubm1pv7f: /tmp/tmpubm1pv7f.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpaovcyfqq: /tmp/tmpaovcyfqq.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpuxbw6pe_: /tmp/tmpuxbw6pe_.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpu2bta4ci: /tmp/tmpu2bta4ci.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum -=\
    \ sum % 10;\n            sum /= 10;\n        }\n        if (sum != 0) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2,\
    \ (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpg9p225jg: /tmp/tmpg9p225jg.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpgdcgp6ou: /tmp/tmpgdcgp6ou.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num != 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp_ksboftm: /tmp/tmp_ksboftm.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num != 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2sobqk63: /tmp/tmp2sobqk63.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum = sum\
    \ % 10;\n            sum /= 10;\n        }\n        if (sum > 0) {\n         \
    \   count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpshjm5qn5: /tmp/tmpshjm5qn5.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            arr[i] = arr[i] * -1;\n        }\n        while\
    \ (arr[i] > 0) {\n            sum += arr[i] % 10;\n            arr[i] = arr[i]\
    \ / 10;\n        }\n        if (sum > 0) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp_zqak50w: /tmp/tmp_zqak50w.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum -=\
    \ sum % 10;\n            sum /= 10;\n        }\n        if (sum != 0) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2,\
    \ (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmplt0qa3vg: /tmp/tmplt0qa3vg.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum -=\
    \ sum % 10;\n            sum /= 10;\n        }\n        if (sum == 0) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2,\
    \ (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpbr8u5lb9: /tmp/tmpbr8u5lb9.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (auto i : arr) {\n        long sum = 0;\n        if (i < 0) {\n     \
    \       sum += i * -1;\n        } else {\n            sum += i;\n        }\n \
    \       while (sum > 0) {\n            sum -= sum % 10;\n            sum /= 10;\n\
    \        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n \
    \   return count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmps6o8eukq: /tmp/tmps6o8eukq.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ x = arr[i];\n        if (x < 0) {\n            x = -x;\n        }\n        while\
    \ (x > 0) {\n            sum += x % 10;\n            x /= 10;\n        }\n   \
    \     if (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp7x5pfrdo: /tmp/tmp7x5pfrdo.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpme8av4e4: /tmp/tmpme8av4e4.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long num = arr[i];\n    \
    \    long sum = 0;\n        while (num != 0) {\n            sum += num % 10;\n\
    \            num /= 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp1m9k34t2: /tmp/tmp1m9k34t2.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)12,
    (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num != 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpeef_r4jg: /tmp/tmpeef_r4jg.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long count = 0;\n \
    \ for (int i = 0; i < arr.size(); i++) {\n    long sum = 0;\n    if (arr[i] <\
    \ 0) {\n      sum += arr[i] * -1;\n    } else {\n      sum += arr[i];\n    }\n\
    \    while (sum > 0) {\n      sum -= sum % 10;\n      sum /= 10;\n    }\n    if\
    \ (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n}\nint main() {\n\
    \    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpyxgmjfma: /tmp/tmpyxgmjfma.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp_vuz2r91: /tmp/tmp_vuz2r91.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum -=\
    \ sum % 10;\n            sum /= 10;\n        }\n        if (sum != 0) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2,\
    \ (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpugf6p8gr: /tmp/tmpugf6p8gr.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            long digit\
    \ = sum % 10;\n            sum = sum / 10;\n            if (sum == 0) {\n    \
    \            count++;\n            }\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp96kv5d2_: /tmp/tmp96kv5d2_.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp7rvb_ojw: /tmp/tmp7rvb_ojw.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = -num;\n        }\n\
    \        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n \
    \   return count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpqg_op_yy: /tmp/tmpqg_op_yy.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum -=\
    \ sum % 10;\n            sum /= 10;\n        }\n        if (sum != 0) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2,\
    \ (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpd904rgz9: /tmp/tmpd904rgz9.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpd7wwjhdg: /tmp/tmpd7wwjhdg.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            long digit\
    \ = sum % 10;\n            sum = sum / 10;\n            sum += digit;\n      \
    \  }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (auto i : arr) {\n        if (i < 0) {\n            i = -i;\n       \
    \ }\n        long sum = 0;\n        while (i > 0) {\n            sum += i % 10;\n\
    \            i /= 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmphl23rjub: /tmp/tmphl23rjub.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum = sum\
    \ % 10;\n            sum /= 10;\n        }\n        if (sum > 0) {\n         \
    \   count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmptp2e3h53: /tmp/tmptp2e3h53.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum = sum\
    \ % 10;\n            sum /= 10;\n        }\n        if (sum > 0) {\n         \
    \   count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp8a_bt6ht: /tmp/tmp8a_bt6ht.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = -num;\n        }\n\
    \        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n \
    \   return count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpp7z6uosw: /tmp/tmpp7z6uosw.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (auto i : arr) {\n        long sum = 0;\n        if (i < 0) {\n     \
    \       sum += i % 10;\n            i = i / 10;\n        }\n        while (i >\
    \ 0) {\n            sum += i % 10;\n            i = i / 10;\n        }\n     \
    \   if (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp194zjx5t: /tmp/tmp194zjx5t.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)12,
    (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum = sum\
    \ / 10;\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpmh153_h_: /tmp/tmpmh153_h_.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long count = 0;\n \
    \ for (long i = 0; i < arr.size(); i++) {\n    long sum = 0;\n    long num = arr[i];\n\
    \    if (num < 0) {\n      num = num * -1;\n    }\n    while (num > 0) {\n   \
    \   sum += num % 10;\n      num = num / 10;\n    }\n    if (sum > 0) {\n     \
    \ count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate =\
    \ count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpec73mebe: /tmp/tmpec73mebe.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long count = 0;\n \
    \ for (int i = 0; i < arr.size(); i++) {\n    long num = arr[i];\n    long sum\
    \ = 0;\n    while (num != 0) {\n      sum += num % 10;\n      num /= 10;\n   \
    \ }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp_81w8lmr: /tmp/tmp_81w8lmr.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)12,
    (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum = sum\
    \ / 10;\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpg6xvi5ly: /tmp/tmpg6xvi5ly.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum -=\
    \ sum % 10;\n            sum /= 10;\n        }\n        if (sum == 0) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2,\
    \ (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp5qporxh4: /tmp/tmp5qporxh4.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long count = 0;\n \
    \ for (long i = 0; i < arr.size(); i++) {\n    long sum = 0;\n    if (arr[i] <\
    \ 0) {\n      sum += arr[i] * -1;\n    } else {\n      sum += arr[i];\n    }\n\
    \    while (sum > 0) {\n      sum = sum / 10;\n      if (sum > 0) {\n        count++;\n\
    \      }\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmptn7zu8hr: /tmp/tmptn7zu8hr.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ temp = arr[i];\n        if (temp < 0) {\n            temp = temp * -1;\n   \
    \     }\n        while (temp > 0) {\n            sum += temp % 10;\n         \
    \   temp = temp / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp3ryww2m8: /tmp/tmp3ryww2m8.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = -num;\n        }\n\
    \        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n \
    \   return count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp45438uud: /tmp/tmp45438uud.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            arr[i] = arr[i] * -1;\n        }\n        while\
    \ (arr[i] > 0) {\n            sum += arr[i] % 10;\n            arr[i] = arr[i]\
    \ / 10;\n        }\n        if (sum > 0) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpvyc4xr5u: /tmp/tmpvyc4xr5u.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum -=\
    \ sum % 10;\n            sum /= 10;\n        }\n        if (sum != 0) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2,\
    \ (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp7e5uzzew: /tmp/tmp7e5uzzew.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = -num;\n        }\n\
    \        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n \
    \   return count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp5j78ox3v: /tmp/tmp5j78ox3v.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (auto i : arr) {\n        long sum = 0;\n        if (i < 0) {\n     \
    \       sum += i * -1;\n        } else {\n            sum += i;\n        }\n \
    \       while (sum > 0) {\n            sum -= sum % 10;\n            sum /= 10;\n\
    \        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n \
    \   return count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp0u1648h0: /tmp/tmp0u1648h0.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp7lr4o5ue: /tmp/tmp7lr4o5ue.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum = sum\
    \ / 10;\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp6dos8n73: /tmp/tmp6dos8n73.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (auto i : arr) {\n        long sum = 0;\n        if (i < 0) {\n     \
    \       sum += i * -1;\n        } else {\n            sum += i;\n        }\n \
    \       while (sum > 0) {\n            sum -= sum % 10;\n            sum /= 10;\n\
    \        }\n        if (sum != 0) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpvf5i7a7a: /tmp/tmpvf5i7a7a.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpfsfv0sq1: /tmp/tmpfsfv0sq1.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpar86plhn: /tmp/tmpar86plhn.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (auto i : arr) {\n        long sum = 0;\n        if (i < 0) {\n     \
    \       i = i * -1;\n        }\n        while (i > 0) {\n            sum += i\
    \ % 10;\n            i = i / 10;\n        }\n        if (sum > 0) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2,\
    \ (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpmxjucsic: /tmp/tmpmxjucsic.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (auto i : arr) {\n        long sum = 0;\n        if (i < 0) {\n     \
    \       sum += -i % 10;\n            i /= -10;\n        }\n        while (i >\
    \ 0) {\n            sum += i % 10;\n            i /= 10;\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpa4m33a6a: /tmp/tmpa4m33a6a.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp4fxxa7k_: /tmp/tmp4fxxa7k_.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum -=\
    \ sum % 10;\n            sum /= 10;\n        }\n        if (sum > 0) {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2,\
    \ (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpht3sapi4: /tmp/tmpht3sapi4.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            long digit\
    \ = sum % 10;\n            sum = sum / 10;\n            count += digit;\n    \
    \    }\n        if (count > 0) {\n            count++;\n        }\n    }\n   \
    \ return count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp5gadquu1: /tmp/tmp5gadquu1.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long count = 0;\n \
    \ for (int i = 0; i < arr.size(); i++) {\n    long sum = 0;\n    long num = arr[i];\n\
    \    if (num < 0) {\n      num = num * -1;\n    }\n    while (num > 0) {\n   \
    \   sum += num % 10;\n      num = num / 10;\n    }\n    if (sum > 0) {\n     \
    \ count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate =\
    \ count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpn2ur10zm: /tmp/tmpn2ur10zm.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = -num;\n        }\n\
    \        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n \
    \   return count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp28viv_kf: /tmp/tmp28viv_kf.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp60b8v9y1: /tmp/tmp60b8v9y1.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum = sum\
    \ / 10;\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp9bvofwea: /tmp/tmp9bvofwea.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpw4c3nd2u: /tmp/tmpw4c3nd2u.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (auto i : arr) {\n        if (i < 0) {\n            i = -i;\n       \
    \ }\n        long sum = 0;\n        while (i > 0) {\n            sum += i % 10;\n\
    \            i /= 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp78ghcor2: /tmp/tmp78ghcor2.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum = sum\
    \ / 10;\n            if (sum > 0) {\n                count++;\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpxzw3mzgb: /tmp/tmpxzw3mzgb.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpppagxz81: /tmp/tmpppagxz81.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum -=\
    \ sum % 10;\n            sum /= 10;\n        }\n        if (sum != 0) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2,\
    \ (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp4zf0lph2: /tmp/tmp4zf0lph2.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp53oijz28: /tmp/tmp53oijz28.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            arr[i] = arr[i] * -1;\n        }\n        while\
    \ (arr[i] != 0) {\n            sum += arr[i] % 10;\n            arr[i] = arr[i]\
    \ / 10;\n        }\n        if (sum > 0) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpbc_jafzw: /tmp/tmpbc_jafzw.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum = sum\
    \ / 10;\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp8qgxhvw8: /tmp/tmp8qgxhvw8.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum = sum\
    \ / 10;\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpaxm65ipg: /tmp/tmpaxm65ipg.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num != 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpwx4ju3wu: /tmp/tmpwx4ju3wu.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpjtd15v58: /tmp/tmpjtd15v58.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpcqw2ktnd: /tmp/tmpcqw2ktnd.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpqqs563j0: /tmp/tmpqqs563j0.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum = arr[i] * -1;\n        } else {\n         \
    \   sum = arr[i];\n        }\n        while (sum > 0) {\n            sum = sum\
    \ / 10;\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpy8u11xup: /tmp/tmpy8u11xup.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (auto i : arr) {\n        long sum = 0;\n        if (i < 0) {\n     \
    \       i = i * -1;\n        }\n        while (i != 0) {\n            sum += i\
    \ % 10;\n            i = i / 10;\n        }\n        if (sum > 0) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2,\
    \ (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpwrzf6wqj: /tmp/tmpwrzf6wqj.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum = sum\
    \ / 10;\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmppd4wj22l: /tmp/tmppd4wj22l.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num != 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp1njlc5v_: /tmp/tmp1njlc5v_.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum = sum\
    \ % 10;\n            sum /= 10;\n        }\n        if (sum > 0) {\n         \
    \   count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp9gfx1i41: /tmp/tmp9gfx1i41.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpd8x17jvi: /tmp/tmpd8x17jvi.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum -=\
    \ sum % 10;\n            sum /= 10;\n        }\n        if (sum == 0) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2,\
    \ (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpkzxhoggw: /tmp/tmpkzxhoggw.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = -num;\n        }\n\
    \        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n \
    \   return count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpb8sp9jse: /tmp/tmpb8sp9jse.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = -num;\n        }\n\
    \        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n \
    \   return count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp4ob876yd: /tmp/tmp4ob876yd.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum /=\
    \ 10;\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpcn7fiqlj: /tmp/tmpcn7fiqlj.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = -num;\n        }\n\
    \        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n \
    \   return count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp8tea90zm: /tmp/tmp8tea90zm.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (auto i : arr) {\n        long sum = 0;\n        long n = i;\n      \
    \  if (n < 0) {\n            n = -n;\n        }\n        while (n > 0) {\n   \
    \         sum += n % 10;\n            n /= 10;\n        }\n        if (sum > 0)\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpeq8pphrg: /tmp/tmpeq8pphrg.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp60l_8obf: /tmp/tmp60l_8obf.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum = sum\
    \ / 10;\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp_9_fm8x1: /tmp/tmp_9_fm8x1.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            arr[i] = arr[i] * -1;\n        }\n        while\
    \ (arr[i] > 0) {\n            sum += arr[i] % 10;\n            arr[i] = arr[i]\
    \ / 10;\n        }\n        if (sum > 0) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp1_59engv: /tmp/tmp1_59engv.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long count = 0;\n \
    \ for (long i = 0; i < arr.size(); i++) {\n    long sum = 0;\n    if (arr[i] <\
    \ 0) {\n      sum += arr[i] * -1;\n    } else {\n      sum += arr[i];\n    }\n\
    \    while (sum > 0) {\n      sum = sum / 10;\n      count++;\n    }\n  }\n  return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpk20aelfk: /tmp/tmpk20aelfk.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpxo8yu8js: /tmp/tmpxo8yu8js.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ x = arr[i];\n        if (x < 0) {\n            x = x * -1;\n        }\n    \
    \    while (x > 0) {\n            sum += x % 10;\n            x = x / 10;\n  \
    \      }\n        if (sum > 0) {\n            count++;\n        }\n    }\n   \
    \ return count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp1ca35dpq: /tmp/tmp1ca35dpq.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long count = 0;\n \
    \ for (long i = 0; i < arr.size(); i++) {\n    long num = arr[i];\n    long sum\
    \ = 0;\n    if (num < 0) {\n      sum += num;\n      num = -num;\n    }\n    while\
    \ (num > 0) {\n      sum += num % 10;\n      num /= 10;\n    }\n    if (sum >\
    \ 0) {\n      count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2,\
    \ (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpalxain03: /tmp/tmpalxain03.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)12,
    (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp_el5ayf7: /tmp/tmp_el5ayf7.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp9erxo9m5: /tmp/tmp9erxo9m5.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (auto i : arr) {\n        long sum = 0;\n        if (i < 0) {\n     \
    \       sum += i * -1;\n        } else {\n            sum += i;\n        }\n \
    \       while (sum > 0) {\n            sum -= sum % 10;\n            sum /= 10;\n\
    \        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n \
    \   return count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp4bg0sas3: /tmp/tmp4bg0sas3.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            long digit\
    \ = sum % 10;\n            sum /= 10;\n            sum += digit;\n        }\n\
    \        if (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp5puczxbe: /tmp/tmp5puczxbe.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (auto i : arr) {\n        long sum = 0;\n        if (i < 0) {\n     \
    \       i = -i;\n        }\n        while (i > 0) {\n            sum += i % 10;\n\
    \            i /= 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp_cklxbqu: /tmp/tmp_cklxbqu.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum -=\
    \ sum % 10;\n            sum /= 10;\n        }\n        if (sum != 0) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2,\
    \ (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpyect_4bc: /tmp/tmpyect_4bc.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            long digit\
    \ = sum % 10;\n            sum = sum / 10;\n            count += digit;\n    \
    \    }\n        if (count > 0) {\n            count = 1;\n        } else {\n \
    \           count = 0;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpslk5pysk: /tmp/tmpslk5pysk.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long count = 0;\n \
    \ for (long i = 0; i < arr.size(); i++) {\n    long sum = 0;\n    if (arr[i] <\
    \ 0) {\n      sum += arr[i] * -1;\n    } else {\n      sum += arr[i];\n    }\n\
    \    while (sum > 0) {\n      sum -= sum % 10;\n      sum /= 10;\n    }\n    if\
    \ (sum == 0) {\n      count++;\n    }\n  }\n  return count;\n}\nint main() {\n\
    \    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpojt7pfgy.cpp: In function 'int main()':\n/tmp/tmpojt7pfgy.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = count_nums;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpojt7pfgy.cpp:2:\n/tmp/tmpojt7pfgy.cpp:31:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (0));\n                                           ^\n/tmp/tmpojt7pfgy.cpp:32:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)0}))) == (0));\n                                        ^\n/tmp/tmpojt7pfgy.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)0}))) == (0));\n                                                     \
    \                 ^\n/tmp/tmpojt7pfgy.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpojt7pfgy.cpp:32:70: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpojt7pfgy.cpp:32:70:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpojt7pfgy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n       "
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum -=\
    \ sum % 10;\n            sum /= 10;\n        }\n        if (sum != 0) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2,\
    \ (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpyect_4bc: /tmp/tmpyect_4bc.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum -=\
    \ sum % 10;\n            sum /= 10;\n        }\n        if (sum > 0) {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2,\
    \ (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpht3sapi4: /tmp/tmpht3sapi4.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = -1 * num;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ /= 10;\n        }\n        if (sum > 0) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy4mwmyiv.cpp: In function 'int main()':\n/tmp/tmpy4mwmyiv.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = count_nums;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy4mwmyiv.cpp:2:\n/tmp/tmpy4mwmyiv.cpp:30:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (0));\n                                           ^\n/tmp/tmpy4mwmyiv.cpp:31:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)0}))) == (0));\n                                        ^\n/tmp/tmpy4mwmyiv.cpp:31:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)0}))) == (0));\n                                                     \
    \                 ^\n/tmp/tmpy4mwmyiv.cpp:31:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpy4mwmyiv.cpp:31:70: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpy4mwmyiv.cpp:31:70:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpy4mwmyiv.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n       "
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum = sum\
    \ / 10;\n            if (sum > 0) {\n                count++;\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpxzw3mzgb: /tmp/tmpxzw3mzgb.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum = sum\
    \ % 10;\n            sum = sum / 10;\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg1vygbpg.cpp: In function 'int main()':\n/tmp/tmpg1vygbpg.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = count_nums;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg1vygbpg.cpp:2:\n/tmp/tmpg1vygbpg.cpp:29:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (0));\n                                           ^\n/tmp/tmpg1vygbpg.cpp:30:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)0}))) == (0));\n                                        ^\n/tmp/tmpg1vygbpg.cpp:30:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)0}))) == (0));\n                                                     \
    \                 ^\n/tmp/tmpg1vygbpg.cpp:30:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpg1vygbpg.cpp:30:70: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpg1vygbpg.cpp:30:70:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpg1vygbpg.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n       "
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum = sum\
    \ / 10;\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp_9_fm8x1: /tmp/tmp_9_fm8x1.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (auto i : arr) {\n        long sum = 0;\n        if (i < 0) {\n     \
    \       sum += i * -1;\n        } else {\n            sum += i;\n        }\n \
    \       while (sum > 0) {\n            sum = sum / 10;\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo6f7s23v.cpp: In function 'long int count_nums(std::vector<long\
    \ int>)':\n/tmp/tmpo6f7s23v.cpp:12:15: error: 'i' does not name a type\n     for\
    \ (auto i : arr) {\n               ^\n/tmp/tmpo6f7s23v.cpp:24:5: error: expected\
    \ ';' before 'return'\n     return count;\n     ^\n/tmp/tmpo6f7s23v.cpp:24:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpo6f7s23v.cpp:24:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpo6f7s23v.cpp:24:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpo6f7s23v.cpp:24:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpo6f7s23v.cpp: In function 'int main()':\n/tmp/tmpo6f7s23v.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = count_nums;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpo6f7s23v.cpp:2:\n/tmp/tmpo6f7s23v.cpp:28:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (0));\n                                           ^\n/tmp/tmpo6f7s23v.cpp:29:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)0}))) == (0));\n                                        ^\n/tmp/tmpo6f7s23v.cpp:29:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)0}))) == (0));\n                                                     \
    \                 ^\n/tmp/tmpo6f7s23v.cpp:29:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpo6f7s23v.cpp:29:70: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpo6f7s23v.cpp:29:70:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/que"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp5puczxbe: /tmp/tmp5puczxbe.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp5puczxbe: /tmp/tmp5puczxbe.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum = sum\
    \ / 10;\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp_9_fm8x1: /tmp/tmp_9_fm8x1.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            long digit\
    \ = sum % 10;\n            sum = sum / 10;\n            sum += digit;\n      \
    \  }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n        } else {\n        \
    \    sum += arr[i];\n        }\n        while (sum > 0) {\n            sum = sum\
    \ / 10;\n            if (sum > 0) {\n                count++;\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpxzw3mzgb: /tmp/tmpxzw3mzgb.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp9erxo9m5: /tmp/tmp9erxo9m5.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            arr[i] = arr[i] * -1;\n        }\n        while\
    \ (arr[i] > 0) {\n            sum += arr[i] % 10;\n            arr[i] = arr[i]\
    \ / 10;\n        }\n        if (sum > 0) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpvyc4xr5u: /tmp/tmpvyc4xr5u.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
