language: cpp
name: HumanEval_141_file_name_check
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int count2 = 0;\n    for(int i = 0; i < file_name.length();\
    \ i++){\n        if(file_name[i] >= '0' && file_name[i] <= '9'){\n           \
    \ count++;\n        }\n        if(file_name[i] == '.'){\n            count2++;\n\
    \        }\n    }\n    if(count > 3 || count2 != 1){\n        return \"No\";\n\
    \    }\n    std::string str = file_name.substr(0, file_name.find('.'));\n    if(str.length()\
    \ == 0){\n        return \"No\";\n    }\n    if(str[0] >= 'a' && str[0] <= 'z'\
    \ || str[0] >= 'A' && str[0] <= 'Z'){\n        std::string str2 = file_name.substr(file_name.find('.')\
    \ + 1, file_name.length());\n        if(str2 == \"txt\" || str2 == \"exe\" ||\
    \ str2 == \"dll\"){\n            return \"Yes\";\n        }\n    }\n    return\
    \ \"No\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086335
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot++;\n        }\n    }\n    if(count > 3 || dot != 1) {\n \
    \       return \"No\";\n    }\n    std::string str = file_name.substr(0, file_name.find(\"\
    .\"));\n    if(str.length() == 0 || (str[0] < 'a' || str[0] > 'z') && (str[0]\
    \ < 'A' || str[0] > 'Z')) {\n        return \"No\";\n    }\n    str = file_name.substr(file_name.find(\"\
    .\") + 1);\n    if(str != \"txt\" && str != \"exe\" && str != \"dll\") {\n   \
    \     return \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086335
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    int count = 0;\n    int dot = 0;\n    int dot_index\
    \ = 0;\n    int count_after_dot = 0;\n    for(int i = 0; i < file_name.length();\
    \ i++){\n        if(file_name[i] >= '0' && file_name[i] <= '9'){\n           \
    \ count++;\n        }\n        if(file_name[i] == '.'){\n            dot++;\n\
    \            dot_index = i;\n        }\n    }\n    if(count > 3 || dot != 1){\n\
    \        return \"No\";\n    }\n    for(int i = dot_index + 1; i < file_name.length();\
    \ i++){\n        count_after_dot++;\n    }\n    if(count_after_dot != 3){\n  \
    \      return \"No\";\n    }\n    if(file_name[0] >= 'a' && file_name[0] <= 'z'\
    \ || file_name[0] >= 'A' && file_name[0] <= 'Z'){\n        if(file_name[dot_index\
    \ + 1] == 't' && file_name[dot_index + 2] == 'x' && file_name[dot_index + 3] ==\
    \ 't'){\n            return \"Yes\";\n        }\n        else if(file_name[dot_index\
    \ + 1] == 'e' && file_name[dot_index + 2] == 'x' && file_name[dot_index + 3] ==\
    \ 'e'){\n            return \"Yes\";\n        }\n        else if(file_name[dot_index\
    \ + 1] == 'd' && file_name[dot_index + 2] == 'l' && file_name[dot_index + 3] ==\
    \ 'l'){\n            return \"Yes\";\n        }\n        else{\n            return\
    \ \"No\";\n        }\n    }\n    else{\n        return \"No\";\n    }\n}\nint\
    \ main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086335
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    int\
    \ digit_count = 0;\n    for(int i = 0; i < file_name.length(); i++) {\n      \
    \  if(file_name[i] == '.') {\n            dot_count++;\n            dot_index\
    \ = i;\n        }\n        if(file_name[i] >= '0' && file_name[i] <= '9') {\n\
    \            digit_count++;\n        }\n    }\n    if(dot_count != 1) {\n    \
    \    return \"No\";\n    }\n    if(digit_count > 3) {\n        return \"No\";\n\
    \    }\n    if(file_name[0] >= '0' && file_name[0] <= '9') {\n        return \"\
    No\";\n    }\n    if(file_name.substr(dot_index+1, file_name.length()-1) != \"\
    txt\" && file_name.substr(dot_index+1, file_name.length()-1) != \"exe\" && file_name.substr(dot_index+1,\
    \ file_name.length()-1) != \"dll\") {\n        return \"No\";\n    }\n    return\
    \ \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpfm9uzehs: /tmp/tmpfm9uzehs.cpp:51: int main(): Assertion `candidate(("_Y.txt"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660086335
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n        }\n    }\n    if(count > 3 || dot_count\
    \ != 1) {\n        return \"No\";\n    }\n    std::string sub = file_name.substr(0,\
    \ file_name.find('.'));\n    if(sub.length() == 0) {\n        return \"No\";\n\
    \    }\n    if(sub[0] >= 'a' && sub[0] <= 'z' || sub[0] >= 'A' && sub[0] <= 'Z')\
    \ {\n        std::string sub2 = file_name.substr(file_name.find('.') + 1, len);\n\
    \        if(sub2 == \"txt\" || sub2 == \"exe\" || sub2 == \"dll\") {\n       \
    \     return \"Yes\";\n        }\n    }\n    return \"No\";\n}\nint main() {\n\
    \    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086335
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n\tint count = 0;\n\tint dot_count = 0;\n\tfor (int i = 0; i < file_name.length();\
    \ i++) {\n\t\tif (file_name[i] == '.') {\n\t\t\tdot_count++;\n\t\t}\n\t\tif (file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n\t\t\tcount++;\n\t\t}\n\t}\n\tif (count >\
    \ 3 || dot_count != 1) {\n\t\treturn \"No\";\n\t}\n\tstd::string str = file_name.substr(0,\
    \ file_name.find(\".\"));\n\tif (str.length() == 0) {\n\t\treturn \"No\";\n\t\
    }\n\tif (str[0] >= '0' && str[0] <= '9') {\n\t\treturn \"No\";\n\t}\n\tstd::string\
    \ str1 = file_name.substr(file_name.find(\".\") + 1);\n\tif (str1 != \"txt\" &&\
    \ str1 != \"exe\" && str1 != \"dll\") {\n\t\treturn \"No\";\n\t}\n\treturn \"\
    Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmp39fjfth_: /tmp/tmp39fjfth_.cpp:50: int main(): Assertion `candidate(("_Y.txt"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660086335
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    std::regex pattern(\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\");\n\
    \    return std::regex_match(file_name, pattern) ? \"Yes\" : \"No\";\n}\nint main()\
    \ {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpao07mit1: /tmp/tmpao07mit1.cpp:21: int main(): Assertion `candidate(("example.txt"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086338
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int start_with_letter = 0;\n\
    \    int end_with_txt_exe_dll = 0;\n    for(int i = 0; i < file_name.length();\
    \ i++) {\n        if(file_name[i] >= '0' && file_name[i] <= '9') {\n         \
    \   count++;\n        }\n        if(file_name[i] == '.') {\n            dot_count++;\n\
    \        }\n        if(file_name[i] >= 'a' && file_name[i] <= 'z' || file_name[i]\
    \ >= 'A' && file_name[i] <= 'Z') {\n            start_with_letter++;\n       \
    \ }\n        if(file_name[i] == 't' && file_name[i+1] == 'x' && file_name[i+2]\
    \ == 't' || file_name[i] == 'e' && file_name[i+1] == 'x' && file_name[i+2] ==\
    \ 'e' || file_name[i] == 'd' && file_name[i+1] == 'l' && file_name[i+2] == 'l')\
    \ {\n            end_with_txt_exe_dll++;\n        }\n    }\n    if(count <= 3\
    \ && dot_count == 1 && start_with_letter != 0 && end_with_txt_exe_dll != 0) {\n\
    \        return \"Yes\";\n    }\n    else {\n        return \"No\";\n    }\n}\n\
    int main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpytvnt53q: /tmp/tmpytvnt53q.cpp:44: int main(): Assertion `candidate(("1example.dll"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660086335
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    std::string result = \"No\";\n    int count = 0;\n    for (int i = 0;\
    \ i < file_name.length(); i++) {\n        if (file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n    }\n    if (count > 3) {\n  \
    \      return result;\n    }\n    int dot_count = 0;\n    for (int i = 0; i <\
    \ file_name.length(); i++) {\n        if (file_name[i] == '.') {\n           \
    \ dot_count++;\n        }\n    }\n    if (dot_count != 1) {\n        return result;\n\
    \    }\n    std::string sub_string_before_dot = \"\";\n    std::string sub_string_after_dot\
    \ = \"\";\n    for (int i = 0; i < file_name.length(); i++) {\n        if (file_name[i]\
    \ == '.') {\n            sub_string_before_dot = file_name.substr(0, i);\n   \
    \         sub_string_after_dot = file_name.substr(i + 1, file_name.length() -\
    \ i - 1);\n            break;\n        }\n    }\n    if (sub_string_before_dot.length()\
    \ == 0) {\n        return result;\n    }\n    if (sub_string_before_dot[0] < 'a'\
    \ || sub_string_before_dot[0] > 'z') {\n        if (sub_string_before_dot[0] <\
    \ 'A' || sub_string_before_dot[0] > 'Z') {\n            return result;\n     \
    \   }\n    }\n    if (sub_string_after_dot != \"txt\" && sub_string_after_dot\
    \ != \"exe\" && sub_string_after_dot != \"dll\") {\n        return result;\n \
    \   }\n    result = \"Yes\";\n    return result;\n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086335
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n  int count = 0;\n  int dot_count = 0;\n  int dot_index = 0;\n  for(int i\
    \ = 0; i < file_name.length(); i++) {\n    if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n      count++;\n    }\n    if(file_name[i] == '.') {\n      dot_count++;\n\
    \      dot_index = i;\n    }\n  }\n  if(count > 3) {\n    return \"No\";\n  }\n\
    \  if(dot_count != 1) {\n    return \"No\";\n  }\n  if(file_name[0] < 'a' || file_name[0]\
    \ > 'z') {\n    return \"No\";\n  }\n  if(file_name.substr(dot_index + 1, 3) !=\
    \ \"txt\" && file_name.substr(dot_index + 1, 3) != \"exe\" && file_name.substr(dot_index\
    \ + 1, 3) != \"dll\") {\n    return \"No\";\n  }\n  return \"Yes\";\n}\nint main()\
    \ {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpumxi6kvn: /tmp/tmpumxi6kvn.cpp:47: int main(): Assertion `candidate(("K.dll"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086335
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    int\
    \ len = file_name.length();\n    for(int i = 0; i < len; i++) {\n        if(file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            count++;\n        }\n        if(file_name[i]\
    \ == '.') {\n            dot_count++;\n            dot_index = i;\n        }\n\
    \    }\n    if(count > 3) {\n        return \"No\";\n    }\n    if(dot_count !=\
    \ 1) {\n        return \"No\";\n    }\n    if(dot_index == 0) {\n        return\
    \ \"No\";\n    }\n    if(file_name[dot_index + 1] == 't' && file_name[dot_index\
    \ + 2] == 'x' && file_name[dot_index + 3] == 't') {\n        return \"Yes\";\n\
    \    }\n    if(file_name[dot_index + 1] == 'e' && file_name[dot_index + 2] ==\
    \ 'x' && file_name[dot_index + 3] == 'e') {\n        return \"Yes\";\n    }\n\
    \    if(file_name[dot_index + 1] == 'd' && file_name[dot_index + 2] == 'l' &&\
    \ file_name[dot_index + 3] == 'l') {\n        return \"Yes\";\n    }\n    return\
    \ \"No\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpup4fi9aa: /tmp/tmpup4fi9aa.cpp:52: int main(): Assertion `candidate(("1example.dll"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660086335
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n\tint count = 0;\n\tint dot = 0;\n\tint len = file_name.length();\n\tfor\
    \ (int i = 0; i < len; i++) {\n\t\tif (file_name[i] >= '0' && file_name[i] <=\
    \ '9') {\n\t\t\tcount++;\n\t\t}\n\t\tif (file_name[i] == '.') {\n\t\t\tdot++;\n\
    \t\t}\n\t}\n\tif (count > 3 || dot != 1) {\n\t\treturn \"No\";\n\t}\n\tstd::string\
    \ s1 = file_name.substr(0, file_name.find(\".\"));\n\tstd::string s2 = file_name.substr(file_name.find(\"\
    .\") + 1);\n\tif (s1.length() == 0 || (s1[0] < 'a' || s1[0] > 'z') && (s1[0] <\
    \ 'A' || s1[0] > 'Z')) {\n\t\treturn \"No\";\n\t}\n\tif (s2 != \"txt\" && s2 !=\
    \ \"exe\" && s2 != \"dll\") {\n\t\treturn \"No\";\n\t}\n\treturn \"Yes\";\n}\n\
    int main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086335
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // your code here\n    std::regex pattern(\"^[a-zA-Z]+[0-9]{0,3}\\\\\
    .(txt|exe|dll)$\");\n    return std::regex_match(file_name, pattern) ? \"Yes\"\
    \ : \"No\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpn1cfj9gf: /tmp/tmpn1cfj9gf.cpp:26: int main(): Assertion `candidate(("MY16FILE3.exe"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086338
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int flag = 0;\n    int flag2\
    \ = 0;\n    int flag3 = 0;\n    int flag4 = 0;\n    int flag5 = 0;\n    int flag6\
    \ = 0;\n    int flag7 = 0;\n    int flag8 = 0;\n    int flag9 = 0;\n    int flag10\
    \ = 0;\n    int flag11 = 0;\n    int flag12 = 0;\n    int flag13 = 0;\n    int\
    \ flag14 = 0;\n    int flag15 = 0;\n    int flag16 = 0;\n    int flag17 = 0;\n\
    \    int flag18 = 0;\n    int flag19 = 0;\n    int flag20 = 0;\n    int flag21\
    \ = 0;\n    int flag22 = 0;\n    int flag23 = 0;\n    int flag24 = 0;\n    int\
    \ flag25 = 0;\n    int flag26 = 0;\n    int flag27 = 0;\n    int flag28 = 0;\n\
    \    int flag29 = 0;\n    int flag30 = 0;\n    int flag31 = 0;\n    int flag32\
    \ = 0;\n    int flag33 = 0;\n    int flag34 = 0;\n    int flag35 = 0;\n    int\
    \ flag36 = 0;\n    int flag37 = 0;\n    int flag38 = 0;\n    int flag39 = 0;\n\
    \    int flag40 = 0;\n    int flag41 = 0;\n    int flag42 = 0;\n    int flag43\
    \ = 0;\n    int flag44 = 0;\n    int flag45 = 0;\n    int flag46 = 0;\n    int\
    \ flag47 = 0;\n    int flag48 = 0;\n    int flag49 = 0;\n    int flag50 = 0;\n\
    \    int flag51 = 0;\n    int flag52 = 0;\n    int flag53 = 0;\n    int flag54\
    \ = 0;\n    int flag55 = 0;\n    int flag56 = 0;\n    int flag57 = 0;\n    int\
    \ flag58 = 0;\n    int flag59 = 0;\n    int flag60 = 0;\n    int flag61 = 0;\n\
    \    int flag62 = 0;\n\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmp26b07d8s: /tmp/tmp26b07d8s.cpp:84: int main(): Assertion `candidate(("example.txt"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086335
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot++;\n        }\n    }\n    if(count > 3 || dot != 1) {\n \
    \       return \"No\";\n    }\n    std::string sub1 = file_name.substr(0, file_name.find(\"\
    .\"));\n    std::string sub2 = file_name.substr(file_name.find(\".\") + 1);\n\
    \    if(sub1.length() == 0 || (sub1[0] < 'a' || sub1[0] > 'z') && (sub1[0] < 'A'\
    \ || sub1[0] > 'Z')) {\n        return \"No\";\n    }\n    if(sub2 != \"txt\"\
    \ && sub2 != \"exe\" && sub2 != \"dll\") {\n        return \"No\";\n    }\n  \
    \  return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n \
    \   assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086335
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // your code here\n    int count = 0;\n    int dot = 0;\n    int len\
    \ = file_name.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(file_name[i]\
    \ >= '0' && file_name[i] <= '9')\n        {\n            count++;\n        }\n\
    \        if(file_name[i] == '.')\n        {\n            dot++;\n        }\n \
    \   }\n    if(count > 3 || dot != 1)\n    {\n        return \"No\";\n    }\n \
    \   std::string str = file_name.substr(0, file_name.find(\".\"));\n    if(str.length()\
    \ == 0)\n    {\n        return \"No\";\n    }\n    if(str[0] >= 'a' && str[0]\
    \ <= 'z' || str[0] >= 'A' && str[0] <= 'Z')\n    {\n        std::string str1 =\
    \ file_name.substr(file_name.find(\".\") + 1, len);\n        if(str1 == \"txt\"\
    \ || str1 == \"exe\" || str1 == \"dll\")\n        {\n            return \"Yes\"\
    ;\n        }\n        else\n        {\n            return \"No\";\n        }\n\
    \    }\n    else\n    {\n        return \"No\";\n    }\n}\nint main() {\n    auto\
    \ candidate = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"\
    Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086335
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot++;\n        }\n    }\n    if(count > 3 || dot != 1) {\n \
    \       return \"No\";\n    }\n    std::string str = file_name.substr(0, file_name.find(\"\
    .\"));\n    if(str.length() == 0 || (str[0] < 'a' || str[0] > 'z') && (str[0]\
    \ < 'A' || str[0] > 'Z')) {\n        return \"No\";\n    }\n    std::string str1\
    \ = file_name.substr(file_name.find(\".\") + 1, len);\n    if(str1 != \"txt\"\
    \ && str1 != \"exe\" && str1 != \"dll\") {\n        return \"No\";\n    }\n  \
    \  return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n \
    \   assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086335
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n        }\n    }\n    if(count > 3 || dot_count\
    \ != 1) {\n        return \"No\";\n    }\n    std::string ext = file_name.substr(file_name.find(\"\
    .\") + 1);\n    if(ext != \"txt\" && ext != \"exe\" && ext != \"dll\") {\n   \
    \     return \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpjmdk3hs8: /tmp/tmpjmdk3hs8.cpp:39: int main(): Assertion `candidate(("1example.dll"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660086335
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n\tint count = 0;\n\tint dot = 0;\n\tint len = file_name.length();\n\tfor\
    \ (int i = 0; i < len; i++) {\n\t\tif (file_name[i] >= '0' && file_name[i] <=\
    \ '9') {\n\t\t\tcount++;\n\t\t}\n\t\tif (file_name[i] == '.') {\n\t\t\tdot++;\n\
    \t\t}\n\t}\n\tif (count > 3 || dot != 1) {\n\t\treturn \"No\";\n\t}\n\tstd::string\
    \ sub1 = file_name.substr(0, file_name.find(\".\"));\n\tstd::string sub2 = file_name.substr(file_name.find(\"\
    .\") + 1);\n\tif (sub1.length() == 0 || (sub1[0] < 'a' || sub1[0] > 'z') && (sub1[0]\
    \ < 'A' || sub1[0] > 'Z')) {\n\t\treturn \"No\";\n\t}\n\tif (sub2 != \"txt\" &&\
    \ sub2 != \"exe\" && sub2 != \"dll\") {\n\t\treturn \"No\";\n\t}\n\treturn \"\
    Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086335
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n\tint count = 0;\n\tint dot_count = 0;\n\tint dot_index = 0;\n\tfor (int\
    \ i = 0; i < file_name.length(); i++) {\n\t\tif (file_name[i] == '.') {\n\t\t\t\
    dot_count++;\n\t\t\tdot_index = i;\n\t\t}\n\t\tif (file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n\t\t\tcount++;\n\t\t}\n\t}\n\tif (count > 3) {\n\t\treturn \"No\"\
    ;\n\t}\n\tif (dot_count != 1) {\n\t\treturn \"No\";\n\t}\n\tif (file_name[0] >=\
    \ '0' && file_name[0] <= '9') {\n\t\treturn \"No\";\n\t}\n\tstd::string extension\
    \ = file_name.substr(dot_index + 1);\n\tif (extension == \"txt\" || extension\
    \ == \"exe\" || extension == \"dll\") {\n\t\treturn \"Yes\";\n\t}\n\treturn \"\
    No\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmp0_uv2rgs: /tmp/tmp0_uv2rgs.cpp:51: int main(): Assertion `candidate(("_Y.txt"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660086335
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot++;\n        }\n    }\n    if(count > 3 || dot != 1) {\n \
    \       return \"No\";\n    }\n    std::string str1 = file_name.substr(0, file_name.find('.'));\n\
    \    std::string str2 = file_name.substr(file_name.find('.') + 1);\n    if(str1\
    \ == \"\" || (str1[0] < 'a' || str1[0] > 'z') && (str1[0] < 'A' || str1[0] > 'Z'))\
    \ {\n        return \"No\";\n    }\n    if(str2 != \"txt\" && str2 != \"exe\"\
    \ && str2 != \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";\n\
    }\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086335
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot++;\n        }\n    }\n    if(count > 3 || dot != 1) {\n \
    \       return \"No\";\n    }\n    std::string str = file_name.substr(0, file_name.find(\"\
    .\"));\n    if(str.length() == 0 || (str[0] < 'a' || str[0] > 'z') && (str[0]\
    \ < 'A' || str[0] > 'Z')) {\n        return \"No\";\n    }\n    str = file_name.substr(file_name.find(\"\
    .\") + 1);\n    if(str != \"txt\" && str != \"exe\" && str != \"dll\") {\n   \
    \     return \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086335
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    std::regex pattern(\"^[a-zA-Z]{1}[a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    );\n    return std::regex_match(file_name, pattern) ? \"Yes\" : \"No\";\n}\nint\
    \ main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpm9282pex: /tmp/tmpm9282pex.cpp:21: int main(): Assertion `candidate(("example.txt"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086338
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n\tstd::string result = \"No\";\n\tstd::string sub_string_before_dot;\n\t\
    std::string sub_string_after_dot;\n\tint count_digits = 0;\n\tint count_dot =\
    \ 0;\n\tfor (int i = 0; i < file_name.length(); i++) {\n\t\tif (file_name[i] >=\
    \ '0' && file_name[i] <= '9') {\n\t\t\tcount_digits++;\n\t\t}\n\t\tif (file_name[i]\
    \ == '.') {\n\t\t\tcount_dot++;\n\t\t}\n\t}\n\tif (count_digits <= 3 && count_dot\
    \ == 1) {\n\t\tsub_string_before_dot = file_name.substr(0, file_name.find('.'));\n\
    \t\tsub_string_after_dot = file_name.substr(file_name.find('.') + 1);\n\t\tif\
    \ (sub_string_before_dot.length() > 0 && (sub_string_before_dot[0] >= 'a' && sub_string_before_dot[0]\
    \ <= 'z') || (sub_string_before_dot[0] >= 'A' && sub_string_before_dot[0] <= 'Z'))\
    \ {\n\t\t\tif (sub_string_after_dot == \"txt\" || sub_string_after_dot == \"exe\"\
    \ || sub_string_after_dot == \"dll\") {\n\t\t\t\tresult = \"Yes\";\n\t\t\t}\n\t\
    \t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086335
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot = 0;\n    int flag = 0;\n    for(int i =\
    \ 0; i < file_name.length(); i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot++;\n        }\n        if(file_name[i] >= 'a' && file_name[i]\
    \ <= 'z') {\n            flag = 1;\n        }\n        if(file_name[i] >= 'A'\
    \ && file_name[i] <= 'Z') {\n            flag = 1;\n        }\n    }\n    if(count\
    \ > 3 || dot != 1 || flag == 0) {\n        return \"No\";\n    }\n    std::string\
    \ ext = file_name.substr(file_name.find(\".\") + 1);\n    if(ext == \"txt\" ||\
    \ ext == \"exe\" || ext == \"dll\") {\n        return \"Yes\";\n    }\n    return\
    \ \"No\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmprupgbqa3: /tmp/tmprupgbqa3.cpp:45: int main(): Assertion `candidate(("1example.dll"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660086337
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    for(int\
    \ i = 0; i < file_name.length(); i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n            dot_index = i;\n        }\n    }\n\
    \    if(count > 3) {\n        return \"No\";\n    }\n    if(dot_count != 1) {\n\
    \        return \"No\";\n    }\n    if(dot_index == 0) {\n        return \"No\"\
    ;\n    }\n    if(file_name[dot_index + 1] == 't' && file_name[dot_index + 2] ==\
    \ 'x' && file_name[dot_index + 3] == 't') {\n        return \"Yes\";\n    }\n\
    \    if(file_name[dot_index + 1] == 'e' && file_name[dot_index + 2] == 'x' &&\
    \ file_name[dot_index + 3] == 'e') {\n        return \"Yes\";\n    }\n    if(file_name[dot_index\
    \ + 1] == 'd' && file_name[dot_index + 2] == 'l' && file_name[dot_index + 3] ==\
    \ 'l') {\n        return \"Yes\";\n    }\n    return \"No\";\n}\nint main() {\n\
    \    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmp86fu_wqb: /tmp/tmp86fu_wqb.cpp:51: int main(): Assertion `candidate(("1example.dll"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660086337
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    for(int\
    \ i = 0; i < file_name.length(); i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n            dot_index = i;\n        }\n    }\n\
    \    if(count > 3) {\n        return \"No\";\n    }\n    if(dot_count != 1) {\n\
    \        return \"No\";\n    }\n    if(file_name[0] < 'a' || file_name[0] > 'z')\
    \ {\n        return \"No\";\n    }\n    if(file_name.substr(dot_index + 1, 3)\
    \ != \"txt\" && file_name.substr(dot_index + 1, 3) != \"exe\" && file_name.substr(dot_index\
    \ + 1, 3) != \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";\n\
    }\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpph5nss4a: /tmp/tmpph5nss4a.cpp:47: int main(): Assertion `candidate(("K.dll"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086337
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n        }\n    }\n    if(count > 3 || dot_count\
    \ != 1) {\n        return \"No\";\n    }\n    std::string ext = file_name.substr(file_name.find(\"\
    .\") + 1);\n    if(ext == \"txt\" || ext == \"exe\" || ext == \"dll\") {\n   \
    \     return \"Yes\";\n    }\n    return \"No\";\n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpguhavkbc: /tmp/tmpguhavkbc.cpp:39: int main(): Assertion `candidate(("1example.dll"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660086338
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot++;\n        }\n    }\n    if(count > 3 || dot != 1) {\n \
    \       return \"No\";\n    }\n    std::string sub = file_name.substr(0, file_name.find(\"\
    .\"));\n    if(sub.length() == 0) {\n        return \"No\";\n    }\n    if(sub[0]\
    \ >= 'a' && sub[0] <= 'z' || sub[0] >= 'A' && sub[0] <= 'Z') {\n        std::string\
    \ sub2 = file_name.substr(file_name.find(\".\") + 1);\n        if(sub2 == \"txt\"\
    \ || sub2 == \"exe\" || sub2 == \"dll\") {\n            return \"Yes\";\n    \
    \    }\n    }\n    return \"No\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086338
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    std::string result = \"No\";\n    int count = 0;\n    int dot_count =\
    \ 0;\n    int dot_index = 0;\n    for (int i = 0; i < file_name.length(); i++)\
    \ {\n        if (file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n\
    \        }\n        if (file_name[i] == '.') {\n            dot_count++;\n   \
    \         dot_index = i;\n        }\n    }\n    if (count > 3) {\n        return\
    \ result;\n    }\n    if (dot_count != 1) {\n        return result;\n    }\n \
    \   if (file_name[0] < 'a' || file_name[0] > 'z') {\n        return result;\n\
    \    }\n    if (file_name.substr(dot_index + 1, 3) != \"txt\" && file_name.substr(dot_index\
    \ + 1, 3) != \"exe\" && file_name.substr(dot_index + 1, 3) != \"dll\") {\n   \
    \     return result;\n    }\n    result = \"Yes\";\n    return result;\n}\nint\
    \ main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpto9ijrb7: /tmp/tmpto9ijrb7.cpp:49: int main(): Assertion `candidate(("K.dll"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086337
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n  // your code here\n  int count = 0;\n  int dot = 0;\n  std::string s1 =\
    \ \"\";\n  std::string s2 = \"\";\n  for(int i = 0; i < file_name.length(); i++){\n\
    \    if(file_name[i] >= '0' && file_name[i] <= '9'){\n      count++;\n    }\n\
    \    if(file_name[i] == '.'){\n      dot++;\n    }\n  }\n  if(count > 3 || dot\
    \ != 1){\n    return \"No\";\n  }\n  for(int i = 0; i < file_name.length(); i++){\n\
    \    if(file_name[i] == '.'){\n      break;\n    }\n    s1 += file_name[i];\n\
    \  }\n  for(int i = file_name.length() - 1; i >= 0; i--){\n    if(file_name[i]\
    \ == '.'){\n      break;\n    }\n    s2 += file_name[i];\n  }\n  std::reverse(s2.begin(),\
    \ s2.end());\n  if(s1[0] >= 'a' && s1[0] <= 'z' || s1[0] >= 'A' && s1[0] <= 'Z'){\n\
    \    if(s2 == \"txt\" || s2 == \"exe\" || s2 == \"dll\"){\n      return \"Yes\"\
    ;\n    }\n  }\n  return \"No\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086338
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int i = 0;\n    int j = 0;\n\
    \    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n\
    \    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n\
    \    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n\
    \    int z = 0;\n    int A = 0;\n    int B = 0;\n    int C = 0;\n    int D = 0;\n\
    \    int E = 0;\n    int F = 0;\n    int G = 0;\n    int H = 0;\n    int I = 0;\n\
    \    int J = 0;\n    int K = 0;\n    int L = 0;\n    int M = 0;\n    int N = 0;\n\
    \    int O = 0;\n    int P = 0;\n    int Q = 0;\n    int R = 0;\n    int S = 0;\n\
    \    int T = 0;\n    int U = 0;\n    int V = 0;\n    int W = 0;\n    int X = 0;\n\
    \    int Y = 0;\n    int Z = 0;\n    int zero = 0;\n    int one = 0;\n    int\
    \ two = 0;\n    int three = 0;\n    int four = 0;\n    int five = 0;\n    int\
    \ six = 0;\n    int seven = 0;\n    int eight = 0;\n    int nine = 0;\n    int\
    \ dot = 0;\n    int txt = 0;\n    int exe = 0;\n    int dll = 0;\n    if(file_name.size()\
    \ == 0)\n    {\n        return \"No\";\n    }\n    for(i = 0; i < file_name.size();\
    \ i++)\n    {\n        if(file_name[i] == 'a')\n        {\n            a++;\n\
    \        }\n        if(file_name[i] == 'b')\n        {\n}\nint main() {\n    auto\
    \ candidate = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"\
    Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzdul2clp.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmpzdul2clp.cpp:84:13: error: \u2018a\u2019 was not declared in this scope\n\
    \   84 |             a++;\n      |             ^\n/tmp/tmpzdul2clp.cpp:89:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   89 | int main() {\n      |            ^\n/tmp/tmpzdul2clp.cpp:117:1: error:\
    \ expected \u2018}\u2019 at end of input\n  117 | }\n      | ^\n/tmp/tmpzdul2clp.cpp:81:5:\
    \ note: to match this \u2018{\u2019\n   81 |     {\n      |     ^\n/tmp/tmpzdul2clp.cpp:117:1:\
    \ error: expected \u2018}\u2019 at end of input\n  117 | }\n      | ^\n/tmp/tmpzdul2clp.cpp:15:52:\
    \ note: to match this \u2018{\u2019\n   15 | std::string file_name_check(std::string\
    \ file_name) {\n      |                                                    ^\n\
    /tmp/tmpzdul2clp.cpp:117:1: warning: control reaches end of non-void function\
    \ [-Wreturn-type]\n  117 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660086337
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    for(int\
    \ i = 0; i < file_name.length(); i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n            dot_index = i;\n        }\n    }\n\
    \    if(count > 3) {\n        return \"No\";\n    }\n    if(dot_count != 1) {\n\
    \        return \"No\";\n    }\n    if(file_name[0] < 'a' || file_name[0] > 'z')\
    \ {\n        return \"No\";\n    }\n    if(file_name.substr(dot_index + 1, 3)\
    \ != \"txt\" && file_name.substr(dot_index + 1, 3) != \"exe\" && file_name.substr(dot_index\
    \ + 1, 3) != \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";\n\
    }\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpph5nss4a: /tmp/tmpph5nss4a.cpp:47: int main(): Assertion `candidate(("K.dll"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086337
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    for(int\
    \ i = 0; i < file_name.length(); i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n            dot_index = i;\n        }\n    }\n\
    \    if(count > 3) {\n        return \"No\";\n    }\n    if(dot_count != 1) {\n\
    \        return \"No\";\n    }\n    if(file_name[0] >= '0' && file_name[0] <=\
    \ '9') {\n        return \"No\";\n    }\n    if(file_name.substr(dot_index + 1,\
    \ file_name.length() - dot_index - 1) != \"txt\" && file_name.substr(dot_index\
    \ + 1, file_name.length() - dot_index - 1) != \"exe\" && file_name.substr(dot_index\
    \ + 1, file_name.length() - dot_index - 1) != \"dll\") {\n        return \"No\"\
    ;\n    }\n    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmp8h0kceub: /tmp/tmp8h0kceub.cpp:50: int main(): Assertion `candidate(("_Y.txt"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660086338
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot = 0;\n    for(int i = 0; i < file_name.length();\
    \ i++) {\n        if(file_name[i] >= '0' && file_name[i] <= '9') {\n         \
    \   count++;\n        }\n        if(file_name[i] == '.') {\n            dot++;\n\
    \        }\n    }\n    if(count > 3 || dot != 1) {\n        return \"No\";\n \
    \   }\n    std::string str = file_name.substr(0, file_name.find(\".\"));\n   \
    \ if(str.length() == 0) {\n        return \"No\";\n    }\n    if(str[0] >= 'a'\
    \ && str[0] <= 'z' || str[0] >= 'A' && str[0] <= 'Z') {\n        std::string str1\
    \ = file_name.substr(file_name.find(\".\") + 1);\n        if(str1 == \"txt\" ||\
    \ str1 == \"exe\" || str1 == \"dll\") {\n            return \"Yes\";\n       \
    \ }\n    }\n    return \"No\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086338
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n\tint count = 0;\n\tint count1 = 0;\n\tint count2 = 0;\n\tint count3 = 0;\n\
    \tint count4 = 0;\n\tint count5 = 0;\n\tint count6 = 0;\n\tint count7 = 0;\n\t\
    int count8 = 0;\n\tint count9 = 0;\n\tint count10 = 0;\n\tint count11 = 0;\n\t\
    int count12 = 0;\n\tint count13 = 0;\n\tint count14 = 0;\n\tint count15 = 0;\n\
    \tint count16 = 0;\n\tint count17 = 0;\n\tint count18 = 0;\n\tint count19 = 0;\n\
    \tint count20 = 0;\n\tint count21 = 0;\n\tint count22 = 0;\n\tint count23 = 0;\n\
    \tint count24 = 0;\n\tint count25 = 0;\n\tint count26 = 0;\n\tint count27 = 0;\n\
    \tint count28 = 0;\n\tint count29 = 0;\n\tint count30 = 0;\n\tint count31 = 0;\n\
    \tint count32 = 0;\n\tint count33 = 0;\n\tint count34 = 0;\n\tint count35 = 0;\n\
    \tint count36 = 0;\n\tint count37 = 0;\n\tint count38 = 0;\n\tint count39 = 0;\n\
    \tint count40 = 0;\n\tint count41 = 0;\n\tint count42 = 0;\n\tint count43 = 0;\n\
    \tint count44 = 0;\n\tint count45 = 0;\n\tint count46 = 0;\n\tint count47 = 0;\n\
    \tint count48 = 0;\n\tint count49 = 0;\n\tint count50 = 0;\n\tint count51 = 0;\n\
    \tint count52 = 0;\n\tint count53 = 0;\n\tint count54 = 0;\n\tint count55 = 0;\n\
    \tint count56 = 0;\n\tint count57 = 0;\n\tint count58 = 0;\n\tint count59 = 0;\n\
    \tint count60 = 0;\n\tint count61 = 0;\n\tint count62 = 0;\n\tint count63 = 0;\n\
    \n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpqlm0_4yf: /tmp/tmpqlm0_4yf.cpp:84: int main(): Assertion `candidate(("example.txt"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086337
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    for(int i = 0; i < file_name.length();\
    \ i++) {\n        if(file_name[i] >= '0' && file_name[i] <= '9') {\n         \
    \   count++;\n        }\n        if(file_name[i] == '.') {\n            dot_count++;\n\
    \        }\n    }\n    if(count > 3 || dot_count != 1) {\n        return \"No\"\
    ;\n    }\n    std::string sub_str = file_name.substr(file_name.find('.') + 1);\n\
    \    if(sub_str == \"txt\" || sub_str == \"exe\" || sub_str == \"dll\") {\n  \
    \      return \"Yes\";\n    }\n    return \"No\";\n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpt5kmdgl5: /tmp/tmpt5kmdgl5.cpp:38: int main(): Assertion `candidate(("1example.dll"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660086338
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n\tint count = 0;\n\tint dot_count = 0;\n\tint dot_index = 0;\n\tint digit_count\
    \ = 0;\n\tfor (int i = 0; i < file_name.length(); i++) {\n\t\tif (file_name[i]\
    \ == '.') {\n\t\t\tdot_count++;\n\t\t\tdot_index = i;\n\t\t}\n\t\tif (file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n\t\t\tdigit_count++;\n\t\t}\n\t}\n\tif (dot_count\
    \ == 1 && digit_count <= 3) {\n\t\tif (file_name[0] >= 'a' && file_name[0] <=\
    \ 'z' || file_name[0] >= 'A' && file_name[0] <= 'Z') {\n\t\t\tif (file_name.substr(dot_index\
    \ + 1, 3) == \"txt\" || file_name.substr(dot_index + 1, 3) == \"exe\" || file_name.substr(dot_index\
    \ + 1, 3) == \"dll\") {\n\t\t\t\treturn \"Yes\";\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ \"No\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpg787p1la: /tmp/tmpg787p1la.cpp:51: int main(): Assertion `candidate(("this_is_valid.txtexe"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660086338
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot = 0;\n    int flag = 0;\n    int flag1 =\
    \ 0;\n    int flag2 = 0;\n    int flag3 = 0;\n    int flag4 = 0;\n    int flag5\
    \ = 0;\n    int flag6 = 0;\n    int flag7 = 0;\n    int flag8 = 0;\n    int flag9\
    \ = 0;\n    int flag10 = 0;\n    int flag11 = 0;\n    int flag12 = 0;\n    int\
    \ flag13 = 0;\n    int flag14 = 0;\n    int flag15 = 0;\n    int flag16 = 0;\n\
    \    int flag17 = 0;\n    int flag18 = 0;\n    int flag19 = 0;\n    int flag20\
    \ = 0;\n    int flag21 = 0;\n    int flag22 = 0;\n    int flag23 = 0;\n    int\
    \ flag24 = 0;\n    int flag25 = 0;\n    int flag26 = 0;\n    int flag27 = 0;\n\
    \    int flag28 = 0;\n    int flag29 = 0;\n    int flag30 = 0;\n    int flag31\
    \ = 0;\n    int flag32 = 0;\n    int flag33 = 0;\n    int flag34 = 0;\n    int\
    \ flag35 = 0;\n    int flag36 = 0;\n    int flag37 = 0;\n    int flag38 = 0;\n\
    \    int flag39 = 0;\n    int flag40 = 0;\n    int flag41 = 0;\n    int flag42\
    \ = 0;\n    int flag43 = 0;\n    int flag44 = 0;\n    int flag45 = 0;\n    int\
    \ flag46 = 0;\n    int flag47 = 0;\n    int flag48 = 0;\n    int flag49 = 0;\n\
    \    int flag50 = 0;\n    int flag51 = 0;\n    int flag52 = 0;\n    int flag53\
    \ = 0;\n    int flag54 = 0;\n    int flag55 = 0;\n    int flag56 = 0;\n    int\
    \ flag57 = 0;\n    int flag58 = 0;\n    int flag59 = 0;\n    int flag60 = 0;\n\
    \    int flag61 = 0;\n    int\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd7x6us5i.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmpd7x6us5i.cpp:81:1: error: expected unqualified-id before \u2018}\u2019\
    \ token\n   81 | }\n      | ^\n/tmp/tmpd7x6us5i.cpp:81:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660086337
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n        }\n    }\n    if(count > 3 || dot_count\
    \ != 1) {\n        return \"No\";\n    }\n    std::string sub1 = file_name.substr(0,\
    \ file_name.find('.'));\n    std::string sub2 = file_name.substr(file_name.find('.')\
    \ + 1);\n    if(sub1.length() == 0 || (sub1[0] < 'a' || sub1[0] > 'z') && (sub1[0]\
    \ < 'A' || sub1[0] > 'Z')) {\n        return \"No\";\n    }\n    if(sub2 != \"\
    txt\" && sub2 != \"exe\" && sub2 != \"dll\") {\n        return \"No\";\n    }\n\
    \    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086337
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot = 0;\n    std::string sub1, sub2;\n    for(int\
    \ i = 0; i < file_name.length(); i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot++;\n        }\n    }\n    if(count > 3 || dot != 1) {\n \
    \       return \"No\";\n    }\n    sub1 = file_name.substr(0, file_name.find(\"\
    .\"));\n    sub2 = file_name.substr(file_name.find(\".\") + 1);\n    if(sub1.length()\
    \ == 0 || (sub1[0] < 'a' || sub1[0] > 'z') && (sub1[0] < 'A' || sub1[0] > 'Z'))\
    \ {\n        return \"No\";\n    }\n    if(sub2 != \"txt\" && sub2 != \"exe\"\
    \ && sub2 != \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";\n\
    }\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086338
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int len = file_name.length();\n\
    \    int i = 0;\n    while(i < len) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n        }\n        i++;\n    }\n    if(count >\
    \ 3 || dot_count != 1) {\n        return \"No\";\n    }\n    std::string str =\
    \ file_name.substr(0, file_name.find(\".\"));\n    if(str.length() == 0) {\n \
    \       return \"No\";\n    }\n    if(str[0] >= 'a' && str[0] <= 'z' || str[0]\
    \ >= 'A' && str[0] <= 'Z') {\n        std::string str1 = file_name.substr(file_name.find(\"\
    .\") + 1);\n        if(str1 == \"txt\" || str1 == \"exe\" || str1 == \"dll\")\
    \ {\n            return \"Yes\";\n        }\n    }\n    return \"No\";\n}\nint\
    \ main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086338
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n  std::regex pattern(\"^[a-zA-Z]+[0-9]{0,3}\\\\.(txt|exe|dll)$\");\n  return\
    \ std::regex_match(file_name, pattern) ? \"Yes\" : \"No\";\n}\nint main() {\n\
    \    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmp7w8a0qer: /tmp/tmp7w8a0qer.cpp:25: int main(): Assertion `candidate(("MY16FILE3.exe"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086341
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n\tint dot_pos = file_name.find('.');\n\tif (dot_pos == std::string::npos)\
    \ {\n\t\treturn \"No\";\n\t}\n\tstd::string sub_str = file_name.substr(0, dot_pos);\n\
    \tint num_digits = 0;\n\tfor (char c : sub_str) {\n\t\tif (c >= '0' && c <= '9')\
    \ {\n\t\t\tnum_digits++;\n\t\t}\n\t}\n\tif (num_digits > 3) {\n\t\treturn \"No\"\
    ;\n\t}\n\tif (sub_str.empty()) {\n\t\treturn \"No\";\n\t}\n\tif (sub_str[0] <\
    \ 'A' || sub_str[0] > 'z' || (sub_str[0] > 'Z' && sub_str[0] < 'a')) {\n\t\treturn\
    \ \"No\";\n\t}\n\tstd::string sub_str2 = file_name.substr(dot_pos + 1);\n\tif\
    \ (sub_str2 != \"txt\" && sub_str2 != \"exe\" && sub_str2 != \"dll\") {\n\t\t\
    return \"No\";\n\t}\n\treturn \"Yes\";\n}\nint main() {\n    auto candidate =\
    \ file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086338
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n\tint count = 0;\n\tint dot_count = 0;\n\tint dot_pos = 0;\n\tint len = file_name.length();\n\
    \tfor (int i = 0; i < len; i++) {\n\t\tif (file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n\t\t\tcount++;\n\t\t}\n\t\tif (file_name[i] == '.') {\n\t\t\tdot_count++;\n\
    \t\t\tdot_pos = i;\n\t\t}\n\t}\n\tif (count > 3 || dot_count != 1) {\n\t\treturn\
    \ \"No\";\n\t}\n\tif (file_name[0] < 'a' || file_name[0] > 'z') {\n\t\treturn\
    \ \"No\";\n\t}\n\tstd::string ext = file_name.substr(dot_pos + 1, len - dot_pos\
    \ - 1);\n\tif (ext != \"txt\" && ext != \"exe\" && ext != \"dll\") {\n\t\treturn\
    \ \"No\";\n\t}\n\treturn \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpd1ax9j6a: /tmp/tmpd1ax9j6a.cpp:46: int main(): Assertion `candidate(("K.dll"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086338
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    std::regex r(\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\");\n   \
    \ return std::regex_match(file_name, r) ? \"Yes\" : \"No\";\n}\nint main() {\n\
    \    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmp459ft6jt: /tmp/tmp459ft6jt.cpp:21: int main(): Assertion `candidate(("example.txt"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086342
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int dot_pos = file_name.find('.');\n    if (dot_pos == std::string::npos)\
    \ {\n        return \"No\";\n    }\n    std::string prefix = file_name.substr(0,\
    \ dot_pos);\n    std::string suffix = file_name.substr(dot_pos + 1);\n    if (prefix.empty()\
    \ || !isalpha(prefix[0])) {\n        return \"No\";\n    }\n    if (std::count_if(prefix.begin(),\
    \ prefix.end(), isdigit) > 3) {\n        return \"No\";\n    }\n    if (suffix\
    \ != \"txt\" && suffix != \"exe\" && suffix != \"dll\") {\n        return \"No\"\
    ;\n    }\n    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086339
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    for(int\
    \ i = 0; i < file_name.length(); i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n            dot_index = i;\n        }\n    }\n\
    \    if(count > 3) {\n        return \"No\";\n    }\n    if(dot_count != 1) {\n\
    \        return \"No\";\n    }\n    if(file_name[0] < 'a' || file_name[0] > 'z')\
    \ {\n        return \"No\";\n    }\n    if(file_name.substr(dot_index + 1, 3)\
    \ != \"txt\" && file_name.substr(dot_index + 1, 3) != \"exe\" && file_name.substr(dot_index\
    \ + 1, 3) != \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";\n\
    }\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpph5nss4a: /tmp/tmpph5nss4a.cpp:47: int main(): Assertion `candidate(("K.dll"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086337
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    std::string\
    \ sub_string;\n    std::string sub_string_after_dot;\n    for(int i = 0; i < file_name.length();\
    \ i++) {\n        if(file_name[i] >= '0' && file_name[i] <= '9') {\n         \
    \   count++;\n        }\n        if(file_name[i] == '.') {\n            dot_count++;\n\
    \            dot_index = i;\n        }\n    }\n    if(count > 3 || dot_count !=\
    \ 1) {\n        return \"No\";\n    }\n    sub_string = file_name.substr(0, dot_index);\n\
    \    sub_string_after_dot = file_name.substr(dot_index + 1, file_name.length()\
    \ - dot_index - 1);\n    if(sub_string.length() == 0 || (sub_string[0] < 'a' ||\
    \ sub_string[0] > 'z') && (sub_string[0] < 'A' || sub_string[0] > 'Z')) {\n  \
    \      return \"No\";\n    }\n    if(sub_string_after_dot != \"txt\" && sub_string_after_dot\
    \ != \"exe\" && sub_string_after_dot != \"dll\") {\n        return \"No\";\n \
    \   }\n    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086340
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    std::regex pattern(\"^[a-zA-Z]\\\\w{0,3}\\\\.(txt|exe|dll)$\");\n   \
    \ return std::regex_match(file_name, pattern) ? \"Yes\" : \"No\";\n}\nint main()\
    \ {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmp4s3ekwcb: /tmp/tmp4s3ekwcb.cpp:21: int main(): Assertion `candidate(("example.txt"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot++;\n        }\n    }\n    if(count > 3 || dot != 1) {\n \
    \       return \"No\";\n    }\n    std::string temp = file_name.substr(0, file_name.find(\"\
    .\"));\n    if(temp.length() == 0) {\n        return \"No\";\n    }\n    if(!(temp[0]\
    \ >= 'a' && temp[0] <= 'z') && !(temp[0] >= 'A' && temp[0] <= 'Z')) {\n      \
    \  return \"No\";\n    }\n    temp = file_name.substr(file_name.find(\".\") +\
    \ 1);\n    if(temp != \"txt\" && temp != \"exe\" && temp != \"dll\") {\n     \
    \   return \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086340
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n        }\n    }\n    if(count > 3 || dot_count\
    \ != 1) {\n        return \"No\";\n    }\n    std::string str = file_name.substr(0,\
    \ file_name.find('.'));\n    if(str.length() == 0) {\n        return \"No\";\n\
    \    }\n    if(str[0] >= 'a' && str[0] <= 'z' || str[0] >= 'A' && str[0] <= 'Z')\
    \ {\n        std::string str1 = file_name.substr(file_name.find('.') + 1, file_name.length());\n\
    \        if(str1 == \"txt\" || str1 == \"exe\" || str1 == \"dll\") {\n       \
    \     return \"Yes\";\n        }\n    }\n    return \"No\";\n}\nint main() {\n\
    \    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086340
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] == '.') {\n     \
    \       dot++;\n        }\n        if(file_name[i] >= '0' && file_name[i] <= '9')\
    \ {\n            count++;\n        }\n    }\n    if(count > 3 || dot != 1) {\n\
    \        return \"No\";\n    }\n    std::string str = file_name.substr(0, file_name.find(\"\
    .\"));\n    if(str.length() == 0) {\n        return \"No\";\n    }\n    if(str[0]\
    \ >= 'a' && str[0] <= 'z' || str[0] >= 'A' && str[0] <= 'Z') {\n        std::string\
    \ str1 = file_name.substr(file_name.find(\".\") + 1);\n        if(str1 == \"txt\"\
    \ || str1 == \"exe\" || str1 == \"dll\") {\n            return \"Yes\";\n    \
    \    }\n    }\n    return \"No\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086340
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    int\
    \ len = file_name.length();\n    for(int i = 0; i < len; i++) {\n        if(file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            count++;\n        }\n        if(file_name[i]\
    \ == '.') {\n            dot_count++;\n            dot_index = i;\n        }\n\
    \    }\n    if(count > 3) {\n        return \"No\";\n    }\n    if(dot_count !=\
    \ 1) {\n        return \"No\";\n    }\n    if(file_name[0] < 'a' || file_name[0]\
    \ > 'z') {\n        return \"No\";\n    }\n    if(file_name[dot_index + 1] !=\
    \ 't' || file_name[dot_index + 2] != 'x' || file_name[dot_index + 3] != 't') {\n\
    \        return \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n    auto\
    \ candidate = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"\
    Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmp0id5qcw3: /tmp/tmp0id5qcw3.cpp:48: int main(): Assertion `candidate(("K.dll"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086340
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n        }\n    }\n    if(count > 3 || dot_count\
    \ != 1) {\n        return \"No\";\n    }\n    std::string sub1 = file_name.substr(0,\
    \ file_name.find('.'));\n    std::string sub2 = file_name.substr(file_name.find('.')\
    \ + 1);\n    if(sub1.length() == 0 || (sub1[0] < 'a' || sub1[0] > 'z') && (sub1[0]\
    \ < 'A' || sub1[0] > 'Z')) {\n        return \"No\";\n    }\n    if(sub2 != \"\
    txt\" && sub2 != \"exe\" && sub2 != \"dll\") {\n        return \"No\";\n    }\n\
    \    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086337
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    for(int\
    \ i = 0; i < file_name.length(); i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n            dot_index = i;\n        }\n    }\n\
    \    if(count > 3) {\n        return \"No\";\n    }\n    if(dot_count != 1) {\n\
    \        return \"No\";\n    }\n    if(file_name[0] < 'a' || file_name[0] > 'z')\
    \ {\n        return \"No\";\n    }\n    std::string sub = file_name.substr(dot_index\
    \ + 1, file_name.length() - dot_index);\n    if(sub != \"txt\" && sub != \"exe\"\
    \ && sub != \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n\
    int main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpn3mi9e7r: /tmp/tmpn3mi9e7r.cpp:48: int main(): Assertion `candidate(("K.dll"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086340
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    for(int\
    \ i = 0; i < file_name.length(); i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n            dot_index = i;\n        }\n    }\n\
    \    if(count > 3) {\n        return \"No\";\n    }\n    if(dot_count != 1) {\n\
    \        return \"No\";\n    }\n    if(file_name[0] >= '0' && file_name[0] <=\
    \ '9') {\n        return \"No\";\n    }\n    if(file_name.substr(dot_index + 1,\
    \ file_name.length() - dot_index - 1) != \"txt\" &&\n        file_name.substr(dot_index\
    \ + 1, file_name.length() - dot_index - 1) != \"exe\" &&\n        file_name.substr(dot_index\
    \ + 1, file_name.length() - dot_index - 1) != \"dll\") {\n        return \"No\"\
    ;\n    }\n    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpah3qrpuc: /tmp/tmpah3qrpuc.cpp:52: int main(): Assertion `candidate(("_Y.txt"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660086340
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int count1 = 0;\n    int count2 = 0;\n    int count3\
    \ = 0;\n    int count4 = 0;\n    int count5 = 0;\n    int count6 = 0;\n    int\
    \ count7 = 0;\n    int count8 = 0;\n    int count9 = 0;\n    int count10 = 0;\n\
    \    int count11 = 0;\n    int count12 = 0;\n    int count13 = 0;\n    int count14\
    \ = 0;\n    int count15 = 0;\n    int count16 = 0;\n    int count17 = 0;\n   \
    \ int count18 = 0;\n    int count19 = 0;\n    int count20 = 0;\n    int count21\
    \ = 0;\n    int count22 = 0;\n    int count23 = 0;\n    int count24 = 0;\n   \
    \ int count25 = 0;\n    int count26 = 0;\n    int count27 = 0;\n    int count28\
    \ = 0;\n    int count29 = 0;\n    int count30 = 0;\n    int count31 = 0;\n   \
    \ int count32 = 0;\n    int count33 = 0;\n    int count34 = 0;\n    int count35\
    \ = 0;\n    int count36 = 0;\n    int count37 = 0;\n    int count38 = 0;\n   \
    \ int count39 = 0;\n    int count40 = 0;\n    int count41 = 0;\n    int count42\
    \ = 0;\n    int count43 = 0;\n    int count44 = 0;\n    int count45 = 0;\n   \
    \ int count46 = 0;\n    int count47 = 0;\n    int count48 = 0;\n    int count49\
    \ = 0;\n    int count50 = 0;\n    int count51 = 0;\n    int count52 = 0;\n   \
    \ int count53 = 0;\n    int count54 = 0;\n    int count55 = 0;\n    int count56\
    \ = 0;\n    int count57 = 0;\n    int count58 = 0;\n    int count59 = 0;\n   \
    \ int count60 = 0;\n    int count61 = 0;\n    int count62 = 0;\n    int count63\
    \ = 0;\n\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpxopiyy8f: /tmp/tmpxopiyy8f.cpp:84: int main(): Assertion `candidate(("example.txt"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086340
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    int\
    \ len = file_name.length();\n    for(int i = 0; i < len; i++) {\n        if(file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            count++;\n        }\n        if(file_name[i]\
    \ == '.') {\n            dot_count++;\n            dot_index = i;\n        }\n\
    \    }\n    if(count > 3) {\n        return \"No\";\n    }\n    if(dot_count !=\
    \ 1) {\n        return \"No\";\n    }\n    if(file_name[0] < 'a' || file_name[0]\
    \ > 'z') {\n        return \"No\";\n    }\n    if(file_name[dot_index+1] != 't'\
    \ || file_name[dot_index+2] != 'x' || file_name[dot_index+3] != 't') {\n     \
    \   return \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmp20qt8hje: /tmp/tmp20qt8hje.cpp:48: int main(): Assertion `candidate(("K.dll"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086340
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n\tint count = 0;\n\tint dot_count = 0;\n\tint length = file_name.length();\n\
    \tfor (int i = 0; i < length; i++) {\n\t\tif (file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n\t\t\tcount++;\n\t\t}\n\t\tif (file_name[i] == '.') {\n\t\t\tdot_count++;\n\
    \t\t}\n\t}\n\tif (count > 3 || dot_count != 1) {\n\t\treturn \"No\";\n\t}\n\t\
    std::string before_dot = file_name.substr(0, file_name.find(\".\"));\n\tstd::string\
    \ after_dot = file_name.substr(file_name.find(\".\") + 1);\n\tif (before_dot.length()\
    \ == 0 || (before_dot[0] < 'a' || before_dot[0] > 'z') && (before_dot[0] < 'A'\
    \ || before_dot[0] > 'Z')) {\n\t\treturn \"No\";\n\t}\n\tif (after_dot != \"txt\"\
    \ && after_dot != \"exe\" && after_dot != \"dll\") {\n\t\treturn \"No\";\n\t}\n\
    \treturn \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n  \
    \  assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086340
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot = 0;\n    for(int i = 0; i < file_name.length();\
    \ i++) {\n        if(file_name[i] >= '0' && file_name[i] <= '9') {\n         \
    \   count++;\n        }\n        if(file_name[i] == '.') {\n            dot++;\n\
    \        }\n    }\n    if(count > 3 || dot != 1) {\n        return \"No\";\n \
    \   }\n    std::string sub = file_name.substr(0, file_name.find('.'));\n    if(sub.length()\
    \ == 0 || !((sub[0] >= 'a' && sub[0] <= 'z') || (sub[0] >= 'A' && sub[0] <= 'Z')))\
    \ {\n        return \"No\";\n    }\n    sub = file_name.substr(file_name.find('.')\
    \ + 1);\n    if(sub != \"txt\" && sub != \"exe\" && sub != \"dll\") {\n      \
    \  return \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086340
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    for(int\
    \ i = 0; i < file_name.length(); i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n            dot_index = i;\n        }\n    }\n\
    \    if(count > 3) {\n        return \"No\";\n    }\n    if(dot_count != 1) {\n\
    \        return \"No\";\n    }\n    if(file_name[0] < 'a' || file_name[0] > 'z')\
    \ {\n        return \"No\";\n    }\n    if(file_name.substr(dot_index + 1, file_name.length()\
    \ - dot_index - 1) != \"txt\" && file_name.substr(dot_index + 1, file_name.length()\
    \ - dot_index - 1) != \"exe\" && file_name.substr(dot_index + 1, file_name.length()\
    \ - dot_index - 1) != \"dll\") {\n        return \"No\";\n    }\n    return \"\
    Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpywrkpwni: /tmp/tmpywrkpwni.cpp:47: int main(): Assertion `candidate(("K.dll"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086340
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    std::regex pattern(\"^[a-zA-Z]+[0-9]{0,3}\\\\.(txt|exe|dll)$\");\n  \
    \  return std::regex_match(file_name, pattern) ? \"Yes\" : \"No\";\n}\nint main()\
    \ {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmp5wyk4i5t: /tmp/tmp5wyk4i5t.cpp:25: int main(): Assertion `candidate(("MY16FILE3.exe"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot++;\n        }\n    }\n    if(count > 3 || dot != 1) {\n \
    \       return \"No\";\n    }\n    std::string str = file_name.substr(0, file_name.find(\"\
    .\"));\n    if(str.length() == 0 || (str[0] < 'a' || str[0] > 'z') && (str[0]\
    \ < 'A' || str[0] > 'Z')) {\n        return \"No\";\n    }\n    std::string str2\
    \ = file_name.substr(file_name.find(\".\") + 1, len);\n    if(str2 != \"txt\"\
    \ && str2 != \"exe\" && str2 != \"dll\") {\n        return \"No\";\n    }\n  \
    \  return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n \
    \   assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086340
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    for(int\
    \ i = 0; i < file_name.length(); i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n            dot_index = i;\n        }\n    }\n\
    \    if(count > 3) {\n        return \"No\";\n    }\n    if(dot_count != 1) {\n\
    \        return \"No\";\n    }\n    if(dot_index == 0) {\n        return \"No\"\
    ;\n    }\n    if(file_name[dot_index + 1] == 't' && file_name[dot_index + 2] ==\
    \ 'x' && file_name[dot_index + 3] == 't') {\n        return \"Yes\";\n    }\n\
    \    if(file_name[dot_index + 1] == 'e' && file_name[dot_index + 2] == 'x' &&\
    \ file_name[dot_index + 3] == 'e') {\n        return \"Yes\";\n    }\n    if(file_name[dot_index\
    \ + 1] == 'd' && file_name[dot_index + 2] == 'l' && file_name[dot_index + 3] ==\
    \ 'l') {\n        return \"Yes\";\n    }\n    return \"No\";\n}\nint main() {\n\
    \    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmp86fu_wqb: /tmp/tmp86fu_wqb.cpp:51: int main(): Assertion `candidate(("1example.dll"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660086337
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot++;\n        }\n    }\n    if(count > 3 || dot != 1) {\n \
    \       return \"No\";\n    }\n    std::string sub = file_name.substr(0, file_name.find(\"\
    .\"));\n    if(sub.length() == 0) {\n        return \"No\";\n    }\n    if(sub[0]\
    \ >= '0' && sub[0] <= '9') {\n        return \"No\";\n    }\n    std::string ext\
    \ = file_name.substr(file_name.find(\".\") + 1);\n    if(ext != \"txt\" && ext\
    \ != \"exe\" && ext != \"dll\") {\n        return \"No\";\n    }\n    return \"\
    Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmp2kmqidu6: /tmp/tmp2kmqidu6.cpp:51: int main(): Assertion `candidate(("_Y.txt"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660086340
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n\tint count = 0;\n\tint dot = 0;\n\tint dot_index = 0;\n\tint len = file_name.length();\n\
    \tfor (int i = 0; i < len; i++) {\n\t\tif (file_name[i] == '.') {\n\t\t\tdot++;\n\
    \t\t\tdot_index = i;\n\t\t}\n\t\tif (file_name[i] >= '0' && file_name[i] <= '9')\
    \ {\n\t\t\tcount++;\n\t\t}\n\t}\n\tif (count > 3) {\n\t\treturn \"No\";\n\t}\n\
    \tif (dot != 1) {\n\t\treturn \"No\";\n\t}\n\tif (file_name[0] >= '0' && file_name[0]\
    \ <= '9') {\n\t\treturn \"No\";\n\t}\n\tif (file_name[dot_index + 1] == 't' &&\
    \ file_name[dot_index + 2] == 'x' && file_name[dot_index + 3] == 't') {\n\t\t\
    return \"Yes\";\n\t}\n\tif (file_name[dot_index + 1] == 'e' && file_name[dot_index\
    \ + 2] == 'x' && file_name[dot_index + 3] == 'e') {\n\t\treturn \"Yes\";\n\t}\n\
    \tif (file_name[dot_index + 1] == 'd' && file_name[dot_index + 2] == 'l' && file_name[dot_index\
    \ + 3] == 'l') {\n\t\treturn \"Yes\";\n\t}\n\treturn \"No\";\n}\nint main() {\n\
    \    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpttb7301t: /tmp/tmpttb7301t.cpp:57: int main(): Assertion `candidate(("_Y.txt"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660086340
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot++;\n        }\n    }\n    if(count > 3 || dot != 1) {\n \
    \       return \"No\";\n    }\n    std::string str = file_name.substr(0, file_name.find('.'));\n\
    \    if(str.length() == 0) {\n        return \"No\";\n    }\n    if(str[0] >=\
    \ 'a' && str[0] <= 'z' || str[0] >= 'A' && str[0] <= 'Z') {\n        std::string\
    \ str1 = file_name.substr(file_name.find('.') + 1, len);\n        if(str1 == \"\
    txt\" || str1 == \"exe\" || str1 == \"dll\") {\n            return \"Yes\";\n\
    \        }\n    }\n    return \"No\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086340
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot++;\n        }\n    }\n    if(count > 3 || dot != 1) {\n \
    \       return \"No\";\n    }\n    int pos = file_name.find('.');\n    std::string\
    \ sub1 = file_name.substr(0, pos);\n    std::string sub2 = file_name.substr(pos\
    \ + 1, len - pos - 1);\n    if(sub1.length() == 0 || (sub1[0] < 'a' || sub1[0]\
    \ > 'z') && (sub1[0] < 'A' || sub1[0] > 'Z')) {\n        return \"No\";\n    }\n\
    \    if(sub2 != \"txt\" && sub2 != \"exe\" && sub2 != \"dll\") {\n        return\
    \ \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086340
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot = 0;\n    int dot_pos;\n    for(int i = 0;\
    \ i < file_name.length(); i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot++;\n            dot_pos = i;\n        }\n    }\n    if(count\
    \ > 3 || dot != 1) {\n        return \"No\";\n    }\n    std::string first = file_name.substr(0,\
    \ dot_pos);\n    std::string second = file_name.substr(dot_pos + 1, file_name.length()\
    \ - dot_pos);\n    if(first.length() == 0 || (first[0] < 'a' || first[0] > 'z')\
    \ && (first[0] < 'A' || first[0] > 'Z')) {\n        return \"No\";\n    }\n  \
    \  if(second != \"txt\" && second != \"exe\" && second != \"dll\") {\n       \
    \ return \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086340
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot = 0;\n    for(int i = 0; i < file_name.length();\
    \ i++) {\n        if(file_name[i] >= '0' && file_name[i] <= '9') {\n         \
    \   count++;\n        }\n        if(file_name[i] == '.') {\n            dot++;\n\
    \        }\n    }\n    if(count > 3 || dot != 1) {\n        return \"No\";\n \
    \   }\n    std::string before_dot = file_name.substr(0, file_name.find('.'));\n\
    \    std::string after_dot = file_name.substr(file_name.find('.') + 1);\n    if(before_dot.length()\
    \ == 0 || (before_dot[0] < 'a' || before_dot[0] > 'z') && (before_dot[0] < 'A'\
    \ || before_dot[0] > 'Z')) {\n        return \"No\";\n    }\n    if(after_dot\
    \ != \"txt\" && after_dot != \"exe\" && after_dot != \"dll\") {\n        return\
    \ \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086342
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot = 0;\n    int flag = 0;\n    int flag_1 =\
    \ 0;\n    int flag_2 = 0;\n    int flag_3 = 0;\n    int flag_4 = 0;\n    int flag_5\
    \ = 0;\n    int flag_6 = 0;\n    int flag_7 = 0;\n    int flag_8 = 0;\n    int\
    \ flag_9 = 0;\n    int flag_10 = 0;\n    int flag_11 = 0;\n    int flag_12 = 0;\n\
    \    int flag_13 = 0;\n    int flag_14 = 0;\n    int flag_15 = 0;\n    int flag_16\
    \ = 0;\n    int flag_17 = 0;\n    int flag_18 = 0;\n    int flag_19 = 0;\n   \
    \ int flag_20 = 0;\n    int flag_21 = 0;\n    int flag_22 = 0;\n    int flag_23\
    \ = 0;\n    int flag_24 = 0;\n    int flag_25 = 0;\n    int flag_26 = 0;\n   \
    \ int flag_27 = 0;\n    int flag_28 = 0;\n    int flag_29 = 0;\n    int flag_30\
    \ = 0;\n    int flag_31 = 0;\n    int flag_32 = 0;\n    int flag_33 = 0;\n   \
    \ int flag_34 = 0;\n    int flag_35 = 0;\n    int flag_36 = 0;\n    int flag_37\
    \ = 0;\n    int flag_38 = 0;\n    int flag_39 = 0;\n    int flag_40 = 0;\n   \
    \ int flag_41 = 0;\n    int flag_42 = 0;\n    int flag_43 = 0;\n    int flag_44\
    \ = 0;\n    int flag_45 = 0;\n    int flag_46 = 0;\n    int flag_47 = 0;\n   \
    \ int flag_48 = 0;\n    int flag_49 = 0;\n    int flag_50 = 0;\n    int flag_51\
    \ = 0;\n    int flag_52 = 0;\n    int flag_53 = 0;\n    int flag_54 = 0;\n   \
    \ int flag_\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4_eq_dd1.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmp4_eq_dd1.cpp:74:1: error: expected initializer before \u2018}\u2019\
    \ token\n   74 | }\n      | ^\n/tmp/tmp4_eq_dd1.cpp:74:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660086342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot = 0;\n    int dot_pos = 0;\n    int i = 0;\n\
    \    while(file_name[i] != '\\0'){\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9'){\n            count++;\n        }\n        if(file_name[i] == '.'){\n\
    \            dot++;\n            dot_pos = i;\n        }\n        i++;\n    }\n\
    \    if(count > 3){\n        return \"No\";\n    }\n    if(dot != 1){\n      \
    \  return \"No\";\n    }\n    if(file_name[0] < 'a' || file_name[0] > 'z'){\n\
    \        return \"No\";\n    }\n    if(file_name[dot_pos + 1] != 't' || file_name[dot_pos\
    \ + 2] != 'x' || file_name[dot_pos + 3] != 't'){\n        return \"No\";\n   \
    \ }\n    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpylt_wjj5: /tmp/tmpylt_wjj5.cpp:49: int main(): Assertion `candidate(("K.dll"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086342
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int dot_pos = 0;\n    for(int\
    \ i = 0; i < file_name.length(); i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n            dot_pos = i;\n        }\n    }\n  \
    \  if(count > 3 || dot_count != 1) {\n        return \"No\";\n    }\n    std::string\
    \ sub1 = file_name.substr(0, dot_pos);\n    std::string sub2 = file_name.substr(dot_pos\
    \ + 1, file_name.length() - dot_pos - 1);\n    if(sub1.length() == 0 || (sub1[0]\
    \ < 'a' || sub1[0] > 'z') && (sub1[0] < 'A' || sub1[0] > 'Z')) {\n        return\
    \ \"No\";\n    }\n    if(sub2 != \"txt\" && sub2 != \"exe\" && sub2 != \"dll\"\
    ) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n   \
    \ auto candidate = file_name_check;\n    assert(candidate((\"example.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    std::regex pattern(\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\");\n\
    \    return std::regex_match(file_name, pattern) ? \"Yes\" : \"No\";\n}\nint main()\
    \ {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpao07mit1: /tmp/tmpao07mit1.cpp:21: int main(): Assertion `candidate(("example.txt"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086338
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int i = 0;\n    int j = 0;\n\
    \    std::string sub_str_before_dot;\n    std::string sub_str_after_dot;\n   \
    \ while(file_name[i] != '\\0'){\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9'){\n            count++;\n        }\n        if(file_name[i] == '.'){\n\
    \            dot_count++;\n            j = i + 1;\n        }\n        i++;\n \
    \   }\n    if(count > 3 || dot_count != 1){\n        return \"No\";\n    }\n \
    \   sub_str_before_dot = file_name.substr(0, j - 1);\n    sub_str_after_dot =\
    \ file_name.substr(j, i - j);\n    if(sub_str_before_dot.length() == 0 || (sub_str_before_dot[0]\
    \ < 'a' || sub_str_before_dot[0] > 'z') && (sub_str_before_dot[0] < 'A' || sub_str_before_dot[0]\
    \ > 'Z')){\n        return \"No\";\n    }\n    if(sub_str_after_dot != \"txt\"\
    \ && sub_str_after_dot != \"exe\" && sub_str_after_dot != \"dll\"){\n        return\
    \ \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot = 0;\n    int dot_pos = 0;\n    for(int i\
    \ = 0; i < file_name.length(); i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot++;\n            dot_pos = i;\n        }\n    }\n    if(count\
    \ > 3) {\n        return \"No\";\n    }\n    if(dot != 1) {\n        return \"\
    No\";\n    }\n    if(file_name[0] < 'a' || file_name[0] > 'z') {\n        return\
    \ \"No\";\n    }\n    if(file_name.substr(dot_pos + 1, file_name.length() - dot_pos\
    \ - 1) != \"txt\" && file_name.substr(dot_pos + 1, file_name.length() - dot_pos\
    \ - 1) != \"exe\" && file_name.substr(dot_pos + 1, file_name.length() - dot_pos\
    \ - 1) != \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n\
    int main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmp1v2f8kkg: /tmp/tmp1v2f8kkg.cpp:47: int main(): Assertion `candidate(("K.dll"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    std::string result = \"No\";\n    int count = 0;\n    int dot_count =\
    \ 0;\n    int dot_index = 0;\n    for (int i = 0; i < file_name.length(); i++)\
    \ {\n        if (file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n\
    \        }\n        if (file_name[i] == '.') {\n            dot_count++;\n   \
    \         dot_index = i;\n        }\n    }\n    if (count > 3) {\n        return\
    \ result;\n    }\n    if (dot_count != 1) {\n        return result;\n    }\n \
    \   if (dot_index == 0) {\n        return result;\n    }\n    if (file_name[dot_index\
    \ + 1] == 't' && file_name[dot_index + 2] == 'x' && file_name[dot_index + 3] ==\
    \ 't') {\n        result = \"Yes\";\n    }\n    if (file_name[dot_index + 1] ==\
    \ 'e' && file_name[dot_index + 2] == 'x' && file_name[dot_index + 3] == 'e') {\n\
    \        result = \"Yes\";\n    }\n    if (file_name[dot_index + 1] == 'd' &&\
    \ file_name[dot_index + 2] == 'l' && file_name[dot_index + 3] == 'l') {\n    \
    \    result = \"Yes\";\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpwoyx8xd6: /tmp/tmpwoyx8xd6.cpp:52: int main(): Assertion `candidate(("1example.dll"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660086342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n\tint count = 0;\n\tint dot = 0;\n\tint check = 0;\n\tfor (int i = 0; i <\
    \ file_name.length(); i++) {\n\t\tif (file_name[i] >= '0' && file_name[i] <= '9')\
    \ {\n\t\t\tcount++;\n\t\t}\n\t\tif (file_name[i] == '.') {\n\t\t\tdot++;\n\t\t\
    }\n\t\tif (file_name[i] == '.' && file_name[i + 1] == 't' && file_name[i + 2]\
    \ == 'x' && file_name[i + 3] == 't') {\n\t\t\tcheck++;\n\t\t}\n\t\tif (file_name[i]\
    \ == '.' && file_name[i + 1] == 'e' && file_name[i + 2] == 'x' && file_name[i\
    \ + 3] == 'e') {\n\t\t\tcheck++;\n\t\t}\n\t\tif (file_name[i] == '.' && file_name[i\
    \ + 1] == 'd' && file_name[i + 2] == 'l' && file_name[i + 3] == 'l') {\n\t\t\t\
    check++;\n\t\t}\n\t}\n\tif (count > 3 || dot != 1 || check != 1) {\n\t\treturn\
    \ \"No\";\n\t}\n\telse {\n\t\treturn \"Yes\";\n\t}\n}\nint main() {\n    auto\
    \ candidate = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"\
    Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpzdz0fsqy: /tmp/tmpzdz0fsqy.cpp:46: int main(): Assertion `candidate(("1example.dll"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660086342
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot = 0;\n    int dot_pos = 0;\n    int len =\
    \ file_name.length();\n    for(int i = 0; i < len; i++) {\n        if(file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            count++;\n        }\n        if(file_name[i]\
    \ == '.') {\n            dot++;\n            dot_pos = i;\n        }\n    }\n\
    \    if(count > 3 || dot != 1) {\n        return \"No\";\n    }\n    std::string\
    \ sub1 = file_name.substr(0, dot_pos);\n    std::string sub2 = file_name.substr(dot_pos\
    \ + 1, len - dot_pos);\n    if(sub1.length() == 0 || (sub1[0] < 'a' || sub1[0]\
    \ > 'z') && (sub1[0] < 'A' || sub1[0] > 'Z')) {\n        return \"No\";\n    }\n\
    \    if(sub2 != \"txt\" && sub2 != \"exe\" && sub2 != \"dll\") {\n        return\
    \ \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086342
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = -1;\n   \
    \ for(int i = 0; i < file_name.length(); i++) {\n        if(file_name[i] >= '0'\
    \ && file_name[i] <= '9') {\n            count++;\n        }\n        if(file_name[i]\
    \ == '.') {\n            dot_count++;\n            dot_index = i;\n        }\n\
    \    }\n    if(count > 3 || dot_count != 1) {\n        return \"No\";\n    }\n\
    \    std::string sub1 = file_name.substr(0, dot_index);\n    std::string sub2\
    \ = file_name.substr(dot_index + 1, file_name.length() - dot_index - 1);\n   \
    \ if(sub1.length() == 0 || (sub1[0] < 'a' || sub1[0] > 'z') && (sub1[0] < 'A'\
    \ || sub1[0] > 'Z')) {\n        return \"No\";\n    }\n    if(sub2 != \"txt\"\
    \ && sub2 != \"exe\" && sub2 != \"dll\") {\n        return \"No\";\n    }\n  \
    \  return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n \
    \   assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086342
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot++;\n        }\n    }\n    if(count > 3 || dot != 1) {\n \
    \       return \"No\";\n    }\n    std::string str1 = file_name.substr(0, file_name.find('.'));\n\
    \    std::string str2 = file_name.substr(file_name.find('.') + 1, len);\n    if(str1.length()\
    \ == 0 || (str1[0] < 'a' || str1[0] > 'z') && (str1[0] < 'A' || str1[0] > 'Z'))\
    \ {\n        return \"No\";\n    }\n    if(str2 != \"txt\" && str2 != \"exe\"\
    \ && str2 != \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";\n\
    }\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    int\
    \ len = file_name.length();\n    for(int i = 0; i < len; i++) {\n        if(file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            count++;\n        }\n        if(file_name[i]\
    \ == '.') {\n            dot_count++;\n            dot_index = i;\n        }\n\
    \    }\n    if(count > 3) {\n        return \"No\";\n    }\n    if(dot_count !=\
    \ 1) {\n        return \"No\";\n    }\n    if(dot_index == 0) {\n        return\
    \ \"No\";\n    }\n    if(file_name[dot_index + 1] == 't' && file_name[dot_index\
    \ + 2] == 'x' && file_name[dot_index + 3] == 't') {\n        return \"Yes\";\n\
    \    }\n    if(file_name[dot_index + 1] == 'e' && file_name[dot_index + 2] ==\
    \ 'x' && file_name[dot_index + 3] == 'e') {\n        return \"Yes\";\n    }\n\
    \    if(file_name[dot_index + 1] == 'd' && file_name[dot_index + 2] == 'l' &&\
    \ file_name[dot_index + 3] == 'l') {\n        return \"Yes\";\n    }\n    return\
    \ \"No\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpup4fi9aa: /tmp/tmpup4fi9aa.cpp:52: int main(): Assertion `candidate(("1example.dll"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660086335
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // your code here\n    int count = 0;\n    int dot = 0;\n    int len\
    \ = file_name.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(file_name[i]\
    \ >= '0' && file_name[i] <= '9')\n        {\n            count++;\n        }\n\
    \        if(file_name[i] == '.')\n        {\n            dot++;\n        }\n \
    \   }\n    if(count > 3 || dot != 1)\n    {\n        return \"No\";\n    }\n \
    \   std::string str1 = file_name.substr(0, file_name.find('.'));\n    std::string\
    \ str2 = file_name.substr(file_name.find('.') + 1, len);\n    if(str1.length()\
    \ == 0 || (str1[0] < 'a' || str1[0] > 'z') && (str1[0] < 'A' || str1[0] > 'Z'))\n\
    \    {\n        return \"No\";\n    }\n    if(str2 != \"txt\" && str2 != \"exe\"\
    \ && str2 != \"dll\")\n    {\n        return \"No\";\n    }\n    return \"Yes\"\
    ;\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n        }\n    }\n    if(count > 3 || dot_count\
    \ != 1) {\n        return \"No\";\n    }\n    std::string ext = file_name.substr(file_name.find(\"\
    .\") + 1);\n    if(ext == \"txt\" || ext == \"exe\" || ext == \"dll\") {\n   \
    \     return \"Yes\";\n    }\n    return \"No\";\n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpguhavkbc: /tmp/tmpguhavkbc.cpp:39: int main(): Assertion `candidate(("1example.dll"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660086338
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    int count = 0;\n    int dot_count = 0;\n    int\
    \ i;\n    for(i = 0; i < file_name.length(); i++)\n    {\n        if(file_name[i]\
    \ >= '0' && file_name[i] <= '9')\n        {\n            count++;\n        }\n\
    \        if(file_name[i] == '.')\n        {\n            dot_count++;\n      \
    \  }\n    }\n    if(count > 3 || dot_count != 1)\n    {\n        return \"No\"\
    ;\n    }\n    std::string str = file_name.substr(0, i);\n    std::string str1\
    \ = file_name.substr(i+1, file_name.length()-1);\n    if(str.length() == 0 ||\
    \ (str[0] < 'a' || str[0] > 'z') && (str[0] < 'A' || str[0] > 'Z'))\n    {\n \
    \       return \"No\";\n    }\n    if(str1 != \"txt\" && str1 != \"exe\" && str1\
    \ != \"dll\")\n    {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n\
    int main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::substr: __pos (which is 12) > this->size() (which is 11)\n"
  stdout: ''
  timestamp: 1660086342
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot++;\n        }\n    }\n    if(count > 3 || dot != 1) {\n \
    \       return \"No\";\n    }\n    std::string str = file_name.substr(0, file_name.find(\"\
    .\"));\n    if(str.length() == 0 || (str[0] < 'a' || str[0] > 'z') && (str[0]\
    \ < 'A' || str[0] > 'Z')) {\n        return \"No\";\n    }\n    std::string str1\
    \ = file_name.substr(file_name.find(\".\") + 1, len);\n    if(str1 != \"txt\"\
    \ && str1 != \"exe\" && str1 != \"dll\") {\n        return \"No\";\n    }\n  \
    \  return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n \
    \   assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086335
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    std::regex pattern(\"^[a-zA-Z]{1}[a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    );\n    return std::regex_match(file_name, pattern) ? \"Yes\" : \"No\";\n}\nint\
    \ main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpm9282pex: /tmp/tmpm9282pex.cpp:21: int main(): Assertion `candidate(("example.txt"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086338
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int dot_pos = file_name.find('.');\n    if (dot_pos == -1) return \"\
    No\";\n    if (dot_pos == 0) return \"No\";\n    if (dot_pos == file_name.size()\
    \ - 1) return \"No\";\n    std::string before_dot = file_name.substr(0, dot_pos);\n\
    \    std::string after_dot = file_name.substr(dot_pos + 1);\n    if (before_dot.size()\
    \ == 0) return \"No\";\n    if (after_dot.size() == 0) return \"No\";\n    if\
    \ (after_dot != \"txt\" && after_dot != \"exe\" && after_dot != \"dll\") return\
    \ \"No\";\n    if (before_dot[0] < 'A' || before_dot[0] > 'z') return \"No\";\n\
    \    if (before_dot[0] > 'Z' && before_dot[0] < 'a') return \"No\";\n    int cnt\
    \ = 0;\n    for (char c : before_dot) {\n        if (c >= '0' && c <= '9') cnt++;\n\
    \    }\n    if (cnt > 3) return \"No\";\n    return \"Yes\";\n}\nint main() {\n\
    \    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    for(int\
    \ i = 0; i < file_name.length(); i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n            dot_index = i;\n        }\n    }\n\
    \    if(count > 3) {\n        return \"No\";\n    }\n    if(dot_count != 1) {\n\
    \        return \"No\";\n    }\n    if(file_name[0] < 'a' || file_name[0] > 'z')\
    \ {\n        return \"No\";\n    }\n    std::string extension = file_name.substr(dot_index\
    \ + 1);\n    if(extension != \"txt\" && extension != \"exe\" && extension != \"\
    dll\") {\n        return \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n\
    \    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpii8nf0vj: /tmp/tmpii8nf0vj.cpp:48: int main(): Assertion `candidate(("K.dll"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086342
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    for(int\
    \ i = 0; i < file_name.length(); i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n            dot_index = i;\n        }\n    }\n\
    \    if(count > 3) {\n        return \"No\";\n    }\n    if(dot_count != 1) {\n\
    \        return \"No\";\n    }\n    std::string before_dot = file_name.substr(0,\
    \ dot_index);\n    std::string after_dot = file_name.substr(dot_index + 1);\n\
    \    if(before_dot.length() == 0) {\n        return \"No\";\n    }\n    if(before_dot[0]\
    \ < 'a' || before_dot[0] > 'z') {\n        if(before_dot[0] < 'A' || before_dot[0]\
    \ > 'Z') {\n            return \"No\";\n        }\n    }\n    if(after_dot !=\
    \ \"txt\" && after_dot != \"exe\" && after_dot != \"dll\") {\n        return \"\
    No\";\n    }\n    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    for(int\
    \ i = 0; i < file_name.length(); i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n            dot_index = i;\n        }\n    }\n\
    \    if(count > 3) {\n        return \"No\";\n    }\n    if(dot_count != 1) {\n\
    \        return \"No\";\n    }\n    if(file_name[0] >= '0' && file_name[0] <=\
    \ '9') {\n        return \"No\";\n    }\n    if(file_name.substr(dot_index + 1,\
    \ file_name.length() - dot_index - 1) != \"txt\" &&\n        file_name.substr(dot_index\
    \ + 1, file_name.length() - dot_index - 1) != \"exe\" &&\n        file_name.substr(dot_index\
    \ + 1, file_name.length() - dot_index - 1) != \"dll\") {\n        return \"No\"\
    ;\n    }\n    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpah3qrpuc: /tmp/tmpah3qrpuc.cpp:52: int main(): Assertion `candidate(("_Y.txt"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660086340
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot++;\n        }\n    }\n    if(count > 3 || dot != 1) {\n \
    \       return \"No\";\n    }\n    std::string s = file_name.substr(0, file_name.find(\"\
    .\"));\n    if(s.length() == 0) {\n        return \"No\";\n    }\n    if(s[0]\
    \ >= 'a' && s[0] <= 'z' || s[0] >= 'A' && s[0] <= 'Z') {\n        s = file_name.substr(file_name.find(\"\
    .\") + 1);\n        if(s == \"txt\" || s == \"exe\" || s == \"dll\") {\n     \
    \       return \"Yes\";\n        }\n    }\n    return \"No\";\n}\nint main() {\n\
    \    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n  int count = 0;\n  int dot_count = 0;\n  int dot_index = 0;\n  int digit_count\
    \ = 0;\n  std::string extension;\n  for (int i = 0; i < file_name.length(); i++)\
    \ {\n    if (file_name[i] == '.') {\n      dot_count++;\n      dot_index = i;\n\
    \    }\n    if (file_name[i] >= '0' && file_name[i] <= '9') {\n      digit_count++;\n\
    \    }\n  }\n  if (dot_count != 1) {\n    return \"No\";\n  }\n  if (digit_count\
    \ > 3) {\n    return \"No\";\n  }\n  if (file_name[0] >= '0' && file_name[0] <=\
    \ '9') {\n    return \"No\";\n  }\n  for (int i = dot_index + 1; i < file_name.length();\
    \ i++) {\n    extension += file_name[i];\n  }\n  if (extension == \"txt\" || extension\
    \ == \"exe\" || extension == \"dll\") {\n    return \"Yes\";\n  }\n  return \"\
    No\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpysitwgct: /tmp/tmpysitwgct.cpp:55: int main(): Assertion `candidate(("_Y.txt"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660086343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot++;\n        }\n    }\n    if(count > 3 || dot != 1) {\n \
    \       return \"No\";\n    }\n    std::string s1 = file_name.substr(0, file_name.find(\"\
    .\"));\n    std::string s2 = file_name.substr(file_name.find(\".\") + 1);\n  \
    \  if(s1.length() == 0 || (s1[0] < 'a' || s1[0] > 'z') && (s1[0] < 'A' || s1[0]\
    \ > 'Z')) {\n        return \"No\";\n    }\n    if(s2 != \"txt\" && s2 != \"exe\"\
    \ && s2 != \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n\
    int main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086342
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n        }\n    }\n    if(count > 3 || dot_count\
    \ != 1) {\n        return \"No\";\n    }\n    std::string sub1 = file_name.substr(0,\
    \ file_name.find('.'));\n    std::string sub2 = file_name.substr(file_name.find('.')\
    \ + 1);\n    if(sub1.length() == 0 || (sub1[0] < 'a' || sub1[0] > 'z') && (sub1[0]\
    \ < 'A' || sub1[0] > 'Z')) {\n        return \"No\";\n    }\n    if(sub2 != \"\
    txt\" && sub2 != \"exe\" && sub2 != \"dll\") {\n        return \"No\";\n    }\n\
    \    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086337
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot = 0;\n    int dot_index = 0;\n    int len\
    \ = file_name.length();\n    for(int i = 0; i < len; i++) {\n        if(file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            count++;\n        }\n        if(file_name[i]\
    \ == '.') {\n            dot++;\n            dot_index = i;\n        }\n    }\n\
    \    if(count > 3 || dot != 1) {\n        return \"No\";\n    }\n    std::string\
    \ sub1 = file_name.substr(0, dot_index);\n    std::string sub2 = file_name.substr(dot_index\
    \ + 1, len - dot_index - 1);\n    if(sub1.length() == 0 || (sub1[0] < 'a' || sub1[0]\
    \ > 'z') && (sub1[0] < 'A' || sub1[0] > 'Z')) {\n        return \"No\";\n    }\n\
    \    if(sub2 != \"txt\" && sub2 != \"exe\" && sub2 != \"dll\") {\n        return\
    \ \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086343
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    for(int\
    \ i = 0; i < file_name.length(); i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n            dot_index = i;\n        }\n    }\n\
    \    if(count > 3) {\n        return \"No\";\n    }\n    if(dot_count != 1) {\n\
    \        return \"No\";\n    }\n    if(file_name[0] < 'a' || file_name[0] > 'z')\
    \ {\n        return \"No\";\n    }\n    if(file_name.substr(dot_index+1, file_name.length()-1)\
    \ != \"txt\" && file_name.substr(dot_index+1, file_name.length()-1) != \"exe\"\
    \ && file_name.substr(dot_index+1, file_name.length()-1) != \"dll\") {\n     \
    \   return \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmp6mutad_p: /tmp/tmp6mutad_p.cpp:47: int main(): Assertion `candidate(("K.dll"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int dot_pos = 0;\n    int\
    \ len = file_name.length();\n    for(int i = 0; i < len; i++) {\n        if(file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            count++;\n        }\n        if(file_name[i]\
    \ == '.') {\n            dot_count++;\n            dot_pos = i;\n        }\n \
    \   }\n    if(count > 3 || dot_count != 1) {\n        return \"No\";\n    }\n\
    \    std::string sub1 = file_name.substr(0, dot_pos);\n    std::string sub2 =\
    \ file_name.substr(dot_pos + 1, len - dot_pos - 1);\n    if(sub1.length() == 0\
    \ || (sub1[0] < 'a' || sub1[0] > 'z') && (sub1[0] < 'A' || sub1[0] > 'Z')) {\n\
    \        return \"No\";\n    }\n    if(sub2 != \"txt\" && sub2 != \"exe\" && sub2\
    \ != \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";\n}\nint main()\
    \ {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int len = file_name.length();\n\
    \    int dot_index = -1;\n    for(int i = 0; i < len; i++) {\n        if(file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            count++;\n        }\n        if(file_name[i]\
    \ == '.') {\n            dot_count++;\n            dot_index = i;\n        }\n\
    \    }\n    if(count > 3 || dot_count != 1) {\n        return \"No\";\n    }\n\
    \    if(dot_index == 0 || dot_index == len - 1) {\n        return \"No\";\n  \
    \  }\n    std::string sub1 = file_name.substr(0, dot_index);\n    std::string\
    \ sub2 = file_name.substr(dot_index + 1, len - dot_index - 1);\n    if(sub1.length()\
    \ == 0 || sub2.length() == 0) {\n        return \"No\";\n    }\n    if(sub1[0]\
    \ < 'a' || sub1[0] > 'z') {\n        if(sub1[0] < 'A' || sub1[0] > 'Z') {\n  \
    \          return \"No\";\n        }\n    }\n    if(sub2 != \"txt\" && sub2 !=\
    \ \"exe\" && sub2 != \"dll\") {\n        return \"No\";\n    }\n    return \"\
    Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int dot_count = 0;\n    int digit_count = 0;\n    bool is_valid = true;\n\
    \    for (int i = 0; i < file_name.size(); i++) {\n        if (file_name[i] ==\
    \ '.') {\n            dot_count++;\n        }\n        if (file_name[i] >= '0'\
    \ && file_name[i] <= '9') {\n            digit_count++;\n        }\n    }\n  \
    \  if (dot_count != 1 || digit_count > 3) {\n        is_valid = false;\n    }\n\
    \    if (file_name[0] >= '0' && file_name[0] <= '9') {\n        is_valid = false;\n\
    \    }\n    std::string extension = file_name.substr(file_name.find(\".\") + 1);\n\
    \    if (extension != \"txt\" && extension != \"exe\" && extension != \"dll\"\
    ) {\n        is_valid = false;\n    }\n    if (is_valid) {\n        return \"\
    Yes\";\n    }\n    return \"No\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmp6upidb9o: /tmp/tmp6upidb9o.cpp:50: int main(): Assertion `candidate(("_Y.txt"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660086344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot = 0;\n    for(int i = 0; i < file_name.length();\
    \ i++) {\n        if(file_name[i] >= '0' && file_name[i] <= '9') {\n         \
    \   count++;\n        }\n        if(file_name[i] == '.') {\n            dot++;\n\
    \        }\n    }\n    if(count > 3 || dot != 1) {\n        return \"No\";\n \
    \   }\n    std::string str = file_name.substr(0, file_name.find('.'));\n    if(str.length()\
    \ == 0) {\n        return \"No\";\n    }\n    if(!(str[0] >= 'a' && str[0] <=\
    \ 'z') && !(str[0] >= 'A' && str[0] <= 'Z')) {\n        return \"No\";\n    }\n\
    \    str = file_name.substr(file_name.find('.') + 1);\n    if(str != \"txt\" &&\
    \ str != \"exe\" && str != \"dll\") {\n        return \"No\";\n    }\n    return\
    \ \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int dot_pos = 0;\n    for(int\
    \ i = 0; i < file_name.length(); i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n            dot_pos = i;\n        }\n    }\n  \
    \  if(count > 3 || dot_count != 1) {\n        return \"No\";\n    }\n    std::string\
    \ sub1 = file_name.substr(0, dot_pos);\n    std::string sub2 = file_name.substr(dot_pos\
    \ + 1, file_name.length() - dot_pos - 1);\n    if(sub1.length() == 0 || (sub1[0]\
    \ < 'a' || sub1[0] > 'z') && (sub1[0] < 'A' || sub1[0] > 'Z')) {\n        return\
    \ \"No\";\n    }\n    if(sub2 != \"txt\" && sub2 != \"exe\" && sub2 != \"dll\"\
    ) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n   \
    \ auto candidate = file_name_check;\n    assert(candidate((\"example.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086342
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    int\
    \ num_count = 0;\n    int num_index = 0;\n    int alpha_count = 0;\n    int alpha_index\
    \ = 0;\n    int alpha_index_end = 0;\n    int alpha_index_start = 0;\n    int\
    \ alpha_index_start_end = 0;\n    int alpha_index_start_start = 0;\n    int alpha_index_start_start_end\
    \ = 0;\n    int alpha_index_start_start_start = 0;\n    int alpha_index_start_start_start_end\
    \ = 0;\n    int alpha_index_start_start_start_start = 0;\n    int alpha_index_start_start_start_start_end\
    \ = 0;\n    int alpha_index_start_start_start_start_start = 0;\n    int alpha_index_start_start_start_start_start_end\
    \ = 0;\n    int alpha_index_start_start_start_start_start_start = 0;\n    int\
    \ alpha_index_start_start_start_start_start_start_end = 0;\n    int alpha_index_start_start_start_start_start_start_start\
    \ = 0;\n    int alpha_index_start_start_start_start_start_start_start_end = 0;\n\
    \    int alpha_index_start_start_start_start_start_start_start_start = 0;\n  \
    \  int alpha_index_start_start_start_start_start_start_start_start_end = 0;\n\
    \    int alpha_index_start_start_start_start_start_start_start_start_start = 0;\n\
    \    int alpha_index_start_start_start_start_start_start_start_start_start_end\
    \ = 0;\n    int alpha_index_start_start_start_start_start_start_start_start_start_start\
    \ = 0;\n    int alpha_index_start_start_start_start_start_start_start_start_start_start_end\
    \ = 0;\n    int alpha_index_start_start_start_start_start_start_start\n}\nint\
    \ main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7w2_h2be.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmp7w2_h2be.cpp:45:1: error: expected initializer before \u2018}\u2019\
    \ token\n   45 | }\n      | ^\n/tmp/tmp7w2_h2be.cpp:45:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660086344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count=0;\n    int dot_count=0;\n    int dot_index;\n    for(int i=0;i<file_name.length();i++){\n\
    \        if(file_name[i]>='0' && file_name[i]<='9'){\n            count++;\n \
    \       }\n        if(file_name[i]=='.'){\n            dot_count++;\n        \
    \    dot_index=i;\n        }\n    }\n    if(count>3 || dot_count!=1){\n      \
    \  return \"No\";\n    }\n    std::string before_dot=file_name.substr(0,dot_index);\n\
    \    std::string after_dot=file_name.substr(dot_index+1);\n    if(before_dot.length()==0\
    \ || (before_dot[0]<'a' || before_dot[0]>'z') && (before_dot[0]<'A' || before_dot[0]>'Z')){\n\
    \        return \"No\";\n    }\n    if(after_dot!=\"txt\" && after_dot!=\"exe\"\
    \ && after_dot!=\"dll\"){\n        return \"No\";\n    }\n    return \"Yes\";\n\
    }\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    for(int\
    \ i = 0; i < file_name.length(); i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n            dot_index = i;\n        }\n    }\n\
    \    if(count > 3) {\n        return \"No\";\n    }\n    if(dot_count != 1) {\n\
    \        return \"No\";\n    }\n    if(file_name[0] < 'a' || file_name[0] > 'z')\
    \ {\n        return \"No\";\n    }\n    if(file_name.substr(dot_index + 1, 3)\
    \ != \"txt\" && file_name.substr(dot_index + 1, 3) != \"exe\" && file_name.substr(dot_index\
    \ + 1, 3) != \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";\n\
    }\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpph5nss4a: /tmp/tmpph5nss4a.cpp:47: int main(): Assertion `candidate(("K.dll"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086337
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot++;\n        }\n    }\n    if(count > 3 || dot != 1) {\n \
    \       return \"No\";\n    }\n    std::string ext = file_name.substr(file_name.find(\"\
    .\") + 1);\n    if(ext == \"txt\" || ext == \"exe\" || ext == \"dll\") {\n   \
    \     return \"Yes\";\n    }\n    return \"No\";\n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmp6u2hmnxr: /tmp/tmp6u2hmnxr.cpp:39: int main(): Assertion `candidate(("1example.dll"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660086344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    std::string\
    \ sub_string_before_dot;\n    std::string sub_string_after_dot;\n    for(int i\
    \ = 0; i < file_name.length(); i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n            dot_index = i;\n        }\n    }\n\
    \    if(count > 3 || dot_count != 1) {\n        return \"No\";\n    }\n    sub_string_before_dot\
    \ = file_name.substr(0, dot_index);\n    sub_string_after_dot = file_name.substr(dot_index\
    \ + 1, file_name.length() - dot_index - 1);\n    if(sub_string_before_dot.length()\
    \ == 0 || (sub_string_before_dot[0] < 'a' || sub_string_before_dot[0] > 'z') &&\
    \ (sub_string_before_dot[0] < 'A' || sub_string_before_dot[0] > 'Z')) {\n    \
    \    return \"No\";\n    }\n    if(sub_string_after_dot != \"txt\" && sub_string_after_dot\
    \ != \"exe\" && sub_string_after_dot != \"dll\") {\n        return \"No\";\n \
    \   }\n    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086345
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot++;\n        }\n    }\n    if(count > 3 || dot != 1) {\n \
    \       return \"No\";\n    }\n    std::string str = file_name.substr(0, file_name.find(\"\
    .\"));\n    if(str.length() == 0 || (str[0] < 'a' || str[0] > 'z') && (str[0]\
    \ < 'A' || str[0] > 'Z')) {\n        return \"No\";\n    }\n    str = file_name.substr(file_name.find(\"\
    .\") + 1);\n    if(str != \"txt\" && str != \"exe\" && str != \"dll\") {\n   \
    \     return \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086335
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n\tint count = 0;\n\tint count_dot = 0;\n\tint count_letter = 0;\n\tint count_number\
    \ = 0;\n\tint count_txt = 0;\n\tint count_exe = 0;\n\tint count_dll = 0;\n\tint\
    \ count_substring = 0;\n\tint count_substring_after = 0;\n\tint count_substring_before\
    \ = 0;\n\tfor (int i = 0; i < file_name.length(); i++) {\n\t\tif (file_name[i]\
    \ == '.') {\n\t\t\tcount_dot++;\n\t\t}\n\t\tif (file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n\t\t\tcount_number++;\n\t\t}\n\t\tif (file_name[i] >= 'a' && file_name[i]\
    \ <= 'z' || file_name[i] >= 'A' && file_name[i] <= 'Z') {\n\t\t\tcount_letter++;\n\
    \t\t}\n\t\tif (file_name[i] == 't' && file_name[i + 1] == 'x' && file_name[i +\
    \ 2] == 't') {\n\t\t\tcount_txt++;\n\t\t}\n\t\tif (file_name[i] == 'e' && file_name[i\
    \ + 1] == 'x' && file_name[i + 2] == 'e') {\n\t\t\tcount_exe++;\n\t\t}\n\t\tif\
    \ (file_name[i] == 'd' && file_name[i + 1] == 'l' && file_name[i + 2] == 'l')\
    \ {\n\t\t\tcount_dll++;\n\t\t}\n\t\tif (file_name[i] == '.') {\n\t\t\tcount_substring++;\n\
    \t\t}\n\t\tif (count_substring == 1) {\n\t\t\tcount_substring_after++;\n\t\t}\n\
    \t\tif (count_substring == 0) {\n\t\t\tcount_substring_before++;\n\t\t}\n\t}\n\
    \tif (count_dot == 1 && count_number <= 3 && count_letter\n}\nint main() {\n \
    \   auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"))\
    \ == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n   \
    \ assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\"\
    )) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n\
    \    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmbk_8ds9.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmpmbk_8ds9.cpp:55:57: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   55 |  if (count_dot == 1 && count_number <= 3 && count_letter\n  \
    \    |     ~                                                   ^\n      |    \
    \                                                     )\n   56 | }\n      | ~\
    \                                                        \n/tmp/tmpmbk_8ds9.cpp:56:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   56 | }\n \
    \     | ^\n/tmp/tmpmbk_8ds9.cpp:56:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660086344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // your code here\n    int count = 0;\n    int dot_count = 0;\n    int\
    \ len = file_name.length();\n    for(int i = 0; i < len; i++)\n    {\n       \
    \ if(file_name[i] >= '0' && file_name[i] <= '9')\n        {\n            count++;\n\
    \        }\n        if(file_name[i] == '.')\n        {\n            dot_count++;\n\
    \        }\n    }\n    if(count > 3 || dot_count != 1)\n    {\n        return\
    \ \"No\";\n    }\n    std::string str1 = file_name.substr(0, file_name.find(\"\
    .\"));\n    std::string str2 = file_name.substr(file_name.find(\".\") + 1);\n\
    \    if(str1.length() == 0 || (str1[0] < 'a' || str1[0] > 'z') && (str1[0] < 'A'\
    \ || str1[0] > 'Z'))\n    {\n        return \"No\";\n    }\n    if(str2 != \"\
    txt\" && str2 != \"exe\" && str2 != \"dll\")\n    {\n        return \"No\";\n\
    \    }\n    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086345
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    int\
    \ len = file_name.length();\n    for(int i = 0; i < len; i++) {\n        if(file_name[i]\
    \ == '.') {\n            dot_count++;\n            dot_index = i;\n        }\n\
    \        if(file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n\
    \        }\n    }\n    if(count > 3) {\n        return \"No\";\n    }\n    if(dot_count\
    \ != 1) {\n        return \"No\";\n    }\n    if(file_name[0] < 'a' || file_name[0]\
    \ > 'z') {\n        return \"No\";\n    }\n    std::string ext = file_name.substr(dot_index\
    \ + 1, len - dot_index - 1);\n    if(ext != \"txt\" && ext != \"exe\" && ext !=\
    \ \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";\n}\nint main()\
    \ {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpqq2ip32r: /tmp/tmpqq2ip32r.cpp:49: int main(): Assertion `candidate(("K.dll"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    for(int\
    \ i = 0; i < file_name.length(); i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n            dot_index = i;\n        }\n    }\n\
    \    if(count > 3) {\n        return \"No\";\n    }\n    if(dot_count != 1) {\n\
    \        return \"No\";\n    }\n    if(file_name[0] < 'a' || file_name[0] > 'z')\
    \ {\n        return \"No\";\n    }\n    std::string ext = file_name.substr(dot_index\
    \ + 1);\n    if(ext != \"txt\" && ext != \"exe\" && ext != \"dll\") {\n      \
    \  return \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpcl9kz1b5: /tmp/tmpcl9kz1b5.cpp:48: int main(): Assertion `candidate(("K.dll"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086345
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n\tint count = 0;\n\tint dot_count = 0;\n\tint dot_index = 0;\n\tfor (int\
    \ i = 0; i < file_name.length(); i++) {\n\t\tif (file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n\t\t\tcount++;\n\t\t}\n\t\tif (file_name[i] == '.') {\n\t\t\tdot_count++;\n\
    \t\t\tdot_index = i;\n\t\t}\n\t}\n\tif (count > 3) {\n\t\treturn \"No\";\n\t}\n\
    \tif (dot_count != 1) {\n\t\treturn \"No\";\n\t}\n\tstd::string sub_string = file_name.substr(0,\
    \ dot_index);\n\tif (sub_string.length() == 0) {\n\t\treturn \"No\";\n\t}\n\t\
    if (sub_string[0] < 'a' || sub_string[0] > 'z') {\n\t\tif (sub_string[0] < 'A'\
    \ || sub_string[0] > 'Z') {\n\t\t\treturn \"No\";\n\t\t}\n\t}\n\tstd::string sub_string_2\
    \ = file_name.substr(dot_index + 1, file_name.length() - dot_index - 1);\n\tif\
    \ (sub_string_2 != \"txt\" && sub_string_2 != \"exe\" && sub_string_2 != \"dll\"\
    ) {\n\t\treturn \"No\";\n\t}\n\treturn \"Yes\";\n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086345
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot++;\n        }\n    }\n    if(count > 3 || dot != 1) {\n \
    \       return \"No\";\n    }\n    std::string sub1 = file_name.substr(0, file_name.find(\"\
    .\"));\n    std::string sub2 = file_name.substr(file_name.find(\".\") + 1);\n\
    \    if(sub1.length() == 0 || (sub1[0] < 'a' || sub1[0] > 'z') && (sub1[0] < 'A'\
    \ || sub1[0] > 'Z')) {\n        return \"No\";\n    }\n    if(sub2 != \"txt\"\
    \ && sub2 != \"exe\" && sub2 != \"dll\") {\n        return \"No\";\n    }\n  \
    \  return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n \
    \   assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086335
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n        }\n    }\n    if(count > 3 || dot_count\
    \ != 1) {\n        return \"No\";\n    }\n    std::string str = file_name.substr(0,\
    \ file_name.find(\".\"));\n    if(str.length() == 0) {\n        return \"No\"\
    ;\n    }\n    if(!(str[0] >= 'a' && str[0] <= 'z') && !(str[0] >= 'A' && str[0]\
    \ <= 'Z')) {\n        return \"No\";\n    }\n    std::string str1 = file_name.substr(file_name.find(\"\
    .\") + 1, len);\n    if(str1 != \"txt\" && str1 != \"exe\" && str1 != \"dll\"\
    ) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n   \
    \ auto candidate = file_name_check;\n    assert(candidate((\"example.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086345
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    std::regex reg(\"[a-zA-Z]+[0-9]{0,3}\\\\.(txt|exe|dll)\");\n    if(std::regex_match(file_name,\
    \ reg))\n        return \"Yes\";\n    return \"No\";\n}\nint main() {\n    auto\
    \ candidate = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"\
    Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmp72ofygwg: /tmp/tmp72ofygwg.cpp:27: int main(): Assertion `candidate(("MY16FILE3.exe"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086348
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    int\
    \ dot_index_2 = 0;\n    std::string sub_string_1;\n    std::string sub_string_2;\n\
    \    std::string sub_string_3;\n    for(int i = 0; i < file_name.length(); i++){\n\
    \        if(file_name[i] >= '0' && file_name[i] <= '9'){\n            count++;\n\
    \        }\n        if(file_name[i] == '.'){\n            dot_count++;\n     \
    \       dot_index = i;\n        }\n    }\n    if(count > 3 || dot_count != 1){\n\
    \        return \"No\";\n    }\n    sub_string_1 = file_name.substr(0, dot_index);\n\
    \    sub_string_2 = file_name.substr(dot_index + 1, file_name.length() - 1);\n\
    \    if(sub_string_1.length() == 0 || (sub_string_1[0] < 'a' || sub_string_1[0]\
    \ > 'z') && (sub_string_1[0] < 'A' || sub_string_1[0] > 'Z')){\n        return\
    \ \"No\";\n    }\n    if(sub_string_2 != \"txt\" && sub_string_2 != \"exe\" &&\
    \ sub_string_2 != \"dll\"){\n        return \"No\";\n    }\n    return \"Yes\"\
    ;\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086345
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot++;\n        }\n    }\n    if(count > 3 || dot != 1) {\n \
    \       return \"No\";\n    }\n    std::string sub1 = file_name.substr(0, file_name.find('.'));\n\
    \    std::string sub2 = file_name.substr(file_name.find('.') + 1);\n    if(sub1.length()\
    \ == 0 || (sub1[0] < 'a' || sub1[0] > 'z') && (sub1[0] < 'A' || sub1[0] > 'Z'))\
    \ {\n        return \"No\";\n    }\n    if(sub2 != \"txt\" && sub2 != \"exe\"\
    \ && sub2 != \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";\n\
    }\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086345
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int dot_pos = 0;\n    for(int\
    \ i = 0; i < file_name.length(); i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n            dot_pos = i;\n        }\n    }\n  \
    \  if(count > 3 || dot_count != 1) {\n        return \"No\";\n    }\n    if(file_name[0]\
    \ < 'a' || file_name[0] > 'z') {\n        return \"No\";\n    }\n    std::string\
    \ extension = file_name.substr(dot_pos + 1);\n    if(extension != \"txt\" && extension\
    \ != \"exe\" && extension != \"dll\") {\n        return \"No\";\n    }\n    return\
    \ \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpn2d0irii: /tmp/tmpn2d0irii.cpp:45: int main(): Assertion `candidate(("K.dll"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086345
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n\tint count = 0;\n\tint dot_count = 0;\n\tint dot_index = 0;\n\tint dot_index_2\
    \ = 0;\n\tfor (int i = 0; i < file_name.length(); i++) {\n\t\tif (file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n\t\t\tcount++;\n\t\t}\n\t\tif (file_name[i]\
    \ == '.') {\n\t\t\tdot_count++;\n\t\t\tdot_index = i;\n\t\t}\n\t}\n\tif (count\
    \ > 3) {\n\t\treturn \"No\";\n\t}\n\tif (dot_count != 1) {\n\t\treturn \"No\"\
    ;\n\t}\n\tif (file_name[0] < 'a' || file_name[0] > 'z') {\n\t\treturn \"No\";\n\
    \t}\n\tfor (int i = dot_index + 1; i < file_name.length(); i++) {\n\t\tdot_index_2++;\n\
    \t}\n\tif (dot_index_2 != 3) {\n\t\treturn \"No\";\n\t}\n\tif (file_name[dot_index\
    \ + 1] != 't' || file_name[dot_index + 2] != 'x' || file_name[dot_index + 3] !=\
    \ 't') {\n\t\treturn \"No\";\n\t}\n\treturn \"Yes\";\n}\nint main() {\n    auto\
    \ candidate = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"\
    Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpj78ucie_: /tmp/tmpj78ucie_.cpp:54: int main(): Assertion `candidate(("K.dll"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086345
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    for(int\
    \ i = 0; i < file_name.length(); i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n            dot_index = i;\n        }\n    }\n\
    \    if(count > 3) {\n        return \"No\";\n    }\n    if(dot_count != 1) {\n\
    \        return \"No\";\n    }\n    if(file_name[0] >= '0' && file_name[0] <=\
    \ '9') {\n        return \"No\";\n    }\n    if(file_name.substr(dot_index + 1,\
    \ file_name.length() - dot_index - 1) != \"txt\" &&\n        file_name.substr(dot_index\
    \ + 1, file_name.length() - dot_index - 1) != \"exe\" &&\n        file_name.substr(dot_index\
    \ + 1, file_name.length() - dot_index - 1) != \"dll\") {\n        return \"No\"\
    ;\n    }\n    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpah3qrpuc: /tmp/tmpah3qrpuc.cpp:52: int main(): Assertion `candidate(("_Y.txt"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660086340
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    for(int i = 0; i < file_name.length(); i++) {\n \
    \       if(file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n\
    \        }\n    }\n    if(count > 3) {\n        return \"No\";\n    }\n    int\
    \ dot_count = 0;\n    for(int i = 0; i < file_name.length(); i++) {\n        if(file_name[i]\
    \ == '.') {\n            dot_count++;\n        }\n    }\n    if(dot_count != 1)\
    \ {\n        return \"No\";\n    }\n    std::string before_dot = \"\";\n    std::string\
    \ after_dot = \"\";\n    for(int i = 0; i < file_name.length(); i++) {\n     \
    \   if(file_name[i] == '.') {\n            before_dot = file_name.substr(0, i);\n\
    \            after_dot = file_name.substr(i + 1, file_name.length() - i - 1);\n\
    \            break;\n        }\n    }\n    if(before_dot.length() == 0) {\n  \
    \      return \"No\";\n    }\n    if(before_dot[0] < 'a' || before_dot[0] > 'z')\
    \ {\n        if(before_dot[0] < 'A' || before_dot[0] > 'Z') {\n            return\
    \ \"No\";\n        }\n    }\n    if(after_dot != \"txt\" && after_dot != \"exe\"\
    \ && after_dot != \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\"\
    ;\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086345
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int dot_pos = 0;\n    int\
    \ len = file_name.length();\n    for(int i = 0; i < len; i++) {\n        if(file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            count++;\n        }\n        if(file_name[i]\
    \ == '.') {\n            dot_count++;\n            dot_pos = i;\n        }\n \
    \   }\n    if(count > 3 || dot_count != 1) {\n        return \"No\";\n    }\n\
    \    if(dot_pos == 0 || dot_pos == len - 1) {\n        return \"No\";\n    }\n\
    \    std::string sub_str = file_name.substr(dot_pos + 1, len - dot_pos - 1);\n\
    \    if(sub_str != \"txt\" && sub_str != \"exe\" && sub_str != \"dll\") {\n  \
    \      return \"No\";\n    }\n    if(file_name[0] >= 'a' && file_name[0] <= 'z')\
    \ {\n        return \"Yes\";\n    }\n    if(file_name[0] >= 'A' && file_name[0]\
    \ <= 'Z') {\n        return \"Yes\";\n    }\n    return \"No\";\n}\nint main()\
    \ {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086345
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    for(int\
    \ i = 0; i < file_name.length(); i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n            dot_index = i;\n        }\n    }\n\
    \    if(count > 3) {\n        return \"No\";\n    }\n    if(dot_count != 1) {\n\
    \        return \"No\";\n    }\n    if(file_name[0] < 'a' || file_name[0] > 'z')\
    \ {\n        return \"No\";\n    }\n    if(file_name.substr(dot_index + 1, file_name.length()\
    \ - dot_index - 1) != \"txt\" && file_name.substr(dot_index + 1, file_name.length()\
    \ - dot_index - 1) != \"exe\" && file_name.substr(dot_index + 1, file_name.length()\
    \ - dot_index - 1) != \"dll\") {\n        return \"No\";\n    }\n    return \"\
    Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpywrkpwni: /tmp/tmpywrkpwni.cpp:47: int main(): Assertion `candidate(("K.dll"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086340
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot++;\n        }\n    }\n    if(count > 3 || dot != 1) {\n \
    \       return \"No\";\n    }\n    std::string sub1 = file_name.substr(0, file_name.find('.'));\n\
    \    std::string sub2 = file_name.substr(file_name.find('.') + 1);\n    if(sub1.length()\
    \ == 0 || (sub1[0] < 'a' || sub1[0] > 'z') && (sub1[0] < 'A' || sub1[0] > 'Z'))\
    \ {\n        return \"No\";\n    }\n    if(sub2 != \"txt\" && sub2 != \"exe\"\
    \ && sub2 != \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";\n\
    }\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086345
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    for(int i = 0; i < file_name.length(); i++) {\n \
    \       if(file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n\
    \        }\n    }\n    if(count > 3) {\n        return \"No\";\n    }\n    int\
    \ dot_count = 0;\n    for(int i = 0; i < file_name.length(); i++) {\n        if(file_name[i]\
    \ == '.') {\n            dot_count++;\n        }\n    }\n    if(dot_count != 1)\
    \ {\n        return \"No\";\n    }\n    std::string before_dot = \"\";\n    std::string\
    \ after_dot = \"\";\n    for(int i = 0; i < file_name.length(); i++) {\n     \
    \   if(file_name[i] == '.') {\n            break;\n        }\n        before_dot\
    \ += file_name[i];\n    }\n    for(int i = file_name.length() - 1; i >= 0; i--)\
    \ {\n        if(file_name[i] == '.') {\n            break;\n        }\n      \
    \  after_dot += file_name[i];\n    }\n    std::reverse(after_dot.begin(), after_dot.end());\n\
    \    if(before_dot.length() == 0) {\n        return \"No\";\n    }\n    if(before_dot[0]\
    \ >= 'a' && before_dot[0] <= 'z') {\n        if(after_dot == \"txt\" || after_dot\
    \ == \"exe\" || after_dot == \"dll\") {\n            return \"Yes\";\n       \
    \ }\n    }\n    if(before_dot[0] >= 'A' && before_dot[0] <= 'Z') {\n        if(after_dot\
    \ == \"txt\" || after_dot == \"exe\" || after_dot == \"dll\") {\n            return\
    \ \"Yes\";\n        }\n    }\n    return \"No\";\n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086345
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int dot_count = 0;\n    int digit_count = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] == '.') {\n     \
    \       dot_count++;\n        }\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            digit_count++;\n        }\n    }\n    if(dot_count !=\
    \ 1 || digit_count > 3) {\n        return \"No\";\n    }\n    std::string ext\
    \ = file_name.substr(file_name.find(\".\") + 1);\n    if(ext != \"txt\" && ext\
    \ != \"exe\" && ext != \"dll\") {\n        return \"No\";\n    }\n    return \"\
    Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmppxfzq7j0: /tmp/tmppxfzq7j0.cpp:39: int main(): Assertion `candidate(("1example.dll"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660086346
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    int\
    \ len = file_name.length();\n    for(int i = 0; i < len; i++) {\n        if(file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            count++;\n        }\n        if(file_name[i]\
    \ == '.') {\n            dot_count++;\n            dot_index = i;\n        }\n\
    \    }\n    if(count > 3) {\n        return \"No\";\n    }\n    if(dot_count !=\
    \ 1) {\n        return \"No\";\n    }\n    if(dot_index == 0) {\n        return\
    \ \"No\";\n    }\n    if(file_name[dot_index + 1] == 't' && file_name[dot_index\
    \ + 2] == 'x' && file_name[dot_index + 3] == 't') {\n        return \"Yes\";\n\
    \    }\n    if(file_name[dot_index + 1] == 'e' && file_name[dot_index + 2] ==\
    \ 'x' && file_name[dot_index + 3] == 'e') {\n        return \"Yes\";\n    }\n\
    \    if(file_name[dot_index + 1] == 'd' && file_name[dot_index + 2] == 'l' &&\
    \ file_name[dot_index + 3] == 'l') {\n        return \"Yes\";\n    }\n    return\
    \ \"No\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpup4fi9aa: /tmp/tmpup4fi9aa.cpp:52: int main(): Assertion `candidate(("1example.dll"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660086335
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    std::string result = \"Yes\";\n    int count = 0;\n    int dot_count\
    \ = 0;\n    std::string ext;\n    if(file_name.length() < 5)\n        return \"\
    No\";\n    for(int i = 0; i < file_name.length(); i++){\n        if(file_name[i]\
    \ == '.'){\n            dot_count++;\n            ext = file_name.substr(i+1,\
    \ file_name.length()-i-1);\n        }\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9')\n            count++;\n    }\n    if(count > 3 || dot_count != 1 ||\
    \ (file_name[0] < 'a' || file_name[0] > 'z') && (file_name[0] < 'A' || file_name[0]\
    \ > 'Z'))\n        result = \"No\";\n    if(ext != \"txt\" && ext != \"exe\" &&\
    \ ext != \"dll\")\n        result = \"No\";\n    return result;\n}\nint main()\
    \ {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086346
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n\tint count = 0;\n\tint dot_count = 0;\n\tint dot_position = 0;\n\tfor (int\
    \ i = 0; i < file_name.length(); i++) {\n\t\tif (file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n\t\t\tcount++;\n\t\t}\n\t\tif (file_name[i] == '.') {\n\t\t\tdot_count++;\n\
    \t\t\tdot_position = i;\n\t\t}\n\t}\n\tif (count > 3) {\n\t\treturn \"No\";\n\t\
    }\n\tif (dot_count != 1) {\n\t\treturn \"No\";\n\t}\n\tif (file_name[0] < 'a'\
    \ || file_name[0] > 'z') {\n\t\treturn \"No\";\n\t}\n\tif (file_name.substr(dot_position\
    \ + 1, file_name.length() - dot_position - 1) != \"txt\" && file_name.substr(dot_position\
    \ + 1, file_name.length() - dot_position - 1) != \"exe\" && file_name.substr(dot_position\
    \ + 1, file_name.length() - dot_position - 1) != \"dll\") {\n\t\treturn \"No\"\
    ;\n\t}\n\treturn \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpojm3htz_: /tmp/tmpojm3htz_.cpp:47: int main(): Assertion `candidate(("K.dll"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086346
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n        }\n    }\n    if(count > 3 || dot_count\
    \ != 1) {\n        return \"No\";\n    }\n    std::string sub_str = file_name.substr(0,\
    \ file_name.find('.'));\n    if(sub_str.length() == 0) {\n        return \"No\"\
    ;\n    }\n    if(sub_str[0] >= 'a' && sub_str[0] <= 'z' || sub_str[0] >= 'A' &&\
    \ sub_str[0] <= 'Z') {\n        std::string sub_str2 = file_name.substr(file_name.find('.')\
    \ + 1, len);\n        if(sub_str2 == \"txt\" || sub_str2 == \"exe\" || sub_str2\
    \ == \"dll\") {\n            return \"Yes\";\n        }\n    }\n    return \"\
    No\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086346
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    std::string file_name_substring;\n\
    \    std::string file_name_substring_after_dot;\n    for (int i = 0; i < file_name.length();\
    \ i++) {\n        if (file_name[i] >= '0' && file_name[i] <= '9') {\n        \
    \    count++;\n        }\n        if (file_name[i] == '.') {\n            dot_count++;\n\
    \        }\n    }\n    if (count > 3 || dot_count != 1) {\n        return \"No\"\
    ;\n    }\n    file_name_substring = file_name.substr(0, file_name.find('.'));\n\
    \    file_name_substring_after_dot = file_name.substr(file_name.find('.') + 1);\n\
    \    if (file_name_substring.length() == 0 || (file_name_substring[0] >= 'a' &&\
    \ file_name_substring[0] <= 'z') || (file_name_substring[0] >= 'A' && file_name_substring[0]\
    \ <= 'Z')) {\n        return \"No\";\n    }\n    if (file_name_substring_after_dot\
    \ != \"txt\" && file_name_substring_after_dot != \"exe\" && file_name_substring_after_dot\
    \ != \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";\n}\nint main()\
    \ {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpxd6kmvgg: /tmp/tmpxd6kmvgg.cpp:43: int main(): Assertion `candidate(("example.txt"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086347
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int dot_count = 0;\n    int digit_count = 0;\n    for (int i = 0; i <\
    \ file_name.size(); i++) {\n        if (file_name[i] == '.') {\n            dot_count++;\n\
    \        }\n        if (file_name[i] >= '0' && file_name[i] <= '9') {\n      \
    \      digit_count++;\n        }\n    }\n    if (dot_count != 1 || digit_count\
    \ > 3) {\n        return \"No\";\n    }\n    std::string extension = file_name.substr(file_name.find('.')\
    \ + 1);\n    std::string name = file_name.substr(0, file_name.find('.'));\n  \
    \  if (name.empty() || (name[0] < 'a' || name[0] > 'z') && (name[0] < 'A' || name[0]\
    \ > 'Z')) {\n        return \"No\";\n    }\n    if (extension != \"txt\" && extension\
    \ != \"exe\" && extension != \"dll\") {\n        return \"No\";\n    }\n    return\
    \ \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086346
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    std::string sub_str;\n  \
    \  std::string sub_str_after_dot;\n    for(int i = 0; i < file_name.length();\
    \ i++) {\n        if(file_name[i] >= '0' && file_name[i] <= '9') {\n         \
    \   count++;\n        }\n        if(file_name[i] == '.') {\n            dot_count++;\n\
    \        }\n    }\n    if(count > 3 || dot_count != 1) {\n        return \"No\"\
    ;\n    }\n    sub_str = file_name.substr(0, file_name.find(\".\"));\n    sub_str_after_dot\
    \ = file_name.substr(file_name.find(\".\") + 1);\n    if(sub_str.length() == 0\
    \ || (sub_str[0] < 'a' || sub_str[0] > 'z') && (sub_str[0] < 'A' || sub_str[0]\
    \ > 'Z')) {\n        return \"No\";\n    }\n    if(sub_str_after_dot != \"txt\"\
    \ && sub_str_after_dot != \"exe\" && sub_str_after_dot != \"dll\") {\n       \
    \ return \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086347
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n\tstd::string result = \"No\";\n\tint dot_count = 0;\n\tint digit_count =\
    \ 0;\n\tint dot_index = 0;\n\tfor (int i = 0; i < file_name.length(); i++) {\n\
    \t\tif (file_name[i] == '.') {\n\t\t\tdot_count++;\n\t\t\tdot_index = i;\n\t\t\
    }\n\t\tif (file_name[i] >= '0' && file_name[i] <= '9') {\n\t\t\tdigit_count++;\n\
    \t\t}\n\t}\n\tif (dot_count == 1 && digit_count <= 3) {\n\t\tstd::string extension\
    \ = file_name.substr(dot_index + 1);\n\t\tstd::string name = file_name.substr(0,\
    \ dot_index);\n\t\tif (extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\") {\n\t\t\tif (name.length() > 0 && (name[0] >= 'a' && name[0] <=\
    \ 'z' || name[0] >= 'A' && name[0] <= 'Z')) {\n\t\t\t\tresult = \"Yes\";\n\t\t\
    \t}\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot = 0;\n    int dot_pos = 0;\n    std::string\
    \ sub_str;\n    for(int i = 0; i < file_name.length(); i++) {\n        if(file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            count++;\n        }\n        if(file_name[i]\
    \ == '.') {\n            dot++;\n            dot_pos = i;\n        }\n    }\n\
    \    if(count > 3 || dot != 1) {\n        return \"No\";\n    }\n    sub_str =\
    \ file_name.substr(dot_pos + 1);\n    if(sub_str == \"txt\" || sub_str == \"exe\"\
    \ || sub_str == \"dll\") {\n        return \"Yes\";\n    }\n    return \"No\"\
    ;\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpydkq39fn: /tmp/tmpydkq39fn.cpp:41: int main(): Assertion `candidate(("1example.dll"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660086347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    for(int\
    \ i = 0; i < file_name.length(); i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n            dot_index = i;\n        }\n    }\n\
    \    if(count > 3) {\n        return \"No\";\n    }\n    if(dot_count != 1) {\n\
    \        return \"No\";\n    }\n    if(file_name[0] < 'a' || file_name[0] > 'z')\
    \ {\n        return \"No\";\n    }\n    if(file_name.substr(dot_index + 1, file_name.length()\
    \ - dot_index - 1) != \"txt\" &&\n        file_name.substr(dot_index + 1, file_name.length()\
    \ - dot_index - 1) != \"exe\" &&\n        file_name.substr(dot_index + 1, file_name.length()\
    \ - dot_index - 1) != \"dll\") {\n        return \"No\";\n    }\n    return \"\
    Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpmjw6qn5a: /tmp/tmpmjw6qn5a.cpp:49: int main(): Assertion `candidate(("K.dll"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086347
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot++;\n        }\n    }\n    if(count > 3 || dot != 1) {\n \
    \       return \"No\";\n    }\n    std::string sub1 = file_name.substr(0, file_name.find(\"\
    .\"));\n    std::string sub2 = file_name.substr(file_name.find(\".\") + 1);\n\
    \    if(sub1.length() == 0 || (sub1[0] < 'a' || sub1[0] > 'z') && (sub1[0] < 'A'\
    \ || sub1[0] > 'Z')) {\n        return \"No\";\n    }\n    if(sub2 != \"txt\"\
    \ && sub2 != \"exe\" && sub2 != \"dll\") {\n        return \"No\";\n    }\n  \
    \  return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n \
    \   assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086335
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot = 0;\n    int dot_index = 0;\n    int len\
    \ = file_name.length();\n    for(int i = 0; i < len; i++) {\n        if(file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            count++;\n        }\n        if(file_name[i]\
    \ == '.') {\n            dot++;\n            dot_index = i;\n        }\n    }\n\
    \    if(count > 3 || dot != 1) {\n        return \"No\";\n    }\n    std::string\
    \ sub1 = file_name.substr(0, dot_index);\n    std::string sub2 = file_name.substr(dot_index\
    \ + 1, len - dot_index - 1);\n    if(sub1.length() == 0 || (sub1[0] < 'a' || sub1[0]\
    \ > 'z') && (sub1[0] < 'A' || sub1[0] > 'Z')) {\n        return \"No\";\n    }\n\
    \    if(sub2 != \"txt\" && sub2 != \"exe\" && sub2 != \"dll\") {\n        return\
    \ \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n\tint count = 0;\n\tint dot = 0;\n\tint len = file_name.length();\n\tfor\
    \ (int i = 0; i < len; i++) {\n\t\tif (file_name[i] >= '0' && file_name[i] <=\
    \ '9') {\n\t\t\tcount++;\n\t\t}\n\t\tif (file_name[i] == '.') {\n\t\t\tdot++;\n\
    \t\t}\n\t}\n\tif (count > 3 || dot != 1) {\n\t\treturn \"No\";\n\t}\n\tstd::string\
    \ sub1 = file_name.substr(0, file_name.find('.'));\n\tstd::string sub2 = file_name.substr(file_name.find('.')\
    \ + 1);\n\tif (sub1.length() == 0 || (sub1[0] < 'a' || sub1[0] > 'z') && (sub1[0]\
    \ < 'A' || sub1[0] > 'Z')) {\n\t\treturn \"No\";\n\t}\n\tif (sub2 != \"txt\" &&\
    \ sub2 != \"exe\" && sub2 != \"dll\") {\n\t\treturn \"No\";\n\t}\n\treturn \"\
    Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086347
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot++;\n        }\n    }\n    if(count > 3 || dot != 1) {\n \
    \       return \"No\";\n    }\n    std::string sub1 = file_name.substr(0, file_name.find('.'));\n\
    \    std::string sub2 = file_name.substr(file_name.find('.') + 1);\n    if(sub1.length()\
    \ == 0 || (sub1[0] < 'a' || sub1[0] > 'z') && (sub1[0] < 'A' || sub1[0] > 'Z'))\
    \ {\n        return \"No\";\n    }\n    if(sub2 != \"txt\" && sub2 != \"exe\"\
    \ && sub2 != \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";\n\
    }\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086345
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    for(int\
    \ i = 0; i < file_name.length(); i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n            dot_index = i;\n        }\n    }\n\
    \    if(count > 3) {\n        return \"No\";\n    }\n    if(dot_count != 1) {\n\
    \        return \"No\";\n    }\n    if(file_name[0] < 'a' || file_name[0] > 'z')\
    \ {\n        return \"No\";\n    }\n    if(file_name.substr(dot_index+1, file_name.length()-1)\
    \ != \"txt\" && file_name.substr(dot_index+1, file_name.length()-1) != \"exe\"\
    \ && file_name.substr(dot_index+1, file_name.length()-1) != \"dll\") {\n     \
    \   return \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmp6mutad_p: /tmp/tmp6mutad_p.cpp:47: int main(): Assertion `candidate(("K.dll"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    for(int\
    \ i = 0; i < file_name.length(); i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n            dot_index = i;\n        }\n    }\n\
    \    if(count > 3) {\n        return \"No\";\n    }\n    if(dot_count != 1) {\n\
    \        return \"No\";\n    }\n    std::string sub_str1 = file_name.substr(0,\
    \ dot_index);\n    std::string sub_str2 = file_name.substr(dot_index + 1, file_name.length()\
    \ - dot_index - 1);\n    if(sub_str1.length() == 0) {\n        return \"No\";\n\
    \    }\n    if(sub_str1[0] < 'a' || sub_str1[0] > 'z') {\n        if(sub_str1[0]\
    \ < 'A' || sub_str1[0] > 'Z') {\n            return \"No\";\n        }\n    }\n\
    \    if(sub_str2 != \"txt\" && sub_str2 != \"exe\" && sub_str2 != \"dll\") {\n\
    \        return \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n    auto\
    \ candidate = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"\
    Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    for(int\
    \ i = 0; i < file_name.length(); i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n            dot_index = i;\n        }\n    }\n\
    \    if(count > 3) {\n        return \"No\";\n    }\n    if(dot_count != 1) {\n\
    \        return \"No\";\n    }\n    if(file_name[0] < 'a' || file_name[0] > 'z')\
    \ {\n        return \"No\";\n    }\n    if(file_name.substr(dot_index + 1, file_name.length()\
    \ - dot_index - 1) != \"txt\" && file_name.substr(dot_index + 1, file_name.length()\
    \ - dot_index - 1) != \"exe\" && file_name.substr(dot_index + 1, file_name.length()\
    \ - dot_index - 1) != \"dll\") {\n        return \"No\";\n    }\n    return \"\
    Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpywrkpwni: /tmp/tmpywrkpwni.cpp:47: int main(): Assertion `candidate(("K.dll"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086340
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    for(int\
    \ i = 0; i < file_name.length(); i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n            dot_index = i;\n        }\n    }\n\
    \    if(count > 3) {\n        return \"No\";\n    }\n    if(dot_count != 1) {\n\
    \        return \"No\";\n    }\n    if(file_name[0] < 'a' || file_name[0] > 'z')\
    \ {\n        return \"No\";\n    }\n    if(file_name.substr(dot_index + 1, file_name.length()\
    \ - dot_index - 1) != \"txt\" && file_name.substr(dot_index + 1, file_name.length()\
    \ - dot_index - 1) != \"exe\" && file_name.substr(dot_index + 1, file_name.length()\
    \ - dot_index - 1) != \"dll\") {\n        return \"No\";\n    }\n    return \"\
    Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpywrkpwni: /tmp/tmpywrkpwni.cpp:47: int main(): Assertion `candidate(("K.dll"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086340
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n  // your code here\n  int count = 0;\n  int dot = 0;\n  int dot_pos = 0;\n\
    \  int dot_pos_1 = 0;\n  int dot_pos_2 = 0;\n  int dot_pos_3 = 0;\n  int dot_pos_4\
    \ = 0;\n  int dot_pos_5 = 0;\n  int dot_pos_6 = 0;\n  int dot_pos_7 = 0;\n  int\
    \ dot_pos_8 = 0;\n  int dot_pos_9 = 0;\n  int dot_pos_10 = 0;\n  int dot_pos_11\
    \ = 0;\n  int dot_pos_12 = 0;\n  int dot_pos_13 = 0;\n  int dot_pos_14 = 0;\n\
    \  int dot_pos_15 = 0;\n  int dot_pos_16 = 0;\n  int dot_pos_17 = 0;\n  int dot_pos_18\
    \ = 0;\n  int dot_pos_19 = 0;\n  int dot_pos_20 = 0;\n  int dot_pos_21 = 0;\n\
    \  int dot_pos_22 = 0;\n  int dot_pos_23 = 0;\n  int dot_pos_24 = 0;\n  int dot_pos_25\
    \ = 0;\n  int dot_pos_26 = 0;\n  int dot_pos_27 = 0;\n  int dot_pos_28 = 0;\n\
    \  int dot_pos_29 = 0;\n  int dot_pos_30 = 0;\n  int dot_pos_31 = 0;\n  int dot_pos_32\
    \ = 0;\n  int dot_pos_33 = 0;\n  int dot_pos_34 = 0;\n  int dot_pos_35 = 0;\n\
    \  int dot_pos_36 = 0;\n  int dot_pos_37 = 0;\n  int dot_pos_38 = 0;\n  int dot_pos_39\
    \ = 0;\n  int dot_pos_40 = 0;\n  int dot_pos_41 = 0;\n  int dot_pos_42 = 0;\n\
    \  int dot_pos_43 = 0;\n  int dot_pos_44 = 0\n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_q1y3am_.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmp_q1y3am_.cpp:64:1: error: expected \u2018,\u2019 or \u2018;\u2019 before\
    \ \u2018}\u2019 token\n   64 | }\n      | ^\n/tmp/tmp_q1y3am_.cpp:64:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660086347
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n        }\n    }\n    if(count > 3 || dot_count\
    \ != 1) {\n        return \"No\";\n    }\n    std::string str = file_name.substr(0,\
    \ file_name.find('.'));\n    if(str.length() == 0) {\n        return \"No\";\n\
    \    }\n    if(str[0] >= 'a' && str[0] <= 'z' || str[0] >= 'A' && str[0] <= 'Z')\
    \ {\n        std::string str2 = file_name.substr(file_name.find('.') + 1, len);\n\
    \        if(str2 == \"txt\" || str2 == \"exe\" || str2 == \"dll\") {\n       \
    \     return \"Yes\";\n        }\n    }\n    return \"No\";\n}\nint main() {\n\
    \    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086347
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot++;\n        }\n    }\n    if(count > 3 || dot != 1) {\n \
    \       return \"No\";\n    }\n    std::string sub = file_name.substr(0, file_name.find('.'));\n\
    \    if(sub.length() == 0) {\n        return \"No\";\n    }\n    if(!((sub[0]\
    \ >= 'a' && sub[0] <= 'z') || (sub[0] >= 'A' && sub[0] <= 'Z'))) {\n        return\
    \ \"No\";\n    }\n    sub = file_name.substr(file_name.find('.') + 1);\n    if(sub\
    \ == \"txt\" || sub == \"exe\" || sub == \"dll\") {\n        return \"Yes\";\n\
    \    }\n    return \"No\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n  std::regex reg(\"^[a-zA-Z]+[0-9]{0,3}\\\\.(txt|exe|dll)$\");\n  return\
    \ std::regex_match(file_name, reg) ? \"Yes\" : \"No\";\n}\nint main() {\n    auto\
    \ candidate = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"\
    Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmp15jmxkfr: /tmp/tmp15jmxkfr.cpp:25: int main(): Assertion `candidate(("MY16FILE3.exe"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086350
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int dot_pos = 0;\n    int\
    \ len = file_name.length();\n    for(int i = 0; i < len; i++) {\n        if(file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            count++;\n        }\n        if(file_name[i]\
    \ == '.') {\n            dot_count++;\n            dot_pos = i;\n        }\n \
    \   }\n    if(count > 3 || dot_count != 1) {\n        return \"No\";\n    }\n\
    \    std::string sub1 = file_name.substr(0, dot_pos);\n    std::string sub2 =\
    \ file_name.substr(dot_pos + 1, len - dot_pos);\n    if(sub1.length() == 0 ||\
    \ (sub1[0] < 'a' || sub1[0] > 'z') && (sub1[0] < 'A' || sub1[0] > 'Z')) {\n  \
    \      return \"No\";\n    }\n    if(sub2 != \"txt\" && sub2 != \"exe\" && sub2\
    \ != \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";\n}\nint main()\
    \ {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n  int count = 0;\n  int dot_count = 0;\n  int dot_index = 0;\n  int digit_count\
    \ = 0;\n  int letter_count = 0;\n  std::string extension;\n  for (int i = 0; i\
    \ < file_name.length(); i++) {\n    if (file_name[i] == '.') {\n      dot_count++;\n\
    \      dot_index = i;\n    }\n    if (file_name[i] >= '0' && file_name[i] <= '9')\
    \ {\n      digit_count++;\n    }\n    if ((file_name[i] >= 'a' && file_name[i]\
    \ <= 'z') || (file_name[i] >= 'A' && file_name[i] <= 'Z')) {\n      letter_count++;\n\
    \    }\n  }\n  if (dot_count == 1 && digit_count <= 3 && letter_count > 0) {\n\
    \    for (int i = dot_index + 1; i < file_name.length(); i++) {\n      extension\
    \ += file_name[i];\n    }\n    if (extension == \"txt\" || extension == \"exe\"\
    \ || extension == \"dll\") {\n      return \"Yes\";\n    }\n  }\n  return \"No\"\
    ;\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmp2_cbk6ho: /tmp/tmp2_cbk6ho.cpp:47: int main(): Assertion `candidate(("1example.dll"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660086347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot = 0;\n    int flag = 0;\n    for(int i =\
    \ 0; i < file_name.length(); i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot++;\n        }\n        if(file_name[i] == '.' && file_name[i-1]\
    \ >= '0' && file_name[i-1] <= '9') {\n            flag = 1;\n        }\n    }\n\
    \    if(count > 3 || dot != 1 || flag == 1) {\n        return \"No\";\n    }\n\
    \    else {\n        std::string ext = file_name.substr(file_name.find(\".\")\
    \ + 1);\n        if(ext == \"txt\" || ext == \"exe\" || ext == \"dll\") {\n  \
    \          return \"Yes\";\n        }\n        else {\n            return \"No\"\
    ;\n        }\n    }\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpszi_jmtg: /tmp/tmpszi_jmtg.cpp:46: int main(): Assertion `candidate(("1example.dll"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660086347
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot++;\n        }\n    }\n    if(count > 3 || dot != 1) {\n \
    \       return \"No\";\n    }\n    std::string s1 = file_name.substr(0, file_name.find(\"\
    .\"));\n    std::string s2 = file_name.substr(file_name.find(\".\") + 1);\n  \
    \  if(s1.length() == 0 || (s1[0] < 'a' || s1[0] > 'z') && (s1[0] < 'A' || s1[0]\
    \ > 'Z')) {\n        return \"No\";\n    }\n    if(s2 != \"txt\" && s2 != \"exe\"\
    \ && s2 != \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n\
    int main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086342
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    int\
    \ dot_index_after = 0;\n    int dot_index_before = 0;\n    int dot_index_before_count\
    \ = 0;\n    int dot_index_after_count = 0;\n    int dot_index_before_count_letter\
    \ = 0;\n    int dot_index_after_count_letter = 0;\n    int dot_index_before_count_number\
    \ = 0;\n    int dot_index_after_count_number = 0;\n    for(int i = 0; i < file_name.length();\
    \ i++){\n        if(file_name[i] == '.'){\n            dot_count++;\n        \
    \    dot_index = i;\n        }\n    }\n    if(dot_count != 1){\n        return\
    \ \"No\";\n    }\n    dot_index_after = dot_index + 1;\n    dot_index_before =\
    \ dot_index - 1;\n    for(int i = 0; i < file_name.length(); i++){\n        if(file_name[i]\
    \ == '.'){\n            dot_index_after = i + 1;\n            dot_index_before\
    \ = i - 1;\n        }\n    }\n    for(int i = 0; i < file_name.length(); i++){\n\
    \        if(i < dot_index){\n            dot_index_before_count++;\n        }\n\
    \    }\n    for(int i = 0; i < file_name.length(); i++){\n        if(i > dot_index){\n\
    \            dot_index_after_count++;\n        }\n    }\n    for(int i = 0; i\
    \ < file_name.length(); i++){\n        if(i < dot_index && isalpha(file_name[i])){\n\
    \            dot_index_before_count_letter++;\n        }\n    }\n    for(int i\
    \ = 0; i < file_name.length(); i++){\n        if(i > dot_index && isalpha(file_name[i])){\n\
    \            dot_index_after_count_letter++;\n        }\n    }\n    for(\n}\n\
    int main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7wh89tvi.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmp7wh89tvi.cpp:65:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   65 | }\n      | ^\n/tmp/tmp7wh89tvi.cpp:65:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n/tmp/tmp7wh89tvi.cpp:64:9: error:\
    \ expected \u2018;\u2019 before \u2018}\u2019 token\n   64 |     for(\n      |\
    \         ^\n      |         ;\n   65 | }\n      | ~        \n/tmp/tmp7wh89tvi.cpp:65:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   65 | }\n \
    \     | ^\n/tmp/tmp7wh89tvi.cpp:64:9: error: expected \u2018)\u2019 before \u2018\
    }\u2019 token\n   64 |     for(\n      |        ~^\n      |         )\n   65 |\
    \ }\n      | ~        \n/tmp/tmp7wh89tvi.cpp:65:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   65 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660086347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    for(int\
    \ i = 0; i < file_name.length(); i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n            dot_index = i;\n        }\n    }\n\
    \    if(count > 3) {\n        return \"No\";\n    }\n    if(dot_count != 1) {\n\
    \        return \"No\";\n    }\n    if(file_name[0] < 'a' || file_name[0] > 'z')\
    \ {\n        return \"No\";\n    }\n    std::string extension = file_name.substr(dot_index\
    \ + 1);\n    if(extension != \"txt\" && extension != \"exe\" && extension != \"\
    dll\") {\n        return \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n\
    \    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpii8nf0vj: /tmp/tmpii8nf0vj.cpp:48: int main(): Assertion `candidate(("K.dll"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    for(int i = 0; i < file_name.length();\
    \ i++) {\n        if(file_name[i] >= '0' && file_name[i] <= '9') {\n         \
    \   count++;\n        }\n        if(file_name[i] == '.') {\n            dot_count++;\n\
    \        }\n    }\n    if(count > 3 || dot_count != 1) {\n        return \"No\"\
    ;\n    }\n    std::string sub_str = file_name.substr(file_name.find('.') + 1);\n\
    \    if(sub_str == \"txt\" || sub_str == \"exe\" || sub_str == \"dll\") {\n  \
    \      return \"Yes\";\n    }\n    return \"No\";\n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpt5kmdgl5: /tmp/tmpt5kmdgl5.cpp:38: int main(): Assertion `candidate(("1example.dll"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660086338
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    for(int\
    \ i = 0; i < file_name.length(); i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n            dot_index = i;\n        }\n    }\n\
    \    if(count > 3) {\n        return \"No\";\n    }\n    if(dot_count != 1) {\n\
    \        return \"No\";\n    }\n    if(file_name[0] < 'a' || file_name[0] > 'z')\
    \ {\n        return \"No\";\n    }\n    if(file_name.substr(dot_index + 1, 3)\
    \ != \"txt\" && file_name.substr(dot_index + 1, 3) != \"exe\" && file_name.substr(dot_index\
    \ + 1, 3) != \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";\n\
    }\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpph5nss4a: /tmp/tmpph5nss4a.cpp:47: int main(): Assertion `candidate(("K.dll"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086337
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    int\
    \ len = file_name.length();\n    for(int i = 0; i < len; i++) {\n        if(file_name[i]\
    \ == '.') {\n            dot_count++;\n            dot_index = i;\n        }\n\
    \        if(file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n\
    \        }\n    }\n    if(count > 3) {\n        return \"No\";\n    }\n    if(dot_count\
    \ != 1) {\n        return \"No\";\n    }\n    if(file_name[0] < 'a' || file_name[0]\
    \ > 'z') {\n        return \"No\";\n    }\n    if(file_name[dot_index + 1] !=\
    \ 't' || file_name[dot_index + 2] != 'x' || file_name[dot_index + 3] != 't') {\n\
    \        return \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n    auto\
    \ candidate = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"\
    Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmphz8cltsq: /tmp/tmphz8cltsq.cpp:48: int main(): Assertion `candidate(("K.dll"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    int\
    \ len = file_name.length();\n    for(int i = 0; i < len; i++) {\n        if(file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            count++;\n        }\n        if(file_name[i]\
    \ == '.') {\n            dot_count++;\n            dot_index = i;\n        }\n\
    \    }\n    if(count > 3) {\n        return \"No\";\n    }\n    if(dot_count !=\
    \ 1) {\n        return \"No\";\n    }\n    if(dot_index == 0) {\n        return\
    \ \"No\";\n    }\n    if(!((file_name[dot_index + 1] == 't' && file_name[dot_index\
    \ + 2] == 'x' && file_name[dot_index + 3] == 't') || (file_name[dot_index + 1]\
    \ == 'e' && file_name[dot_index + 2] == 'x' && file_name[dot_index + 3] == 'e')\
    \ || (file_name[dot_index + 1] == 'd' && file_name[dot_index + 2] == 'l' && file_name[dot_index\
    \ + 3] == 'l'))) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\nint\
    \ main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpojpdzmis: /tmp/tmpojpdzmis.cpp:46: int main(): Assertion `candidate(("1example.dll"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660086347
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot++;\n        }\n    }\n    if(count > 3 || dot != 1) {\n \
    \       return \"No\";\n    }\n    std::string s1 = file_name.substr(0, file_name.find('.'));\n\
    \    std::string s2 = file_name.substr(file_name.find('.') + 1);\n    if(s1.length()\
    \ == 0 || (s1[0] < 'a' || s1[0] > 'z') && (s1[0] < 'A' || s1[0] > 'Z')) {\n  \
    \      return \"No\";\n    }\n    if(s2 != \"txt\" && s2 != \"exe\" && s2 != \"\
    dll\") {\n        return \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n\
    \    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    int\
    \ digit_count = 0;\n    int digit_index = 0;\n    for(int i = 0; i < file_name.length();\
    \ i++) {\n        if(file_name[i] == '.') {\n            dot_count++;\n      \
    \      dot_index = i;\n        }\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            digit_count++;\n            digit_index = i;\n      \
    \  }\n    }\n    if(dot_count != 1) {\n        return \"No\";\n    }\n    if(digit_count\
    \ > 3) {\n        return \"No\";\n    }\n    if(file_name[0] < 'a' || file_name[0]\
    \ > 'z') {\n        return \"No\";\n    }\n    if(file_name[dot_index + 1] !=\
    \ 't' || file_name[dot_index + 2] != 'x' || file_name[dot_index + 3] != 't') {\n\
    \        return \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n    auto\
    \ candidate = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"\
    Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmp94ynuoei: /tmp/tmp94ynuoei.cpp:50: int main(): Assertion `candidate(("K.dll"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    int\
    \ i = 0;\n    for(i = 0; i < file_name.length(); i++) {\n        if(file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            count++;\n        }\n        if(file_name[i]\
    \ == '.') {\n            dot_count++;\n            dot_index = i;\n        }\n\
    \    }\n    if(count > 3) {\n        return \"No\";\n    }\n    if(dot_count !=\
    \ 1) {\n        return \"No\";\n    }\n    if(dot_index == 0) {\n        return\
    \ \"No\";\n    }\n    if(file_name[dot_index + 1] == 't' && file_name[dot_index\
    \ + 2] == 'x' && file_name[dot_index + 3] == 't') {\n        return \"Yes\";\n\
    \    }\n    if(file_name[dot_index + 1] == 'e' && file_name[dot_index + 2] ==\
    \ 'x' && file_name[dot_index + 3] == 'e') {\n        return \"Yes\";\n    }\n\
    \    if(file_name[dot_index + 1] == 'd' && file_name[dot_index + 2] == 'l' &&\
    \ file_name[dot_index + 3] == 'l') {\n        return \"Yes\";\n    }\n    return\
    \ \"No\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpppev2k5d: /tmp/tmpppev2k5d.cpp:52: int main(): Assertion `candidate(("1example.dll"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660086348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_pos = -1;\n    for(int i = 0; i < file_name.size();\
    \ i++) {\n        if(file_name[i] >= '0' && file_name[i] <= '9') {\n         \
    \   count++;\n        }\n        if(file_name[i] == '.') {\n            dot_pos\
    \ = i;\n        }\n    }\n    if(count > 3) {\n        return \"No\";\n    }\n\
    \    if(dot_pos == -1) {\n        return \"No\";\n    }\n    std::string before_dot\
    \ = file_name.substr(0, dot_pos);\n    std::string after_dot = file_name.substr(dot_pos\
    \ + 1);\n    if(before_dot.size() == 0) {\n        return \"No\";\n    }\n   \
    \ if(before_dot[0] < 'a' || before_dot[0] > 'z') {\n        if(before_dot[0] <\
    \ 'A' || before_dot[0] > 'Z') {\n            return \"No\";\n        }\n    }\n\
    \    if(after_dot != \"txt\" && after_dot != \"exe\" && after_dot != \"dll\")\
    \ {\n        return \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n   \
    \ auto candidate = file_name_check;\n    assert(candidate((\"example.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpbil_3uz9: /tmp/tmpbil_3uz9.cpp:64: int main(): Assertion `candidate(("all.exe.txt"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660086349
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n        }\n    }\n    if(count > 3 || dot_count\
    \ != 1) {\n        return \"No\";\n    }\n    std::string sub = file_name.substr(0,\
    \ file_name.find(\".\"));\n    if(sub.length() == 0) {\n        return \"No\"\
    ;\n    }\n    if(sub[0] >= 'a' && sub[0] <= 'z' || sub[0] >= 'A' && sub[0] <=\
    \ 'Z') {\n        std::string sub2 = file_name.substr(file_name.find(\".\") +\
    \ 1);\n        if(sub2 == \"txt\" || sub2 == \"exe\" || sub2 == \"dll\") {\n \
    \           return \"Yes\";\n        }\n    }\n    return \"No\";\n}\nint main()\
    \ {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086349
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int dot_count = 0;\n    int digit_count = 0;\n    for (int i = 0; i <\
    \ file_name.size(); i++) {\n        if (file_name[i] == '.') {\n            dot_count++;\n\
    \        }\n        if (file_name[i] >= '0' && file_name[i] <= '9') {\n      \
    \      digit_count++;\n        }\n    }\n    if (dot_count != 1 || digit_count\
    \ > 3) {\n        return \"No\";\n    }\n    std::string extension = file_name.substr(file_name.find(\"\
    .\") + 1);\n    if (extension != \"txt\" && extension != \"exe\" && extension\
    \ != \"dll\") {\n        return \"No\";\n    }\n    std::string name = file_name.substr(0,\
    \ file_name.find(\".\"));\n    if (name.size() == 0 || !((name[0] >= 'a' && name[0]\
    \ <= 'z') || (name[0] >= 'A' && name[0] <= 'Z'))) {\n        return \"No\";\n\
    \    }\n    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086349
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int flag = 0;\n    for(int\
    \ i = 0; i < file_name.length(); i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n        }\n        if(file_name[i] >= 'a' && file_name[i]\
    \ <= 'z') {\n            flag = 1;\n        }\n        if(file_name[i] >= 'A'\
    \ && file_name[i] <= 'Z') {\n            flag = 1;\n        }\n    }\n    if(count\
    \ > 3 || dot_count != 1 || flag == 0) {\n        return \"No\";\n    }\n    std::string\
    \ extension = file_name.substr(file_name.find(\".\") + 1);\n    if(extension ==\
    \ \"txt\" || extension == \"exe\" || extension == \"dll\") {\n        return \"\
    Yes\";\n    }\n    return \"No\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmppt4h9853: /tmp/tmppt4h9853.cpp:45: int main(): Assertion `candidate(("1example.dll"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660086349
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    std::regex pattern(\"^[a-zA-Z]{1}[a-zA-Z0-9]{0,2}\\\\.(txt|exe|dll)$\"\
    );\n    return std::regex_match(file_name, pattern) ? \"Yes\" : \"No\";\n}\nint\
    \ main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpz68pzrbn: /tmp/tmpz68pzrbn.cpp:21: int main(): Assertion `candidate(("example.txt"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086351
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot++;\n        }\n    }\n    if(count > 3 || dot != 1) {\n \
    \       return \"No\";\n    }\n    std::string s1 = file_name.substr(0, file_name.find(\"\
    .\"));\n    std::string s2 = file_name.substr(file_name.find(\".\") + 1);\n  \
    \  if(s1.length() == 0 || (s1[0] < 'a' || s1[0] > 'z') && (s1[0] < 'A' || s1[0]\
    \ > 'Z')) {\n        return \"No\";\n    }\n    if(s2 != \"txt\" && s2 != \"exe\"\
    \ && s2 != \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n\
    int main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086342
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n        }\n    }\n    if(count > 3 || dot_count\
    \ != 1) {\n        return \"No\";\n    }\n    std::string sub = file_name.substr(0,\
    \ file_name.find('.'));\n    if(sub.length() == 0) {\n        return \"No\";\n\
    \    }\n    if(sub[0] >= 'a' && sub[0] <= 'z' || sub[0] >= 'A' && sub[0] <= 'Z')\
    \ {\n        std::string sub2 = file_name.substr(file_name.find('.') + 1);\n \
    \       if(sub2 == \"txt\" || sub2 == \"exe\" || sub2 == \"dll\") {\n        \
    \    return \"Yes\";\n        }\n    }\n    return \"No\";\n}\nint main() {\n\
    \    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086349
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot = 0;\n    int dot_pos = 0;\n    for(int i\
    \ = 0; i < file_name.length(); i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot++;\n            dot_pos = i;\n        }\n    }\n    if(count\
    \ > 3) {\n        return \"No\";\n    }\n    if(dot != 1) {\n        return \"\
    No\";\n    }\n    if(file_name[0] < 'a' || file_name[0] > 'z') {\n        return\
    \ \"No\";\n    }\n    if(file_name.substr(dot_pos + 1, file_name.length() - dot_pos\
    \ - 1) != \"txt\" && file_name.substr(dot_pos + 1, file_name.length() - dot_pos\
    \ - 1) != \"exe\" && file_name.substr(dot_pos + 1, file_name.length() - dot_pos\
    \ - 1) != \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n\
    int main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmp1v2f8kkg: /tmp/tmp1v2f8kkg.cpp:47: int main(): Assertion `candidate(("K.dll"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n\tint count = 0;\n\tint dot_count = 0;\n\tint dot_pos = 0;\n\tfor (int i\
    \ = 0; i < file_name.length(); i++) {\n\t\tif (file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n\t\t\tcount++;\n\t\t}\n\t\tif (file_name[i] == '.') {\n\t\t\tdot_count++;\n\
    \t\t\tdot_pos = i;\n\t\t}\n\t}\n\tif (count > 3) {\n\t\treturn \"No\";\n\t}\n\t\
    if (dot_count != 1) {\n\t\treturn \"No\";\n\t}\n\tif (file_name[0] < 'a' || file_name[0]\
    \ > 'z') {\n\t\treturn \"No\";\n\t}\n\tstd::string ext = file_name.substr(dot_pos\
    \ + 1);\n\tif (ext == \"txt\" || ext == \"exe\" || ext == \"dll\") {\n\t\treturn\
    \ \"Yes\";\n\t}\n\treturn \"No\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpca48k08v: /tmp/tmpca48k08v.cpp:48: int main(): Assertion `candidate(("K.dll"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086349
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot = 0;\n    for(int i = 0; i < file_name.length();\
    \ i++) {\n        if(file_name[i] >= '0' && file_name[i] <= '9') {\n         \
    \   count++;\n        }\n        if(file_name[i] == '.') {\n            dot++;\n\
    \        }\n    }\n    if(count > 3 || dot != 1) {\n        return \"No\";\n \
    \   }\n    std::string sub1 = file_name.substr(0, file_name.find(\".\"));\n  \
    \  std::string sub2 = file_name.substr(file_name.find(\".\") + 1);\n    if(sub1.length()\
    \ == 0 || (sub1[0] < 'a' || sub1[0] > 'z') && (sub1[0] < 'A' || sub1[0] > 'Z'))\
    \ {\n        return \"No\";\n    }\n    if(sub2 != \"txt\" && sub2 != \"exe\"\
    \ && sub2 != \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";\n\
    }\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086349
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n        }\n    }\n    if(count > 3 || dot_count\
    \ != 1) {\n        return \"No\";\n    }\n    std::string sub = file_name.substr(0,\
    \ file_name.find(\".\"));\n    if(sub.length() == 0) {\n        return \"No\"\
    ;\n    }\n    if(sub[0] >= 'a' && sub[0] <= 'z' || sub[0] >= 'A' && sub[0] <=\
    \ 'Z') {\n        std::string sub2 = file_name.substr(file_name.find(\".\") +\
    \ 1);\n        if(sub2 == \"txt\" || sub2 == \"exe\" || sub2 == \"dll\") {\n \
    \           return \"Yes\";\n        }\n    }\n    return \"No\";\n}\nint main()\
    \ {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086349
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot++;\n        }\n    }\n    if(count > 3 || dot != 1) {\n \
    \       return \"No\";\n    }\n    std::string str = file_name.substr(0, file_name.find(\"\
    .\"));\n    if(str.length() == 0 || (str[0] < 'a' || str[0] > 'z') && (str[0]\
    \ < 'A' || str[0] > 'Z')) {\n        return \"No\";\n    }\n    str = file_name.substr(file_name.find(\"\
    .\") + 1);\n    if(str != \"txt\" && str != \"exe\" && str != \"dll\") {\n   \
    \     return \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086335
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot++;\n        }\n    }\n    if(count > 3 || dot != 1) {\n \
    \       return \"No\";\n    }\n    std::string sub = file_name.substr(0, file_name.find('.'));\n\
    \    if(sub.length() == 0) {\n        return \"No\";\n    }\n    if(sub[0] >=\
    \ 'a' && sub[0] <= 'z' || sub[0] >= 'A' && sub[0] <= 'Z') {\n        sub = file_name.substr(file_name.find('.')\
    \ + 1);\n        if(sub == \"txt\" || sub == \"exe\" || sub == \"dll\") {\n  \
    \          return \"Yes\";\n        }\n    }\n    return \"No\";\n}\nint main()\
    \ {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086349
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    std::regex pattern(\"^[a-zA-Z]{1}[a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    );\n    if(std::regex_match(file_name, pattern)) {\n        return \"Yes\";\n\
    \    }\n    return \"No\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpg2n7al8g: /tmp/tmpg2n7al8g.cpp:24: int main(): Assertion `candidate(("example.txt"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086351
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int cnt = 0;\n    int dot_cnt = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            cnt++;\n        }\n        if(file_name[i] == '.') {\n\
    \            dot_cnt++;\n        }\n    }\n    if(cnt > 3 || dot_cnt != 1) {\n\
    \        return \"No\";\n    }\n    std::string str1 = file_name.substr(0, file_name.find(\"\
    .\"));\n    std::string str2 = file_name.substr(file_name.find(\".\") + 1, len\
    \ - 1);\n    if(str1.length() == 0 || (str1[0] < 'a' || str1[0] > 'z') && (str1[0]\
    \ < 'A' || str1[0] > 'Z')) {\n        return \"No\";\n    }\n    if(str2 != \"\
    txt\" && str2 != \"exe\" && str2 != \"dll\") {\n        return \"No\";\n    }\n\
    \    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086349
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    for(int\
    \ i = 0; i < file_name.length(); i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n            dot_index = i;\n        }\n    }\n\
    \    if(count > 3) {\n        return \"No\";\n    }\n    if(dot_count != 1) {\n\
    \        return \"No\";\n    }\n    if(file_name[0] >= '0' && file_name[0] <=\
    \ '9') {\n        return \"No\";\n    }\n    if(file_name.substr(dot_index + 1,\
    \ file_name.length() - dot_index - 1) != \"txt\" &&\n    file_name.substr(dot_index\
    \ + 1, file_name.length() - dot_index - 1) != \"exe\" &&\n    file_name.substr(dot_index\
    \ + 1, file_name.length() - dot_index - 1) != \"dll\") {\n        return \"No\"\
    ;\n    }\n    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpz8arh86i: /tmp/tmpz8arh86i.cpp:52: int main(): Assertion `candidate(("_Y.txt"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660086349
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    bool dot = false;\n    bool valid = false;\n    for(int\
    \ i = 0; i < file_name.length(); i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot = true;\n        }\n        if(file_name[i] == '.' && (file_name[i+1]\
    \ == 't' && file_name[i+2] == 'x' && file_name[i+3] == 't') || (file_name[i+1]\
    \ == 'e' && file_name[i+2] == 'x' && file_name[i+3] == 'e') || (file_name[i+1]\
    \ == 'd' && file_name[i+2] == 'l' && file_name[i+3] == 'l')) {\n            valid\
    \ = true;\n        }\n    }\n    if(count > 3 || dot == false || valid == false)\
    \ {\n        return \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n   \
    \ auto candidate = file_name_check;\n    assert(candidate((\"example.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpqlrv9bj0: /tmp/tmpqlrv9bj0.cpp:38: int main(): Assertion `candidate(("1example.dll"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660086349
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    for(int\
    \ i = 0; i < file_name.length(); i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n            dot_index = i;\n        }\n    }\n\
    \    if(count > 3) {\n        return \"No\";\n    }\n    if(dot_count != 1) {\n\
    \        return \"No\";\n    }\n    if(file_name[0] < 'a' || file_name[0] > 'z')\
    \ {\n        return \"No\";\n    }\n    std::string extension = file_name.substr(dot_index\
    \ + 1);\n    if(extension != \"txt\" && extension != \"exe\" && extension != \"\
    dll\") {\n        return \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n\
    \    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpii8nf0vj: /tmp/tmpii8nf0vj.cpp:48: int main(): Assertion `candidate(("K.dll"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086342
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int dot_count = 0;\n    int digit_count = 0;\n    for (int i = 0; i <\
    \ file_name.size(); i++) {\n        if (file_name[i] == '.') {\n            dot_count++;\n\
    \        }\n        if (file_name[i] >= '0' && file_name[i] <= '9') {\n      \
    \      digit_count++;\n        }\n    }\n    if (dot_count != 1 || digit_count\
    \ > 3) {\n        return \"No\";\n    }\n    std::string file_name_without_dot\
    \ = file_name.substr(0, file_name.find(\".\"));\n    std::string file_name_extension\
    \ = file_name.substr(file_name.find(\".\") + 1);\n    if (file_name_without_dot.size()\
    \ == 0 ||\n        !((file_name_without_dot[0] >= 'a' && file_name_without_dot[0]\
    \ <= 'z') ||\n        (file_name_without_dot[0] >= 'A' && file_name_without_dot[0]\
    \ <= 'Z'))) {\n        return \"No\";\n    }\n    if (file_name_extension != \"\
    txt\" && file_name_extension != \"exe\" && file_name_extension != \"dll\") {\n\
    \        return \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n    auto\
    \ candidate = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"\
    Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086349
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int dot_pos = 0;\n    int\
    \ i = 0;\n    int len = file_name.length();\n    while(i < len) {\n        if(file_name[i]\
    \ == '.') {\n            dot_count++;\n            dot_pos = i;\n        }\n \
    \       if(file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n\
    \        }\n        i++;\n    }\n    if(count > 3) {\n        return \"No\";\n\
    \    }\n    if(dot_count != 1) {\n        return \"No\";\n    }\n    if(dot_pos\
    \ == 0) {\n        return \"No\";\n    }\n    if(file_name[dot_pos + 1] == 't'\
    \ && file_name[dot_pos + 2] == 'x' && file_name[dot_pos + 3] == 't') {\n     \
    \   return \"Yes\";\n    }\n    if(file_name[dot_pos + 1] == 'e' && file_name[dot_pos\
    \ + 2] == 'x' && file_name[dot_pos + 3] == 'e') {\n        return \"Yes\";\n \
    \   }\n    if(file_name[dot_pos + 1] == 'd' && file_name[dot_pos + 2] == 'l' &&\
    \ file_name[dot_pos + 3] == 'l') {\n        return \"Yes\";\n    }\n    return\
    \ \"No\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpjmgsbanx: /tmp/tmpjmgsbanx.cpp:54: int main(): Assertion `candidate(("1example.dll"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660086349
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    for(int i = 0; i < file_name.length();\
    \ i++) {\n        if(file_name[i] >= '0' && file_name[i] <= '9') {\n         \
    \   count++;\n        }\n        if(file_name[i] == '.') {\n            dot_count++;\n\
    \        }\n    }\n    if(count > 3 || dot_count != 1) {\n        return \"No\"\
    ;\n    }\n    std::string before_dot = file_name.substr(0, file_name.find('.'));\n\
    \    std::string after_dot = file_name.substr(file_name.find('.') + 1);\n    if(before_dot.length()\
    \ == 0 || !(before_dot[0] >= 'a' && before_dot[0] <= 'z') || !(before_dot[0] >=\
    \ 'A' && before_dot[0] <= 'Z')) {\n        return \"No\";\n    }\n    if(after_dot\
    \ != \"txt\" && after_dot != \"exe\" && after_dot != \"dll\") {\n        return\
    \ \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmp53iwec1q: /tmp/tmp53iwec1q.cpp:41: int main(): Assertion `candidate(("example.txt"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086350
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    bool flag = false;\n    for(int i = 0; i < file_name.length();\
    \ i++) {\n        if(file_name[i] >= '0' && file_name[i] <= '9') {\n         \
    \   count++;\n        }\n        if(file_name[i] == '.') {\n            flag =\
    \ true;\n        }\n    }\n    if(count > 3 || !flag) {\n        return \"No\"\
    ;\n    }\n    std::string str = file_name.substr(0, file_name.find('.'));\n  \
    \  if(str.length() == 0 || !(str[0] >= 'a' && str[0] <= 'z') || !(str[0] >= 'A'\
    \ && str[0] <= 'Z')) {\n        return \"No\";\n    }\n    std::string str1 =\
    \ file_name.substr(file_name.find('.') + 1, file_name.length());\n    if(str1\
    \ != \"txt\" && str1 != \"exe\" && str1 != \"dll\") {\n        return \"No\";\n\
    \    }\n    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpxikzxy32: /tmp/tmpxikzxy32.cpp:41: int main(): Assertion `candidate(("example.txt"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086349
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot++;\n        }\n    }\n    if(count > 3 || dot != 1) {\n \
    \       return \"No\";\n    }\n    std::string str = file_name.substr(0, file_name.find(\"\
    .\"));\n    if(str.length() == 0 || (str[0] >= 'a' && str[0] <= 'z') || (str[0]\
    \ >= 'A' && str[0] <= 'Z')) {\n        return \"No\";\n    }\n    std::string\
    \ str1 = file_name.substr(file_name.find(\".\") + 1, len);\n    if(str1 == \"\
    txt\" || str1 == \"exe\" || str1 == \"dll\") {\n        return \"Yes\";\n    }\n\
    \    return \"No\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpd8gd7woj: /tmp/tmpd8gd7woj.cpp:42: int main(): Assertion `candidate(("example.txt"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086350
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int dot_pos = 0;\n    for(int\
    \ i = 0; i < file_name.length(); i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n            dot_pos = i;\n        }\n    }\n  \
    \  if(count > 3 || dot_count != 1) {\n        return \"No\";\n    }\n    std::string\
    \ sub1 = file_name.substr(0, dot_pos);\n    std::string sub2 = file_name.substr(dot_pos\
    \ + 1, file_name.length() - dot_pos - 1);\n    if(sub1.length() == 0 || (sub1[0]\
    \ < 'a' || sub1[0] > 'z') && (sub1[0] < 'A' || sub1[0] > 'Z')) {\n        return\
    \ \"No\";\n    }\n    if(sub2 != \"txt\" && sub2 != \"exe\" && sub2 != \"dll\"\
    ) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n   \
    \ auto candidate = file_name_check;\n    assert(candidate((\"example.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    std::string result = \"Yes\";\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int dot_index = 0;\n    for (int i = 0; i < file_name.length(); i++)\
    \ {\n        if (file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n\
    \        }\n        if (file_name[i] == '.') {\n            dot_count++;\n   \
    \         dot_index = i;\n        }\n    }\n    if (count > 3 || dot_count !=\
    \ 1) {\n        result = \"No\";\n    }\n    else {\n        std::string sub_string\
    \ = file_name.substr(0, dot_index);\n        if (sub_string.length() == 0 || !(sub_string[0]\
    \ >= 'a' && sub_string[0] <= 'z') || !(sub_string[0] >= 'A' && sub_string[0] <=\
    \ 'Z')) {\n            result = \"No\";\n        }\n        else {\n         \
    \   std::string sub_string_after_dot = file_name.substr(dot_index + 1, file_name.length()\
    \ - dot_index - 1);\n            if (sub_string_after_dot != \"txt\" && sub_string_after_dot\
    \ != \"exe\" && sub_string_after_dot != \"dll\") {\n                result = \"\
    No\";\n            }\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpx4btgbdv: /tmp/tmpx4btgbdv.cpp:48: int main(): Assertion `candidate(("example.txt"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086350
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n\tint count = 0;\n\tint count_dot = 0;\n\tint count_digit = 0;\n\tint count_char\
    \ = 0;\n\tint count_char_after_dot = 0;\n\tint count_char_before_dot = 0;\n\t\
    int count_char_after_dot_txt = 0;\n\tint count_char_after_dot_exe = 0;\n\tint\
    \ count_char_after_dot_dll = 0;\n\tint count_char_before_dot_a = 0;\n\tint count_char_before_dot_z\
    \ = 0;\n\tint count_char_before_dot_A = 0;\n\tint count_char_before_dot_Z = 0;\n\
    \tint count_char_before_dot_0 = 0;\n\tint count_char_before_dot_9 = 0;\n\tint\
    \ count_char_after_dot_t = 0;\n\tint count_char_after_dot_x = 0;\n\tint count_char_after_dot_e\
    \ = 0;\n\tint count_char_after_dot_d = 0;\n\tint count_char_after_dot_l = 0;\n\
    \tint count_char_after_dot_l2 = 0;\n\tint count_char_after_dot_l3 = 0;\n\tint\
    \ count_char_after_dot_l4 = 0;\n\tint count_char_after_dot_l5 = 0;\n\tint count_char_after_dot_l6\
    \ = 0;\n\tint count_char_after_dot_l7 = 0;\n\tint count_char_after_dot_l8 = 0;\n\
    \tint count_char_after_dot_l9 = 0;\n\tint count_char_after_dot_l10 = 0;\n\tint\
    \ count_char_after_dot_l11 = 0;\n\tint count_char_after_dot_l12 = 0;\n\tint count_char_after_dot_l13\
    \ = 0;\n\tint count_char_after_dot_l14 = 0;\n\tint count_char_after_dot_l15 =\
    \ 0;\n\tint count_char_after_dot_l16 = 0;\n\t\n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpfi4ri3k1: /tmp/tmpfi4ri3k1.cpp:55: int main(): Assertion `candidate(("example.txt"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086350
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot = 0;\n    int flag = 0;\n    for(int i =\
    \ 0; i < file_name.length(); i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot++;\n        }\n        if(file_name[i] >= 'a' && file_name[i]\
    \ <= 'z') {\n            flag = 1;\n        }\n        if(file_name[i] >= 'A'\
    \ && file_name[i] <= 'Z') {\n            flag = 1;\n        }\n    }\n    if(count\
    \ > 3 || dot != 1 || flag == 0) {\n        return \"No\";\n    }\n    std::string\
    \ s = file_name.substr(file_name.find('.') + 1);\n    if(s == \"txt\" || s ==\
    \ \"exe\" || s == \"dll\") {\n        return \"Yes\";\n    }\n    return \"No\"\
    ;\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmprb07q4f4: /tmp/tmprb07q4f4.cpp:45: int main(): Assertion `candidate(("1example.dll"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660086350
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n        }\n    }\n    if(count > 3 || dot_count\
    \ != 1) {\n        return \"No\";\n    }\n    std::string str = file_name.substr(0,\
    \ file_name.find('.'));\n    if(str.length() == 0) {\n        return \"No\";\n\
    \    }\n    if(!((str[0] >= 'a' && str[0] <= 'z') || (str[0] >= 'A' && str[0]\
    \ <= 'Z'))) {\n        return \"No\";\n    }\n    std::string ext = file_name.substr(file_name.find('.')\
    \ + 1);\n    if(ext != \"txt\" && ext != \"exe\" && ext != \"dll\") {\n      \
    \  return \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086350
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n        }\n    }\n    if(count > 3 || dot_count\
    \ != 1) {\n        return \"No\";\n    }\n    std::string s = file_name.substr(0,\
    \ file_name.find('.'));\n    if(s.length() == 0) {\n        return \"No\";\n \
    \   }\n    if(s[0] >= 'a' && s[0] <= 'z' || s[0] >= 'A' && s[0] <= 'Z') {\n  \
    \      std::string s2 = file_name.substr(file_name.find('.') + 1, len);\n    \
    \    if(s2 == \"txt\" || s2 == \"exe\" || s2 == \"dll\") {\n            return\
    \ \"Yes\";\n        }\n    }\n    return \"No\";\n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086350
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot = 0;\n    int dot_index = 0;\n    int count_after_dot\
    \ = 0;\n    for(int i = 0; i < file_name.length(); i++) {\n        if(file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            count++;\n        }\n        if(file_name[i]\
    \ == '.') {\n            dot++;\n            dot_index = i;\n        }\n    }\n\
    \    if(count > 3 || dot != 1) {\n        return \"No\";\n    }\n    for(int i\
    \ = dot_index + 1; i < file_name.length(); i++) {\n        count_after_dot++;\n\
    \    }\n    if(count_after_dot != 3) {\n        return \"No\";\n    }\n    if(file_name[0]\
    \ >= 'a' && file_name[0] <= 'z' || file_name[0] >= 'A' && file_name[0] <= 'Z')\
    \ {\n        if(file_name[dot_index + 1] == 't' && file_name[dot_index + 2] ==\
    \ 'x' && file_name[dot_index + 3] == 't') {\n            return \"Yes\";\n   \
    \     }\n        else if(file_name[dot_index + 1] == 'e' && file_name[dot_index\
    \ + 2] == 'x' && file_name[dot_index + 3] == 'e') {\n            return \"Yes\"\
    ;\n        }\n        else if(file_name[dot_index + 1] == 'd' && file_name[dot_index\
    \ + 2] == 'l' && file_name[dot_index + 3] == 'l') {\n            return \"Yes\"\
    ;\n        }\n        else {\n            return \"No\";\n        }\n    }\n \
    \   else {\n        return \"No\";\n    }\n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086351
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    std::string file_name_extension;\n    std::string file_name_without_extension;\n\
    \    std::string file_name_extension_list[3] = {\"txt\", \"exe\", \"dll\"};\n\
    \    int dot_count = 0;\n    int digit_count = 0;\n    for (int i = 0; i < file_name.length();\
    \ i++) {\n        if (file_name[i] == '.') {\n            dot_count++;\n     \
    \       file_name_extension = file_name.substr(i + 1, file_name.length() - 1);\n\
    \            file_name_without_extension = file_name.substr(0, i);\n        }\n\
    \        if (file_name[i] >= '0' && file_name[i] <= '9') {\n            digit_count++;\n\
    \        }\n    }\n    if (dot_count == 1 && digit_count <= 3 && file_name_without_extension.length()\
    \ > 0 &&\n        (file_name_without_extension[0] >= 'a' && file_name_without_extension[0]\
    \ <= 'z' ||\n        file_name_without_extension[0] >= 'A' && file_name_without_extension[0]\
    \ <= 'Z')) {\n        for (int i = 0; i < 3; i++) {\n            if (file_name_extension\
    \ == file_name_extension_list[i]) {\n                return \"Yes\";\n       \
    \     }\n        }\n    }\n    return \"No\";\n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086351
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    std::string sub_str;\n  \
    \  std::string sub_str2;\n    for(int i = 0; i < file_name.length(); i++){\n \
    \       if(file_name[i] == '.'){\n            dot_count++;\n            sub_str\
    \ = file_name.substr(0, i);\n            sub_str2 = file_name.substr(i+1, file_name.length()-1);\n\
    \        }\n        if(file_name[i] >= '0' && file_name[i] <= '9'){\n        \
    \    count++;\n        }\n    }\n    if(count > 3 || dot_count != 1 || sub_str.length()\
    \ == 0 || !(sub_str[0] >= 'a' && sub_str[0] <= 'z') || !(sub_str[0] >= 'A' &&\
    \ sub_str[0] <= 'Z') || (sub_str2 != \"txt\" && sub_str2 != \"exe\" && sub_str2\
    \ != \"dll\")){\n        return \"No\";\n    }\n    return \"Yes\";\n}\nint main()\
    \ {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpclg6p4il: /tmp/tmpclg6p4il.cpp:37: int main(): Assertion `candidate(("example.txt"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086351
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    std::regex pattern(\"^[a-zA-Z]{1}[a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    );\n    return std::regex_match(file_name, pattern) ? \"Yes\" : \"No\";\n}\nint\
    \ main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpm9282pex: /tmp/tmpm9282pex.cpp:21: int main(): Assertion `candidate(("example.txt"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086338
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    std::regex e(\"[a-zA-Z]+[0-9]{0,3}\\\\.(txt|exe|dll)\");\n    return\
    \ std::regex_match(file_name, e) ? \"Yes\" : \"No\";\n}\nint main() {\n    auto\
    \ candidate = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"\
    Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpobhitdzn: /tmp/tmpobhitdzn.cpp:25: int main(): Assertion `candidate(("MY16FILE3.exe"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086353
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    std::string result = \"No\";\n    std::string extension = \"\";\n   \
    \ std::string name = \"\";\n    int count = 0;\n    int dot_count = 0;\n    for(int\
    \ i = 0; i < file_name.length(); i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n        }\n    }\n    if(count > 3) {\n       \
    \ return result;\n    }\n    if(dot_count != 1) {\n        return result;\n  \
    \  }\n    for(int i = 0; i < file_name.length(); i++) {\n        if(file_name[i]\
    \ == '.') {\n            for(int j = i+1; j < file_name.length(); j++) {\n   \
    \             extension += file_name[j];\n            }\n            break;\n\
    \        }\n        name += file_name[i];\n    }\n    if(name.length() == 0) {\n\
    \        return result;\n    }\n    if(name[0] >= '0' && name[0] <= '9') {\n \
    \       return result;\n    }\n    if(extension != \"txt\" && extension != \"\
    exe\" && extension != \"dll\") {\n        return result;\n    }\n    result =\
    \ \"Yes\";\n    return result;\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpg9lf3pu5: /tmp/tmpg9lf3pu5.cpp:64: int main(): Assertion `candidate(("_Y.txt"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660086351
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    for(int\
    \ i = 0; i < file_name.length(); i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n            dot_index = i;\n        }\n    }\n\
    \    if(count > 3) {\n        return \"No\";\n    }\n    if(dot_count != 1) {\n\
    \        return \"No\";\n    }\n    if(file_name[0] < 'a' || file_name[0] > 'z')\
    \ {\n        return \"No\";\n    }\n    if(file_name.substr(dot_index + 1, file_name.length()\
    \ - dot_index - 1) != \"txt\" && file_name.substr(dot_index + 1, file_name.length()\
    \ - dot_index - 1) != \"exe\" && file_name.substr(dot_index + 1, file_name.length()\
    \ - dot_index - 1) != \"dll\") {\n        return \"No\";\n    }\n    return \"\
    Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpywrkpwni: /tmp/tmpywrkpwni.cpp:47: int main(): Assertion `candidate(("K.dll"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660086340
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // your code here\n    int count = 0;\n    int dot = 0;\n    int len\
    \ = file_name.length();\n    int i = 0;\n    while(i < len)\n    {\n        if(file_name[i]\
    \ >= '0' && file_name[i] <= '9')\n        {\n            count++;\n        }\n\
    \        if(file_name[i] == '.')\n        {\n            dot++;\n        }\n \
    \       i++;\n    }\n    if(count > 3 || dot != 1)\n    {\n        return \"No\"\
    ;\n    }\n    std::string str = file_name.substr(0, file_name.find(\".\"));\n\
    \    std::string str1 = file_name.substr(file_name.find(\".\") + 1, len);\n  \
    \  if(str.length() == 0 || (str[0] < 'a' || str[0] > 'z') && (str[0] < 'A' ||\
    \ str[0] > 'Z'))\n    {\n        return \"No\";\n    }\n    if(str1 != \"txt\"\
    \ && str1 != \"exe\" && str1 != \"dll\")\n    {\n        return \"No\";\n    }\n\
    \    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086351
