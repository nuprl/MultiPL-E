name: HumanEval_147_get_max_triples
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n - 1; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n \
    \               if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // Write your code here\n    long count = 0;\n    for(long i = 1;\
    \ i < n; i++){\n        for(long j = i+1; j < n; j++){\n            for(long k\
    \ = j+1; k < n; k++){\n                long sum = i*i - i + 1 + j*j - j + 1 +\
    \ k*k - k + 1;\n                if(sum % 3 == 0){\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) ==\
    \ (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n\
    \    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmplkvwu0yo: /tmp/tmplkvwu0yo.cpp:31: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpjk_zyvw9: /tmp/tmpjk_zyvw9.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpbgamyoat: /tmp/tmpbgamyoat.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long mod[3] = {0, 0, 0};\n    long res = 0;\n    for (long i = 1;\
    \ i <= n; i++) {\n        long val = i * i - i + 1;\n        mod[val % 3]++;\n\
    \    }\n    res += mod[0] * (mod[0] - 1) * (mod[0] - 2) / 6;\n    res += mod[1]\
    \ * (mod[1] - 1) * (mod[2] - 2) / 6;\n    res += mod[2] * (mod[2] - 1) * (mod[1]\
    \ - 2) / 6;\n    res += mod[0] * mod[1] * mod[2];\n    return res;\n}\nint main()\
    \ {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n\
    \    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n  \
    \  assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp9h7peh1h: /tmp/tmp9h7peh1h.cpp:28: int main(): Assertion `candidate((5))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpzzvwnuzb: /tmp/tmpzzvwnuzb.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long result = 0;\n    long a[n];\n    for(long i = 0; i < n; i++)\
    \ {\n        a[i] = i * i - i + 1;\n    }\n    for(long i = 0; i < n; i++) {\n\
    \        for(long j = i + 1; j < n; j++) {\n            for(long k = j + 1; k\
    \ < n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n         \
    \           result++;\n                }\n            }\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = get_max_triples;\n  \
    \  assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpefvm2gpj: /tmp/tmpefvm2gpj.cpp:32: int main(): Assertion `candidate((5))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              long sum = i * i - i + 1 + j * j - j + 1 + k * k - k + 1;\n   \
    \             if(sum % 3 == 0) {\n                    count++;\n             \
    \   }\n            }\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n  \
    \  assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  stdout: ''
  stderr: "tmpeh2b2b5c: /tmp/tmpeh2b2b5c.cpp:30: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpzlk3eeqn: /tmp/tmpzlk3eeqn.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpi4hpksxt: /tmp/tmpi4hpksxt.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    long sum = 0;\n    for(long i = 1; i <= n; i++)\
    \ {\n        sum = i * i - i + 1;\n        if(sum % 3 == 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpua_n07zq: /tmp/tmpua_n07zq.cpp:26: int main(): Assertion `candidate((5))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpyxesll9z: /tmp/tmpyxesll9z.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpqagnzzn0: /tmp/tmpqagnzzn0.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // Write your code here\n    long count = 0;\n    for(long i = 1;\
    \ i < n; i++){\n        for(long j = i + 1; j < n; j++){\n            for(long\
    \ k = j + 1; k < n; k++){\n                if((i * i - i + 1 + j * j - j + 1 +\
    \ k * k - k + 1) % 3 == 0){\n                    count++;\n                }\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  stdout: ''
  stderr: "tmphwd3bhbe: /tmp/tmphwd3bhbe.cpp:30: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpns6kjr7d: /tmp/tmpns6kjr7d.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n - 1; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n \
    \               if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpech2mgzk: /tmp/tmpech2mgzk.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmplsd7ra2q: /tmp/tmplsd7ra2q.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpwuo6jegj: /tmp/tmpwuo6jegj.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp666ye_ad: /tmp/tmp666ye_ad.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpcsdev36g: /tmp/tmpcsdev36g.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp4zf6e6hc: /tmp/tmp4zf6e6hc.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpfic42x4v: /tmp/tmpfic42x4v.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp5ywyyo_v: /tmp/tmp5ywyyo_v.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    if(n < 3)\n        return 0;\n    long count = 0;\n    for(long i\
    \ = 1; i < n - 1; i++) {\n        for(long j = i + 1; j < n; j++) {\n        \
    \    for(long k = j + 1; k <= n; k++) {\n                if((i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0)\n                    count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpbaiark0x: /tmp/tmpbaiark0x.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpesa64x5_: /tmp/tmpesa64x5_.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpf3cl28dr: /tmp/tmpf3cl28dr.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp1lk2mgfr: /tmp/tmp1lk2mgfr.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpyn20mpit: /tmp/tmpyn20mpit.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // Write your code here\n    long count = 0;\n    for(long i = 1;\
    \ i < n; i++){\n        for(long j = i+1; j < n; j++){\n            for(long k\
    \ = j+1; k < n; k++){\n                if((i*i - i + 1 + j*j - j + 1 + k*k - k\
    \ + 1) % 3 == 0){\n                    count++;\n                }\n         \
    \   }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  stdout: ''
  stderr: "tmp4degwah6: /tmp/tmp4degwah6.cpp:30: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpg9d9_wbr: /tmp/tmpg9d9_wbr.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n - 1; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n \
    \               if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpt3ua9qhy: /tmp/tmpt3ua9qhy.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp733ziupb: /tmp/tmp733ziupb.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpf3j32cuh: /tmp/tmpf3j32cuh.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpxikjl5zl: /tmp/tmpxikjl5zl.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n - 1; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n \
    \               if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpecgoga17: /tmp/tmpecgoga17.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp2qxbys9k: /tmp/tmp2qxbys9k.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // Write your code here\n    long count = 0;\n    for(long i = 1;\
    \ i < n; i++){\n        for(long j = i+1; j < n; j++){\n            for(long k\
    \ = j+1; k < n; k++){\n                if((i*i - i + 1 + j*j - j + 1 + k*k - k\
    \ + 1) % 3 == 0){\n                    count++;\n                }\n         \
    \   }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  stdout: ''
  stderr: "tmpuvf4knaw: /tmp/tmpuvf4knaw.cpp:30: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpqllqi8ek: /tmp/tmpqllqi8ek.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpbh_2dvz6: /tmp/tmpbh_2dvz6.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp8hf1zvns: /tmp/tmp8hf1zvns.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp19mmayw3: /tmp/tmp19mmayw3.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpz16kv418: /tmp/tmpz16kv418.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpxdcnugsi: /tmp/tmpxdcnugsi.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpj2zd2dkc: /tmp/tmpj2zd2dkc.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpwjefqtnx: /tmp/tmpwjefqtnx.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpsutsx_pa: /tmp/tmpsutsx_pa.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpibaunc5p: /tmp/tmpibaunc5p.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp7auedljd: /tmp/tmp7auedljd.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp2dhjd4qc: /tmp/tmp2dhjd4qc.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    long sum = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        for(long j = i + 1; j < n; j++) {\n            for(long k = j + 1;\
    \ k < n; k++) {\n                sum = i * i - i + 1 + j * j - j + 1 + k * k -\
    \ k + 1;\n                if(sum % 3 == 0) {\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) ==\
    \ (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n\
    \    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpy4vbtjvf: /tmp/tmpy4vbtjvf.cpp:31: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmprfn1b_sy: /tmp/tmprfn1b_sy.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmph70o2m9u: /tmp/tmph70o2m9u.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpwly7g3ps: /tmp/tmpwly7g3ps.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n - 1; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n \
    \               if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp1ofkb6pn: /tmp/tmp1ofkb6pn.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                long a = i * i - i + 1;\n                long b = j * j - j +\
    \ 1;\n                long c = k * k - k + 1;\n                if((a + b + c)\
    \ % 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpm70xfflq: /tmp/tmpm70xfflq.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                long a = i * i - i + 1;\n                long b = j * j - j +\
    \ 1;\n                long c = k * k - k + 1;\n                if((a + b + c)\
    \ % 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpom45x1eq: /tmp/tmpom45x1eq.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmphq_qkiyh: /tmp/tmphq_qkiyh.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    long a[n];\n    for(long i = 0; i < n; i++) {\n\
    \        a[i] = i * i - i + 1;\n    }\n    for(long i = 0; i < n; i++) {\n   \
    \     for(long j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n;\
    \ k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n              \
    \      count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp946u5sfq: /tmp/tmp946u5sfq.cpp:32: int main(): Assertion `candidate((5))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpsmenn9_4: /tmp/tmpsmenn9_4.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp6vfaeedu: /tmp/tmp6vfaeedu.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // Write your code here\n    long count = 0;\n    for(long i = 1;\
    \ i < n; i++){\n        for(long j = i+1; j < n; j++){\n            for(long k\
    \ = j+1; k < n; k++){\n                if((i*i - i + 1 + j*j - j + 1 + k*k - k\
    \ + 1) % 3 == 0){\n                    count++;\n                }\n         \
    \   }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  stdout: ''
  stderr: "tmpxzajtt20: /tmp/tmpxzajtt20.cpp:30: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // Write your code here\n    long count = 0;\n    for(long i = 1;\
    \ i < n; i++){\n        for(long j = i+1; j < n; j++){\n            for(long k\
    \ = j+1; k < n; k++){\n                if((i*i - i + 1 + j*j - j + 1 + k*k - k\
    \ + 1) % 3 == 0){\n                    count++;\n                }\n         \
    \   }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  stdout: ''
  stderr: "tmpeapl1iry: /tmp/tmpeapl1iry.cpp:30: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long result = 0;\n    long a[n];\n    for(long i = 0; i < n; i++)\n\
    \        a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n        for(long\
    \ j = i + 1; j < n; j++)\n            for(long k = j + 1; k < n; k++)\n      \
    \          if((a[i] + a[j] + a[k]) % 3 == 0)\n                    result++;\n\
    \    return result;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp99l144sk: /tmp/tmp99l144sk.cpp:27: int main(): Assertion `candidate((5))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp1e7gpnbm: /tmp/tmp1e7gpnbm.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpquess20y: /tmp/tmpquess20y.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n - 1; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n \
    \               if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpncj1csa0: /tmp/tmpncj1csa0.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpbfbtt0o4: /tmp/tmpbfbtt0o4.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    long *a = new long[n];\n    for(long i = 0; i\
    \ < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for(long i = 0; i < n;\
    \ i++) {\n        for(long j = i + 1; j < n; j++) {\n            for(long k =\
    \ j + 1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpk3ph8gf7: /tmp/tmpk3ph8gf7.cpp:32: int main(): Assertion `candidate((5))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    long a[n];\n    for(long i = 0; i < n; i++) {\n\
    \        a[i] = i * i - i + 1;\n    }\n    for(long i = 0; i < n; i++) {\n   \
    \     for(long j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n;\
    \ k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n              \
    \      count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpz2p0bel4: /tmp/tmpz2p0bel4.cpp:32: int main(): Assertion `candidate((5))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpxdp5s6az: /tmp/tmpxdp5s6az.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp7enh_zat: /tmp/tmp7enh_zat.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long ans = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    ans++;\n                }\n            }\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpvg_du8x8: /tmp/tmpvg_du8x8.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp8_iqdtu0: /tmp/tmp8_iqdtu0.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpszzqagjt: /tmp/tmpszzqagjt.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpw98iydxh: /tmp/tmpw98iydxh.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    long *a = new long[n];\n    for(long i = 0; i\
    \ < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n\
    \        for(long j = i + 1; j < n; j++)\n            for(long k = j + 1; k <\
    \ n; k++)\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n               \
    \     count++;\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpvtw48ig3: /tmp/tmpvtw48ig3.cpp:27: int main(): Assertion `candidate((5))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmppoflb2x9: /tmp/tmppoflb2x9.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpprrta61g: /tmp/tmpprrta61g.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpiubfq1ps: /tmp/tmpiubfq1ps.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp7q877g9h: /tmp/tmp7q877g9h.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n - 1; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n \
    \               if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpdmtdt4y_: /tmp/tmpdmtdt4y_.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpoptioua5: /tmp/tmpoptioua5.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpc8i4z1d8: /tmp/tmpc8i4z1d8.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n - 1; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n \
    \               if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpy3wqqy0m: /tmp/tmpy3wqqy0m.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpd0kpoyga: /tmp/tmpd0kpoyga.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpmk9yjbx_: /tmp/tmpmk9yjbx_.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpqfzshme9: /tmp/tmpqfzshme9.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp3tvops4_: /tmp/tmp3tvops4_.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                long a = i * i - i + 1;\n                long b = j * j - j +\
    \ 1;\n                long c = k * k - k + 1;\n                if((a + b + c)\
    \ % 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    long sum = 0;\n    for(long i = 1; i <= n; i++)\
    \ {\n        sum = i * i - i + 1;\n        if(sum % 3 == 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp333bsazv: /tmp/tmp333bsazv.cpp:26: int main(): Assertion `candidate((5))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpi_i7it78: /tmp/tmpi_i7it78.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpx7er9smc: /tmp/tmpx7er9smc.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // Write your code here\n    long count = 0;\n    for(long i = 1;\
    \ i < n; i++){\n        for(long j = i+1; j < n; j++){\n            for(long k\
    \ = j+1; k < n; k++){\n                long sum = (i*i - i + 1) + (j*j - j + 1)\
    \ + (k*k - k + 1);\n                if(sum % 3 == 0){\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) ==\
    \ (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n\
    \    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpa_sfr3rt: /tmp/tmpa_sfr3rt.cpp:31: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long result = 0;\n    long mod3[3] = {0, 0, 0};\n    for (long i =\
    \ 1; i <= n; i++) {\n        long a = i * i - i + 1;\n        mod3[a % 3]++;\n\
    \    }\n    result += mod3[0] * (mod3[0] - 1) * (mod3[0] - 2) / 6;\n    result\
    \ += mod3[1] * (mod3[1] - 1) * (mod3[2] - 2) / 6;\n    result += mod3[2] * (mod3[2]\
    \ - 1) * (mod3[1] - 2) / 6;\n    result += mod3[0] * mod3[1] * mod3[2];\n    return\
    \ result;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp9l68utyb: /tmp/tmp9l68utyb.cpp:28: int main(): Assertion `candidate((5))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpkdow39_s: /tmp/tmpkdow39_s.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpct5747zc: /tmp/tmpct5747zc.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              long a = i * i - i + 1;\n                long b = j * j - j + 1;\n\
    \                long c = k * k - k + 1;\n                if((a + b + c) % 3 ==\
    \ 0) {\n                    count++;\n                }\n            }\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmppid9z62b: /tmp/tmppid9z62b.cpp:32: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n - 1; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n \
    \               if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpj0oe_nci: /tmp/tmpj0oe_nci.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i+1; j <= n; j++) {\n            for(long k = j+1; k <= n; k++) {\n    \
    \            if((i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0) {\n      \
    \              count++;\n                }\n            }\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n \
    \   assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpb46yu3dx: /tmp/tmpb46yu3dx.cpp:28: int main(): Assertion `candidate((5))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    long a[n];\n    for(long i = 0; i < n; i++) {\n\
    \        a[i] = i * i - i + 1;\n    }\n    for(long i = 0; i < n; i++) {\n   \
    \     for(long j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n;\
    \ k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n              \
    \      count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpog18782a: /tmp/tmpog18782a.cpp:32: int main(): Assertion `candidate((5))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp91xq4fni: /tmp/tmp91xq4fni.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpl37cbnf6: /tmp/tmpl37cbnf6.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp7m95pawk: /tmp/tmp7m95pawk.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n - 1; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n \
    \               if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n - 1; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n \
    \               if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpk4ba_493: /tmp/tmpk4ba_493.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpgx9eh51c: /tmp/tmpgx9eh51c.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n - 1; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n \
    \               if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpdonfnuqj: /tmp/tmpdonfnuqj.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp2wmkfzkg: /tmp/tmp2wmkfzkg.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpjgo6deow: /tmp/tmpjgo6deow.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmptgxcis99: /tmp/tmptgxcis99.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpxza0w2w0: /tmp/tmpxza0w2w0.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp0bmg6o3y: /tmp/tmp0bmg6o3y.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpplonb3m7: /tmp/tmpplonb3m7.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n - 1; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n \
    \               if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpkqx9s_ri: /tmp/tmpkqx9s_ri.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpxtov_v0d: /tmp/tmpxtov_v0d.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n - 1; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n \
    \               if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp14i6h_9h: /tmp/tmp14i6h_9h.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpz0fpor2a: /tmp/tmpz0fpor2a.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long ans = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\
    \ {\n                    ans++;\n                }\n            }\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n - 1; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n \
    \               if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp78bemrza: /tmp/tmp78bemrza.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpl_mqnrjt: /tmp/tmpl_mqnrjt.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp6pppcnzu: /tmp/tmp6pppcnzu.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    long sum = 0;\n    for(long i = 0; i < n; i++)\
    \ {\n        for(long j = i + 1; j < n; j++) {\n            for(long k = j + 1;\
    \ k < n; k++) {\n                sum = i * i - i + 1 + j * j - j + 1 + k * k -\
    \ k + 1;\n                if(sum % 3 == 0) {\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) ==\
    \ (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n\
    \    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpfwdhz1nf: /tmp/tmpfwdhz1nf.cpp:30: int main(): Assertion `candidate((5))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp2l7hv8fb: /tmp/tmp2l7hv8fb.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpmj2rpq8v: /tmp/tmpmj2rpq8v.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpbz6eb0g3: /tmp/tmpbz6eb0g3.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmppw0jd59h: /tmp/tmppw0jd59h.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    std::vector<long> a(n);\n    for(long i = 0;\
    \ i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for(long i = 0; i <\
    \ n; i++) {\n        for(long j = i + 1; j < n; j++) {\n            for(long k\
    \ = j + 1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpl8b1lolg: /tmp/tmpl8b1lolg.cpp:32: int main(): Assertion `candidate((5))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpxiej5314: /tmp/tmpxiej5314.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp33v30b42: /tmp/tmp33v30b42.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp_rfim9_g: /tmp/tmp_rfim9_g.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long result = 0;\n    long a[n];\n    for(long i = 0; i < n; i++)\n\
    \        a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n        for(long\
    \ j = i + 1; j < n; j++)\n            for(long k = j + 1; k < n; k++)\n      \
    \          if((a[i] + a[j] + a[k]) % 3 == 0)\n                    result++;\n\
    \    return result;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp69ovrbo9: /tmp/tmp69ovrbo9.cpp:27: int main(): Assertion `candidate((5))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    long a[n];\n    for(long i = 0; i < n; i++) {\n\
    \        a[i] = i * i - i + 1;\n    }\n    for(long i = 0; i < n; i++) {\n   \
    \     for(long j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n;\
    \ k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n              \
    \      count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpxsiozyoj: /tmp/tmpxsiozyoj.cpp:32: int main(): Assertion `candidate((5))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long result = 0;\n    long* a = new long[n];\n    for(long i = 0;\
    \ i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for(long i = 0; i <\
    \ n; i++) {\n        for(long j = i + 1; j < n; j++) {\n            for(long k\
    \ = j + 1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n\
    \                    result++;\n                }\n            }\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmprpb20xnt: /tmp/tmprpb20xnt.cpp:32: int main(): Assertion `candidate((5))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i+1; j <= n; j++) {\n            for(long k = j+1; k <= n; k++) {\n    \
    \            if((i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0) {\n      \
    \              count++;\n                }\n            }\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n \
    \   assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpo5dr5n3p: /tmp/tmpo5dr5n3p.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpngsbatdl: /tmp/tmpngsbatdl.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp9kb1z1qp: /tmp/tmp9kb1z1qp.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpca2w7ak4: /tmp/tmpca2w7ak4.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpyad1q64f: /tmp/tmpyad1q64f.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    long sum = 0;\n    for(long i = 1; i <= n; i++)\
    \ {\n        sum = i * i - i + 1;\n        for(long j = i + 1; j <= n; j++) {\n\
    \            sum += j * j - j + 1;\n            for(long k = j + 1; k <= n; k++)\
    \ {\n                sum += k * k - k + 1;\n                if(sum % 3 == 0) {\n\
    \                    count++;\n                }\n                sum -= k * k\
    \ - k + 1;\n            }\n            sum -= j * j - j + 1;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n \
    \   assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpjt1fw6gm: /tmp/tmpjt1fw6gm.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmput25k622: /tmp/tmput25k622.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpfnmispfz: /tmp/tmpfnmispfz.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp61759eyu: /tmp/tmp61759eyu.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // Write your code here\n    long count = 0;\n    for(long i = 1;\
    \ i < n; i++){\n        for(long j = i+1; j < n; j++){\n            for(long k\
    \ = j+1; k < n; k++){\n                if((i*i - i + 1 + j*j - j + 1 + k*k - k\
    \ + 1) % 3 == 0){\n                    count++;\n                }\n         \
    \   }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  stdout: ''
  stderr: "tmpd7peb8_c: /tmp/tmpd7peb8_c.cpp:30: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    std::vector<long> a(n);\n    for(long i = 0;\
    \ i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for(long i = 0; i <\
    \ n; i++) {\n        for(long j = i + 1; j < n; j++) {\n            for(long k\
    \ = j + 1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpk5m95hai: /tmp/tmpk5m95hai.cpp:32: int main(): Assertion `candidate((5))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    long a[n];\n    for(long i = 0; i < n; i++) {\n\
    \        a[i] = i * i - i + 1;\n    }\n    for(long i = 0; i < n; i++) {\n   \
    \     for(long j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n;\
    \ k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n              \
    \      count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpig4w0q7y: /tmp/tmpig4w0q7y.cpp:32: int main(): Assertion `candidate((5))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpxrys80am: /tmp/tmpxrys80am.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if(((i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1)) % 3 ==\
    \ 0) {\n                    count++;\n                }\n            }\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp3jpwz76e: /tmp/tmp3jpwz76e.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    long a[n];\n    for(long i = 0; i < n; i++) {\n\
    \        a[i] = i * i - i + 1;\n    }\n    for(long i = 0; i < n; i++) {\n   \
    \     for(long j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n;\
    \ k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n              \
    \      count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmptytt6nqb: /tmp/tmptytt6nqb.cpp:32: int main(): Assertion `candidate((5))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpjkaddl_3: /tmp/tmpjkaddl_3.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpz9r54nb4: /tmp/tmpz9r54nb4.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpfds5qoc2: /tmp/tmpfds5qoc2.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp75ml8jsp: /tmp/tmp75ml8jsp.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp7xiwvo6o: /tmp/tmp7xiwvo6o.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // Write your code here\n    long count = 0;\n    for(long i = 1;\
    \ i < n; i++){\n        for(long j = i+1; j < n; j++){\n            for(long k\
    \ = j+1; k < n; k++){\n                long sum = i*i - i + 1 + j*j - j + 1 +\
    \ k*k - k + 1;\n                if(sum % 3 == 0){\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) ==\
    \ (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n\
    \    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpcrp5j9m7: /tmp/tmpcrp5j9m7.cpp:31: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long ans = 0;\n    long a[n];\n    for(long i = 0; i < n; i++) {\n\
    \        a[i] = i * i - i + 1;\n    }\n    for(long i = 0; i < n; i++) {\n   \
    \     for(long j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n;\
    \ k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n              \
    \      ans++;\n                }\n            }\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpyx5jbz42: /tmp/tmpyx5jbz42.cpp:32: int main(): Assertion `candidate((5))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpcs1m7omi: /tmp/tmpcs1m7omi.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              long sum = i * i - i + 1 + j * j - j + 1 + k * k - k + 1;\n   \
    \             if(sum % 3 == 0) {\n                    count++;\n             \
    \   }\n            }\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n  \
    \  assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  stdout: ''
  stderr: "tmp5ikk1nxn: /tmp/tmp5ikk1nxn.cpp:30: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpv216a95r: /tmp/tmpv216a95r.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp14zm40qe: /tmp/tmp14zm40qe.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmppxlsv8_s: /tmp/tmppxlsv8_s.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n - 1; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n \
    \               if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // Write your code here\n    long count = 0;\n    for(long i = 1;\
    \ i < n; i++){\n        for(long j = i+1; j < n; j++){\n            for(long k\
    \ = j+1; k < n; k++){\n                long sum = i*i - i + 1 + j*j - j + 1 +\
    \ k*k - k + 1;\n                if(sum % 3 == 0){\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) ==\
    \ (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n\
    \    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp0qr9oiob: /tmp/tmp0qr9oiob.cpp:31: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp8br0rj8f: /tmp/tmp8br0rj8f.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp6vokq6im: /tmp/tmp6vokq6im.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long mod[3] = {0, 0, 0};\n    long res = 0;\n    for (long i = 1;\
    \ i <= n; i++) {\n        long val = i * i - i + 1;\n        mod[val % 3]++;\n\
    \    }\n    res += mod[0] * (mod[0] - 1) * (mod[0] - 2) / 6;\n    res += mod[1]\
    \ * (mod[1] - 1) * (mod[2] - 2) / 6;\n    res += mod[2] * (mod[2] - 1) * (mod[1]\
    \ - 2) / 6;\n    res += mod[0] * mod[1] * mod[2];\n    return res;\n}\nint main()\
    \ {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n\
    \    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n  \
    \  assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpox9ow92h: /tmp/tmpox9ow92h.cpp:28: int main(): Assertion `candidate((5))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmphboliijc: /tmp/tmphboliijc.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long result = 0;\n    long a[n];\n    for(long i = 0; i < n; i++)\
    \ {\n        a[i] = i * i - i + 1;\n    }\n    for(long i = 0; i < n; i++) {\n\
    \        for(long j = i + 1; j < n; j++) {\n            for(long k = j + 1; k\
    \ < n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n         \
    \           result++;\n                }\n            }\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = get_max_triples;\n  \
    \  assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpxri7h7hi: /tmp/tmpxri7h7hi.cpp:32: int main(): Assertion `candidate((5))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              long sum = i * i - i + 1 + j * j - j + 1 + k * k - k + 1;\n   \
    \             if(sum % 3 == 0) {\n                    count++;\n             \
    \   }\n            }\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n  \
    \  assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  stdout: ''
  stderr: "tmplvdg8ppe: /tmp/tmplvdg8ppe.cpp:30: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp6b7kpby_: /tmp/tmp6b7kpby_.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpbqaoxauh: /tmp/tmpbqaoxauh.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    long sum = 0;\n    for(long i = 1; i <= n; i++)\
    \ {\n        sum = i * i - i + 1;\n        if(sum % 3 == 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpb7peyy14: /tmp/tmpb7peyy14.cpp:26: int main(): Assertion `candidate((5))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp2u0kzlti: /tmp/tmp2u0kzlti.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpy3jk8vwd: /tmp/tmpy3jk8vwd.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // Write your code here\n    long count = 0;\n    for(long i = 1;\
    \ i < n; i++){\n        for(long j = i + 1; j < n; j++){\n            for(long\
    \ k = j + 1; k < n; k++){\n                if((i * i - i + 1 + j * j - j + 1 +\
    \ k * k - k + 1) % 3 == 0){\n                    count++;\n                }\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  stdout: ''
  stderr: "tmpvom5us8h: /tmp/tmpvom5us8h.cpp:30: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmppf6m9esb: /tmp/tmppf6m9esb.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n - 1; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n \
    \               if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpidg2x41p: /tmp/tmpidg2x41p.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpupemrhlc: /tmp/tmpupemrhlc.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp68ijnci6: /tmp/tmp68ijnci6.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpfnatxejh: /tmp/tmpfnatxejh.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpf2ee3j3e: /tmp/tmpf2ee3j3e.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpmnlko9d9: /tmp/tmpmnlko9d9.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpn4i5mbg6: /tmp/tmpn4i5mbg6.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpqztlyyou: /tmp/tmpqztlyyou.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    if(n < 3)\n        return 0;\n    long count = 0;\n    for(long i\
    \ = 1; i < n - 1; i++) {\n        for(long j = i + 1; j < n; j++) {\n        \
    \    for(long k = j + 1; k <= n; k++) {\n                if((i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0)\n                    count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpw7pt1dfc: /tmp/tmpw7pt1dfc.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp9ppou6_0: /tmp/tmp9ppou6_0.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpkure_2ul: /tmp/tmpkure_2ul.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpv7idm67v: /tmp/tmpv7idm67v.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp1tu6eeaz: /tmp/tmp1tu6eeaz.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // Write your code here\n    long count = 0;\n    for(long i = 1;\
    \ i < n; i++){\n        for(long j = i+1; j < n; j++){\n            for(long k\
    \ = j+1; k < n; k++){\n                if((i*i - i + 1 + j*j - j + 1 + k*k - k\
    \ + 1) % 3 == 0){\n                    count++;\n                }\n         \
    \   }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  stdout: ''
  stderr: "tmppoj09lok: /tmp/tmppoj09lok.cpp:30: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp0j7elwra: /tmp/tmp0j7elwra.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n - 1; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n \
    \               if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmped3r3rqp: /tmp/tmped3r3rqp.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpse0m_cda: /tmp/tmpse0m_cda.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpkrxegjbk: /tmp/tmpkrxegjbk.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpy_5gv04v: /tmp/tmpy_5gv04v.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n - 1; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n \
    \               if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpt91bdl6q: /tmp/tmpt91bdl6q.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp0pbznrs_: /tmp/tmp0pbznrs_.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // Write your code here\n    long count = 0;\n    for(long i = 1;\
    \ i < n; i++){\n        for(long j = i+1; j < n; j++){\n            for(long k\
    \ = j+1; k < n; k++){\n                if((i*i - i + 1 + j*j - j + 1 + k*k - k\
    \ + 1) % 3 == 0){\n                    count++;\n                }\n         \
    \   }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  stdout: ''
  stderr: "tmpczxna1xb: /tmp/tmpczxna1xb.cpp:30: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmppnqbx4uw: /tmp/tmppnqbx4uw.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmprmo83qy2: /tmp/tmprmo83qy2.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp8ns3tl00: /tmp/tmp8ns3tl00.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpyetf8h8b: /tmp/tmpyetf8h8b.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpleah27gk: /tmp/tmpleah27gk.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpsrb1hrdt: /tmp/tmpsrb1hrdt.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpljoc0mu7: /tmp/tmpljoc0mu7.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmphpctbs_t: /tmp/tmphpctbs_t.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpv85wc3yd: /tmp/tmpv85wc3yd.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp11ud2whr: /tmp/tmp11ud2whr.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmphrgbs543: /tmp/tmphrgbs543.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp8yx3fur4: /tmp/tmp8yx3fur4.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    long sum = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        for(long j = i + 1; j < n; j++) {\n            for(long k = j + 1;\
    \ k < n; k++) {\n                sum = i * i - i + 1 + j * j - j + 1 + k * k -\
    \ k + 1;\n                if(sum % 3 == 0) {\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) ==\
    \ (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n\
    \    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpwndg_bp0: /tmp/tmpwndg_bp0.cpp:31: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpy3c44_lc: /tmp/tmpy3c44_lc.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpo_nrbg83: /tmp/tmpo_nrbg83.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpanhue50l: /tmp/tmpanhue50l.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n - 1; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n \
    \               if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpufug470t: /tmp/tmpufug470t.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                long a = i * i - i + 1;\n                long b = j * j - j +\
    \ 1;\n                long c = k * k - k + 1;\n                if((a + b + c)\
    \ % 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpgsb7ycoe: /tmp/tmpgsb7ycoe.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                long a = i * i - i + 1;\n                long b = j * j - j +\
    \ 1;\n                long c = k * k - k + 1;\n                if((a + b + c)\
    \ % 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp1u8vdf7e: /tmp/tmp1u8vdf7e.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpdd9uhzco: /tmp/tmpdd9uhzco.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    long a[n];\n    for(long i = 0; i < n; i++) {\n\
    \        a[i] = i * i - i + 1;\n    }\n    for(long i = 0; i < n; i++) {\n   \
    \     for(long j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n;\
    \ k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n              \
    \      count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmppv3fjzrg: /tmp/tmppv3fjzrg.cpp:32: int main(): Assertion `candidate((5))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpsnej3oo0: /tmp/tmpsnej3oo0.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp_gripdfe: /tmp/tmp_gripdfe.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // Write your code here\n    long count = 0;\n    for(long i = 1;\
    \ i < n; i++){\n        for(long j = i+1; j < n; j++){\n            for(long k\
    \ = j+1; k < n; k++){\n                if((i*i - i + 1 + j*j - j + 1 + k*k - k\
    \ + 1) % 3 == 0){\n                    count++;\n                }\n         \
    \   }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  stdout: ''
  stderr: "tmpwalg570g: /tmp/tmpwalg570g.cpp:30: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // Write your code here\n    long count = 0;\n    for(long i = 1;\
    \ i < n; i++){\n        for(long j = i+1; j < n; j++){\n            for(long k\
    \ = j+1; k < n; k++){\n                if((i*i - i + 1 + j*j - j + 1 + k*k - k\
    \ + 1) % 3 == 0){\n                    count++;\n                }\n         \
    \   }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  stdout: ''
  stderr: "tmp0dtp3vyy: /tmp/tmp0dtp3vyy.cpp:30: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long result = 0;\n    long a[n];\n    for(long i = 0; i < n; i++)\n\
    \        a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n        for(long\
    \ j = i + 1; j < n; j++)\n            for(long k = j + 1; k < n; k++)\n      \
    \          if((a[i] + a[j] + a[k]) % 3 == 0)\n                    result++;\n\
    \    return result;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpuy72_qur: /tmp/tmpuy72_qur.cpp:27: int main(): Assertion `candidate((5))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmptgxk_5ok: /tmp/tmptgxk_5ok.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp451p_9xk: /tmp/tmp451p_9xk.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n - 1; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n \
    \               if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp3bo4nnn8: /tmp/tmp3bo4nnn8.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpaw0bi3sc: /tmp/tmpaw0bi3sc.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    long *a = new long[n];\n    for(long i = 0; i\
    \ < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for(long i = 0; i < n;\
    \ i++) {\n        for(long j = i + 1; j < n; j++) {\n            for(long k =\
    \ j + 1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp4sp7zk1z: /tmp/tmp4sp7zk1z.cpp:32: int main(): Assertion `candidate((5))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    long a[n];\n    for(long i = 0; i < n; i++) {\n\
    \        a[i] = i * i - i + 1;\n    }\n    for(long i = 0; i < n; i++) {\n   \
    \     for(long j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n;\
    \ k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n              \
    \      count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp_4d53y7j: /tmp/tmp_4d53y7j.cpp:32: int main(): Assertion `candidate((5))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpd21mg2lu: /tmp/tmpd21mg2lu.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp2ucdl01y: /tmp/tmp2ucdl01y.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long ans = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    ans++;\n                }\n            }\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp89d07pmh: /tmp/tmp89d07pmh.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpgujn8v80: /tmp/tmpgujn8v80.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpa8rq3mrl: /tmp/tmpa8rq3mrl.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpmdtuv3z3: /tmp/tmpmdtuv3z3.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    long *a = new long[n];\n    for(long i = 0; i\
    \ < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n\
    \        for(long j = i + 1; j < n; j++)\n            for(long k = j + 1; k <\
    \ n; k++)\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n               \
    \     count++;\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpzwc7tin4: /tmp/tmpzwc7tin4.cpp:27: int main(): Assertion `candidate((5))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpav6xl9dr: /tmp/tmpav6xl9dr.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpw7bp5wf1: /tmp/tmpw7bp5wf1.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpyzow_yyb: /tmp/tmpyzow_yyb.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp4xgn2_qa: /tmp/tmp4xgn2_qa.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n - 1; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n \
    \               if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpn0t_o5le: /tmp/tmpn0t_o5le.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmplq8bgk5b: /tmp/tmplq8bgk5b.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpkoucsntj: /tmp/tmpkoucsntj.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n - 1; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n \
    \               if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp8y2ywlb9: /tmp/tmp8y2ywlb9.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpklwvdihb: /tmp/tmpklwvdihb.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpvaiparyn: /tmp/tmpvaiparyn.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp17m5m76s: /tmp/tmp17m5m76s.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp_p6do6tr: /tmp/tmp_p6do6tr.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                long a = i * i - i + 1;\n                long b = j * j - j +\
    \ 1;\n                long c = k * k - k + 1;\n                if((a + b + c)\
    \ % 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    long sum = 0;\n    for(long i = 1; i <= n; i++)\
    \ {\n        sum = i * i - i + 1;\n        if(sum % 3 == 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp2_l2iqz7: /tmp/tmp2_l2iqz7.cpp:26: int main(): Assertion `candidate((5))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmph70v_mug: /tmp/tmph70v_mug.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpysnvvuxe: /tmp/tmpysnvvuxe.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // Write your code here\n    long count = 0;\n    for(long i = 1;\
    \ i < n; i++){\n        for(long j = i+1; j < n; j++){\n            for(long k\
    \ = j+1; k < n; k++){\n                long sum = (i*i - i + 1) + (j*j - j + 1)\
    \ + (k*k - k + 1);\n                if(sum % 3 == 0){\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) ==\
    \ (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n\
    \    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpwcp6fsli: /tmp/tmpwcp6fsli.cpp:31: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long result = 0;\n    long mod3[3] = {0, 0, 0};\n    for (long i =\
    \ 1; i <= n; i++) {\n        long a = i * i - i + 1;\n        mod3[a % 3]++;\n\
    \    }\n    result += mod3[0] * (mod3[0] - 1) * (mod3[0] - 2) / 6;\n    result\
    \ += mod3[1] * (mod3[1] - 1) * (mod3[2] - 2) / 6;\n    result += mod3[2] * (mod3[2]\
    \ - 1) * (mod3[1] - 2) / 6;\n    result += mod3[0] * mod3[1] * mod3[2];\n    return\
    \ result;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpazmategp: /tmp/tmpazmategp.cpp:28: int main(): Assertion `candidate((5))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpm3s0rp4e: /tmp/tmpm3s0rp4e.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpxvk5d5pi: /tmp/tmpxvk5d5pi.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              long a = i * i - i + 1;\n                long b = j * j - j + 1;\n\
    \                long c = k * k - k + 1;\n                if((a + b + c) % 3 ==\
    \ 0) {\n                    count++;\n                }\n            }\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmps8dlpn4l: /tmp/tmps8dlpn4l.cpp:32: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n - 1; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n \
    \               if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp1x2ozlzz: /tmp/tmp1x2ozlzz.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i+1; j <= n; j++) {\n            for(long k = j+1; k <= n; k++) {\n    \
    \            if((i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0) {\n      \
    \              count++;\n                }\n            }\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n \
    \   assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp7z6hy9zu: /tmp/tmp7z6hy9zu.cpp:28: int main(): Assertion `candidate((5))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    long a[n];\n    for(long i = 0; i < n; i++) {\n\
    \        a[i] = i * i - i + 1;\n    }\n    for(long i = 0; i < n; i++) {\n   \
    \     for(long j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n;\
    \ k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n              \
    \      count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpktv4j4fq: /tmp/tmpktv4j4fq.cpp:32: int main(): Assertion `candidate((5))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp95_i384k: /tmp/tmp95_i384k.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpm026wvow: /tmp/tmpm026wvow.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp4qv_nb30: /tmp/tmp4qv_nb30.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n - 1; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n \
    \               if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n - 1; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n \
    \               if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpsnf4rhs0: /tmp/tmpsnf4rhs0.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmppfriyp_3: /tmp/tmppfriyp_3.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n - 1; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n \
    \               if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp5qto0lub: /tmp/tmp5qto0lub.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp_a6o5___: /tmp/tmp_a6o5___.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp5fkj7c9o: /tmp/tmp5fkj7c9o.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp6zabpj1p: /tmp/tmp6zabpj1p.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp6b2o46lc: /tmp/tmp6b2o46lc.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpgcdgyjsa: /tmp/tmpgcdgyjsa.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpdpfv5sfu: /tmp/tmpdpfv5sfu.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n - 1; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n \
    \               if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmps2x719q3: /tmp/tmps2x719q3.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpnh2gfqoh: /tmp/tmpnh2gfqoh.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n - 1; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n \
    \               if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpdacu15p0: /tmp/tmpdacu15p0.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp9krprrku: /tmp/tmp9krprrku.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long ans = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\
    \ {\n                    ans++;\n                }\n            }\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n - 1; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n \
    \               if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp8lw7j0l4: /tmp/tmp8lw7j0l4.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp2u7zk6qf: /tmp/tmp2u7zk6qf.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp3tr3e6l5: /tmp/tmp3tr3e6l5.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    long sum = 0;\n    for(long i = 0; i < n; i++)\
    \ {\n        for(long j = i + 1; j < n; j++) {\n            for(long k = j + 1;\
    \ k < n; k++) {\n                sum = i * i - i + 1 + j * j - j + 1 + k * k -\
    \ k + 1;\n                if(sum % 3 == 0) {\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) ==\
    \ (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n\
    \    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpk_r6jnn5: /tmp/tmpk_r6jnn5.cpp:30: int main(): Assertion `candidate((5))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpff5hlp3o: /tmp/tmpff5hlp3o.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpazlvb84i: /tmp/tmpazlvb84i.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpooqrr9ht: /tmp/tmpooqrr9ht.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpou65kder: /tmp/tmpou65kder.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    std::vector<long> a(n);\n    for(long i = 0;\
    \ i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for(long i = 0; i <\
    \ n; i++) {\n        for(long j = i + 1; j < n; j++) {\n            for(long k\
    \ = j + 1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpvl3bvtz9: /tmp/tmpvl3bvtz9.cpp:32: int main(): Assertion `candidate((5))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpp7fmm8hr: /tmp/tmpp7fmm8hr.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpa9fvxuns: /tmp/tmpa9fvxuns.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpak7e3fza: /tmp/tmpak7e3fza.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long result = 0;\n    long a[n];\n    for(long i = 0; i < n; i++)\n\
    \        a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n        for(long\
    \ j = i + 1; j < n; j++)\n            for(long k = j + 1; k < n; k++)\n      \
    \          if((a[i] + a[j] + a[k]) % 3 == 0)\n                    result++;\n\
    \    return result;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp37f4q0to: /tmp/tmp37f4q0to.cpp:27: int main(): Assertion `candidate((5))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    long a[n];\n    for(long i = 0; i < n; i++) {\n\
    \        a[i] = i * i - i + 1;\n    }\n    for(long i = 0; i < n; i++) {\n   \
    \     for(long j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n;\
    \ k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n              \
    \      count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpmopu35kw: /tmp/tmpmopu35kw.cpp:32: int main(): Assertion `candidate((5))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long result = 0;\n    long* a = new long[n];\n    for(long i = 0;\
    \ i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for(long i = 0; i <\
    \ n; i++) {\n        for(long j = i + 1; j < n; j++) {\n            for(long k\
    \ = j + 1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n\
    \                    result++;\n                }\n            }\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpt5nncyj1: /tmp/tmpt5nncyj1.cpp:32: int main(): Assertion `candidate((5))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i+1; j <= n; j++) {\n            for(long k = j+1; k <= n; k++) {\n    \
    \            if((i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0) {\n      \
    \              count++;\n                }\n            }\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n \
    \   assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmphp3e85ez: /tmp/tmphp3e85ez.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmphxz1hudp: /tmp/tmphxz1hudp.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmphdxjsi0j: /tmp/tmphdxjsi0j.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpawwum6gy: /tmp/tmpawwum6gy.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpy1fraqtj: /tmp/tmpy1fraqtj.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    long sum = 0;\n    for(long i = 1; i <= n; i++)\
    \ {\n        sum = i * i - i + 1;\n        for(long j = i + 1; j <= n; j++) {\n\
    \            sum += j * j - j + 1;\n            for(long k = j + 1; k <= n; k++)\
    \ {\n                sum += k * k - k + 1;\n                if(sum % 3 == 0) {\n\
    \                    count++;\n                }\n                sum -= k * k\
    \ - k + 1;\n            }\n            sum -= j * j - j + 1;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n \
    \   assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpn2l9fx3_: /tmp/tmpn2l9fx3_.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpe8yh6ww1: /tmp/tmpe8yh6ww1.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpvuzeriy6: /tmp/tmpvuzeriy6.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpn1y6bj2m: /tmp/tmpn1y6bj2m.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // Write your code here\n    long count = 0;\n    for(long i = 1;\
    \ i < n; i++){\n        for(long j = i+1; j < n; j++){\n            for(long k\
    \ = j+1; k < n; k++){\n                if((i*i - i + 1 + j*j - j + 1 + k*k - k\
    \ + 1) % 3 == 0){\n                    count++;\n                }\n         \
    \   }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  stdout: ''
  stderr: "tmpsdgglqgf: /tmp/tmpsdgglqgf.cpp:30: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    std::vector<long> a(n);\n    for(long i = 0;\
    \ i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for(long i = 0; i <\
    \ n; i++) {\n        for(long j = i + 1; j < n; j++) {\n            for(long k\
    \ = j + 1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpc3mh9p82: /tmp/tmpc3mh9p82.cpp:32: int main(): Assertion `candidate((5))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    long a[n];\n    for(long i = 0; i < n; i++) {\n\
    \        a[i] = i * i - i + 1;\n    }\n    for(long i = 0; i < n; i++) {\n   \
    \     for(long j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n;\
    \ k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n              \
    \      count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpco516djb: /tmp/tmpco516djb.cpp:32: int main(): Assertion `candidate((5))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpstyeu7hd: /tmp/tmpstyeu7hd.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if(((i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1)) % 3 ==\
    \ 0) {\n                    count++;\n                }\n            }\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpyv696spp: /tmp/tmpyv696spp.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    long a[n];\n    for(long i = 0; i < n; i++) {\n\
    \        a[i] = i * i - i + 1;\n    }\n    for(long i = 0; i < n; i++) {\n   \
    \     for(long j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n;\
    \ k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n              \
    \      count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpop4byi0n: /tmp/tmpop4byi0n.cpp:32: int main(): Assertion `candidate((5))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpocygsepq: /tmp/tmpocygsepq.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpoyjt5qoe: /tmp/tmpoyjt5qoe.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpuvrf25ja: /tmp/tmpuvrf25ja.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpck9z0v3s: /tmp/tmpck9z0v3s.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpohx2j96z: /tmp/tmpohx2j96z.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // Write your code here\n    long count = 0;\n    for(long i = 1;\
    \ i < n; i++){\n        for(long j = i+1; j < n; j++){\n            for(long k\
    \ = j+1; k < n; k++){\n                long sum = i*i - i + 1 + j*j - j + 1 +\
    \ k*k - k + 1;\n                if(sum % 3 == 0){\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) ==\
    \ (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n\
    \    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp2ujoebag: /tmp/tmp2ujoebag.cpp:31: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long ans = 0;\n    long a[n];\n    for(long i = 0; i < n; i++) {\n\
    \        a[i] = i * i - i + 1;\n    }\n    for(long i = 0; i < n; i++) {\n   \
    \     for(long j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n;\
    \ k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n              \
    \      ans++;\n                }\n            }\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpj5_mkntw: /tmp/tmpj5_mkntw.cpp:32: int main(): Assertion `candidate((5))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp_4zxux4b: /tmp/tmp_4zxux4b.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              long sum = i * i - i + 1 + j * j - j + 1 + k * k - k + 1;\n   \
    \             if(sum % 3 == 0) {\n                    count++;\n             \
    \   }\n            }\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n  \
    \  assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  stdout: ''
  stderr: "tmpqim1ce27: /tmp/tmpqim1ce27.cpp:30: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmpcrei1cad: /tmp/tmpcrei1cad.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmplor79epu: /tmp/tmplor79epu.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: "tmp8b6akcn4: /tmp/tmp8b6akcn4.cpp:29: int main(): Assertion `candidate((6))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
