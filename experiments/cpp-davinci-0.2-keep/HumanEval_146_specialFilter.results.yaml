name: HumanEval_146_specialFilter
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            int first = nums[i] % 10;\n          \
    \  int last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0) {\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpcf3txr41: /tmp/tmpcf3txr41.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            if(nums[i] % 2 != 0) {\n             \
    \   long temp = nums[i];\n                long first = temp % 10;\n          \
    \      while(temp > 0) {\n                    temp /= 10;\n                }\n\
    \                long last = temp % 10;\n                if(first % 2 != 0 &&\
    \ last % 2 != 0) {\n                    count++;\n                }\n        \
    \    }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = specialFilter;\n    assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpybp__swu: /tmp/tmpybp__swu.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long first = nums[i] / 10;\n         \
    \   long last = nums[i] % 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpazy0m8s9: /tmp/tmpazy0m8s9.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long temp = nums[i];\n            long\
    \ first = temp % 10;\n            long last = temp;\n            while(temp >\
    \ 0) {\n                last = temp % 10;\n                temp /= 10;\n     \
    \       }\n            if(first % 2 != 0 && last % 2 != 0) {\n               \
    \ count++;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            if(nums[i] % 2 != 0) {\n             \
    \   if(nums[i] / 10 % 2 != 0) {\n                    count++;\n              \
    \  }\n            }\n        }\n    }\n    return count;\n}\nint main() {\n  \
    \  auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmporep38rh: /tmp/tmporep38rh.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(long i = 0; i < nums.size(); i++) {\n\
    \        if(nums[i] > 10) {\n            long first = nums[i] % 10;\n        \
    \    long last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpz_g82ki5: /tmp/tmpz_g82ki5.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long temp = nums[i];\n            if(temp\
    \ % 2 != 0) {\n                while(temp > 0) {\n                    if(temp\
    \ % 10 == 1 || temp % 10 == 3 || temp % 10 == 5 || temp % 10 == 7 || temp % 10\
    \ == 9) {\n                        count++;\n                        break;\n\
    \                    }\n                    temp /= 10;\n                }\n \
    \           }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpdlfaiz2o: /tmp/tmpdlfaiz2o.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long first = nums[i] / 10;\n         \
    \   long last = nums[i] % 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpefdp6pln: /tmp/tmpefdp6pln.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n  \
    \      if(nums[i] > 10) {\n            int first = nums[i] % 10;\n           \
    \ int last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0) {\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpc7il1r0n: /tmp/tmpc7il1r0n.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n  \
    \      if(nums[i] > 10) {\n            long first = nums[i] / 10;\n          \
    \  long last = nums[i] % 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpqhxri0vr: /tmp/tmpqhxri0vr.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long temp = nums[i];\n            if(temp\
    \ % 2 != 0) {\n                while(temp > 0) {\n                    if(temp\
    \ % 10 == 1 || temp % 10 == 3 || temp % 10 == 5 || temp % 10 == 7 || temp % 10\
    \ == 9) {\n                        count++;\n                        break;\n\
    \                    }\n                    temp /= 10;\n                }\n \
    \           }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmp7uq50iah: /tmp/tmp7uq50iah.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long num = nums[i];\n            if(num\
    \ % 2 != 0) {\n                while(num > 10) {\n                    num /= 10;\n\
    \                }\n                if(num % 2 != 0) {\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmp92xajxzx: /tmp/tmp92xajxzx.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n  \
    \      if(nums[i] > 10) {\n            int first = nums[i] / 10;\n           \
    \ int last = nums[i] % 10;\n            if(first % 2 != 0 && last % 2 != 0) {\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpxolzr7tl: /tmp/tmpxolzr7tl.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10 && nums[i] % 2 != 0 && nums[i] % 10 != 0) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmp2wvaafhk: /tmp/tmp2wvaafhk.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n\tlong count = 0;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\t\
    if (nums[i] > 10) {\n\t\t\tlong temp = nums[i];\n\t\t\tlong first = temp % 10;\n\
    \t\t\tlong last = temp;\n\t\t\twhile (temp > 0) {\n\t\t\t\tlast = temp % 10;\n\
    \t\t\t\ttemp /= 10;\n\t\t\t}\n\t\t\tif (first % 2 != 0 && last % 2 != 0) {\n\t\
    \t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n\tlong count = 0;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\t\
    if (nums[i] > 10) {\n\t\t\tif (nums[i] % 2 != 0) {\n\t\t\t\tif (nums[i] / 10 %\
    \ 2 != 0) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmp78ee1ll5: /tmp/tmp78ee1ll5.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long temp = nums[i];\n            if(temp\
    \ % 2 != 0) {\n                while(temp > 0) {\n                    if(temp\
    \ % 10 == 1 || temp % 10 == 3 || temp % 10 == 5 || temp % 10 == 7 || temp % 10\
    \ == 9) {\n                        count++;\n                        break;\n\
    \                    }\n                    temp /= 10;\n                }\n \
    \           }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmp2eef_uov: /tmp/tmp2eef_uov.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n\tlong count = 0;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\t\
    if (nums[i] > 10) {\n\t\t\tlong first = nums[i] / 10;\n\t\t\tlong last = nums[i]\
    \ % 10;\n\t\t\tif (first % 2 != 0 && last % 2 != 0) {\n\t\t\t\tcount++;\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpcg_3bik5: /tmp/tmpcg_3bik5.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long temp = nums[i];\n            int\
    \ first = temp % 10;\n            int last = temp / 10;\n            if(first\
    \ % 2 != 0 && last % 2 != 0) {\n                count++;\n            }\n    \
    \    }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpe3_l5_na: /tmp/tmpe3_l5_na.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n  \
    \      if(nums[i] > 10) {\n            int first = nums[i] % 10;\n           \
    \ int last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0) {\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmp7r9r0aj1: /tmp/tmp7r9r0aj1.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n\tlong count = 0;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\t\
    if (nums[i] > 10) {\n\t\t\tint first = nums[i] % 10;\n\t\t\tint last = nums[i]\
    \ / 10;\n\t\t\tif (first % 2 != 0 && last % 2 != 0) {\n\t\t\t\tcount++;\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpevkpprn1: /tmp/tmpevkpprn1.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long first = nums[i] / 10;\n         \
    \   long last = nums[i] % 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmppd5uxi4o: /tmp/tmppd5uxi4o.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(long i = 0; i < nums.size(); i++) {\n\
    \        if(nums[i] > 10) {\n            long num = nums[i];\n            long\
    \ firstDigit = num % 10;\n            long lastDigit = num;\n            while(lastDigit\
    \ >= 10) {\n                lastDigit /= 10;\n            }\n            if(firstDigit\
    \ % 2 != 0 && lastDigit % 2 != 0) {\n                count++;\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long temp = nums[i];\n            int\
    \ first = temp % 10;\n            int last = temp;\n            while(temp > 0)\
    \ {\n                last = temp % 10;\n                temp /= 10;\n        \
    \    }\n            if(first % 2 != 0 && last % 2 != 0) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n\t// Write your code here\n\tint count = 0;\n\tfor (int i = 0; i <\
    \ nums.size(); i++) {\n\t\tif (nums[i] > 10) {\n\t\t\tint first = nums[i] % 10;\n\
    \t\t\tint last = nums[i] / 10;\n\t\t\tif (first % 2 != 0 && last % 2 != 0) {\n\
    \t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpwv08g0pt: /tmp/tmpwv08g0pt.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n\tlong count = 0;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\t\
    if (nums[i] > 10) {\n\t\t\tif (nums[i] % 2 != 0) {\n\t\t\t\tif (nums[i] / 10 %\
    \ 2 != 0) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpnzt5w6t6: /tmp/tmpnzt5w6t6.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(long i = 0; i < nums.size(); i++) {\n\
    \        if(nums[i] > 10 && nums[i] % 2 != 0 && nums[i] % 10 != 0) {\n       \
    \     count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpmj5oifil: /tmp/tmpmj5oifil.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n  \
    \      if(nums[i] > 10) {\n            int first = nums[i] % 10;\n           \
    \ int last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0) {\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmp7480gtey: /tmp/tmp7480gtey.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n  \
    \      if(nums[i] > 10) {\n            long temp = nums[i];\n            int first\
    \ = temp % 10;\n            while(temp > 0) {\n                temp /= 10;\n \
    \           }\n            int last = temp % 10;\n            if(first % 2 !=\
    \ 0 && last % 2 != 0) {\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpv0yp8ua4: /tmp/tmpv0yp8ua4.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long first = nums[i] / 10;\n         \
    \   long last = nums[i] % 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmph_ksph3q: /tmp/tmph_ksph3q.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long firstDigit = nums[i] % 10;\n    \
    \        long lastDigit = nums[i] / 10;\n            if(firstDigit % 2 != 0 &&\
    \ lastDigit % 2 != 0) {\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpk5b1q2ev: /tmp/tmpk5b1q2ev.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n\tlong count = 0;\n\tfor (long i = 0; i < nums.size(); i++) {\n\t\t\
    if (nums[i] > 10) {\n\t\t\tlong num = nums[i];\n\t\t\tlong first = num % 10;\n\
    \t\t\tlong last = num;\n\t\t\twhile (last > 10) {\n\t\t\t\tlast = last / 10;\n\
    \t\t\t}\n\t\t\tif (first % 2 != 0 && last % 2 != 0) {\n\t\t\t\tcount++;\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmp7s2l4bg3: /tmp/tmp7s2l4bg3.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(auto num : nums) {\n        if(num > 10)\
    \ {\n            long first = num;\n            long last = num;\n           \
    \ while(first > 10) {\n                first /= 10;\n            }\n         \
    \   while(last > 10) {\n                last %= 10;\n            }\n         \
    \   if(first % 2 == 1 && last % 2 == 1) {\n                count++;\n        \
    \    }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = specialFilter;\n    assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmp74j86spy: /tmp/tmp74j86spy.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long temp = nums[i];\n            long\
    \ last = temp % 10;\n            temp /= 10;\n            long first = temp %\
    \ 10;\n            if(first % 2 != 0 && last % 2 != 0) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpann05khu: /tmp/tmpann05khu.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            if(nums[i] % 2 != 0) {\n             \
    \   if(nums[i] % 10 != 0) {\n                    count++;\n                }\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpyn3aviie: /tmp/tmpyn3aviie.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long temp = nums[i];\n            long\
    \ first = temp % 10;\n            while(temp != 0) {\n                temp /=\
    \ 10;\n            }\n            long last = temp;\n            if(first % 2\
    \ != 0 && last % 2 != 0) {\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmp5dkaoooq: /tmp/tmp5dkaoooq.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n\tlong count = 0;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\t\
    if (nums[i] > 10) {\n\t\t\tif (nums[i] % 2 != 0) {\n\t\t\t\tif (nums[i] / 10 %\
    \ 2 != 0) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpx1g4zs0h: /tmp/tmpx1g4zs0h.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long num = nums[i];\n            long\
    \ first = num % 10;\n            long last = num / 10;\n            if(first %\
    \ 2 != 0 && last % 2 != 0) {\n                count++;\n            }\n      \
    \  }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpdl96mvh9: /tmp/tmpdl96mvh9.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            if(nums[i] % 2 != 0) {\n             \
    \   if(nums[i] % 10 != 0) {\n                    count++;\n                }\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpbejo2vpn: /tmp/tmpbejo2vpn.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long temp = nums[i];\n            long\
    \ first = temp % 10;\n            long last = temp;\n            while(temp >\
    \ 0) {\n                last = temp % 10;\n                temp /= 10;\n     \
    \       }\n            if(first % 2 != 0 && last % 2 != 0) {\n               \
    \ count++;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n  \
    \      if(nums[i] > 10) {\n            int first = nums[i] % 10;\n           \
    \ int last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0) {\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpfdfsfnry: /tmp/tmpfdfsfnry.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long num = nums[i];\n            long\
    \ first = num % 10;\n            long last = num;\n            while(last > 9)\
    \ {\n                last /= 10;\n            }\n            if(first % 2 != 0\
    \ && last % 2 != 0) {\n                count++;\n            }\n        }\n  \
    \  }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long temp = nums[i];\n            if(temp\
    \ % 2 != 0) {\n                while(temp > 0) {\n                    if(temp\
    \ % 10 == 1 || temp % 10 == 3 || temp % 10 == 5 || temp % 10 == 7 || temp % 10\
    \ == 9) {\n                        count++;\n                        break;\n\
    \                    }\n                    temp /= 10;\n                }\n \
    \           }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpywyjilok: /tmp/tmpywyjilok.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(auto i : nums) {\n        if(i > 10) {\n\
    \            std::string s = std::to_string(i);\n            if(s[0] % 2 != 0\
    \ && s[s.length() - 1] % 2 != 0) {\n                count++;\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long temp = nums[i];\n            int\
    \ first = temp % 10;\n            int last = temp;\n            while(temp > 0)\
    \ {\n                temp /= 10;\n                last = temp;\n            }\n\
    \            if(first % 2 != 0 && last % 2 != 0) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpiocqs4jp: /tmp/tmpiocqs4jp.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long num = nums[i];\n            long\
    \ first = num % 10;\n            long last = num / 10;\n            if(first %\
    \ 2 != 0 && last % 2 != 0) {\n                count++;\n            }\n      \
    \  }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmp9ztrbl4b: /tmp/tmp9ztrbl4b.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(long i = 0; i < nums.size(); i++) {\n\
    \        if(nums[i] > 10) {\n            std::string s = std::to_string(nums[i]);\n\
    \            if(s[0] % 2 != 0 && s[s.size() - 1] % 2 != 0) {\n               \
    \ count++;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n  \
    \      if(nums[i] > 10) {\n            int first = nums[i] / 10;\n           \
    \ int last = nums[i] % 10;\n            if(first % 2 != 0 && last % 2 != 0) {\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpvzy5g96v: /tmp/tmpvzy5g96v.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10 && nums[i] % 2 != 0 && nums[i] / 10 % 2 != 0) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmp5ny25kcd: /tmp/tmp5ny25kcd.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long temp = nums[i];\n            int\
    \ first = temp % 10;\n            int last = temp;\n            while(temp > 0)\
    \ {\n                last = temp % 10;\n                temp /= 10;\n        \
    \    }\n            if(first % 2 != 0 && last % 2 != 0) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(auto i : nums) {\n        if(i > 10) {\n\
    \            long first = i % 10;\n            long last = i / 10;\n         \
    \   if(first % 2 != 0 && last % 2 != 0) {\n                count++;\n        \
    \    }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = specialFilter;\n    assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpizvi9k9b: /tmp/tmpizvi9k9b.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long temp = nums[i];\n            if(temp\
    \ % 2 != 0) {\n                while(temp > 0) {\n                    if(temp\
    \ % 10 == 1 || temp % 10 == 3 || temp % 10 == 5 || temp % 10 == 7 || temp % 10\
    \ == 9) {\n                        count++;\n                        break;\n\
    \                    }\n                    temp /= 10;\n                }\n \
    \           }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpmmwlikyp: /tmp/tmpmmwlikyp.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long temp = nums[i];\n            int\
    \ first = temp % 10;\n            int last = temp;\n            while(temp > 0)\
    \ {\n                last = temp % 10;\n                temp /= 10;\n        \
    \    }\n            if(first % 2 != 0 && last % 2 != 0) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n  \
    \      if(nums[i] > 10 && nums[i] % 2 == 1 && nums[0] % 2 == 1 && nums[nums.size()\
    \ - 1] % 2 == 1) {\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpte4er8po: /tmp/tmpte4er8po.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n  \
    \      if(nums[i] > 10) {\n            if(nums[i] % 2 != 0) {\n              \
    \  int num = nums[i];\n                int last = num % 10;\n                int\
    \ first = num;\n                while(first >= 10) {\n                    first\
    \ = first / 10;\n                }\n                if(first % 2 != 0 && last\
    \ % 2 != 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10 && nums[i] % 2 != 0 && nums[i] % 10 != 0) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmp4ikbkdpz: /tmp/tmp4ikbkdpz.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(long i = 0; i < nums.size(); i++) {\n\
    \        if(nums[i] > 10) {\n            long temp = nums[i];\n            long\
    \ first = temp % 10;\n            long last = temp;\n            while(temp >\
    \ 0) {\n                last = temp % 10;\n                temp /= 10;\n     \
    \       }\n            if(first % 2 != 0 && last % 2 != 0) {\n               \
    \ count++;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long first = nums[i] / 10;\n         \
    \   long last = nums[i] % 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpc1zuiije: /tmp/tmpc1zuiije.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            if(nums[i] % 2 != 0) {\n             \
    \   long temp = nums[i];\n                long first = temp % 10;\n          \
    \      while(temp > 0) {\n                    temp /= 10;\n                }\n\
    \                long last = temp % 10;\n                if(first % 2 != 0 &&\
    \ last % 2 != 0) {\n                    count++;\n                }\n        \
    \    }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = specialFilter;\n    assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpp286852h: /tmp/tmpp286852h.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(long i = 0; i < nums.size(); i++) {\n\
    \        if(nums[i] > 10) {\n            if(nums[i] % 2 != 0) {\n            \
    \    if(nums[i] / 10 % 2 != 0) {\n                    count++;\n             \
    \   }\n            }\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmp_g46__c2: /tmp/tmp_g46__c2.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10 && nums[i] % 2 != 0 && nums[i] / 10 % 2 != 0) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpf3o_ahgq: /tmp/tmpf3o_ahgq.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n  \
    \      if(nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == 1 || nums[i] % 10\
    \ == 3 || nums[i] % 10 == 5 || nums[i] % 10 == 7 || nums[i] % 10 == 9) {\n   \
    \         count++;\n        }\n    }\n    return count;\n}\nint main() {\n   \
    \ auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpmd_5r_i5: /tmp/tmpmd_5r_i5.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n  \
    \      if(nums[i] > 10) {\n            int first = nums[i] % 10;\n           \
    \ int last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0) {\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpueocep2r: /tmp/tmpueocep2r.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long temp = nums[i];\n            long\
    \ first = temp % 10;\n            while(temp > 0) {\n                temp /= 10;\n\
    \            }\n            long last = temp % 10;\n            if(first % 2 !=\
    \ 0 && last % 2 != 0) {\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmp63mfz_sm: /tmp/tmp63mfz_sm.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n  long count = 0;\n  for(int i = 0; i < nums.size(); i++) {\n    if(nums[i]\
    \ > 10) {\n      long num = nums[i];\n      long first = num % 10;\n      long\
    \ last = num / 10;\n      if(first % 2 != 0 && last % 2 != 0) {\n        count++;\n\
    \      }\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmp6wbkwitf: /tmp/tmp6wbkwitf.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n  \
    \      if(nums[i] > 10) {\n            if(nums[i] % 2 != 0) {\n              \
    \  int temp = nums[i];\n                int first = temp % 10;\n             \
    \   while(temp > 0) {\n                    temp /= 10;\n                }\n  \
    \              int last = temp % 10;\n                if(first % 2 != 0 && last\
    \ % 2 != 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpsodadl1m: /tmp/tmpsodadl1m.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long first = nums[i] % 10;\n         \
    \   long last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmptolmn8d6: /tmp/tmptolmn8d6.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long first = nums[i] % 10;\n         \
    \   long last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpmld4lbsf: /tmp/tmpmld4lbsf.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long temp = nums[i];\n            long\
    \ first = temp % 10;\n            temp /= 10;\n            long last = temp %\
    \ 10;\n            if(first % 2 != 0 && last % 2 != 0) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpowlz3hc2: /tmp/tmpowlz3hc2.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n  \
    \      if(nums[i] > 10 && nums[i] % 2 != 0 && nums[i] / 10 % 2 != 0) {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmp0t6urms9: /tmp/tmp0t6urms9.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n  long count = 0;\n  for(int i = 0; i < nums.size(); i++) {\n    if(nums[i]\
    \ > 10 && nums[i] % 2 != 0 && nums[i] % 10 != 0) {\n      count++;\n    }\n  }\n\
    \  return count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpumw4f187: /tmp/tmpumw4f187.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long firstDigit = nums[i] % 10;\n    \
    \        long lastDigit = nums[i] / 10;\n            if(firstDigit % 2 != 0 &&\
    \ lastDigit % 2 != 0) {\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmphibhv2yh: /tmp/tmphibhv2yh.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            if(nums[i] % 2 != 0) {\n             \
    \   long temp = nums[i];\n                long first = temp % 10;\n          \
    \      while(temp > 0) {\n                    temp /= 10;\n                }\n\
    \                long last = temp % 10;\n                if(first % 2 != 0 &&\
    \ last % 2 != 0) {\n                    count++;\n                }\n        \
    \    }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = specialFilter;\n    assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmppcigvf0n: /tmp/tmppcigvf0n.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10 && nums[i] % 2 == 1 && nums[0] % 2 == 1 && nums[nums.size()\
    \ - 1] % 2 == 1) {\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpsz1jo3w5: /tmp/tmpsz1jo3w5.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10 && nums[i] % 2 != 0 && nums[i] % 10 != 0) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmp7phq20nq: /tmp/tmp7phq20nq.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long temp = nums[i];\n            int\
    \ first = temp % 10;\n            int last = temp;\n            while(temp > 0)\
    \ {\n                last = temp % 10;\n                temp /= 10;\n        \
    \    }\n            if(first % 2 != 0 && last % 2 != 0) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long num = nums[i];\n            if(num\
    \ < 0) {\n                num = num * -1;\n            }\n            long first\
    \ = num % 10;\n            long last = num / 10;\n            while(last > 0)\
    \ {\n                last = last / 10;\n            }\n            if(first %\
    \ 2 != 0 && last % 2 != 0) {\n                count++;\n            }\n      \
    \  }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpq_31bvmn: /tmp/tmpq_31bvmn.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(long i = 0; i < nums.size(); i++) {\n\
    \        if(nums[i] > 10) {\n            long num = nums[i];\n            long\
    \ first = num % 10;\n            long last = num;\n            while(last >= 10)\
    \ {\n                last /= 10;\n            }\n            if(first % 2 != 0\
    \ && last % 2 != 0) {\n                count++;\n            }\n        }\n  \
    \  }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            if(nums[i] % 2 != 0) {\n             \
    \   long temp = nums[i];\n                if(temp % 10 % 2 != 0) {\n         \
    \           while(temp >= 10) {\n                        temp /= 10;\n       \
    \             }\n                    if(temp % 2 != 0) {\n                   \
    \     count++;\n                    }\n                }\n            }\n    \
    \    }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            if(nums[i] % 2 != 0) {\n             \
    \   if(nums[i] % 10 != 0) {\n                    count++;\n                }\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmp0eio1u8_: /tmp/tmp0eio1u8_.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long temp = nums[i];\n            long\
    \ first = temp % 10;\n            long last = temp;\n            while(temp >\
    \ 0) {\n                last = temp % 10;\n                temp /= 10;\n     \
    \       }\n            if(first % 2 != 0 && last % 2 != 0) {\n               \
    \ count++;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n  \
    \      if(nums[i] > 10) {\n            if(nums[i] % 2 != 0) {\n              \
    \  if(nums[i] / 10 % 2 != 0) {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nint main() {\n   \
    \ auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpbblxsv1r: /tmp/tmpbblxsv1r.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n\tlong count = 0;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\t\
    if (nums[i] > 10) {\n\t\t\tif (nums[i] % 2 != 0) {\n\t\t\t\tcount++;\n\t\t\t}\n\
    \t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpnobhr0qc: /tmp/tmpnobhr0qc.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n  \
    \      if(nums[i] > 10) {\n            long first = nums[i] / 10;\n          \
    \  long last = nums[i] % 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmp1pmdz3pj: /tmp/tmp1pmdz3pj.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n  \
    \      if(nums[i] > 10) {\n            if(nums[i] % 2 != 0) {\n              \
    \  long temp = nums[i];\n                while(temp > 10) {\n                \
    \    temp /= 10;\n                }\n                if(temp % 2 != 0) {\n   \
    \                 count++;\n                }\n            }\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n   \
    \ assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpaci8jlpo: /tmp/tmpaci8jlpo.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            if(nums[i] % 2 != 0) {\n             \
    \   count++;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpe83fh4ce: /tmp/tmpe83fh4ce.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            if(nums[i] % 2 != 0 && nums[i] % 10 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpqyqsddyd: /tmp/tmpqyqsddyd.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long first = nums[i] % 10;\n         \
    \   long last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmp8y7ma8lv: /tmp/tmp8y7ma8lv.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10 && nums[i] % 2 != 0 && nums[i] / 10 % 2 != 0) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmp5npff4rn: /tmp/tmp5npff4rn.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            if(nums[i] % 2 != 0) {\n             \
    \   if(nums[i] % 10 != 0) {\n                    count++;\n                }\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmp0m1dsy4r: /tmp/tmp0m1dsy4r.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long first = nums[i] % 10;\n         \
    \   long last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpcac_xkal: /tmp/tmpcac_xkal.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n\tlong count = 0;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\t\
    if (nums[i] > 10) {\n\t\t\tlong temp = nums[i];\n\t\t\tint first = temp % 10;\n\
    \t\t\tint last = temp % 10;\n\t\t\twhile (temp > 0) {\n\t\t\t\tlast = temp % 10;\n\
    \t\t\t\ttemp /= 10;\n\t\t\t}\n\t\t\tif (first % 2 != 0 && last % 2 != 0) {\n\t\
    \t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            int first = nums[i] % 10;\n          \
    \  int last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0) {\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmp6pxfr4pd: /tmp/tmp6pxfr4pd.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            if(nums[i] % 2 != 0) {\n             \
    \   if(nums[i] % 10 != 0) {\n                    count++;\n                }\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpwhf187jl: /tmp/tmpwhf187jl.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n\tlong count = 0;\n\tfor (auto i : nums) {\n\t\tif (i > 10) {\n\t\t\
    \tint first = i % 10;\n\t\t\tint last = i / 10;\n\t\t\tif (first % 2 != 0 && last\
    \ % 2 != 0) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nint\
    \ main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpmonfz2aa: /tmp/tmpmonfz2aa.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n  \
    \      if(nums[i] > 10) {\n            int first = nums[i] / 10;\n           \
    \ int last = nums[i] % 10;\n            if(first % 2 != 0 && last % 2 != 0) {\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmp696miuq9: /tmp/tmp696miuq9.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n  \
    \      if(nums[i] > 10) {\n            long temp = nums[i];\n            if(temp\
    \ % 2 != 0) {\n                while(temp >= 10) {\n                    temp /=\
    \ 10;\n                }\n                if(temp % 2 != 0) {\n              \
    \      count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n  \
    \      if(nums[i] > 10) {\n            int first = nums[i] % 10;\n           \
    \ int last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0) {\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpn4ojqibo: /tmp/tmpn4ojqibo.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long temp = nums[i];\n            long\
    \ first = temp % 10;\n            while(temp >= 10) {\n                temp /=\
    \ 10;\n            }\n            long last = temp;\n            if(first % 2\
    \ != 0 && last % 2 != 0) {\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long first = nums[i] / 10;\n         \
    \   long last = nums[i] % 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmphqdi09vy: /tmp/tmphqdi09vy.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long num = nums[i];\n            int first\
    \ = num % 10;\n            int last = num / pow(10, floor(log10(num)));\n    \
    \        if(first % 2 != 0 && last % 2 != 0) {\n                count++;\n   \
    \         }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = specialFilter;\n    assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long temp = nums[i];\n            if(temp\
    \ % 2 != 0) {\n                while(temp > 0) {\n                    if(temp\
    \ % 10 == 1 || temp % 10 == 3 || temp % 10 == 5 || temp % 10 == 7 || temp % 10\
    \ == 9) {\n                        count++;\n                        break;\n\
    \                    }\n                    temp /= 10;\n                }\n \
    \           }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpfk2uqtuo: /tmp/tmpfk2uqtuo.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long num = nums[i];\n            long\
    \ first = num / 10;\n            long last = num % 10;\n            if(first %\
    \ 2 != 0 && last % 2 != 0) {\n                count++;\n            }\n      \
    \  }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmp6f3zwzje: /tmp/tmp6f3zwzje.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(long i = 0; i < nums.size(); i++) {\n\
    \        if(nums[i] > 10) {\n            long temp = nums[i];\n            long\
    \ first = temp % 10;\n            long last = temp;\n            while(temp >\
    \ 0) {\n                last = temp % 10;\n                temp /= 10;\n     \
    \       }\n            if(first % 2 != 0 && last % 2 != 0) {\n               \
    \ count++;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n  long count = 0;\n  for(int i = 0; i < nums.size(); i++) {\n    if(nums[i]\
    \ > 10) {\n      long num = nums[i];\n      long first = num % 10;\n      long\
    \ last = num;\n      while(last >= 10) {\n        last /= 10;\n      }\n     \
    \ if(first % 2 != 0 && last % 2 != 0) {\n        count++;\n      }\n    }\n  }\n\
    \  return count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10 && nums[i] % 2 != 0 && nums[i] % 10 != 0) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpsyrd980c: /tmp/tmpsyrd980c.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n\tlong count = 0;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\t\
    if (nums[i] > 10) {\n\t\t\tlong first = nums[i] / 10;\n\t\t\tlong last = nums[i]\
    \ % 10;\n\t\t\tif (first % 2 != 0 && last % 2 != 0) {\n\t\t\t\tcount++;\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmp60_ge0f7: /tmp/tmp60_ge0f7.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n\tint count = 0;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\tif\
    \ (nums[i] > 10) {\n\t\t\tif (nums[i] % 2 != 0) {\n\t\t\t\tif (nums[i] % 10 !=\
    \ 0) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmp3uuil15a: /tmp/tmp3uuil15a.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long temp = nums[i];\n            if(temp\
    \ % 2 != 0) {\n                while(temp > 0) {\n                    if(temp\
    \ % 10 % 2 != 0) {\n                        count++;\n                       \
    \ break;\n                    }\n                    temp /= 10;\n           \
    \     }\n            }\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmps3j6ezgv: /tmp/tmps3j6ezgv.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long first = nums[i] / 10;\n         \
    \   long last = nums[i] % 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmp6r4l3rgd: /tmp/tmp6r4l3rgd.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long temp = nums[i];\n            if(temp\
    \ % 2 != 0) {\n                long first = temp % 10;\n                while(temp\
    \ > 0) {\n                    temp /= 10;\n                }\n               \
    \ long last = temp % 10;\n                if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpsgv9i1r5: /tmp/tmpsgv9i1r5.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long first = nums[i] % 10;\n         \
    \   long last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpp4pdgd4l: /tmp/tmpp4pdgd4l.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n  \
    \      if(nums[i] > 10) {\n            int first = nums[i] / 10;\n           \
    \ int last = nums[i] % 10;\n            if(first % 2 != 0 && last % 2 != 0) {\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmp6_otmocg: /tmp/tmp6_otmocg.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long temp = nums[i];\n            long\
    \ first = temp % 10;\n            long last = temp;\n            while(temp >\
    \ 0) {\n                last = temp % 10;\n                temp /= 10;\n     \
    \       }\n            if(first % 2 != 0 && last % 2 != 0) {\n               \
    \ count++;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            if(nums[i] % 2 != 0) {\n             \
    \   long temp = nums[i];\n                long lastDigit = temp % 10;\n      \
    \          while(temp > 0) {\n                    temp = temp / 10;\n        \
    \        }\n                if(temp % 2 != 0 && lastDigit % 2 != 0) {\n      \
    \              count++;\n                }\n            }\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n   \
    \ assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpj61dmmyp: /tmp/tmpj61dmmyp.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(long i = 0; i < nums.size(); i++) {\n\
    \        if(nums[i] > 10) {\n            long temp = nums[i];\n            long\
    \ first = temp % 10;\n            long last = temp;\n            while(temp >\
    \ 0) {\n                last = temp % 10;\n                temp /= 10;\n     \
    \       }\n            if(first % 2 != 0 && last % 2 != 0) {\n               \
    \ count++;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n  \
    \      if(nums[i] > 10) {\n            if(nums[i] % 2 != 0) {\n              \
    \  int temp = nums[i];\n                int first = temp % 10;\n             \
    \   int last = temp;\n                while(temp > 0) {\n                    last\
    \ = temp % 10;\n                    temp /= 10;\n                }\n         \
    \       if(first % 2 != 0 && last % 2 != 0) {\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10 && nums[i] % 2 != 0 && nums[i] % 10 != 0) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpa57ujtlv: /tmp/tmpa57ujtlv.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(long i = 0; i < nums.size(); i++) {\n\
    \        if(nums[i] > 10) {\n            long first = nums[i] % 10;\n        \
    \    long last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpx9cick_s: /tmp/tmpx9cick_s.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long num = nums[i];\n            long\
    \ first = num % 10;\n            long last = num;\n            while(last >= 10)\
    \ {\n                last /= 10;\n            }\n            if(first % 2 != 0\
    \ && last % 2 != 0) {\n                count++;\n            }\n        }\n  \
    \  }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n  \
    \      if(nums[i] > 10) {\n            int first = nums[i] % 10;\n           \
    \ int last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0) {\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpw82yv75h: /tmp/tmpw82yv75h.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long num = nums[i];\n            long\
    \ first = num % 10;\n            long last = num / pow(10, floor(log10(num)));\n\
    \            if(first % 2 != 0 && last % 2 != 0) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long temp = nums[i];\n            long\
    \ first = temp % 10;\n            long last = temp;\n            while(temp >\
    \ 0) {\n                last = temp % 10;\n                temp /= 10;\n     \
    \       }\n            if(first % 2 != 0 && last % 2 != 0) {\n               \
    \ count++;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n  \
    \      if(nums[i] > 10) {\n            long num = nums[i];\n            int first\
    \ = num % 10;\n            int last = num / pow(10, floor(log10(num)));\n    \
    \        if(first % 2 != 0 && last % 2 != 0) {\n                count++;\n   \
    \         }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = specialFilter;\n    assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n  \
    \      if(nums[i] > 10) {\n            int first = nums[i] % 10;\n           \
    \ int last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0) {\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpzus31b2r: /tmp/tmpzus31b2r.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long temp = nums[i];\n            long\
    \ first = temp % 10;\n            long last = temp;\n            while(temp >\
    \ 0) {\n                last = temp % 10;\n                temp /= 10;\n     \
    \       }\n            if(first % 2 != 0 && last % 2 != 0) {\n               \
    \ count++;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n  \
    \      if(nums[i] > 10) {\n            int first = nums[i] % 10;\n           \
    \ int last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0) {\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpse5olbyl: /tmp/tmpse5olbyl.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n\tlong count = 0;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\t\
    if (nums[i] > 10) {\n\t\t\tint last = nums[i] % 10;\n\t\t\tint first = nums[i];\n\
    \t\t\twhile (first >= 10) {\n\t\t\t\tfirst = first / 10;\n\t\t\t}\n\t\t\tif (last\
    \ % 2 != 0 && first % 2 != 0) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n  long count = 0;\n  for(int i = 0; i < nums.size(); i++) {\n    if(nums[i]\
    \ > 10) {\n      long num = nums[i];\n      long first = num % 10;\n      long\
    \ last = num;\n      while(last >= 10) {\n        last /= 10;\n      }\n     \
    \ if(first % 2 != 0 && last % 2 != 0) {\n        count++;\n      }\n    }\n  }\n\
    \  return count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long temp = nums[i];\n            int\
    \ first = temp % 10;\n            int last = temp;\n            while(temp > 10)\
    \ {\n                temp /= 10;\n            }\n            if(first % 2 != 0\
    \ && temp % 2 != 0) {\n                count++;\n            }\n        }\n  \
    \  }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpt3gjk0fp: /tmp/tmpt3gjk0fp.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n\tint count = 0;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\tif\
    \ (nums[i] > 10) {\n\t\t\tint firstDigit = nums[i] % 10;\n\t\t\tint lastDigit\
    \ = nums[i] / 10;\n\t\t\tif (firstDigit % 2 != 0 && lastDigit % 2 != 0) {\n\t\t\
    \t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmp6l0zuhb1: /tmp/tmp6l0zuhb1.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(long i = 0; i < nums.size(); i++) {\n\
    \        if(nums[i] > 10) {\n            long temp = nums[i];\n            long\
    \ last_digit = temp % 10;\n            while(temp > 0) {\n                if(temp\
    \ < 10) {\n                    if(temp % 2 != 0 && last_digit % 2 != 0) {\n  \
    \                      count++;\n                    }\n                    break;\n\
    \                }\n                temp = temp / 10;\n            }\n       \
    \ }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long temp = nums[i];\n            int\
    \ first = temp % 10;\n            while(temp > 0) {\n                temp /= 10;\n\
    \            }\n            int last = temp % 10;\n            if(first % 2 !=\
    \ 0 && last % 2 != 0) {\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpuu2qc3hj: /tmp/tmpuu2qc3hj.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       long num = nums[i];\n        if(num > 10) {\n            long first =\
    \ num % 10;\n            long last = num / 10;\n            if(first % 2 != 0\
    \ && last % 2 != 0) {\n                count++;\n            }\n        }\n  \
    \  }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpkkzxsem1: /tmp/tmpkkzxsem1.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long temp = nums[i];\n            long\
    \ first = temp % 10;\n            long last = temp;\n            while(temp >\
    \ 0) {\n                last = temp % 10;\n                temp /= 10;\n     \
    \       }\n            if(first % 2 != 0 && last % 2 != 0) {\n               \
    \ count++;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n  \
    \      if(nums[i] > 10) {\n            long temp = nums[i];\n            int lastDigit\
    \ = temp % 10;\n            int firstDigit = 0;\n            while(temp > 0) {\n\
    \                firstDigit = temp % 10;\n                temp /= 10;\n      \
    \      }\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0) {\n      \
    \          count++;\n            }\n        }\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long temp = nums[i];\n            if(temp\
    \ % 2 != 0) {\n                while(temp > 0) {\n                    if(temp\
    \ % 10 == 1 || temp % 10 == 3 || temp % 10 == 5 || temp % 10 == 7 || temp % 10\
    \ == 9) {\n                        count++;\n                        break;\n\
    \                    }\n                    temp /= 10;\n                }\n \
    \           }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpvxyflpjp: /tmp/tmpvxyflpjp.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n  \
    \      if(nums[i] > 10 && nums[i] % 2 != 0 && nums[i] % 10 != 0) {\n         \
    \   count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = specialFilter;\n    assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpm3yxn87p: /tmp/tmpm3yxn87p.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n  \
    \      if(nums[i] > 10) {\n            int firstDigit = nums[i] % 10;\n      \
    \      int lastDigit = nums[i] / 10;\n            if(firstDigit % 2 != 0 && lastDigit\
    \ % 2 != 0) {\n                count++;\n            }\n        }\n    }\n   \
    \ return count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpol2n4tza: /tmp/tmpol2n4tza.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long temp = nums[i];\n            if(temp\
    \ % 2 != 0) {\n                while(temp > 0) {\n                    if(temp\
    \ % 10 == 1 || temp % 10 == 3 || temp % 10 == 5 || temp % 10 == 7 || temp % 10\
    \ == 9) {\n                        count++;\n                        break;\n\
    \                    }\n                    temp /= 10;\n                }\n \
    \           }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmp44r1jzq2: /tmp/tmp44r1jzq2.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long first = nums[i] / 10;\n         \
    \   long last = nums[i] % 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpp_nzyplx: /tmp/tmpp_nzyplx.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long first = nums[i] / 10;\n         \
    \   long last = nums[i] % 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpr1tg8yjr: /tmp/tmpr1tg8yjr.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n  \
    \      if(nums[i] > 10) {\n            if(nums[i] % 2 != 0) {\n              \
    \  if(nums[i] / 10 % 2 != 0) {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nint main() {\n   \
    \ auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpfpssv9uk: /tmp/tmpfpssv9uk.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n  \
    \      if(nums[i] > 10) {\n            int first = nums[i] % 10;\n           \
    \ int last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0) {\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmp394oeoho: /tmp/tmp394oeoho.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long first = nums[i] / 10;\n         \
    \   long last = nums[i] % 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpdxt4ikq_: /tmp/tmpdxt4ikq_.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long temp = nums[i];\n            long\
    \ first = temp % 10;\n            long last = temp;\n            while(temp >\
    \ 0) {\n                last = temp % 10;\n                temp /= 10;\n     \
    \       }\n            if(first % 2 != 0 && last % 2 != 0) {\n               \
    \ count++;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long num = nums[i];\n            long\
    \ first = num % 10;\n            long last = num;\n            while(last >= 10)\
    \ {\n                last /= 10;\n            }\n            if(first % 2 != 0\
    \ && last % 2 != 0) {\n                count++;\n            }\n        }\n  \
    \  }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            int firstDigit = nums[i] % 10;\n     \
    \       int lastDigit = nums[i] / 10;\n            if(firstDigit % 2 != 0 && lastDigit\
    \ % 2 != 0) {\n                count++;\n            }\n        }\n    }\n   \
    \ return count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmp3ew2fqtp: /tmp/tmp3ew2fqtp.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(auto i : nums) {\n        if(i > 10) {\n\
    \            long first = i;\n            long last = i % 10;\n            while(first\
    \ > 10) {\n                first /= 10;\n            }\n            if(first %\
    \ 2 != 0 && last % 2 != 0) {\n                count++;\n            }\n      \
    \  }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpo6mzdf0q: /tmp/tmpo6mzdf0q.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long temp = nums[i];\n            long\
    \ first = temp % 10;\n            long last = temp;\n            while(temp >\
    \ 0) {\n                last = temp % 10;\n                temp /= 10;\n     \
    \       }\n            if(first % 2 != 0 && last % 2 != 0) {\n               \
    \ count++;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n  \
    \      if(nums[i] > 10) {\n            long temp = nums[i];\n            long\
    \ first = temp % 10;\n            long last = temp / pow(10, floor(log10(temp)));\n\
    \            if(first % 2 != 0 && last % 2 != 0) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long temp = nums[i];\n            if(temp\
    \ % 2 != 0) {\n                temp /= 10;\n                if(temp % 2 != 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmp216k2vyt: /tmp/tmp216k2vyt.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long num = nums[i];\n            long\
    \ first = num % 10;\n            long last = num;\n            while(last >= 10)\
    \ {\n                last /= 10;\n            }\n            if(first % 2 != 0\
    \ && last % 2 != 0) {\n                count++;\n            }\n        }\n  \
    \  }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long firstDigit = nums[i] % 10;\n    \
    \        long lastDigit = nums[i] / 10;\n            if(firstDigit % 2 != 0 &&\
    \ lastDigit % 2 != 0) {\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpzl1_6yb9: /tmp/tmpzl1_6yb9.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(auto i : nums) {\n        if(i > 10) {\n\
    \            std::string s = std::to_string(i);\n            if(s[0] % 2 != 0\
    \ && s[s.length() - 1] % 2 != 0) {\n                count++;\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n\tlong count = 0;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\t\
    if (nums[i] > 10) {\n\t\t\tint first = nums[i] % 10;\n\t\t\tint last = nums[i]\
    \ / 10;\n\t\t\tif (first % 2 != 0 && last % 2 != 0) {\n\t\t\t\tcount++;\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpuc0xhc7a: /tmp/tmpuc0xhc7a.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            int firstDigit = nums[i] % 10;\n     \
    \       int lastDigit = nums[i] / 10;\n            if(firstDigit % 2 != 0 && lastDigit\
    \ % 2 != 0) {\n                count++;\n            }\n        }\n    }\n   \
    \ return count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpmpco1sw9: /tmp/tmpmpco1sw9.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n  long count = 0;\n  for(int i = 0; i < nums.size(); i++) {\n    if(nums[i]\
    \ > 10) {\n      long temp = nums[i];\n      if(temp % 2 != 0) {\n        temp\
    \ /= 10;\n        if(temp % 2 != 0) {\n          count++;\n        }\n      }\n\
    \    }\n  }\n  return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmphdle250v: /tmp/tmphdle250v.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long temp = nums[i];\n            long\
    \ last = temp % 10;\n            long first = temp;\n            while(first >=\
    \ 10) {\n                first /= 10;\n            }\n            if(first % 2\
    \ != 0 && last % 2 != 0) {\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(long i = 0; i < nums.size(); i++) {\n\
    \        if(nums[i] > 10) {\n            long temp = nums[i];\n            long\
    \ first = temp % 10;\n            while(temp > 0) {\n                temp /= 10;\n\
    \            }\n            long last = temp % 10;\n            if(first % 2 !=\
    \ 0 && last % 2 != 0) {\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpi9pp1qmq: /tmp/tmpi9pp1qmq.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n  \
    \      if(nums[i] > 10) {\n            if(nums[i] % 2 != 0) {\n              \
    \  int temp = nums[i];\n                int first = temp % 10;\n             \
    \   while(temp > 0) {\n                    temp /= 10;\n                }\n  \
    \              int last = temp % 10;\n                if(first % 2 != 0 && last\
    \ % 2 != 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpckfpa0ze: /tmp/tmpckfpa0ze.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long first = nums[i] / 10;\n         \
    \   long last = nums[i] % 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpivkkuqoz: /tmp/tmpivkkuqoz.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long first = nums[i] / 10;\n         \
    \   long last = nums[i] % 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmp_qj5iq9v: /tmp/tmp_qj5iq9v.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n  \
    \      if(nums[i] > 10 && nums[i] % 2 != 0 && nums[i] / 10 % 2 != 0) {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmp0s7qwjxg: /tmp/tmp0s7qwjxg.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n  \
    \      if(nums[i] > 10) {\n            int first = nums[i] / 10;\n           \
    \ int last = nums[i] % 10;\n            if(first % 2 != 0 && last % 2 != 0) {\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpsog0csq9: /tmp/tmpsog0csq9.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n\tint count = 0;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\tif\
    \ (nums[i] > 10) {\n\t\t\tif (nums[i] % 2 != 0) {\n\t\t\t\tif (nums[i] / 10 %\
    \ 2 != 0) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmp19xe3hut: /tmp/tmp19xe3hut.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(long i = 0; i < nums.size(); i++) {\n\
    \        if(nums[i] > 10 && nums[i] % 2 != 0 && nums[i] % 10 != 0) {\n       \
    \     count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpsr6cugwv: /tmp/tmpsr6cugwv.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(long i = 0; i < nums.size(); i++) {\n\
    \        if(nums[i] > 10) {\n            long first = nums[i] % 10;\n        \
    \    long last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmp66ni31eu: /tmp/tmp66ni31eu.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n\tint count = 0;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\tif\
    \ (nums[i] > 10) {\n\t\t\tif (nums[i] % 2 != 0) {\n\t\t\t\tcount++;\n\t\t\t}\n\
    \t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpoqt05tjh: /tmp/tmpoqt05tjh.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            if(nums[i] % 2 != 0) {\n             \
    \   long temp = nums[i];\n                while(temp > 10) {\n               \
    \     temp /= 10;\n                }\n                if(temp % 2 != 0) {\n  \
    \                  count++;\n                }\n            }\n        }\n   \
    \ }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmp6yndukmf: /tmp/tmp6yndukmf.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n\tlong count = 0;\n\tfor (auto num : nums) {\n\t\tif (num > 10) {\n\
    \t\t\tif (num % 2 == 1) {\n\t\t\t\tif (num % 10 == 1 || num % 10 == 3 || num %\
    \ 10 == 5 || num % 10 == 7 || num % 10 == 9) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmp05jun9oh: /tmp/tmp05jun9oh.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n\tlong count = 0;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\t\
    if (nums[i] > 10) {\n\t\t\tlong temp = nums[i];\n\t\t\tlong first = temp % 10;\n\
    \t\t\ttemp /= 10;\n\t\t\tlong last = temp % 10;\n\t\t\tif (first % 2 != 0 && last\
    \ % 2 != 0) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nint\
    \ main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmp6utv2cnb: /tmp/tmp6utv2cnb.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n  \
    \      if(nums[i] > 10) {\n            int first = nums[i] % 10;\n           \
    \ int last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0) {\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpozm0f5jf: /tmp/tmpozm0f5jf.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10 && nums[i] % 2 != 0 && nums[i] / 10 % 2 != 0) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmppufu9xxu: /tmp/tmppufu9xxu.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long temp = nums[i];\n            long\
    \ first = temp % 10;\n            long last = temp;\n            while(temp >\
    \ 0) {\n                last = temp % 10;\n                temp /= 10;\n     \
    \       }\n            if(first % 2 != 0 && last % 2 != 0) {\n               \
    \ count++;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long num = nums[i];\n            long\
    \ first = num % 10;\n            long last = num / 10;\n            if(first %\
    \ 2 != 0 && last % 2 != 0) {\n                count++;\n            }\n      \
    \  }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmp7eyh5aqu: /tmp/tmp7eyh5aqu.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long first = nums[i] / 10;\n         \
    \   long last = nums[i] % 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmp5rblgiy3: /tmp/tmp5rblgiy3.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long n = nums[i];\n            long first\
    \ = n % 10;\n            long last = n;\n            while(last >= 10) {\n   \
    \             last /= 10;\n            }\n            if(first % 2 != 0 && last\
    \ % 2 != 0) {\n                count++;\n            }\n        }\n    }\n   \
    \ return count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            int first = nums[i] / 10;\n          \
    \  int last = nums[i] % 10;\n            if(first % 2 != 0 && last % 2 != 0) {\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmp7cpsqxtn: /tmp/tmp7cpsqxtn.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == 1) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpvt3jmced: /tmp/tmpvt3jmced.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n\tint count = 0;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\tif\
    \ (nums[i] > 10) {\n\t\t\tint first = nums[i] % 10;\n\t\t\tint last = nums[i]\
    \ / 10;\n\t\t\tif (first % 2 != 0 && last % 2 != 0) {\n\t\t\t\tcount++;\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpc5qx48nn: /tmp/tmpc5qx48nn.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    // Write your code here\n    long count=0;\n    for(long i=0;i<nums.size();i++)\n\
    \    {\n        if(nums[i]>10)\n        {\n            long temp=nums[i];\n  \
    \          long first=temp%10;\n            long last=temp;\n            while(last>=10)\n\
    \            {\n                last=last/10;\n            }\n            if(first%2!=0\
    \ && last%2!=0)\n            {\n                count++;\n            }\n    \
    \    }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long temp = nums[i];\n            long\
    \ first = temp % 10;\n            long last = 0;\n            while(temp > 0)\
    \ {\n                last = temp % 10;\n                temp /= 10;\n        \
    \    }\n            if(first % 2 != 0 && last % 2 != 0) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n  // your code here\n  long count = 0;\n  for(int i = 0; i < nums.size();\
    \ i++){\n    if(nums[i] > 10){\n      long temp = nums[i];\n      int first =\
    \ temp % 10;\n      int last = temp;\n      while(last >= 10){\n        last /=\
    \ 10;\n      }\n      if(first % 2 != 0 && last % 2 != 0){\n        count++;\n\
    \      }\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n\tint count = 0;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\tif\
    \ (nums[i] > 10) {\n\t\t\tif (nums[i] % 2 != 0) {\n\t\t\t\tif (nums[i] / 10 %\
    \ 2 != 0) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmp887y_3hr: /tmp/tmp887y_3hr.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n  \
    \      if(nums[i] > 10) {\n            int first = nums[i] % 10;\n           \
    \ int last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0) {\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmp3qa9zfcn: /tmp/tmp3qa9zfcn.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n\tint count = 0;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\tif\
    \ (nums[i] > 10) {\n\t\t\tint first = nums[i] % 10;\n\t\t\tint last = nums[i]\
    \ / 10;\n\t\t\tif (first % 2 != 0 && last % 2 != 0) {\n\t\t\t\tcount++;\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpanf5t6c1: /tmp/tmpanf5t6c1.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n  int count = 0;\n  for(int i = 0; i < nums.size(); i++) {\n    if(nums[i]\
    \ > 10) {\n      if(nums[i] % 2 != 0) {\n        long temp = nums[i];\n      \
    \  while(temp > 10) {\n          temp /= 10;\n        }\n        if(temp % 2 !=\
    \ 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpab9w9l8d: /tmp/tmpab9w9l8d.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count=0;\n    for(int i=0;i<nums.size();i++)\n    {\n    \
    \    if(nums[i]>10)\n        {\n            long temp=nums[i];\n            long\
    \ last=temp%10;\n            long first=temp;\n            while(first>=10)\n\
    \            {\n                first=first/10;\n            }\n            if(last%2!=0\
    \ && first%2!=0)\n            {\n                count++;\n            }\n   \
    \     }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n  \
    \      if(nums[i] > 10) {\n            if(nums[i] % 2 != 0) {\n              \
    \  int temp = nums[i];\n                int lastDigit = temp % 10;\n         \
    \       while(temp > 0) {\n                    temp = temp / 10;\n           \
    \     }\n                if(temp % 2 != 0 && lastDigit % 2 != 0) {\n         \
    \           count++;\n                }\n            }\n        }\n    }\n   \
    \ return count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmp3tedpy63: /tmp/tmp3tedpy63.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n  \
    \      if(nums[i] > 10) {\n            int first = nums[i] % 10;\n           \
    \ int last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0) {\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpz5uigsvx: /tmp/tmpz5uigsvx.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(long i = 0; i < nums.size(); i++) {\n\
    \        if(nums[i] > 10) {\n            long n = nums[i];\n            long first\
    \ = n % 10;\n            long last = n;\n            while(last >= 10) {\n   \
    \             last /= 10;\n            }\n            if(first % 2 != 0 && last\
    \ % 2 != 0) {\n                count++;\n            }\n        }\n    }\n   \
    \ return count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10 && nums[i] % 2 != 0 && nums[i] / 10 % 2 != 0) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmp5dims_yr: /tmp/tmp5dims_yr.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n  \
    \      if(nums[i] > 10) {\n            int first = nums[i] % 10;\n           \
    \ int last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0) {\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpoe31esco: /tmp/tmpoe31esco.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            if(nums[i] % 2 != 0) {\n             \
    \   long temp = nums[i];\n                while(temp > 0) {\n                \
    \    if(temp % 10 % 2 != 0) {\n                        count++;\n            \
    \            break;\n                    }\n                    temp /= 10;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmp5t7yolgd: /tmp/tmp5t7yolgd.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            if(nums[i] % 2 != 0) {\n             \
    \   long temp = nums[i];\n                long first = temp % 10;\n          \
    \      while(temp > 0) {\n                    temp /= 10;\n                }\n\
    \                long last = temp % 10;\n                if(first % 2 != 0 &&\
    \ last % 2 != 0) {\n                    count++;\n                }\n        \
    \    }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = specialFilter;\n    assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpkvldqe7t: /tmp/tmpkvldqe7t.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n\tlong count = 0;\n\tfor (auto i : nums) {\n\t\tif (i > 10) {\n\t\t\
    \tint first = i % 10;\n\t\t\tint last = i / 10;\n\t\t\tif (first % 2 != 0 && last\
    \ % 2 != 0) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nint\
    \ main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmp7lnvu1ct: /tmp/tmp7lnvu1ct.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            if(nums[i] % 2 != 0) {\n             \
    \   long temp = nums[i];\n                long first = temp % 10;\n          \
    \      if(first % 2 != 0) {\n                    while(temp > 0) {\n         \
    \               temp = temp / 10;\n                    }\n                   \
    \ if(temp % 2 != 0) {\n                        count++;\n                    }\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmp43jf18xv: /tmp/tmp43jf18xv.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            if(nums[i] % 2 != 0 && nums[i] % 10 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpu_5fkc93: /tmp/tmpu_5fkc93.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73,\
    \ 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long>\
    \ nums) {\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n  \
    \      if(nums[i] > 10 && nums[i] % 2 != 0 && nums[i] / 10 % 2 != 0) {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  stdout: ''
  stderr: "tmpmjj39s7v: /tmp/tmpmjj39s7v.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)' failed.\n"
  exit_code: -6
  status: Exception
