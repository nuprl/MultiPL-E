language: cpp
name: HumanEval_31_is_prime
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n < 2) {\n        return false;\n \
    \   }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n       \
    \     return false;\n        }\n    }\n    return true;\n}\nint main() {\n   \
    \ auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    for (long\
    \ i = 2; i < n; i++) {\n        if (n % i == 0) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n < 2) {\n        return false;\n \
    \   }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n       \
    \     return false;\n        }\n    }\n    return true;\n}\nint main() {\n   \
    \ auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    if (n <= 3) {\n        return true;\n    }\n    if (n % 2 == 0 ||\
    \ n % 3 == 0) {\n        return false;\n    }\n    for (int i = 5; i * i <= n;\
    \ i = i + 6) {\n        if (n % i == 0 || n % (i + 2) == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) {\n        return false;\n\
    \    }\n    if (n == 2) {\n        return true;\n    }\n    if (n % 2 == 0) {\n\
    \        return false;\n    }\n    for (long i = 3; i < n; i += 2) {\n       \
    \ if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n\tif (n == 1) {\n\t\treturn false;\n\t}\n\t\
    for (long i = 2; i <= sqrt(n); i++) {\n\t\tif (n % i == 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n < 2) {\n        return false;\n \
    \   }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n       \
    \     return false;\n        }\n    }\n    return true;\n}\nint main() {\n   \
    \ auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n < 2) {\n        return false;\n \
    \   }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n       \
    \     return false;\n        }\n    }\n    return true;\n}\nint main() {\n   \
    \ auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n < 2) {\n        return false;\n \
    \   }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n       \
    \     return false;\n        }\n    }\n    return true;\n}\nint main() {\n   \
    \ auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) {\n        return false;\n\
    \    }\n    if (n == 2) {\n        return true;\n    }\n    for (long i = 2; i\
    \ < n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n < 2) {\n        return false;\n \
    \   }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n       \
    \     return false;\n        }\n    }\n    return true;\n}\nint main() {\n   \
    \ auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    // TODO: implement this function\n    if(n==1)\n\
    \        return false;\n    if(n==2)\n        return true;\n    if(n%2==0)\n \
    \       return false;\n    for(int i=3;i<=sqrt(n);i+=2)\n    {\n        if(n%i==0)\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    if (n <= 3) {\n        return true;\n    }\n    if (n % 2 == 0 ||\
    \ n % 3 == 0) {\n        return false;\n    }\n    for (int i = 5; i * i <= n;\
    \ i = i + 6) {\n        if (n % i == 0 || n % (i + 2) == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n <=\
    \ 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int\
    \ i = 5; i * i <= n; i = i + 6)\n        if (n % i == 0 || n % (i + 2) == 0)\n\
    \            return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n < 2) {\n        return false;\n \
    \   }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n       \
    \     return false;\n        }\n    }\n    return true;\n}\nint main() {\n   \
    \ auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    for (long i = 3; i <\
    \ n; i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    if (n <= 3) {\n        return true;\n    }\n    if (n % 2 == 0 ||\
    \ n % 3 == 0) {\n        return false;\n    }\n    for (int i = 5; i * i <= n;\
    \ i = i + 6) {\n        if (n % i == 0 || n % (i + 2) == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 2) {\n        return true;\n \
    \   }\n    if (n % 2 == 0) {\n        return false;\n    }\n    for (long i =\
    \ 3; i <= sqrt(n); i += 2) {\n        if (n % i == 0) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_s77nrs0: /tmp/tmp_s77nrs0.cpp:40: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    if (n <= 3) {\n        return true;\n    }\n    if (n % 2 == 0 ||\
    \ n % 3 == 0) {\n        return false;\n    }\n    for (int i = 5; i * i <= n;\
    \ i = i + 6) {\n        if (n % i == 0 || n % (i + 2) == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    for (long i = 3; i <=\
    \ sqrt(n); i += 2) {\n        if (n % i == 0) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    if (n <= 3) {\n        return true;\n    }\n    if (n % 2 == 0 ||\
    \ n % 3 == 0) {\n        return false;\n    }\n    for (int i = 5; i * i <= n;\
    \ i = i + 6) {\n        if (n % i == 0 || n % (i + 2) == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    if (n <= 3) {\n        return true;\n    }\n    if (n % 2 == 0 ||\
    \ n % 3 == 0) {\n        return false;\n    }\n    for (int i = 5; i * i <= n;\
    \ i = i + 6) {\n        if (n % i == 0 || n % (i + 2) == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n < 2) {\n        return false;\n \
    \   }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n       \
    \     return false;\n        }\n    }\n    return true;\n}\nint main() {\n   \
    \ auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n <=\
    \ 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int\
    \ i = 5; i * i <= n; i = i + 6)\n        if (n % i == 0 || n % (i + 2) == 0)\n\
    \            return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    if (n <= 3) {\n        return true;\n    }\n    if (n % 2 == 0 ||\
    \ n % 3 == 0) {\n        return false;\n    }\n    for (int i = 5; i * i <= n;\
    \ i = i + 6) {\n        if (n % i == 0 || n % (i + 2) == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n <=\
    \ 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int\
    \ i = 5; i * i <= n; i = i + 6)\n        if (n % i == 0 || n % (i + 2) == 0)\n\
    \            return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if (n <= 1) {\n    return false;\n  }\n \
    \ for (long i = 2; i < n; i++) {\n    if (n % i == 0) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n <=\
    \ 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int\
    \ i = 5; i * i <= n; i = i + 6)\n        if (n % i == 0 || n % (i + 2) == 0)\n\
    \            return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    for (long\
    \ i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    if (n <= 3) {\n        return true;\n    }\n    if (n % 2 == 0 ||\
    \ n % 3 == 0) {\n        return false;\n    }\n    for (int i = 5; i * i <= n;\
    \ i = i + 6) {\n        if (n % i == 0 || n % (i + 2) == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    if (n <= 3) {\n        return true;\n    }\n    if (n % 2 == 0 ||\
    \ n % 3 == 0) {\n        return false;\n    }\n    for (int i = 5; i * i <= n;\
    \ i = i + 6) {\n        if (n % i == 0 || n % (i + 2) == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  // Fill in the function\n  if(n==1)\n  {\n\
    \    return false;\n  }\n  for(int i=2;i<=sqrt(n);i++)\n  {\n    if(n%i==0)\n\
    \    {\n      return false;\n    }\n  }\n  return true;\n}\nint main() {\n   \
    \ auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) {\n        return false;\n\
    \    }\n    if (n == 2) {\n        return true;\n    }\n    if (n % 2 == 0) {\n\
    \        return false;\n    }\n    for (long i = 3; i <= sqrt(n); i += 2) {\n\
    \        if (n % i == 0) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n <=\
    \ 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int\
    \ i = 5; i * i <= n; i = i + 6)\n        if (n % i == 0 || n % (i + 2) == 0)\n\
    \            return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) {\n        return false;\n\
    \    }\n    if (n == 2) {\n        return true;\n    }\n    if (n % 2 == 0) {\n\
    \        return false;\n    }\n    for (long i = 3; i < n; i += 2) {\n       \
    \ if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n < 2) {\n        return false;\n \
    \   }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n       \
    \     return false;\n        }\n    }\n    return true;\n}\nint main() {\n   \
    \ auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) {\n        return false;\n\
    \    }\n    if (n == 2) {\n        return true;\n    }\n    if (n % 2 == 0) {\n\
    \        return false;\n    }\n    for (long i = 3; i < n; i += 2) {\n       \
    \ if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    // TODO: Implement me!\n    if(n<=1)\n\
    \    {\n        return false;\n    }\n    for(int i=2;i<=n/2;i++)\n    {\n   \
    \     if(n%i==0)\n        {\n            return false;\n        }\n    }\n   \
    \ return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n < 2) {\n        return false;\n \
    \   }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n       \
    \     return false;\n        }\n    }\n    return true;\n}\nint main() {\n   \
    \ auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    if (n <= 3) {\n        return true;\n    }\n    if (n % 2 == 0 ||\
    \ n % 3 == 0) {\n        return false;\n    }\n    for (int i = 5; i * i <= n;\
    \ i = i + 6) {\n        if (n % i == 0 || n % (i + 2) == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n\tif (n == 1) {\n\t\treturn false;\n\t}\n\t\
    for (long i = 2; i < n; i++) {\n\t\tif (n % i == 0) {\n\t\t\treturn false;\n\t\
    \t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n <=\
    \ 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int\
    \ i = 5; i * i <= n; i = i + 6) {\n        if (n % i == 0 || n % (i + 2) == 0)\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    if (n <= 3) {\n        return true;\n    }\n    if (n % 2 == 0 ||\
    \ n % 3 == 0) {\n        return false;\n    }\n    for (int i = 5; i * i <= n;\
    \ i = i + 6) {\n        if (n % i == 0 || n % (i + 2) == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    if (n <= 3) {\n        return true;\n    }\n    if (n % 2 == 0 ||\
    \ n % 3 == 0) {\n        return false;\n    }\n    for (int i = 5; i * i <= n;\
    \ i = i + 6) {\n        if (n % i == 0 || n % (i + 2) == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) {\n        return false;\n\
    \    }\n    if (n == 2) {\n        return true;\n    }\n    if (n % 2 == 0) {\n\
    \        return false;\n    }\n    for (long i = 3; i < n; i += 2) {\n       \
    \ if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    // Your code here\n    if(n==1)\n     \
    \   return false;\n    if(n==2)\n        return true;\n    for(int i=2;i<=sqrt(n);i++)\n\
    \    {\n        if(n%i==0)\n            return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    if (n <= 3) {\n        return true;\n    }\n    if (n % 2 == 0 ||\
    \ n % 3 == 0) {\n        return false;\n    }\n    for (int i = 5; i * i <= n;\
    \ i = i + 6) {\n        if (n % i == 0 || n % (i + 2) == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n \
    \           return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) {\n        return false;\n\
    \    }\n    if (n == 2) {\n        return true;\n    }\n    if (n % 2 == 0) {\n\
    \        return false;\n    }\n    for (long i = 3; i < n; i += 2) {\n       \
    \ if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n < 2) {\n        return false;\n \
    \   }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n       \
    \     return false;\n        }\n    }\n    return true;\n}\nint main() {\n   \
    \ auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n <=\
    \ 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int\
    \ i = 5; i * i <= n; i = i + 6)\n        if (n % i == 0 || n % (i + 2) == 0)\n\
    \            return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    if (n <= 3) {\n        return true;\n    }\n    if (n % 2 == 0 ||\
    \ n % 3 == 0) {\n        return false;\n    }\n    for (int i = 5; i * i <= n;\
    \ i = i + 6) {\n        if (n % i == 0 || n % (i + 2) == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n < 2) {\n        return false;\n \
    \   }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n       \
    \     return false;\n        }\n    }\n    return true;\n}\nint main() {\n   \
    \ auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) {\n        return false;\n\
    \    }\n    if (n == 2) {\n        return true;\n    }\n    if (n % 2 == 0) {\n\
    \        return false;\n    }\n    for (long i = 3; i <= sqrt(n); i += 2) {\n\
    \        if (n % i == 0) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n < 2) {\n        return false;\n \
    \   }\n    if (n == 2) {\n        return true;\n    }\n    if (n % 2 == 0) {\n\
    \        return false;\n    }\n    for (long i = 3; i <= sqrt(n); i += 2) {\n\
    \        if (n % i == 0) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083787
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    if (n <= 3) {\n        return true;\n    }\n    if (n % 2 == 0 ||\
    \ n % 3 == 0) {\n        return false;\n    }\n    for (int i = 5; i * i <= n;\
    \ i = i + 6) {\n        if (n % i == 0 || n % (i + 2) == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n \
    \           return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if (n == 1) return false;\n  if (n == 2)\
    \ return true;\n  if (n % 2 == 0) return false;\n  for (long i = 3; i <= sqrt(n);\
    \ i += 2) {\n    if (n % i == 0) return false;\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083787
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n < 2) {\n        return false;\n \
    \   }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n       \
    \     return false;\n        }\n    }\n    return true;\n}\nint main() {\n   \
    \ auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    if (n <= 3) {\n        return true;\n    }\n    if (n % 2 == 0 ||\
    \ n % 3 == 0) {\n        return false;\n    }\n    for (int i = 5; i * i <= n;\
    \ i = i + 6) {\n        if (n % i == 0 || n % (i + 2) == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n <=\
    \ 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int\
    \ i = 5; i * i <= n; i = i + 6)\n        if (n % i == 0 || n % (i + 2) == 0)\n\
    \            return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    if (n <= 3) {\n        return true;\n    }\n    if (n % 2 == 0 ||\
    \ n % 3 == 0) {\n        return false;\n    }\n    for (int i = 5; i * i <= n;\
    \ i = i + 6) {\n        if (n % i == 0 || n % (i + 2) == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n <=\
    \ 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int\
    \ i = 5; i * i <= n; i = i + 6)\n        if (n % i == 0 || n % (i + 2) == 0)\n\
    \            return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if (n <= 1) {\n    return false;\n  }\n \
    \ for (long i = 2; i < n; i++) {\n    if (n % i == 0) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) {\n        return false;\n\
    \    }\n    if (n == 2) {\n        return true;\n    }\n    if (n % 2 == 0) {\n\
    \        return false;\n    }\n    for (long i = 3; i <= sqrt(n); i += 2) {\n\
    \        if (n % i == 0) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) {\n        return false;\n\
    \    }\n    if (n == 2) {\n        return true;\n    }\n    if (n % 2 == 0) {\n\
    \        return false;\n    }\n    for (long i = 3; i <= sqrt(n); i += 2) {\n\
    \        if (n % i == 0) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n <=\
    \ 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int\
    \ i = 5; i * i <= n; i = i + 6)\n        if (n % i == 0 || n % (i + 2) == 0)\n\
    \            return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    for (long i = 3; i <=\
    \ sqrt(n); i += 2) {\n        if (n % i == 0) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n <=\
    \ 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int\
    \ i = 5; i * i <= n; i = i + 6)\n        if (n % i == 0 || n % (i + 2) == 0)\n\
    \            return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    if (n <= 3) {\n        return true;\n    }\n    if (n % 2 == 0 ||\
    \ n % 3 == 0) {\n        return false;\n    }\n    for (int i = 5; i * i <= n;\
    \ i = i + 6) {\n        if (n % i == 0 || n % (i + 2) == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n==1) return false;\n    if (n==2)\
    \ return true;\n    if (n%2==0) return false;\n    for (int i=3; i<=sqrt(n); i+=2)\
    \ {\n        if (n%i==0) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083787
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    if (n <= 3) {\n        return true;\n    }\n    if (n % 2 == 0 ||\
    \ n % 3 == 0) {\n        return false;\n    }\n    for (int i = 5; i * i <= n;\
    \ i = i + 6) {\n        if (n % i == 0 || n % (i + 2) == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    // Your code here\n    if(n == 1)\n   \
    \     return false;\n    for(int i = 2; i <= sqrt(n); i++)\n    {\n        if(n\
    \ % i == 0)\n            return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083787
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n \
    \           return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    for (long\
    \ i = 2; i < n; i++) {\n        if (n % i == 0) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n <=\
    \ 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int\
    \ i = 5; i * i <= n; i = i + 6)\n        if (n % i == 0 || n % (i + 2) == 0)\n\
    \            return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) {\n        return false;\n\
    \    }\n    if (n == 2) {\n        return true;\n    }\n    if (n % 2 == 0) {\n\
    \        return false;\n    }\n    for (long i = 3; i < n; i += 2) {\n       \
    \ if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n <=\
    \ 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int\
    \ i = 5; i * i <= n; i = i + 6)\n        if (n % i == 0 || n % (i + 2) == 0)\n\
    \            return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083786
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660083785
