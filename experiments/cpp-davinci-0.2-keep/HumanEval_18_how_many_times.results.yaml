language: cpp
name: HumanEval_18_how_many_times
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    int i = 0;\n    while (i\
    \ < string.length()) {\n        if (string.substr(i, substring.length()) == substring)\
    \ {\n            count++;\n            i += substring.length();\n        } else\
    \ {\n            i++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: Exception
  stderr: 'tmpwmflb1kc: /tmp/tmpwmflb1kc.cpp:27: int main(): Assertion `candidate(("cacacacac"),
    ("cac")) == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    long string_size = string.size();\n\
    \    long substring_size = substring.size();\n    for (long i = 0; i < string_size;\
    \ i++) {\n        if (string[i] == substring[0]) {\n            bool found = true;\n\
    \            for (long j = 1; j < substring_size; j++) {\n                if (string[i\
    \ + j] != substring[j]) {\n                    found = false;\n              \
    \      break;\n                }\n            }\n            if (found) {\n  \
    \              count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\
    \"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n\
    \    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
    john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n\tlong count = 0;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string.substr(i, substring.length()) == substring) {\n\t\t\t\
    count++;\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ ++i) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (long i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (long i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (long i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    int index = 0;\n    while(index\
    \ != -1) {\n        index = string.find(substring, index);\n        if(index !=\
    \ -1) {\n            count++;\n            index++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\
    \"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n\
    \    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
    john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    if(string.length() < substring.length()) return\
    \ 0;\n    long count = 0;\n    for(int i = 0; i < string.length() - substring.length()\
    \ + 1; i++) {\n        if(string.substr(i, substring.length()) == substring) {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    if(string.empty() || substring.empty()) return\
    \ 0;\n    long count = 0;\n    for(int i = 0; i < string.size(); i++) {\n    \
    \    if(string[i] == substring[0]) {\n            int j = 0;\n            while(j\
    \ < substring.size() && string[i+j] == substring[j]) {\n                j++;\n\
    \            }\n            if(j == substring.size()) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) == (0));\n\
    \    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n\tlong count = 0;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string.substr(i, substring.length()) == substring) {\n\t\t\t\
    count++;\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    // your code here\n    long count = 0;\n    int\
    \ len = substring.length();\n    for(int i = 0; i < string.length(); i++) {\n\
    \        if(string.substr(i, len) == substring) {\n            count++;\n    \
    \    }\n    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    long sub_len = substring.length();\n\
    \    long str_len = string.length();\n    for(long i = 0; i < str_len; i++) {\n\
    \        if(string.substr(i, sub_len) == substring) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n  long count = 0;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    if (string.substr(i, substring.length()) == substring) {\n     \
    \ count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate =\
    \ how_many_times;\n    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"\
    xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\"\
    )) == (4));\n    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (long i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    long sub_len = substring.length();\n\
    \    long str_len = string.length();\n    for(long i = 0; i < str_len; i++) {\n\
    \        if(string.substr(i, sub_len) == substring) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    // your code goes here\n    long count = 0;\n\
    \    long pos = 0;\n    while(pos != -1) {\n        pos = string.find(substring,\
    \ pos);\n        if(pos != -1) {\n            count++;\n            pos++;\n \
    \       }\n    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (long i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n\
    // >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string,\
    \ std::string substring) {\n    long count = 0;\n    for (long i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085155
