language: cpp
name: HumanEval_77_iscube
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long x = std::cbrt(a);\n    return x*x*x == a;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    // your code here\n    if(a<0)\n        a=-a;\n    if(a==0)\n    \
    \    return true;\n    long i=1;\n    while(i*i*i<=a)\n    {\n        if(i*i*i==a)\n\
    \            return true;\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return\
    \ true;\n    }\n    long x = 1;\n    while (x * x * x < a) {\n        x++;\n \
    \   }\n    return x * x * x == a;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) return true;\n    if (a < 0) a = -a;\n    long x = 1;\n\
    \    while (x * x * x < a) x++;\n    return x * x * x == a;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\t// your code here\n\treturn (cbrt(a) == floor(cbrt(a)));\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) {\n        return true;\n    }\n    if (a < 0) {\n   \
    \     a = -a;\n    }\n    long i = 1;\n    while (i * i * i <= a) {\n        if\
    \ (i * i * i == a) {\n            return true;\n        }\n        i++;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return\
    \ true;\n    }\n    long i = 1;\n    while (i * i * i <= a) {\n        if (i *\
    \ i * i == a) {\n            return true;\n        }\n        i++;\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) {\n        return true;\n    }\n    if (a < 0) {\n   \
    \     a = -a;\n    }\n    long i = 1;\n    while (i * i * i <= a) {\n        if\
    \ (i * i * i == a) {\n            return true;\n        }\n        i++;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    // your code here\n    if(a==0)\n        return true;\n    if(a<0)\n\
    \        a=-a;\n    long i=1;\n    while(i*i*i<=a)\n    {\n        if(i*i*i==a)\n\
    \            return true;\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\tif (a == 0) {\n\t\treturn true;\n\t}\n\tif (a < 0) {\n\t\ta = -a;\n\t\
    }\n\tlong i = 1;\n\twhile (i*i*i <= a) {\n\t\tif (i*i*i == a) {\n\t\t\treturn\
    \ true;\n\t\t}\n\t\ti++;\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return\
    \ true;\n    }\n    long i = 1;\n    while (i * i * i <= a) {\n        if (i *\
    \ i * i == a) {\n            return true;\n        }\n        i++;\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    // Write your code here\n    if(a==0)\n        return true;\n    if(a<0)\n\
    \        a=-a;\n    long i=1;\n    while(i*i*i<=a)\n    {\n        if(i*i*i==a)\n\
    \            return true;\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return\
    \ true;\n    }\n    long cube = 1;\n    while (cube <= a) {\n        if (cube\
    \ == a) {\n            return true;\n        }\n        cube = cube + 1;\n   \
    \     cube = cube * cube * cube;\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp7_ovnzpb: /tmp/tmp7_ovnzpb.cpp:35: int main(): Assertion `candidate((64))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n  if (a < 0) {\n    a = -a;\n  }\n  if (a == 0) {\n    return true;\n\
    \  }\n  long i = 1;\n  while (i * i * i <= a) {\n    if (i * i * i == a) {\n \
    \     return true;\n    }\n    i++;\n  }\n  return false;\n}\nint main() {\n \
    \   auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long x = std::cbrt(a);\n    return x*x*x == a;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long b = std::cbrt(a);\n    return a == b * b * b;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) return true;\n    if (a < 0) a = -a;\n    long i = 1;\n\
    \    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i == a;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0)\n        a = -a;\n    if (a == 0)\n        return true;\n\
    \    long x = 1;\n    while (x * x * x < a)\n        x++;\n    return x * x *\
    \ x == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    // Write your code here\n    if(a == 0) return true;\n    if(a < 0)\
    \ a = -a;\n    long i = 1;\n    while(i*i*i <= a) {\n        if(i*i*i == a) return\
    \ true;\n        i++;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\tif (a == 0) {\n\t\treturn true;\n\t}\n\tif (a < 0) {\n\t\ta = -a;\n\t\
    }\n\tlong i = 1;\n\twhile (i*i*i <= a) {\n\t\tif (i*i*i == a) {\n\t\t\treturn\
    \ true;\n\t\t}\n\t\ti++;\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    // Write your code here\n    if(a==0)\n        return true;\n    if(a<0)\n\
    \        a=a*-1;\n    long i=1;\n    while(i*i*i<=a)\n    {\n        if(i*i*i==a)\n\
    \            return true;\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0) {\n        a = -a;\n    }\n    long x = 0;\n    while (x\
    \ * x * x < a) {\n        x++;\n    }\n    return x * x * x == a;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) {\n        return true;\n    }\n    if (a < 0) {\n   \
    \     a = -a;\n    }\n    long i = 1;\n    while (i * i * i <= a) {\n        if\
    \ (i * i * i == a) {\n            return true;\n        }\n        i++;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    return a >= 0 && (long)cbrt(a) * (long)cbrt(a) * (long)cbrt(a) ==\
    \ a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp89593e69: /tmp/tmp89593e69.cpp:20: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n  if (a == 0) {\n    return true;\n  }\n  if (a < 0) {\n    a = -a;\n\
    \  }\n  long i = 1;\n  while (i * i * i <= a) {\n    if (i * i * i == a) {\n \
    \     return true;\n    }\n    i++;\n  }\n  return false;\n}\nint main() {\n \
    \   auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long b = std::cbrt(a);\n    return b*b*b == a;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long i = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n  \
    \  return i * i * i == a;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpy1dbixhs: /tmp/tmpy1dbixhs.cpp:24: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080826
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    return a == 0 || (a > 0 && (long)pow(round(pow(a, 1.0 / 3)), 3) ==\
    \ a);\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpd2_8zfpr: /tmp/tmpd2_8zfpr.cpp:20: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) return true;\n    if (a < 0) a = -a;\n    long x = 1;\n\
    \    while (x * x * x < a) x++;\n    return x * x * x == a;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) return true;\n    if (a < 0) a = -a;\n    long x = 1;\n\
    \    while (x * x * x < a) x++;\n    return x * x * x == a;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) return true;\n    if (a < 0) a = -a;\n    long x = pow(a,\
    \ 1.0/3);\n    return x*x*x == a;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpj9tk5dx_: /tmp/tmpj9tk5dx_.cpp:24: int main(): Assertion `candidate((64))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080828
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    // Write your code here\n    if(a==0)\n        return true;\n    if(a<0)\n\
    \        a=-a;\n    long i=1;\n    while(i*i*i<=a)\n    {\n        if(i*i*i==a)\n\
    \            return true;\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long b = std::cbrt(a);\n    return a == b * b * b;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    // Write your code here\n    return cbrt(a) == floor(cbrt(a));\n}\n\
    int main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080828
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) return true;\n    if (a < 0) a = -a;\n    long x = 1;\n\
    \    while (x * x * x < a) x++;\n    return x * x * x == a;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\treturn a == 0 || a == 1 || a == -1 || (a > 0 && (int)cbrt(a) == cbrt(a));\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080828
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    // Write your code here\n    if(a==0) return true;\n    if(a<0) a*=-1;\n\
    \    long i=1;\n    while(i*i*i<=a)\n    {\n        if(i*i*i==a) return true;\n\
    \        i++;\n    }\n    return false;\n}\nint main() {\n    auto candidate =\
    \ iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) ==\
    \ (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080828
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    return a == 0 || a == 1 || a == -1 || (a > 0 && (long)pow(floor(pow(a,\
    \ 1.0/3)), 3) == a);\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpsqv74b2j: /tmp/tmpsqv74b2j.cpp:21: int main(): Assertion `candidate((64))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080828
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0)\n        a = -a;\n    long i = 0;\n    while (i * i * i\
    \ < a)\n        i++;\n    return i * i * i == a;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080828
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long b = std::cbrt(a);\n    return a == b * b * b;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    return (a>=0 && cbrt(a)==floor(cbrt(a)));\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp4_7__uz2: /tmp/tmp4_7__uz2.cpp:20: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080828
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n  if (a == 0) return true;\n  if (a < 0) a = -a;\n  long b = std::cbrt(a);\n\
    \  return b * b * b == a;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080828
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0)\n        a = -a;\n    if (a == 0)\n        return true;\n\
    \    long i = 1;\n    while (i * i * i < a)\n        i++;\n    return i * i *\
    \ i == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080828
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return\
    \ true;\n    }\n    long i = 1;\n    while (i * i * i <= a) {\n        if (i *\
    \ i * i == a) {\n            return true;\n        }\n        i++;\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long i = 1;\n    while(i*i*i < a) {\n        i++;\n    }\n    return\
    \ (i*i*i == a);\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpfgr86bgy: /tmp/tmpfgr86bgy.cpp:24: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080828
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) return true;\n    if (a < 0) a = -a;\n    long x = 1;\n\
    \    while (x * x * x < a) x++;\n    return x * x * x == a;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\tif (a == 0) return true;\n\tif (a < 0) a = -a;\n\tlong x = 1;\n\twhile\
    \ (x*x*x < a) x++;\n\treturn x*x*x == a;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080828
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n  return a>=0 && pow(round(pow(a,1.0/3)),3)==a;\n}\nint main() {\n   \
    \ auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpo792w6vh: /tmp/tmpo792w6vh.cpp:20: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080828
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    // Write your code here\n    if(a<0)\n        a=-a;\n    if(a==0)\n\
    \        return true;\n    long i=1;\n    while(i*i*i<=a)\n    {\n        if(i*i*i==a)\n\
    \            return true;\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080829
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\tassert(a >= 0);\n\tif (a == 0) return true;\n\tlong x = 1;\n\twhile\
    \ (x*x*x < a) {\n\t\tx++;\n\t}\n\treturn x*x*x == a;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmptcenba4x: /tmp/tmptcenba4x.cpp:14: bool iscube(long int): Assertion
    `a >= 0'' failed.

    '
  stdout: ''
  timestamp: 1660080828
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\treturn a == 0 || a == 1 || a == -1 || (a > 0 && (long)pow(floor(pow(a,\
    \ 1.0 / 3)), 3) == a);\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpyegbtui0: /tmp/tmpyegbtui0.cpp:21: int main(): Assertion `candidate((64))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080828
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) return true;\n    if (a < 0) a = -a;\n    long i = 1;\n\
    \    while (i * i * i < a) i++;\n    return i * i * i == a;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080828
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) return true;\n    if (a < 0) a = -a;\n    long i = 1;\n\
    \    while (i * i * i < a) i++;\n    return i * i * i == a;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080828
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n  return (a > 0 && cbrt(a) == floor(cbrt(a)));\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmptlqpsqoc: /tmp/tmptlqpsqoc.cpp:20: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080828
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\tif (a == 0) return true;\n\tif (a < 0) a = -a;\n\tlong x = 1;\n\twhile\
    \ (x*x*x < a) {\n\t\tx++;\n\t}\n\treturn x*x*x == a;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080829
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return\
    \ true;\n    }\n    long i = 1;\n    while (i * i * i <= a) {\n        if (i *\
    \ i * i == a) {\n            return true;\n        }\n        i++;\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n  if (a < 0) {\n    a = -a;\n  }\n  if (a == 0) {\n    return true;\n\
    \  }\n  long i = 1;\n  while (i * i * i <= a) {\n    if (i * i * i == a) {\n \
    \     return true;\n    }\n    i++;\n  }\n  return false;\n}\nint main() {\n \
    \   auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    // Write your code here\n    if(a==0)\n        return true;\n    if(a<0)\n\
    \        a=-a;\n    long i=1;\n    while(i*i*i<=a)\n    {\n        if(i*i*i==a)\n\
    \            return true;\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n  return a >= 0 && (long)pow(round(pow(a, 1.0 / 3)), 3) == a;\n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpmjtz_yez: /tmp/tmpmjtz_yez.cpp:20: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080828
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) return true;\n    if (a < 0) a = -a;\n    long i = 1;\n\
    \    while (i * i * i < a) i++;\n    return i * i * i == a;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080828
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\tlong b = a;\n\tif (a < 0) {\n\t\tb = -a;\n\t}\n\tlong c = 0;\n\twhile\
    \ (c * c * c < b) {\n\t\tc++;\n\t}\n\treturn c * c * c == b;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080829
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long x = std::cbrt(a);\n    return a == x * x * x;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080828
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\treturn a == 0 || a == 1 || a == -1 || (long)pow(round(pow(a, 1.0 / 3)),\
    \ 3) == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080828
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return\
    \ true;\n    }\n    long i = 1;\n    while (i * i * i <= a) {\n        if (i *\
    \ i * i == a) {\n            return true;\n        }\n        i++;\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    return a >= 0 && (long)round(pow(a, 1.0 / 3)) * (long)round(pow(a,\
    \ 1.0 / 3)) * (long)round(pow(a, 1.0 / 3)) == a;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpd13aoqcw: /tmp/tmpd13aoqcw.cpp:20: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080828
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    return a >= 0 && (long)(cbrt(a) + 0.5) * (long)(cbrt(a) + 0.5) * (long)(cbrt(a)\
    \ + 0.5) == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpryq3so_z: /tmp/tmpryq3so_z.cpp:20: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080831
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\treturn a == 0 || (a > 0 && (long)pow(floor(pow(a, 1.0 / 3)), 3) == a);\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpak82p8gd: /tmp/tmpak82p8gd.cpp:20: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long x = std::cbrt(a);\n    return x*x*x == a;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\tif (a < 0) {\n\t\ta = -a;\n\t}\n\tif (a == 0) {\n\t\treturn true;\n\t\
    }\n\tlong i = 1;\n\twhile (i * i * i <= a) {\n\t\tif (i * i * i == a) {\n\t\t\t\
    return true;\n\t\t}\n\t\ti++;\n\t}\n\treturn false;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) return true;\n    if (a < 0) a = -a;\n    long i = 1;\n\
    \    while (i * i * i < a) i++;\n    return i * i * i == a;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080828
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return\
    \ true;\n    }\n    long i = 1;\n    while (i*i*i <= a) {\n        if (i*i*i ==\
    \ a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080831
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) return true;\n    if (a < 0) a = -a;\n    long x = pow(a,\
    \ 1.0/3);\n    return x*x*x == a;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpj9tk5dx_: /tmp/tmpj9tk5dx_.cpp:24: int main(): Assertion `candidate((64))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080828
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return\
    \ true;\n    }\n    long i = 1;\n    while (i * i * i <= a) {\n        if (i *\
    \ i * i == a) {\n            return true;\n        }\n        i++;\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) return true;\n    if (a < 0) a = -a;\n    long i = 0;\n\
    \    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i == a;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return\
    \ true;\n    }\n    for (long i = 1; i * i * i <= a; i++) {\n        if (i * i\
    \ * i == a) {\n            return true;\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080831
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    return a >= 0 && (long)round(cbrt(a)) * (long)round(cbrt(a)) * (long)round(cbrt(a))\
    \ == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpzcgyv5d5: /tmp/tmpzcgyv5d5.cpp:20: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080831
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    return a == 0 || (a > 0 && cbrt(a) == floor(cbrt(a)));\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpv3iin6kz: /tmp/tmpv3iin6kz.cpp:20: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) {\n        return true;\n    }\n    if (a < 0) {\n   \
    \     a = -a;\n    }\n    long i = 1;\n    while (i * i * i <= a) {\n        if\
    \ (i * i * i == a) {\n            return true;\n        }\n        i++;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) return true;\n    if (a < 0) a = -a;\n    long x = 1;\n\
    \    while (x * x * x < a) x++;\n    return x * x * x == a;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n  if (a == 0) return true;\n  if (a < 0) a = -a;\n  long i = 1;\n  while\
    \ (i * i * i < a) i++;\n  return i * i * i == a;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long x = a;\n    if (a < 0) {\n        x = -a;\n    }\n    for (long\
    \ i = 0; i <= x; i++) {\n        if (i * i * i == x) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return\
    \ true;\n    }\n    int i = 1;\n    while (i * i * i <= a) {\n        if (i *\
    \ i * i == a) {\n            return true;\n        }\n        i++;\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080831
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\treturn a == 0 || a == 1 || a == -1 || (a > 0 && (long)pow(floor(pow(a,\
    \ 1.0 / 3)), 3) == a);\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpyegbtui0: /tmp/tmpyegbtui0.cpp:21: int main(): Assertion `candidate((64))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080828
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return\
    \ true;\n    }\n    long i = 1;\n    while (i * i * i <= a) {\n        if (i *\
    \ i * i == a) {\n            return true;\n        }\n        i++;\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return\
    \ true;\n    }\n    long i = 1;\n    while (i * i * i <= a) {\n        if (i *\
    \ i * i == a) {\n            return true;\n        }\n        i++;\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\tif (a < 0) {\n\t\ta = -a;\n\t}\n\tlong x = 0;\n\twhile (x * x * x <\
    \ a) {\n\t\tx++;\n\t}\n\treturn x * x * x == a;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\tif (a == 0) return true;\n\tif (a < 0) a = -a;\n\tlong b = std::cbrt(a);\n\
    \treturn b * b * b == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\tif (a == 0) return true;\n\tif (a < 0) a = -a;\n\tlong x = 1;\n\twhile\
    \ (x*x*x < a) x++;\n\treturn x*x*x == a;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080828
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long x = std::cbrt(a);\n    return x*x*x == a;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return\
    \ true;\n    }\n    long i = 1;\n    while (i * i * i <= a) {\n        if (i *\
    \ i * i == a) {\n            return true;\n        }\n        i++;\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return\
    \ true;\n    }\n    long i = 1;\n    while (i * i * i <= a) {\n        if (i *\
    \ i * i == a) {\n            return true;\n        }\n        i++;\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) return true;\n    if (a < 0) a = -a;\n    long x = 1;\n\
    \    while (x * x * x < a) x++;\n    return x * x * x == a;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\tif (a == 0) {\n\t\treturn true;\n\t}\n\tif (a < 0) {\n\t\ta = -a;\n\t\
    }\n\tlong b = 1;\n\twhile (b * b * b < a) {\n\t\tb++;\n\t}\n\treturn b * b * b\
    \ == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long b = std::cbrt(a);\n    return a == b * b * b;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int i;\n    for(i=1;i*i*i<=a;i++){\n        if(i*i*i==a)\n\
    \            return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpqopi90rm: /tmp/tmpqopi90rm.cpp:25: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\tif (a == 0) return true;\n\tif (a < 0) a = -a;\n\tlong b = std::cbrt(a);\n\
    \treturn b * b * b == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return\
    \ true;\n    }\n    long i = 1;\n    while (i * i * i <= a) {\n        if (i *\
    \ i * i == a) {\n            return true;\n        }\n        i++;\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) {\n        return true;\n    }\n    if (a < 0) {\n   \
    \     a = -a;\n    }\n    long i = 1;\n    while (i * i * i <= a) {\n        if\
    \ (i * i * i == a) {\n            return true;\n        }\n        i++;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) {\n        return true;\n    }\n    if (a < 0) {\n   \
    \     a = -a;\n    }\n    long i = 1;\n    while (i * i * i <= a) {\n        if\
    \ (i * i * i == a) {\n            return true;\n        }\n        i++;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0) {\n        a = -a;\n    }\n    for (long i = 0; i * i *\
    \ i <= a; i++) {\n        if (i * i * i == a) {\n            return true;\n  \
    \      }\n    }\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080831
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0) a = -a;\n    long x = (long)pow(a, 1.0/3);\n    return\
    \ x*x*x == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpjw7wg27m: /tmp/tmpjw7wg27m.cpp:23: int main(): Assertion `candidate((64))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) return true;\n    if (a < 0) a = -a;\n    long x = 1;\n\
    \    while (x * x * x < a) {\n        x++;\n    }\n    return x * x * x == a;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080831
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n  return a>=0 && (long)round(pow(a,1.0/3))*(long)round(pow(a,1.0/3))*(long)round(pow(a,1.0/3))==a;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpxlcqdgxm: /tmp/tmpxlcqdgxm.cpp:20: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) return true;\n    if (a < 0) a = -a;\n    long x = 1;\n\
    \    while (x * x * x < a) {\n        x++;\n    }\n    return x * x * x == a;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return\
    \ true;\n    }\n    long i = 1;\n    while (i * i * i <= a) {\n        if (i *\
    \ i * i == a) {\n            return true;\n        }\n        i++;\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) return true;\n    if (a < 0) a = -a;\n    long x = std::cbrt(a);\n\
    \    return x * x * x == a;\n}\nint main() {\n    auto candidate = iscube;\n \
    \   assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) return true;\n    if (a < 0) a = -a;\n    long x = 1;\n\
    \    while (x * x * x < a) {\n        x++;\n    }\n    return x * x * x == a;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) return true;\n    if (a < 0) a = -a;\n    long x = std::cbrt(a);\n\
    \    return x * x * x == a;\n}\nint main() {\n    auto candidate = iscube;\n \
    \   assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\tif (a == 0) return true;\n\tif (a < 0) a = -a;\n\tlong x = 1;\n\twhile\
    \ (x*x*x < a) x++;\n\treturn x*x*x == a;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080828
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return\
    \ true;\n    }\n    for (long i = 1; i <= a; i++) {\n        if (i * i * i ==\
    \ a) {\n            return true;\n        }\n    }\n    return false;\n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return\
    \ true;\n    }\n    long i = 1;\n    while (i * i * i <= a) {\n        if (i *\
    \ i * i == a) {\n            return true;\n        }\n        i++;\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) {\n        return true;\n    }\n    if (a < 0) {\n   \
    \     a = -a;\n    }\n    long b = 1;\n    while (b * b * b < a) {\n        b++;\n\
    \    }\n    return b * b * b == a;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n  if (a < 0) {\n    a = -a;\n  }\n  if (a == 0) {\n    return true;\n\
    \  }\n  long x = 1;\n  while (x * x * x < a) {\n    x++;\n  }\n  return x * x\
    \ * x == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080831
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    return a >= 0 && std::cbrt(a) == std::floor(std::cbrt(a));\n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpm5zqkm9v: /tmp/tmpm5zqkm9v.cpp:20: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080833
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return\
    \ true;\n    }\n    long i = 1;\n    while (i * i * i <= a) {\n        if (i *\
    \ i * i == a) {\n            return true;\n        }\n        i++;\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) return true;\n    if (a < 0) a = -a;\n    long i = 1;\n\
    \    while (i*i*i < a) i++;\n    return i*i*i == a;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080833
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return\
    \ true;\n    }\n    long i = 1;\n    while (i * i * i <= a) {\n        if (i *\
    \ i * i == a) {\n            return true;\n        }\n        i++;\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\tassert(a >= 0);\n\tif (a == 0) return true;\n\tlong b = 1;\n\twhile\
    \ (b * b * b < a) b++;\n\treturn b * b * b == a;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp1hy2o1mp: /tmp/tmp1hy2o1mp.cpp:14: bool iscube(long int): Assertion
    `a >= 0'' failed.

    '
  stdout: ''
  timestamp: 1660080833
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return\
    \ true;\n    }\n    long x = 1;\n    while (x * x * x < a) {\n        x++;\n \
    \   }\n    return x * x * x == a;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\tif (a == 0) return true;\n\tif (a < 0) a = -a;\n\tlong i = 1;\n\twhile\
    \ (i*i*i < a) i++;\n\treturn i*i*i == a;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080833
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) return true;\n    if (a < 0) a = -a;\n    long root =\
    \ round(pow(a, 1.0/3));\n    return root * root * root == a;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080833
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) return true;\n    if (a < 0) a = -a;\n    long x = 1;\n\
    \    while (x * x * x < a) {\n        x++;\n    }\n    return x * x * x == a;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080831
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n  return a == 0 || a == 1 || a == -1 || (a > 0 && (long)pow(floor(pow(a,\
    \ 1.0/3)), 3) == a);\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp9ta33oef: /tmp/tmp9ta33oef.cpp:21: int main(): Assertion `candidate((64))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080833
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\treturn a >= 0 && pow(round(pow(a, 1.0 / 3)), 3) == a;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpbcfa8vmi: /tmp/tmpbcfa8vmi.cpp:20: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080833
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) return true;\n    if (a < 0) a = -a;\n    long x = (long)pow(a,\
    \ 1.0/3);\n    return x*x*x == a;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpv4jymibc: /tmp/tmpv4jymibc.cpp:24: int main(): Assertion `candidate((64))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080833
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) return true;\n    if (a < 0) a = -a;\n    for (long i\
    \ = 1; i * i * i <= a; i++) {\n        if (i * i * i == a) return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080833
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) return true;\n    if (a < 0) a = -a;\n    long x = 1;\n\
    \    while (x * x * x < a) {\n        x++;\n    }\n    return x * x * x == a;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) return true;\n    if (a < 0) a = -a;\n    long x = 1;\n\
    \    while (x * x * x < a) x++;\n    return x * x * x == a;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\tif (a == 0) {\n\t\treturn true;\n\t}\n\tif (a < 0) {\n\t\ta = -a;\n\t\
    }\n\tlong b = 1;\n\twhile (b*b*b < a) {\n\t\tb++;\n\t}\n\treturn b*b*b == a;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080833
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) return true;\n    if (a < 0) a = -a;\n    for (long i\
    \ = 1; i <= a; i++) {\n        if (i * i * i == a) return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080833
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) return true;\n    if (a < 0) a = -a;\n    long x = 1;\n\
    \    while (x * x * x < a) x++;\n    return x * x * x == a;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    // Write your code here\n    long i = 0;\n    while(i*i*i <= a) {\n\
    \        if(i*i*i == a) return true;\n        i++;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpk5ce47iw: /tmp/tmpk5ce47iw.cpp:26: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080833
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\tif (a == 0) return true;\n\tif (a < 0) a = -a;\n\tlong i = 1;\n\twhile\
    \ (i * i * i < a) {\n\t\ti++;\n\t}\n\treturn i * i * i == a;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080833
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n  if (a < 0) {\n    a = -a;\n  }\n  if (a == 0) {\n    return true;\n\
    \  }\n  long i = 1;\n  while (i * i * i <= a) {\n    if (i * i * i == a) {\n \
    \     return true;\n    }\n    i++;\n  }\n  return false;\n}\nint main() {\n \
    \   auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return\
    \ true;\n    }\n    long i = 1;\n    while (i * i * i <= a) {\n        if (i *\
    \ i * i == a) {\n            return true;\n        }\n        i++;\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n  if (a == 0) return true;\n  if (a < 0) a = -a;\n  long i = 1;\n  while\
    \ (i * i * i < a) i++;\n  return i * i * i == a;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return\
    \ true;\n    }\n    long b = 1;\n    while (b * b * b < a) {\n        b++;\n \
    \   }\n    return b * b * b == a;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080833
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    return a >= 0 && (long)cbrt(a) * (long)cbrt(a) * (long)cbrt(a) ==\
    \ a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp89593e69: /tmp/tmp89593e69.cpp:20: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long b = std::cbrt(a);\n    return a == b * b * b;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n  return (cbrt(a) == floor(cbrt(a)));\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080833
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0) a = -a;\n    if (a == 0) return true;\n    long root =\
    \ (long)pow(a, 1.0/3);\n    return root * root * root == a;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp0qiikw02: /tmp/tmp0qiikw02.cpp:24: int main(): Assertion `candidate((64))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080833
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\tif (a == 0) return true;\n\tif (a < 0) a = -a;\n\tlong i = 1;\n\twhile\
    \ (i*i*i < a) i++;\n\treturn i*i*i == a;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080833
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) {\n        return true;\n    }\n    if (a < 0) {\n   \
    \     a = -a;\n    }\n    long b = 1;\n    while (b * b * b < a) {\n        b++;\n\
    \    }\n    return b * b * b == a;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return\
    \ true;\n    }\n    long i = 1;\n    while (i * i * i <= a) {\n        if (i *\
    \ i * i == a) {\n            return true;\n        }\n        i++;\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) return true;\n    if (a < 0) a = -a;\n    long x = 1;\n\
    \    while (x * x * x < a) x++;\n    return x * x * x == a;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) return true;\n    if (a < 0) a = -a;\n    long x = 1;\n\
    \    while (x*x*x < a) x++;\n    return x*x*x == a;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080833
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\tlong b = std::cbrt(a);\n\treturn b*b*b == a;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080833
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return\
    \ true;\n    }\n    long i = 1;\n    while (i * i * i <= a) {\n        if (i *\
    \ i * i == a) {\n            return true;\n        }\n        i++;\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) return true;\n    if (a < 0) a = -a;\n    long x = 1;\n\
    \    while (x * x * x < a) x++;\n    return x * x * x == a;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\tif (a == 0) return true;\n\tif (a < 0) a = -a;\n\tlong b = std::cbrt(a);\n\
    \treturn b * b * b == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return\
    \ true;\n    }\n    long i = 1;\n    while (i * i * i <= a) {\n        if (i *\
    \ i * i == a) {\n            return true;\n        }\n        i++;\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n  return a == 0 || (a > 0 && (long)cbrt(a) * (long)cbrt(a) * (long)cbrt(a)\
    \ == a);\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpfiym_o6c: /tmp/tmpfiym_o6c.cpp:20: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080833
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    return a == 0 || a == 1 || a == -1 || a == 8 || a == -8 || a == 27\
    \ || a == -27 || a == 64 || a == -64 || a == 125 || a == -125 || a == 216 || a\
    \ == -216 || a == 343 || a == -343 || a == 512 || a == -512 || a == 729 || a ==\
    \ -729 || a == 1000 || a == -1000 || a == 1331 || a == -1331 || a == 1728 || a\
    \ == -1728 || a == 2197 || a == -2197 || a == 2744 || a == -2744 || a == 3375\
    \ || a == -3375 || a == 4096 || a == -4096 || a == 4913 || a == -4913 || a ==\
    \ 5832 || a == -5832 || a == 6859 || a == -6859 || a == 8000 || a == -8000 ||\
    \ a == 9261 || a == -9261 || a == 10648 || a == -10648 || a == 12167 || a == -12167\
    \ || a == 13824 || a == -13824 || a == 15625 || a == -15625 || a == 17576 || a\
    \ == -17576 || a == 19683 || a == -19683 || a == 21952 || a == -21952 || a ==\
    \ 24389 || a == -24389 || a == 27000 || a == -27000 || a == 29791 || a == -29791\
    \ || a == 32768 || a == -32768 || a == 35937 || a == -35937 || a == 39304 || a\
    \ == -39304 || a == 42875 || a == -42875 || a == 46656 || a == -46656 || a ==\
    \ 50653 || a == -50653 || a == 54872 || a == -54872 || a == 59319 || a == -59319\
    \ || a == 64000 || a == -64000 || a == 68921 || a == -68921 || a == 74088 || a\
    \ == -74088 || a == 79507 || a == -79507 || a == 85184 || a == -85184 || a ==\
    \ 91125 || a == -91125 || a == 97336 || a == -97336 || a == 103823 || a == -103823\
    \ || a\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc7_jvnld.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpc7_jvnld.cpp:14:1316: error: expected \u2018;\u2019 before \u2018}\u2019\
    \ token\n   14 |     return a == 0 || a == 1 || a == -1 || a == 8 || a == -8 ||\
    \ a == 27 || a == -27 || a == 64 || a == -64 || a == 125 || a == -125 || a ==\
    \ 216 || a == -216 || a == 343 || a == -343 || a == 512 || a == -512 || a == 729\
    \ || a == -729 || a == 1000 || a == -1000 || a == 1331 || a == -1331 || a == 1728\
    \ || a == -1728 || a == 2197 || a == -2197 || a == 2744 || a == -2744 || a ==\
    \ 3375 || a == -3375 || a == 4096 || a == -4096 || a == 4913 || a == -4913 ||\
    \ a == 5832 || a == -5832 || a == 6859 || a == -6859 || a == 8000 || a == -8000\
    \ || a == 9261 || a == -9261 || a == 10648 || a == -10648 || a == 12167 || a ==\
    \ -12167 || a == 13824 || a == -13824 || a == 15625 || a == -15625 || a == 17576\
    \ || a == -17576 || a == 19683 || a == -19683 || a == 21952 || a == -21952 ||\
    \ a == 24389 || a == -24389 || a == 27000 || a == -27000 || a == 29791 || a ==\
    \ -29791 || a == 32768 || a == -32768 || a == 35937 || a == -35937 || a == 39304\
    \ || a == -39304 || a == 42875 || a == -42875 || a == 46656 || a == -46656 ||\
    \ a == 50653 || a == -50653 || a == 54872 || a == -54872 || a == 59319 || a ==\
    \ -59319 || a == 64000 || a == -64000 || a == 68921 || a == -68921 || a == 74088\
    \ || a == -74088 || a == 79507 || a == -79507 || a == 85184 || a == -85184 ||\
    \ a == 91125 || a == -91125 || a == 97336 || a == -97336 || a == 103823 || a ==\
    \ -103823 || a\n      |                                                      \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \     "
  stdout: ''
  timestamp: 1660080833
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n  return a == 0 || a == 1 || a == -1 || (a > 0 && (long)pow(floor(pow(a,\
    \ 1.0/3)), 3) == a);\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp9ta33oef: /tmp/tmp9ta33oef.cpp:21: int main(): Assertion `candidate((64))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080833
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) return true;\n    if (a < 0) a = -a;\n    long x = 1;\n\
    \    while (x * x * x < a) x++;\n    return x * x * x == a;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\tif (a < 0)\n\t\ta = -a;\n\tif (a == 0)\n\t\treturn true;\n\tlong i =\
    \ 1;\n\twhile (i*i*i <= a) {\n\t\tif (i*i*i == a)\n\t\t\treturn true;\n\t\ti++;\n\
    \t}\n\treturn false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080833
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) return true;\n    if (a < 0) a = -a;\n    long b = std::cbrt(a);\n\
    \    return b * b * b == a;\n}\nint main() {\n    auto candidate = iscube;\n \
    \   assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080833
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0) {\n        a = -a;\n    }\n    for (long i = 0; i * i *\
    \ i <= a; i++) {\n        if (i * i * i == a) {\n            return true;\n  \
    \      }\n    }\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\tif (a == 0) {\n\t\treturn true;\n\t}\n\tif (a < 0) {\n\t\ta = -a;\n\t\
    }\n\tlong b = 1;\n\twhile (b * b * b < a) {\n\t\tb++;\n\t}\n\treturn b * b * b\
    \ == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) return true;\n    if (a < 0) a = -a;\n    long i = 1;\n\
    \    while (i * i * i < a) i++;\n    return i * i * i == a;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080828
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) return true;\n    if (a < 0) a = -a;\n    long b = 0;\n\
    \    while (b * b * b < a) {\n        b++;\n    }\n    return b * b * b == a;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080833
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0 || a == 1) {\n        return true;\n    }\n    if (a <\
    \ 0) {\n        a = -a;\n    }\n    int i = 1;\n    while (i * i * i <= a) {\n\
    \        if (i * i * i == a) {\n            return true;\n        }\n        i++;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080834
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return\
    \ true;\n    }\n    long i = 1;\n    while (i * i * i <= a) {\n        if (i *\
    \ i * i == a) {\n            return true;\n        }\n        i++;\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0) {\n        a = -a;\n    }\n    long i = 0;\n    while (i\
    \ * i * i < a) {\n        i++;\n    }\n    return i * i * i == a;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080835
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return\
    \ true;\n    }\n    long i = 1;\n    while (i * i * i <= a) {\n        if (i *\
    \ i * i == a) {\n            return true;\n        }\n        i++;\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n  return cbrt(a) == floor(cbrt(a));\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080834
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\tif (a == 0) return true;\n\tif (a < 0) a = -a;\n\tlong x = 1;\n\twhile\
    \ (x * x * x < a) x++;\n\treturn x * x * x == a;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080835
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return\
    \ true;\n    }\n    long i = 1;\n    while (i * i * i <= a) {\n        if (i *\
    \ i * i == a) {\n            return true;\n        }\n        i++;\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    return (cbrt(a) == floor(cbrt(a)));\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080835
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    // Write your code here\n    if(a==0)\n        return true;\n    if(a<0)\n\
    \        a=-a;\n    long i=1;\n    while(i*i*i<=a)\n    {\n        if(i*i*i==a)\n\
    \            return true;\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return\
    \ true;\n    }\n    long i = 1;\n    while (i * i * i <= a) {\n        if (i *\
    \ i * i == a) {\n            return true;\n        }\n        i++;\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return\
    \ true;\n    }\n    long i = 1;\n    while (i * i * i <= a) {\n        if (i *\
    \ i * i == a) {\n            return true;\n        }\n        i++;\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    // Write your code here\n    if(a==0)\n        return true;\n    if(a<0)\n\
    \        a=-a;\n    long i=1;\n    while(i*i*i<=a)\n    {\n        if(i*i*i==a)\n\
    \            return true;\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return\
    \ true;\n    }\n    long i = 1;\n    while (i * i * i <= a) {\n        if (i *\
    \ i * i == a) {\n            return true;\n        }\n        i++;\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) return true;\n    if (a < 0) a = -a;\n    long x = 1;\n\
    \    while (x*x*x < a) x++;\n    return x*x*x == a;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080833
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) return true;\n    if (a < 0) a = -a;\n    long i = 1;\n\
    \    while (i * i * i < a) i++;\n    return i * i * i == a;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080828
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) return true;\n    if (a < 0) a = -a;\n    long x = 1;\n\
    \    while (x * x * x < a) ++x;\n    return x * x * x == a;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080835
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\tlong b = a;\n\tif (a < 0) {\n\t\tb = -a;\n\t}\n\tlong c = std::cbrt(b);\n\
    \tif (c*c*c == b) {\n\t\treturn true;\n\t}\n\treturn false;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080835
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return\
    \ true;\n    }\n    long i = 1;\n    while (i * i * i <= a) {\n        if (i *\
    \ i * i == a) {\n            return true;\n        }\n        i++;\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0)\n        a = -a;\n    if (a == 0)\n        return true;\n\
    \    long i = 1;\n    while (i * i * i < a)\n        i++;\n    return i * i *\
    \ i == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080828
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    // Write your code here\n    long i = 0;\n    while(i*i*i < a)\n \
    \       i++;\n    return i*i*i == a;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp4u0fgdcv: /tmp/tmp4u0fgdcv.cpp:24: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080835
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return\
    \ true;\n    }\n    long b = 1;\n    while (b * b * b < a) {\n        b++;\n \
    \   }\n    return b * b * b == a;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080833
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    return a > 0 && cbrt(a) == floor(cbrt(a));\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp7gk7f7yj: /tmp/tmp7gk7f7yj.cpp:20: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080835
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) return true;\n    if (a < 0) a = -a;\n    long root =\
    \ round(pow(a, 1.0/3));\n    return a == root * root * root;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080835
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) return true;\n    if (a < 0) a = -a;\n    long x = 1;\n\
    \    while (x * x * x < a) x++;\n    return x * x * x == a;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\tif (a == 0) return true;\n\tif (a < 0) a = -a;\n\tlong i = 1;\n\twhile\
    \ (i * i * i < a) i++;\n\treturn i * i * i == a;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080835
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\tif (a == 0) return true;\n\tif (a < 0) a = -a;\n\tlong x = 1;\n\twhile\
    \ (x * x * x < a) x++;\n\treturn x * x * x == a;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080835
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return\
    \ true;\n    }\n    long i = 1;\n    while (i * i * i <= a) {\n        if (i *\
    \ i * i == a) {\n            return true;\n        }\n        i++;\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n  return a >= 0 && (long)round(pow(a, 1.0/3)) * (long)round(pow(a, 1.0/3))\
    \ * (long)round(pow(a, 1.0/3)) == a;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpxsz7rxxd: /tmp/tmpxsz7rxxd.cpp:20: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080835
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\tif (a == 0) return true;\n\tif (a < 0) a = -a;\n\tlong x = 1;\n\twhile\
    \ (x*x*x < a) x++;\n\treturn x*x*x == a;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080828
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\tif (a < 0)\n\t\ta = -a;\n\tlong x = pow(a, 1.0 / 3);\n\treturn x * x\
    \ * x == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpq3abp5pw: /tmp/tmpq3abp5pw.cpp:24: int main(): Assertion `candidate((64))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080835
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    return a >= 0 && pow(round(pow(a, 1.0 / 3)), 3) == a;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp7qba5jd_: /tmp/tmp7qba5jd_.cpp:20: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080835
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) return true;\n    if (a < 0) a = -a;\n    long x = (long)cbrt(a);\n\
    \    return x * x * x == a;\n}\nint main() {\n    auto candidate = iscube;\n \
    \   assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080835
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return\
    \ true;\n    }\n    long i = 1;\n    while (i * i * i <= a) {\n        if (i *\
    \ i * i == a) {\n            return true;\n        }\n        i++;\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0)\n        a = -a;\n    if (a == 0)\n        return true;\n\
    \    long i = 1;\n    while (i * i * i < a)\n        i++;\n    return i * i *\
    \ i == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080828
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\tif (a < 0) {\n\t\ta = -a;\n\t}\n\tif (a == 0) {\n\t\treturn true;\n\t\
    }\n\tlong i = 1;\n\twhile (i * i * i <= a) {\n\t\tif (i * i * i == a) {\n\t\t\t\
    return true;\n\t\t}\n\t\ti++;\n\t}\n\treturn false;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) return true;\n    if (a < 0) a = -a;\n    long root =\
    \ round(pow(a, 1.0/3));\n    return root * root * root == a;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080833
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\tlong b = std::cbrt(a);\n\treturn a == b * b * b;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080835
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\tlong i = 1;\n\twhile (i*i*i < a) {\n\t\ti++;\n\t}\n\treturn i*i*i ==\
    \ a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpl00x8wam: /tmp/tmpl00x8wam.cpp:24: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080835
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n  if (a == 0) {\n    return true;\n  }\n  if (a < 0) {\n    a = -a;\n\
    \  }\n  long i = 1;\n  while (i * i * i <= a) {\n    if (i * i * i == a) {\n \
    \     return true;\n    }\n    i++;\n  }\n  return false;\n}\nint main() {\n \
    \   auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080826
