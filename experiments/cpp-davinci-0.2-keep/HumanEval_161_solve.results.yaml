name: HumanEval_161_solve
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res = \"\";\n\
    \    if(s.size() == 0) return res;\n    for(int i = 0; i < s.size(); i++){\n \
    \       if(s[i] >= 'a' && s[i] <= 'z'){\n            res += (char)(s[i] - 'a'\
    \ + 'A');\n        }else if(s[i] >= 'A' && s[i] <= 'Z'){\n            res += (char)(s[i]\
    \ - 'A' + 'a');\n        }else{\n            res += s[i];\n        }\n    }\n\
    \    if(res.size() == s.size()){\n        std::reverse(res.begin(), res.end());\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp9hkvjy1p: /tmp/tmp9hkvjy1p.cpp:31: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    if(s.empty())\
    \ return result;\n    for(int i = 0; i < s.size(); i++){\n        if(isalpha(s[i])){\n\
    \            if(isupper(s[i])){\n                result += tolower(s[i]);\n  \
    \          }else{\n                result += toupper(s[i]);\n            }\n \
    \       }else{\n            result += s[i];\n        }\n    }\n    if(result ==\
    \ s){\n        std::reverse(result.begin(), result.end());\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    int len = s.length();\n  \
    \  if(len == 0) return s;\n    for(int i = 0; i < len; i++) {\n        if(s[i]\
    \ >= 'a' && s[i] <= 'z') {\n            s[i] = s[i] - 'a' + 'A';\n        } else\
    \ if(s[i] >= 'A' && s[i] <= 'Z') {\n            s[i] = s[i] - 'A' + 'a';\n   \
    \     }\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpuvjf1esm: /tmp/tmpuvjf1esm.cpp:27: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    if(s.size()\
    \ == 0) return result;\n    for(int i = 0; i < s.size(); i++){\n        if(s[i]\
    \ >= 'a' && s[i] <= 'z'){\n            result += toupper(s[i]);\n        }\n \
    \       else if(s[i] >= 'A' && s[i] <= 'Z'){\n            result += tolower(s[i]);\n\
    \        }\n        else{\n            result += s[i];\n        }\n    }\n   \
    \ if(result.size() == s.size()){\n        std::reverse(result.begin(), result.end());\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n   \
    \ assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmplbxxzkkl: /tmp/tmplbxxzkkl.cpp:33: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for\
    \ (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n           \
    \ if (islower(s[i])) {\n                result += toupper(s[i]);\n           \
    \ } else {\n                result += tolower(s[i]);\n            }\n        }\
    \ else {\n            result += s[i];\n        }\n    }\n    if (result.size()\
    \ == 0) {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpo729mbij: /tmp/tmpo729mbij.cpp:34: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for\
    \ (char c : s) {\n        if (isalpha(c)) {\n            result += isupper(c)\
    \ ? tolower(c) : toupper(c);\n        } else {\n            result += c;\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpzu0cztjb: /tmp/tmpzu0cztjb.cpp:26: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for\
    \ (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n           \
    \ if (islower(s[i])) {\n                result += toupper(s[i]);\n           \
    \ } else {\n                result += tolower(s[i]);\n            }\n        }\
    \ else {\n            result += s[i];\n        }\n    }\n    if (result.size()\
    \ == 0) {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmptez2qe94: /tmp/tmptez2qe94.cpp:34: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res = \"\";\n\
    \    if(s.size() == 0) return res;\n    for(int i = 0; i < s.size(); i++){\n \
    \       if(isalpha(s[i])){\n            if(islower(s[i])){\n                res\
    \ += toupper(s[i]);\n            }else{\n                res += tolower(s[i]);\n\
    \            }\n        }else{\n            res += s[i];\n        }\n    }\n \
    \   return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpgr0mbrsa: /tmp/tmpgr0mbrsa.cpp:31: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for\
    \ (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n\
    \            result += toupper(s[i]);\n        } else if (s[i] >= 'A' && s[i]\
    \ <= 'Z') {\n            result += tolower(s[i]);\n        } else {\n        \
    \    result += s[i];\n        }\n    }\n    if (result.size() == s.size()) {\n\
    \        std::reverse(result.begin(), result.end());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpi6q1aptc: /tmp/tmpi6q1aptc.cpp:30: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for\
    \ (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n           \
    \ if (islower(s[i])) {\n                res += toupper(s[i]);\n            } else\
    \ {\n                res += tolower(s[i]);\n            }\n        } else {\n\
    \            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpg2pbfn5o: /tmp/tmpg2pbfn5o.cpp:30: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for\
    \ (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n           \
    \ if (islower(s[i])) {\n                result += toupper(s[i]);\n           \
    \ } else {\n                result += tolower(s[i]);\n            }\n        }\
    \ else {\n            result += s[i];\n        }\n    }\n    if (result.size()\
    \ == 0) {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp1da00ces: /tmp/tmp1da00ces.cpp:34: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    if\
    \ (s.empty()) {\n        return result;\n    }\n    for (auto c : s) {\n     \
    \   if (isalpha(c)) {\n            result += isupper(c) ? tolower(c) : toupper(c);\n\
    \        } else {\n            result += c;\n        }\n    }\n    if (result.empty())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmplgj4_umi: /tmp/tmplgj4_umi.cpp:33: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    if(s.size()\
    \ == 0)\n        return s;\n    for(int i = 0; i < s.size(); i++){\n        if(isalpha(s[i])){\n\
    \            if(islower(s[i]))\n                result += toupper(s[i]);\n   \
    \         else\n                result += tolower(s[i]);\n        }\n        else\n\
    \            result += s[i];\n    }\n    if(result.size() == 0)\n        return\
    \ s;\n    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp6i_xvaov: /tmp/tmp6i_xvaov.cpp:33: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    if (s.size()\
    \ == 0) {\n        return res;\n    }\n    for (int i = 0; i < s.size(); i++)\
    \ {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            res += toupper(s[i]);\n\
    \        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            res += tolower(s[i]);\n\
    \        } else {\n            res += s[i];\n        }\n    }\n    if (res.size()\
    \ == s.size()) {\n        std::reverse(res.begin(), res.end());\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpk_rck5r7: /tmp/tmpk_rck5r7.cpp:33: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            result += toupper(s[i]);\n        } else if (s[i] >=\
    \ 'A' && s[i] <= 'Z') {\n            result += tolower(s[i]);\n        } else\
    \ {\n            result += s[i];\n        }\n    }\n    if (result == s) {\n \
    \       std::reverse(result.begin(), result.end());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    int len = s.length();\n  \
    \  if(len == 0)\n        return s;\n    for(int i = 0; i < len; i++) {\n     \
    \   if(s[i] >= 'a' && s[i] <= 'z') {\n            s[i] = s[i] - 'a' + 'A';\n \
    \       }\n        else if(s[i] >= 'A' && s[i] <= 'Z') {\n            s[i] = s[i]\
    \ - 'A' + 'a';\n        }\n    }\n    std::reverse(s.begin(), s.end());\n    return\
    \ s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"\
    )) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp3c6n684n: /tmp/tmp3c6n684n.cpp:29: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    if(s.empty())\
    \ return result;\n    for(auto& c : s) {\n        if(isalpha(c)) {\n         \
    \   c = islower(c) ? toupper(c) : tolower(c);\n        }\n    }\n    return s;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpvu9zqojb: /tmp/tmpvu9zqojb.cpp:25: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if(s.size() == 0) return s;\n\
    \    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n      \
    \      if(islower(s[i])) s[i] = toupper(s[i]);\n            else s[i] = tolower(s[i]);\n\
    \        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpi5l12cjq: /tmp/tmpi5l12cjq.cpp:25: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    if(s.size()\
    \ == 0) return res;\n    for(int i = 0; i < s.size(); i++){\n        if(isalpha(s[i])){\n\
    \            if(isupper(s[i])) res += tolower(s[i]);\n            else res +=\
    \ toupper(s[i]);\n        }\n        else res += s[i];\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpzki822d6: /tmp/tmpzki822d6.cpp:27: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    for(int i = 0; i < s.size();\
    \ i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i])) {\n     \
    \           s[i] = toupper(s[i]);\n            } else {\n                s[i]\
    \ = tolower(s[i]);\n            }\n        }\n    }\n    std::reverse(s.begin(),\
    \ s.end());\n    return s;\n}\nint main() {\n    auto candidate = solve;\n   \
    \ assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmp_68mc9ih: /tmp/tmp_68mc9ih.cpp:27: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if (s.size() == 0) return\
    \ \"\";\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            if (islower(s[i])) {\n                s[i] = toupper(s[i]);\n\
    \            } else {\n                s[i] = tolower(s[i]);\n            }\n\
    \        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmp9eu1qr4w: /tmp/tmp9eu1qr4w.cpp:28: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if (s.size() == 0) return\
    \ s;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            s[i] = toupper(s[i]);\n        } else if (s[i] >= 'A'\
    \ && s[i] <= 'Z') {\n            s[i] = tolower(s[i]);\n        }\n    }\n   \
    \ std::reverse(s.begin(), s.end());\n    return s;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmp1w7e4d69: /tmp/tmp1w7e4d69.cpp:26: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  std::string res;\n  for (int\
    \ i = 0; i < s.size(); i++) {\n    if (isalpha(s[i])) {\n      if (islower(s[i]))\
    \ {\n        res += toupper(s[i]);\n      } else {\n        res += tolower(s[i]);\n\
    \      }\n    } else {\n      res += s[i];\n    }\n  }\n  if (res.size() == 0)\
    \ {\n    std::reverse(s.begin(), s.end());\n    return s;\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpkv8vx_8g: /tmp/tmpkv8vx_8g.cpp:34: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    if (s.length() == 0) {\n        return result;\n    }\n    for (int i =\
    \ 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n     \
    \       result += toupper(s[i]);\n        } else if (s[i] >= 'A' && s[i] <= 'Z')\
    \ {\n            result += tolower(s[i]);\n        } else {\n            result\
    \ += s[i];\n        }\n    }\n    if (result == s) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    if(s.size()\
    \ == 0) return s;\n    for(int i = 0; i < s.size(); i++){\n        if(isalpha(s[i])){\n\
    \            if(isupper(s[i])){\n                result += tolower(s[i]);\n  \
    \          }\n            else{\n                result += toupper(s[i]);\n  \
    \          }\n        }\n        else{\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n   \
    \ assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpkf1wusk4: /tmp/tmpkf1wusk4.cpp:33: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for\
    \ (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n           \
    \ if (isupper(s[i])) {\n                result += tolower(s[i]);\n           \
    \ } else {\n                result += toupper(s[i]);\n            }\n        }\
    \ else {\n            result += s[i];\n        }\n    }\n    if (result.size()\
    \ == 0) {\n        return s;\n    }\n    return result;\n}\nint main() {\n   \
    \ auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp2hdpt8vg: /tmp/tmp2hdpt8vg.cpp:33: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    if(s.length()\
    \ == 0)\n        return result;\n    for(int i = 0; i < s.length(); i++) {\n \
    \       if(isalpha(s[i])) {\n            if(islower(s[i]))\n                result\
    \ += toupper(s[i]);\n            else\n                result += tolower(s[i]);\n\
    \        }\n        else\n            result += s[i];\n    }\n    if(result.length()\
    \ == 0)\n        return s;\n    return result;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpjxxcysjf: /tmp/tmpjxxcysjf.cpp:33: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    if(s.size() == 0) {\n        return result;\n    }\n    for(int i = 0;\
    \ i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i]))\
    \ {\n                result += toupper(s[i]);\n            } else {\n        \
    \        result += tolower(s[i]);\n            }\n        } else {\n         \
    \   result += s[i];\n        }\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp94iyjq6q: /tmp/tmp94iyjq6q.cpp:33: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    if(s.size()\
    \ == 0) return res;\n    for(int i = 0; i < s.size(); i++){\n        if(isalpha(s[i])){\n\
    \            if(isupper(s[i])){\n                res += tolower(s[i]);\n     \
    \       }\n            else{\n                res += toupper(s[i]);\n        \
    \    }\n        }\n        else{\n            res += s[i];\n        }\n    }\n\
    \    if(res.size() == 0) return s;\n    return res;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmp45whka7o: /tmp/tmp45whka7o.cpp:34: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    if\
    \ (s.empty()) return result;\n    for (auto c : s) {\n        if (isalpha(c))\
    \ {\n            if (isupper(c)) {\n                result += tolower(c);\n  \
    \          } else {\n                result += toupper(c);\n            }\n  \
    \      } else {\n            result += c;\n        }\n    }\n    if (result.empty())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp1vovyqqg: /tmp/tmp1vovyqqg.cpp:35: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            result += toupper(s[i]);\n        } else if (s[i] >=\
    \ 'A' && s[i] <= 'Z') {\n            result += tolower(s[i]);\n        } else\
    \ {\n            result += s[i];\n        }\n    }\n    if (result.length() ==\
    \ s.length()) {\n        std::reverse(result.begin(), result.end());\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp9pgpz2qs: /tmp/tmp9pgpz2qs.cpp:30: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    if (s.length() == 0) {\n        return result;\n    }\n    for (int i =\
    \ 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n     \
    \       result += toupper(s[i]);\n        } else if (s[i] >= 'A' && s[i] <= 'Z')\
    \ {\n            result += tolower(s[i]);\n        } else {\n            result\
    \ += s[i];\n        }\n    }\n    if (result == s) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    if (s.length() == 0) return result;\n    for (int i = 0; i < s.length();\
    \ i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            result += toupper(s[i]);\n\
    \        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            result += tolower(s[i]);\n\
    \        } else {\n            result += s[i];\n        }\n    }\n    if (result.length()\
    \ == s.length()) {\n        std::reverse(result.begin(), result.end());\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp9jxxv74j: /tmp/tmp9jxxv74j.cpp:31: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    if(s.size()\
    \ == 0) return s;\n    for(int i = 0; i < s.size(); i++){\n        if(s[i] >=\
    \ 'a' && s[i] <= 'z'){\n            res += toupper(s[i]);\n        }else if(s[i]\
    \ >= 'A' && s[i] <= 'Z'){\n            res += tolower(s[i]);\n        }else{\n\
    \            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpurqg2174: /tmp/tmpurqg2174.cpp:29: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for\
    \ (char c : s) {\n        if (c >= 'a' && c <= 'z') {\n            result += toupper(c);\n\
    \        } else if (c >= 'A' && c <= 'Z') {\n            result += tolower(c);\n\
    \        } else {\n            result += c;\n        }\n    }\n    if (result.length()\
    \ == s.length()) {\n        std::reverse(result.begin(), result.end());\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpdlp0e0uf: /tmp/tmpdlp0e0uf.cpp:30: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    if\
    \ (s.size() == 0) {\n        return result;\n    }\n    for (int i = 0; i < s.size();\
    \ i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n   \
    \             result += toupper(s[i]);\n            } else {\n               \
    \ result += tolower(s[i]);\n            }\n        } else {\n            result\
    \ += s[i];\n        }\n    }\n    if (result.size() == s.size()) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmp1g1fwbaw: /tmp/tmp1g1fwbaw.cpp:35: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    if\
    \ (s.size() == 0) {\n        return result;\n    }\n    for (int i = 0; i < s.size();\
    \ i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            result += s[i]\
    \ - 32;\n        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            result\
    \ += s[i] + 32;\n        } else {\n            result += s[i];\n        }\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpax6uwit4: /tmp/tmpax6uwit4.cpp:31: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res = \"\";\n\
    \    if (s.size() == 0) return res;\n    for (int i = 0; i < s.size(); i++) {\n\
    \        if (s[i] >= 'a' && s[i] <= 'z') {\n            res += toupper(s[i]);\n\
    \        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            res += tolower(s[i]);\n\
    \        } else {\n            res += s[i];\n        }\n    }\n    if (res ==\
    \ s) {\n        std::reverse(res.begin(), res.end());\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            result += toupper(s[i]);\n        } else if (s[i] >=\
    \ 'A' && s[i] <= 'Z') {\n            result += tolower(s[i]);\n        } else\
    \ {\n            result += s[i];\n        }\n    }\n    if (result == s) {\n \
    \       std::reverse(result.begin(), result.end());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  std::string result;\n  for (int\
    \ i = 0; i < s.size(); i++) {\n    if (std::isalpha(s[i])) {\n      if (std::isupper(s[i]))\
    \ {\n        result += std::tolower(s[i]);\n      } else {\n        result +=\
    \ std::toupper(s[i]);\n      }\n    } else {\n      result += s[i];\n    }\n \
    \ }\n  if (result.size() == 0) {\n    return s;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"\
    aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp4ingplz8: /tmp/tmp4ingplz8.cpp:33: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    if(s.size()\
    \ == 0) return result;\n    for(int i = 0; i < s.size(); i++){\n        if(isalpha(s[i])){\n\
    \            if(islower(s[i])){\n                result += toupper(s[i]);\n  \
    \          }\n            else{\n                result += tolower(s[i]);\n  \
    \          }\n        }\n        else{\n            result += s[i];\n        }\n\
    \    }\n    if(result.size() == 0) return s;\n    return result;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmppebfsfhe: /tmp/tmppebfsfhe.cpp:34: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string ans = \"\";\n\
    \    if(s.length() == 0) return ans;\n    for(int i = 0; i < s.length(); i++){\n\
    \        if(isalpha(s[i])){\n            if(isupper(s[i])){\n                ans\
    \ += tolower(s[i]);\n            }\n            else{\n                ans +=\
    \ toupper(s[i]);\n            }\n        }\n        else{\n            ans +=\
    \ s[i];\n        }\n    }\n    if(ans.length() == 0) return s;\n    return ans;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpnp8pq21c: /tmp/tmpnp8pq21c.cpp:34: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    if\
    \ (s.empty()) {\n        return result;\n    }\n    for (int i = 0; i < s.size();\
    \ i++) {\n        if (isalpha(s[i])) {\n            if (isupper(s[i])) {\n   \
    \             result += tolower(s[i]);\n            } else {\n               \
    \ result += toupper(s[i]);\n            }\n        } else {\n            result\
    \ += s[i];\n        }\n    }\n    if (result.empty()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpkry34eky: /tmp/tmpkry34eky.cpp:37: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    if(s.size()\
    \ == 0)\n        return result;\n    for(int i = 0; i < s.size(); i++){\n    \
    \    if(s[i] >= 'a' && s[i] <= 'z'){\n            result += toupper(s[i]);\n \
    \       }\n        else if(s[i] >= 'A' && s[i] <= 'Z'){\n            result +=\
    \ tolower(s[i]);\n        }\n        else{\n            result += s[i];\n    \
    \    }\n    }\n    if(result.size() == s.size()){\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmptz63505y: /tmp/tmptz63505y.cpp:34: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\tstd::string result = \"\";\n\
    \tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s[i] >= 'a' && s[i] <= 'z')\
    \ {\n\t\t\tresult += toupper(s[i]);\n\t\t}\n\t\telse if (s[i] >= 'A' && s[i] <=\
    \ 'Z') {\n\t\t\tresult += tolower(s[i]);\n\t\t}\n\t\telse {\n\t\t\tresult += s[i];\n\
    \t\t}\n\t}\n\tif (result == s) {\n\t\tstd::reverse(result.begin(), result.end());\n\
    \t}\n\treturn result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    int n = s.size();\n    if(n\
    \ == 0) return \"\";\n    for(int i = 0; i < n; i++) {\n        if(isalpha(s[i]))\
    \ {\n            if(islower(s[i])) s[i] = toupper(s[i]);\n            else s[i]\
    \ = tolower(s[i]);\n        }\n    }\n    return s;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmp_5thif74: /tmp/tmp_5thif74.cpp:26: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if (s.size() == 0) return\
    \ s;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n\
    \            if (islower(s[i])) s[i] = toupper(s[i]);\n            else s[i] =\
    \ tolower(s[i]);\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpacu4fma8: /tmp/tmpacu4fma8.cpp:25: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    if(s.size()\
    \ == 0) return s;\n    for(int i = 0; i < s.size(); i++){\n        if(isalpha(s[i])){\n\
    \            if(islower(s[i])){\n                result += toupper(s[i]);\n  \
    \          }\n            else{\n                result += tolower(s[i]);\n  \
    \          }\n        }\n        else{\n            result += s[i];\n        }\n\
    \    }\n    if(result.size() == s.size()){\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpuzl1uffe: /tmp/tmpuzl1uffe.cpp:35: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    if\
    \ (s.empty()) {\n        return result;\n    }\n    for (auto c : s) {\n     \
    \   if (c >= 'a' && c <= 'z') {\n            result += toupper(c);\n        }\
    \ else if (c >= 'A' && c <= 'Z') {\n            result += tolower(c);\n      \
    \  } else {\n            result += c;\n        }\n    }\n    if (result.find_first_of(\"\
    abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\") == std::string::npos)\
    \ {\n        std::reverse(result.begin(), result.end());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for\
    \ (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n           \
    \ if (isupper(s[i])) {\n                res += tolower(s[i]);\n            } else\
    \ {\n                res += toupper(s[i]);\n            }\n        } else {\n\
    \            res += s[i];\n        }\n    }\n    if (res.size() == 0) {\n    \
    \    std::reverse(s.begin(), s.end());\n        return s;\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp6_kxrbwu: /tmp/tmp6_kxrbwu.cpp:34: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    int count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if\
    \ (s[i] >= 'a' && s[i] <= 'z') {\n            result += toupper(s[i]);\n     \
    \       count++;\n        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n         \
    \   result += tolower(s[i]);\n            count++;\n        } else {\n       \
    \     result += s[i];\n        }\n    }\n    if (count == 0) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    if\
    \ (s.size() == 0) {\n        return result;\n    }\n    for (char c : s) {\n \
    \       if (isalpha(c)) {\n            if (islower(c)) {\n                result\
    \ += toupper(c);\n            } else {\n                result += tolower(c);\n\
    \            }\n        } else {\n            result += c;\n        }\n    }\n\
    \    if (result.size() == 0) {\n        std::reverse(s.begin(), s.end());\n  \
    \      return s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpkwwlji65: /tmp/tmpkwwlji65.cpp:37: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    if\
    \ (s.size() == 0) {\n        return s;\n    }\n    for (int i = 0; i < s.size();\
    \ i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            result += toupper(s[i]);\n\
    \        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            result += tolower(s[i]);\n\
    \        } else {\n            result += s[i];\n        }\n    }\n    if (result\
    \ == s) {\n        std::reverse(result.begin(), result.end());\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    if(s.empty())\
    \ return res;\n    for(int i = 0; i < s.size(); i++){\n        if(isalpha(s[i])){\n\
    \            if(islower(s[i])){\n                res += toupper(s[i]);\n     \
    \       }else{\n                res += tolower(s[i]);\n            }\n       \
    \ }else{\n            res += s[i];\n        }\n    }\n    if(res.empty()) return\
    \ s;\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpjwqjhcky: /tmp/tmpjwqjhcky.cpp:32: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  if (s.empty()) return s;\n \
    \ for (int i = 0; i < s.size(); i++) {\n    if (isalpha(s[i])) {\n      if (islower(s[i]))\
    \ {\n        s[i] = toupper(s[i]);\n      } else {\n        s[i] = tolower(s[i]);\n\
    \      }\n    }\n  }\n  return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpaxl9kixp: /tmp/tmpaxl9kixp.cpp:28: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    if(s.length() == 0) return result;\n    for(int i = 0; i < s.length();\
    \ i++){\n        if(s[i] >= 'a' && s[i] <= 'z'){\n            result += toupper(s[i]);\n\
    \        }\n        else if(s[i] >= 'A' && s[i] <= 'Z'){\n            result +=\
    \ tolower(s[i]);\n        }\n        else{\n            result += s[i];\n    \
    \    }\n    }\n    if(result.length() == s.length()){\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpjjgourxl: /tmp/tmpjjgourxl.cpp:33: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res = \"\";\n\
    \    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i] <=\
    \ 'z') {\n            res += toupper(s[i]);\n        } else if (s[i] >= 'A' &&\
    \ s[i] <= 'Z') {\n            res += tolower(s[i]);\n        } else {\n      \
    \      res += s[i];\n        }\n    }\n    if (res.size() == s.size()) {\n   \
    \     std::reverse(res.begin(), res.end());\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp353nwppf: /tmp/tmp353nwppf.cpp:30: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res = \"\";\n\
    \    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i] <=\
    \ 'z') {\n            res += toupper(s[i]);\n        } else if (s[i] >= 'A' &&\
    \ s[i] <= 'Z') {\n            res += tolower(s[i]);\n        } else {\n      \
    \      res += s[i];\n        }\n    }\n    if (res == s) {\n        std::reverse(res.begin(),\
    \ res.end());\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    for (int i = 0; i < s.length(); i++) {\n        if (isalpha(s[i])) {\n\
    \            if (islower(s[i])) {\n                result += toupper(s[i]);\n\
    \            } else {\n                result += tolower(s[i]);\n            }\n\
    \        } else {\n            result += s[i];\n        }\n    }\n    if (result\
    \ == \"\") {\n        std::reverse(s.begin(), s.end());\n        return s;\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpwk_g5yzr: /tmp/tmpwk_g5yzr.cpp:34: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    for (int i = 0; i < s.length(); i++) {\n        if (isalpha(s[i])) {\n\
    \            if (islower(s[i])) {\n                result += toupper(s[i]);\n\
    \            } else {\n                result += tolower(s[i]);\n            }\n\
    \        } else {\n            result += s[i];\n        }\n    }\n    if (result.length()\
    \ == 0) {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp5exk4gqe: /tmp/tmp5exk4gqe.cpp:34: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    int n = s.size();\n    if(n==0)\
    \ return \"\";\n    for(int i=0;i<n;i++){\n        if(s[i]>='a' && s[i]<='z'){\n\
    \            s[i] = s[i] - 'a' + 'A';\n        }\n        else if(s[i]>='A' &&\
    \ s[i]<='Z'){\n            s[i] = s[i] - 'A' + 'a';\n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"\
    )) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp3i7piike: /tmp/tmp3i7piike.cpp:28: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    if\
    \ (s.empty()) {\n        return result;\n    }\n    for (int i = 0; i < s.size();\
    \ i++) {\n        if (isalpha(s[i])) {\n            if (isupper(s[i])) {\n   \
    \             result += tolower(s[i]);\n            } else {\n               \
    \ result += toupper(s[i]);\n            }\n        } else {\n            result\
    \ += s[i];\n        }\n    }\n    if (result.empty()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpv3c6dgww: /tmp/tmpv3c6dgww.cpp:37: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    if(s.size()\
    \ == 0) return s;\n    for(int i = 0; i < s.size(); i++){\n        if(s[i] >=\
    \ 'a' && s[i] <= 'z'){\n            result += (char)(s[i] - 'a' + 'A');\n    \
    \    }\n        else if(s[i] >= 'A' && s[i] <= 'Z'){\n            result += (char)(s[i]\
    \ - 'A' + 'a');\n        }\n        else{\n            result += s[i];\n     \
    \   }\n    }\n    if(result.size() == s.size()){\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmp2ahknauq: /tmp/tmp2ahknauq.cpp:33: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            result += toupper(s[i]);\n        } else if (s[i] >=\
    \ 'A' && s[i] <= 'Z') {\n            result += tolower(s[i]);\n        } else\
    \ {\n            result += s[i];\n        }\n    }\n    if (result == s) {\n \
    \       std::reverse(result.begin(), result.end());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if(s.empty()) return s;\n\
    \    std::string res = \"\";\n    for(int i = 0; i < s.size(); i++){\n       \
    \ if(isalpha(s[i])){\n            if(isupper(s[i])) res += tolower(s[i]);\n  \
    \          else res += toupper(s[i]);\n        }\n        else res += s[i];\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp3cz173n8: /tmp/tmp3cz173n8.cpp:27: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    if(s.empty())\
    \ return result;\n    for(int i = 0; i < s.size(); i++){\n        if(isalpha(s[i])){\n\
    \            if(islower(s[i])){\n                result += toupper(s[i]);\n  \
    \          }else{\n                result += tolower(s[i]);\n            }\n \
    \       }else{\n            result += s[i];\n        }\n    }\n    if(result.empty()){\n\
    \        std::reverse(s.begin(), s.end());\n        return s;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpg2as29bd: /tmp/tmpg2as29bd.cpp:35: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for\
    \ (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n           \
    \ if (isupper(s[i])) {\n                result += tolower(s[i]);\n           \
    \ } else {\n                result += toupper(s[i]);\n            }\n        }\
    \ else {\n            result += s[i];\n        }\n    }\n    if (result.size()\
    \ == 0) {\n        return s;\n    }\n    return result;\n}\nint main() {\n   \
    \ auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpvpdg8fsw: /tmp/tmpvpdg8fsw.cpp:33: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res = \"\";\n\
    \    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i] <=\
    \ 'z') {\n            res += toupper(s[i]);\n        } else if (s[i] >= 'A' &&\
    \ s[i] <= 'Z') {\n            res += tolower(s[i]);\n        } else {\n      \
    \      res += s[i];\n        }\n    }\n    if (res.size() == s.size()) {\n   \
    \     std::reverse(res.begin(), res.end());\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp9qemcj3_: /tmp/tmp9qemcj3_.cpp:30: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            result += s[i] - 32;\n        } else if (s[i] >= 'A'\
    \ && s[i] <= 'Z') {\n            result += s[i] + 32;\n        } else {\n    \
    \        result += s[i];\n        }\n    }\n    if (result == s) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            result += toupper(s[i]);\n        } else if (s[i] >=\
    \ 'A' && s[i] <= 'Z') {\n            result += tolower(s[i]);\n        } else\
    \ {\n            result += s[i];\n        }\n    }\n    if (result == s) {\n \
    \       std::reverse(result.begin(), result.end());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    bool\
    \ is_letter = false;\n    for (char c : s) {\n        if (isalpha(c)) {\n    \
    \        is_letter = true;\n            if (isupper(c)) {\n                result\
    \ += tolower(c);\n            } else {\n                result += toupper(c);\n\
    \            }\n        } else {\n            result += c;\n        }\n    }\n\
    \    if (!is_letter) {\n        std::reverse(result.begin(), result.end());\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n   \
    \ assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    if(s.length() == 0)\n        return result;\n    for(int i = 0; i < s.length();\
    \ i++){\n        if(isalpha(s[i])){\n            if(islower(s[i]))\n         \
    \       result += toupper(s[i]);\n            else\n                result +=\
    \ tolower(s[i]);\n        }\n        else\n            result += s[i];\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpwwipsmis: /tmp/tmpwwipsmis.cpp:31: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    if(s.size()\
    \ == 0) {\n        return result;\n    }\n    for(int i = 0; i < s.size(); i++)\
    \ {\n        if(s[i] >= 'a' && s[i] <= 'z') {\n            result += toupper(s[i]);\n\
    \        } else if(s[i] >= 'A' && s[i] <= 'Z') {\n            result += tolower(s[i]);\n\
    \        } else {\n            result += s[i];\n        }\n    }\n    if(result.size()\
    \ == s.size()) {\n        std::reverse(result.begin(), result.end());\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpmhx1xse9: /tmp/tmpmhx1xse9.cpp:33: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            result += toupper(s[i]);\n        } else if (s[i] >=\
    \ 'A' && s[i] <= 'Z') {\n            result += tolower(s[i]);\n        } else\
    \ {\n            result += s[i];\n        }\n    }\n    if (result == s) {\n \
    \       std::reverse(result.begin(), result.end());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for\
    \ (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n\
    \            result += toupper(s[i]);\n        } else if (s[i] >= 'A' && s[i]\
    \ <= 'Z') {\n            result += tolower(s[i]);\n        } else {\n        \
    \    result += s[i];\n        }\n    }\n    if (result.size() == s.size()) {\n\
    \        std::reverse(result.begin(), result.end());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmppmmude_b: /tmp/tmppmmude_b.cpp:30: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res = \"\";\n\
    \    bool isLetter = false;\n    for (int i = 0; i < s.size(); i++) {\n      \
    \  if (isalpha(s[i])) {\n            isLetter = true;\n            if (islower(s[i]))\
    \ {\n                res += toupper(s[i]);\n            } else {\n           \
    \     res += tolower(s[i]);\n            }\n        } else {\n            res\
    \ += s[i];\n        }\n    }\n    if (!isLetter) {\n        std::reverse(res.begin(),\
    \ res.end());\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    if (s.length() == 0) {\n        return result;\n    }\n    for (int i =\
    \ 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n     \
    \       result += toupper(s[i]);\n        } else if (s[i] >= 'A' && s[i] <= 'Z')\
    \ {\n            result += tolower(s[i]);\n        } else {\n            result\
    \ += s[i];\n        }\n    }\n    if (result == s) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    for (auto c : s) {\n        if (isalpha(c)) {\n            if (islower(c))\
    \ {\n                result += toupper(c);\n            } else {\n           \
    \     result += tolower(c);\n            }\n        } else {\n            result\
    \ += c;\n        }\n    }\n    if (result.size() == 0) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpboc57s_v: /tmp/tmpboc57s_v.cpp:34: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for\
    \ (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n\
    \            result += toupper(s[i]);\n        } else if (s[i] >= 'A' && s[i]\
    \ <= 'Z') {\n            result += tolower(s[i]);\n        } else {\n        \
    \    result += s[i];\n        }\n    }\n    if (result.size() == s.size()) {\n\
    \        std::reverse(result.begin(), result.end());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmplq9gngfo: /tmp/tmplq9gngfo.cpp:30: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    int len = s.length();\n  \
    \  if(len == 0)\n        return s;\n    for(int i = 0; i < len; i++) {\n     \
    \   if(isalpha(s[i])) {\n            if(islower(s[i]))\n                s[i] =\
    \ toupper(s[i]);\n            else\n                s[i] = tolower(s[i]);\n  \
    \      }\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpt3iooyxu: /tmp/tmpt3iooyxu.cpp:29: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for\
    \ (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n           \
    \ if (isupper(s[i])) {\n                res += tolower(s[i]);\n            } else\
    \ {\n                res += toupper(s[i]);\n            }\n        } else {\n\
    \            res += s[i];\n        }\n    }\n    if (res.size() == 0) {\n    \
    \    std::reverse(s.begin(), s.end());\n        return s;\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpe3dp_32p: /tmp/tmpe3dp_32p.cpp:34: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    if\
    \ (s.empty()) {\n        return result;\n    }\n    for (int i = 0; i < s.size();\
    \ i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n   \
    \             result += toupper(s[i]);\n            } else {\n               \
    \ result += tolower(s[i]);\n            }\n        } else {\n            result\
    \ += s[i];\n        }\n    }\n    if (result.empty()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpj229w66f: /tmp/tmpj229w66f.cpp:37: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    if(s.length() == 0) return result;\n    for(int i = 0; i < s.length();\
    \ i++){\n        if(s[i] >= 'a' && s[i] <= 'z'){\n            result += toupper(s[i]);\n\
    \        }\n        else if(s[i] >= 'A' && s[i] <= 'Z'){\n            result +=\
    \ tolower(s[i]);\n        }\n        else{\n            result += s[i];\n    \
    \    }\n    }\n    if(result == s) std::reverse(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    if\
    \ (s.size() == 0) {\n        return s;\n    }\n    for (int i = 0; i < s.size();\
    \ i++) {\n        if (std::isalpha(s[i])) {\n            if (std::isupper(s[i]))\
    \ {\n                result += std::tolower(s[i]);\n            } else {\n   \
    \             result += std::toupper(s[i]);\n            }\n        } else {\n\
    \            result += s[i];\n        }\n    }\n    if (std::isalpha(result[0]))\
    \ {\n        return result;\n    } else {\n        std::reverse(result.begin(),\
    \ result.end());\n        return result;\n    }\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmp9a6f1kt9: /tmp/tmp9a6f1kt9.cpp:40: int main(): Assertion `candidate((\"\
    #a@C\")) == (\"#A@c\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for\
    \ (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n\
    \            result += toupper(s[i]);\n        } else if (s[i] >= 'A' && s[i]\
    \ <= 'Z') {\n            result += tolower(s[i]);\n        } else {\n        \
    \    result += s[i];\n        }\n    }\n    if (result.size() == s.size()) {\n\
    \        std::reverse(result.begin(), result.end());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpc8s2rz_g: /tmp/tmpc8s2rz_g.cpp:30: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if (s.size() == 0) {\n   \
    \     return s;\n    }\n    std::string result = \"\";\n    for (int i = 0; i\
    \ < s.size(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            result\
    \ += toupper(s[i]);\n        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      \
    \      result += tolower(s[i]);\n        } else {\n            result += s[i];\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmp6cle32mc: /tmp/tmp6cle32mc.cpp:31: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            result += toupper(s[i]);\n        } else if (s[i] >=\
    \ 'A' && s[i] <= 'Z') {\n            result += tolower(s[i]);\n        } else\
    \ {\n            result += s[i];\n        }\n    }\n    if (result == s) {\n \
    \       std::reverse(result.begin(), result.end());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for\
    \ (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n           \
    \ if (islower(s[i])) {\n                result += toupper(s[i]);\n           \
    \ } else {\n                result += tolower(s[i]);\n            }\n        }\
    \ else {\n            result += s[i];\n        }\n    }\n    if (result.size()\
    \ == 0) {\n        return s;\n    }\n    return result;\n}\nint main() {\n   \
    \ auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpd43xhimb: /tmp/tmpd43xhimb.cpp:33: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res = \"\";\n\
    \    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i] <=\
    \ 'z') {\n            res += s[i] - 32;\n        } else if (s[i] >= 'A' && s[i]\
    \ <= 'Z') {\n            res += s[i] + 32;\n        } else {\n            res\
    \ += s[i];\n        }\n    }\n    if (res.size() == s.size()) {\n        std::reverse(res.begin(),\
    \ res.end());\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpvvkwx3_q: /tmp/tmpvvkwx3_q.cpp:30: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    bool\
    \ flag = true;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >=\
    \ 'a' && s[i] <= 'z') {\n            flag = false;\n            res += toupper(s[i]);\n\
    \        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            flag = false;\n\
    \            res += tolower(s[i]);\n        } else {\n            res += s[i];\n\
    \        }\n    }\n    if (flag) {\n        std::reverse(res.begin(), res.end());\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    if (s.length() == 0) {\n        return result;\n    }\n    for (int i =\
    \ 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n     \
    \       result += toupper(s[i]);\n        } else if (s[i] >= 'A' && s[i] <= 'Z')\
    \ {\n            result += tolower(s[i]);\n        } else {\n            result\
    \ += s[i];\n        }\n    }\n    if (result.length() == s.length()) {\n     \
    \   std::reverse(result.begin(), result.end());\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) ==\
    \ (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpaatp1aha: /tmp/tmpaatp1aha.cpp:33: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if(s.size() == 0) return s;\n\
    \    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n      \
    \      if(islower(s[i])) s[i] = toupper(s[i]);\n            else s[i] = tolower(s[i]);\n\
    \        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmptfvgmo9m: /tmp/tmptfvgmo9m.cpp:25: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    if (s.length() == 0) {\n        return result;\n    }\n    for (int i =\
    \ 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n     \
    \       result += toupper(s[i]);\n        } else if (s[i] >= 'A' && s[i] <= 'Z')\
    \ {\n            result += tolower(s[i]);\n        } else {\n            result\
    \ += s[i];\n        }\n    }\n    if (result == s) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    if(s.length() == 0) return result;\n    for(int i = 0; i < s.length();\
    \ i++){\n        if(s[i] >= 'a' && s[i] <= 'z'){\n            result += s[i] -\
    \ 32;\n        }\n        else if(s[i] >= 'A' && s[i] <= 'Z'){\n            result\
    \ += s[i] + 32;\n        }\n        else{\n            result += s[i];\n     \
    \   }\n    }\n    if(result == s){\n        std::reverse(result.begin(), result.end());\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n   \
    \ assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  std::string result = \"\";\n\
    \  bool has_letter = false;\n  for (int i = 0; i < s.size(); i++) {\n    if (isalpha(s[i]))\
    \ {\n      has_letter = true;\n      if (isupper(s[i])) {\n        result += tolower(s[i]);\n\
    \      } else {\n        result += toupper(s[i]);\n      }\n    } else {\n   \
    \   result += s[i];\n    }\n  }\n  if (!has_letter) {\n    std::reverse(result.begin(),\
    \ result.end());\n  }\n  return result;\n}\nint main() {\n    auto candidate =\
    \ solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for\
    \ (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n           \
    \ if (isupper(s[i])) {\n                result += tolower(s[i]);\n           \
    \ } else {\n                result += toupper(s[i]);\n            }\n        }\
    \ else {\n            result += s[i];\n        }\n    }\n    if (result.size()\
    \ == 0) {\n        return s;\n    }\n    return result;\n}\nint main() {\n   \
    \ auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp02e9m105: /tmp/tmp02e9m105.cpp:33: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            result += toupper(s[i]);\n        } else if (s[i] >=\
    \ 'A' && s[i] <= 'Z') {\n            result += tolower(s[i]);\n        } else\
    \ {\n            result += s[i];\n        }\n    }\n    if (result.length() ==\
    \ s.length()) {\n        std::reverse(result.begin(), result.end());\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp2afnr6je: /tmp/tmp2afnr6je.cpp:30: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    if\
    \ (s.length() == 0) {\n        return result;\n    }\n    for (int i = 0; i <\
    \ s.length(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            result\
    \ += s[i] - 32;\n        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n          \
    \  result += s[i] + 32;\n        } else {\n            result += s[i];\n     \
    \   }\n    }\n    if (result.length() == s.length()) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpb5qd7hjo: /tmp/tmpb5qd7hjo.cpp:33: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    int i = 0;\n    while(i <\
    \ s.size() && !isalpha(s[i])) i++;\n    if(i == s.size()) return std::string(s.rbegin(),\
    \ s.rend());\n    for(int j = 0; j < s.size(); j++) {\n        if(isalpha(s[j]))\
    \ {\n            if(islower(s[j])) s[j] = toupper(s[j]);\n            else s[j]\
    \ = tolower(s[j]);\n        }\n    }\n    return s;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    if (s.length() == 0) {\n        return result;\n    }\n    for (int i =\
    \ 0; i < s.length(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i]))\
    \ {\n                result += toupper(s[i]);\n            } else {\n        \
    \        result += tolower(s[i]);\n            }\n        } else {\n         \
    \   result += s[i];\n        }\n    }\n    if (result.length() == s.length())\
    \ {\n        std::reverse(result.begin(), result.end());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpnc411k6j: /tmp/tmpnc411k6j.cpp:35: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res = \"\";\n\
    \    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i] <=\
    \ 'z') {\n            res += toupper(s[i]);\n        } else if (s[i] >= 'A' &&\
    \ s[i] <= 'Z') {\n            res += tolower(s[i]);\n        } else {\n      \
    \      res += s[i];\n        }\n    }\n    if (res == s) {\n        std::reverse(res.begin(),\
    \ res.end());\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            result += toupper(s[i]);\n        } else if (s[i] >=\
    \ 'A' && s[i] <= 'Z') {\n            result += tolower(s[i]);\n        } else\
    \ {\n            result += s[i];\n        }\n    }\n    if (result.length() ==\
    \ s.length()) {\n        std::reverse(result.begin(), result.end());\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpapvhcunw: /tmp/tmpapvhcunw.cpp:30: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    if(s.size()\
    \ == 0) return s;\n    for(int i = 0; i < s.size(); i++){\n        if(isalpha(s[i])){\n\
    \            if(islower(s[i])){\n                result += toupper(s[i]);\n  \
    \          }\n            else{\n                result += tolower(s[i]);\n  \
    \          }\n        }\n        else{\n            result += s[i];\n        }\n\
    \    }\n    if(isalpha(result[0])){\n        return result;\n    }\n    else{\n\
    \        std::reverse(result.begin(), result.end());\n        return result;\n\
    \    }\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpgdtsyp_i: /tmp/tmpgdtsyp_i.cpp:41: int main(): Assertion `candidate((\"\
    #a@C\")) == (\"#A@c\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    if\
    \ (s.empty()) {\n        return result;\n    }\n    for (auto c : s) {\n     \
    \   if (isalpha(c)) {\n            if (isupper(c)) {\n                result +=\
    \ tolower(c);\n            } else {\n                result += toupper(c);\n \
    \           }\n        } else {\n            result += c;\n        }\n    }\n\
    \    if (result.empty()) {\n        std::reverse(s.begin(), s.end());\n      \
    \  return s;\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpetkj1cj5: /tmp/tmpetkj1cj5.cpp:37: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    if(s.size() == 0) return result;\n    for(int i = 0; i < s.size(); i++){\n\
    \        if(s[i] >= 'a' && s[i] <= 'z'){\n            result += toupper(s[i]);\n\
    \        }\n        else if(s[i] >= 'A' && s[i] <= 'Z'){\n            result +=\
    \ tolower(s[i]);\n        }\n        else{\n            result += s[i];\n    \
    \    }\n    }\n    if(result == s){\n        std::reverse(result.begin(), result.end());\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n   \
    \ assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    if(s.size()\
    \ == 0)\n        return s;\n    for(int i = 0; i < s.size(); i++){\n        if(s[i]\
    \ >= 'a' && s[i] <= 'z'){\n            result += s[i] - 32;\n        }\n     \
    \   else if(s[i] >= 'A' && s[i] <= 'Z'){\n            result += s[i] + 32;\n \
    \       }\n        else{\n            result += s[i];\n        }\n    }\n    if(result.size()\
    \ == s.size()){\n        std::reverse(result.begin(), result.end());\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpjm0gi6c1: /tmp/tmpjm0gi6c1.cpp:34: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if(s.size() == 0)\n      \
    \  return s;\n    for(int i = 0; i < s.size(); i++) {\n        if(s[i] >= 'a'\
    \ && s[i] <= 'z')\n            s[i] = toupper(s[i]);\n        else if(s[i] >=\
    \ 'A' && s[i] <= 'Z')\n            s[i] = tolower(s[i]);\n    }\n    return s;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpedsrhlmn: /tmp/tmpedsrhlmn.cpp:26: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    if(s.length()\
    \ == 0) return s;\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] >=\
    \ 'a' && s[i] <= 'z'){\n            result += toupper(s[i]);\n        }\n    \
    \    else if(s[i] >= 'A' && s[i] <= 'Z'){\n            result += tolower(s[i]);\n\
    \        }\n        else{\n            result += s[i];\n        }\n    }\n   \
    \ if(result == s){\n        std::reverse(result.begin(), result.end());\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res = \"\";\n\
    \    if (s.length() == 0) return res;\n    for (int i = 0; i < s.length(); i++)\
    \ {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            res += toupper(s[i]);\n\
    \        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            res += tolower(s[i]);\n\
    \        } else {\n            res += s[i];\n        }\n    }\n    if (res.length()\
    \ == s.length()) {\n        std::reverse(res.begin(), res.end());\n    }\n   \
    \ return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpsg01lz1x: /tmp/tmpsg01lz1x.cpp:31: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    if (s.length() == 0) {\n        return result;\n    }\n    for (int i =\
    \ 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n     \
    \       result += toupper(s[i]);\n        } else if (s[i] >= 'A' && s[i] <= 'Z')\
    \ {\n            result += tolower(s[i]);\n        } else {\n            result\
    \ += s[i];\n        }\n    }\n    if (result.length() == s.length()) {\n     \
    \   std::reverse(result.begin(), result.end());\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) ==\
    \ (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpyybmsjl3: /tmp/tmpyybmsjl3.cpp:33: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    if\
    \ (s.size() == 0) return result;\n    for (int i = 0; i < s.size(); i++) {\n \
    \       if (s[i] >= 'a' && s[i] <= 'z') {\n            result += toupper(s[i]);\n\
    \        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            result += tolower(s[i]);\n\
    \        } else {\n            result += s[i];\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp6xl0i5uk: /tmp/tmp6xl0i5uk.cpp:29: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    if(s.length()\
    \ == 0) return s;\n    for(int i = 0; i < s.length(); i++){\n        if(isalpha(s[i])){\n\
    \            if(isupper(s[i])){\n                result += tolower(s[i]);\n  \
    \          }\n            else{\n                result += toupper(s[i]);\n  \
    \          }\n        }\n        else{\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n   \
    \ assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpvwbuaz54: /tmp/tmpvwbuaz54.cpp:33: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    int n = s.size();\n    if(n\
    \ == 0) return \"\";\n    for(int i = 0; i < n; i++) {\n        if(isalpha(s[i]))\
    \ {\n            if(islower(s[i])) s[i] = toupper(s[i]);\n            else s[i]\
    \ = tolower(s[i]);\n        }\n    }\n    return s;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpa9kntkol: /tmp/tmpa9kntkol.cpp:26: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    if (s.length() == 0) {\n        return s;\n    }\n    for (int i = 0; i\
    \ < s.length(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n          \
    \  result += toupper(s[i]);\n        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n\
    \            result += tolower(s[i]);\n        } else {\n            result +=\
    \ s[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpis0xyoc4: /tmp/tmpis0xyoc4.cpp:31: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    int n = s.size();\n    if(n\
    \ == 0) return \"\";\n    for(int i = 0; i < n; i++) {\n        if(isalpha(s[i]))\
    \ {\n            if(isupper(s[i])) s[i] = tolower(s[i]);\n            else s[i]\
    \ = toupper(s[i]);\n        }\n    }\n    reverse(s.begin(), s.end());\n    return\
    \ s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"\
    )) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpyrqhsji8: /tmp/tmpyrqhsji8.cpp:26: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    if(s.empty())\
    \ return res;\n    for(int i = 0; i < s.size(); i++){\n        if(isalpha(s[i])){\n\
    \            if(islower(s[i])){\n                res += toupper(s[i]);\n     \
    \       }else{\n                res += tolower(s[i]);\n            }\n       \
    \ }else{\n            res += s[i];\n        }\n    }\n    if(res.empty()) return\
    \ s;\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpw0trw55x: /tmp/tmpw0trw55x.cpp:32: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for\
    \ (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n           \
    \ if (islower(s[i])) {\n                res += toupper(s[i]);\n            } else\
    \ {\n                res += tolower(s[i]);\n            }\n        } else {\n\
    \            res += s[i];\n        }\n    }\n    if (res.size() == 0) {\n    \
    \    std::reverse(s.begin(), s.end());\n        return s;\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpl6zq8pu3: /tmp/tmpl6zq8pu3.cpp:34: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\tstd::string res;\n\tfor (int\
    \ i = 0; i < s.size(); i++) {\n\t\tif (isalpha(s[i])) {\n\t\t\tif (isupper(s[i]))\
    \ {\n\t\t\t\tres += tolower(s[i]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tres += toupper(s[i]);\n\
    \t\t\t}\n\t\t}\n\t\telse {\n\t\t\tres += s[i];\n\t\t}\n\t}\n\tif (res.size() ==\
    \ 0) {\n\t\tres = s;\n\t}\n\treturn res;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmp14etkfoa: /tmp/tmp14etkfoa.cpp:35: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            result += toupper(s[i]);\n        } else if (s[i] >=\
    \ 'A' && s[i] <= 'Z') {\n            result += tolower(s[i]);\n        } else\
    \ {\n            result += s[i];\n        }\n    }\n    if (result.length() ==\
    \ s.length()) {\n        std::reverse(result.begin(), result.end());\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpzpfzq464: /tmp/tmpzpfzq464.cpp:30: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for\
    \ (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n           \
    \ if (isupper(s[i])) {\n                result += tolower(s[i]);\n           \
    \ } else {\n                result += toupper(s[i]);\n            }\n        }\
    \ else {\n            result += s[i];\n        }\n    }\n    if (result.size()\
    \ == 0) {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp4jdyrota: /tmp/tmp4jdyrota.cpp:34: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    if(s.size()\
    \ == 0) return res;\n    for(int i = 0; i < s.size(); i++){\n        if(isalpha(s[i])){\n\
    \            if(islower(s[i])){\n                res += toupper(s[i]);\n     \
    \       }\n            else{\n                res += tolower(s[i]);\n        \
    \    }\n        }\n        else{\n            res += s[i];\n        }\n    }\n\
    \    if(res.size() == 0) return s;\n    return res;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmp_crv2iqq: /tmp/tmp_crv2iqq.cpp:34: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    if(s.size() == 0) return result;\n    for(int i = 0; i < s.size(); i++){\n\
    \        if(s[i] >= 'a' && s[i] <= 'z'){\n            result += toupper(s[i]);\n\
    \        }\n        else if(s[i] >= 'A' && s[i] <= 'Z'){\n            result +=\
    \ tolower(s[i]);\n        }\n        else{\n            result += s[i];\n    \
    \    }\n    }\n    if(result == s){\n        std::reverse(result.begin(), result.end());\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n   \
    \ assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for\
    \ (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n\
    \            res += toupper(s[i]);\n        } else if (s[i] >= 'A' && s[i] <=\
    \ 'Z') {\n            res += tolower(s[i]);\n        } else {\n            res\
    \ += s[i];\n        }\n    }\n    if (res.size() == s.size()) {\n        std::reverse(res.begin(),\
    \ res.end());\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpg9phcbef: /tmp/tmpg9phcbef.cpp:30: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    int len = s.length();\n  \
    \  if(len == 0) return s;\n    for(int i = 0; i < len; i++) {\n        if(s[i]\
    \ >= 'a' && s[i] <= 'z') {\n            s[i] = s[i] - 32;\n        } else if(s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n            s[i] = s[i] + 32;\n        }\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpcbzle_d2: /tmp/tmpcbzle_d2.cpp:27: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    int len = s.length();\n  \
    \  if(len == 0) return s;\n    for(int i = 0; i < len; i++) {\n        if(s[i]\
    \ >= 'a' && s[i] <= 'z') {\n            s[i] = s[i] - 'a' + 'A';\n        } else\
    \ if(s[i] >= 'A' && s[i] <= 'Z') {\n            s[i] = s[i] - 'A' + 'a';\n   \
    \     }\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpdh8fl71d: /tmp/tmpdh8fl71d.cpp:27: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            result += toupper(s[i]);\n        } else if (s[i] >=\
    \ 'A' && s[i] <= 'Z') {\n            result += tolower(s[i]);\n        } else\
    \ {\n            result += s[i];\n        }\n    }\n    if (result.length() ==\
    \ s.length()) {\n        std::reverse(result.begin(), result.end());\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpx8boc26q: /tmp/tmpx8boc26q.cpp:30: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    int len = s.length();\n  \
    \  if(len == 0) return s;\n    for(int i = 0; i < len; i++) {\n        if(s[i]\
    \ >= 'a' && s[i] <= 'z') {\n            s[i] = s[i] - 'a' + 'A';\n        } else\
    \ if(s[i] >= 'A' && s[i] <= 'Z') {\n            s[i] = s[i] - 'A' + 'a';\n   \
    \     }\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpd4i22hjb: /tmp/tmpd4i22hjb.cpp:27: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    if (s.size() == 0) {\n        return s;\n    }\n    for (int i = 0; i <\
    \ s.size(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            result\
    \ += toupper(s[i]);\n        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      \
    \      result += tolower(s[i]);\n        } else {\n            result += s[i];\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpvzsn2b4m: /tmp/tmpvzsn2b4m.cpp:31: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res = \"\";\n\
    \    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i] <=\
    \ 'z') {\n            res += toupper(s[i]);\n        } else if (s[i] >= 'A' &&\
    \ s[i] <= 'Z') {\n            res += tolower(s[i]);\n        } else {\n      \
    \      res += s[i];\n        }\n    }\n    if (res == s) {\n        std::reverse(res.begin(),\
    \ res.end());\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if(s.length() == 0) return\
    \ s;\n    for(int i = 0; i < s.length(); i++) {\n        if(isalpha(s[i])) {\n\
    \            if(isupper(s[i])) {\n                s[i] = tolower(s[i]);\n    \
    \        } else {\n                s[i] = toupper(s[i]);\n            }\n    \
    \    }\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n \
    \   assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpri0zq21u: /tmp/tmpri0zq21u.cpp:28: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    bool isLetter = false;\n    for (int i = 0; i < s.length(); i++) {\n  \
    \      if (isalpha(s[i])) {\n            isLetter = true;\n            if (islower(s[i]))\
    \ {\n                result += toupper(s[i]);\n            } else {\n        \
    \        result += tolower(s[i]);\n            }\n        } else {\n         \
    \   result += s[i];\n        }\n    }\n    if (!isLetter) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    if (s.length() == 0) {\n        return result;\n    }\n    for (int i =\
    \ 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n     \
    \       result += toupper(s[i]);\n        } else if (s[i] >= 'A' && s[i] <= 'Z')\
    \ {\n            result += tolower(s[i]);\n        } else {\n            result\
    \ += s[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmp91lrpkce: /tmp/tmp91lrpkce.cpp:31: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    if(s.length() == 0) return s;\n    for(int i = 0; i < s.length(); i++){\n\
    \        if(s[i] >= 'a' && s[i] <= 'z'){\n            result += toupper(s[i]);\n\
    \        }else if(s[i] >= 'A' && s[i] <= 'Z'){\n            result += tolower(s[i]);\n\
    \        }else{\n            result += s[i];\n        }\n    }\n    if(result\
    \ == s){\n        std::reverse(result.begin(), result.end());\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res = \"\";\n\
    \    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i] <=\
    \ 'z') {\n            res += toupper(s[i]);\n        } else if (s[i] >= 'A' &&\
    \ s[i] <= 'Z') {\n            res += tolower(s[i]);\n        } else {\n      \
    \      res += s[i];\n        }\n    }\n    if (res == s) {\n        std::reverse(res.begin(),\
    \ res.end());\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  std::string result;\n  for (int\
    \ i = 0; i < s.size(); i++) {\n    if (isalpha(s[i])) {\n      if (islower(s[i]))\
    \ {\n        result += toupper(s[i]);\n      } else {\n        result += tolower(s[i]);\n\
    \      }\n    } else {\n      result += s[i];\n    }\n  }\n  if (result.size()\
    \ == 0) {\n    std::reverse(s.begin(), s.end());\n    return s;\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpxfetrz81: /tmp/tmpxfetrz81.cpp:34: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    if\
    \ (s.size() == 0) {\n        return s;\n    }\n    for (int i = 0; i < s.size();\
    \ i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            result += toupper(s[i]);\n\
    \        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            result += tolower(s[i]);\n\
    \        } else {\n            result += s[i];\n        }\n    }\n    if (result\
    \ == s) {\n        std::reverse(result.begin(), result.end());\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    if(s.size()\
    \ == 0) return s;\n    for(int i = 0; i < s.size(); i++){\n        if(isalpha(s[i])){\n\
    \            if(islower(s[i])){\n                res += toupper(s[i]);\n     \
    \       }\n            else{\n                res += tolower(s[i]);\n        \
    \    }\n        }\n        else{\n            res += s[i];\n        }\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpr8ed3id1: /tmp/tmpr8ed3id1.cpp:33: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    if (s.length() == 0) {\n        return result;\n    }\n    for (int i =\
    \ 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n     \
    \       result += toupper(s[i]);\n        } else if (s[i] >= 'A' && s[i] <= 'Z')\
    \ {\n            result += tolower(s[i]);\n        } else {\n            result\
    \ += s[i];\n        }\n    }\n    if (result.length() == s.length()) {\n     \
    \   std::reverse(result.begin(), result.end());\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) ==\
    \ (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpgrelk5a9: /tmp/tmpgrelk5a9.cpp:33: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for\
    \ (auto c : s) {\n        if (std::isalpha(c)) {\n            result += std::toupper(c);\n\
    \        } else {\n            result += c;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpzorz9n8d: /tmp/tmpzorz9n8d.cpp:25: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    if(s.size()\
    \ == 0) return res;\n    for(int i = 0; i < s.size(); i++){\n        if(isalpha(s[i])){\n\
    \            if(islower(s[i])){\n                res += toupper(s[i]);\n     \
    \       }\n            else{\n                res += tolower(s[i]);\n        \
    \    }\n        }\n        else{\n            res += s[i];\n        }\n    }\n\
    \    if(res.size() == 0) return s;\n    return res;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpn348z50b: /tmp/tmpn348z50b.cpp:34: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    if (s.length() == 0) {\n        return result;\n    }\n    for (int i =\
    \ 0; i < s.length(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i]))\
    \ {\n                result += toupper(s[i]);\n            } else {\n        \
    \        result += tolower(s[i]);\n            }\n        } else {\n         \
    \   result += s[i];\n        }\n    }\n    if (result.length() == s.length())\
    \ {\n        std::reverse(result.begin(), result.end());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpizbgm7ac: /tmp/tmpizbgm7ac.cpp:35: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    if\
    \ (s.size() == 0) {\n        return result;\n    }\n    for (int i = 0; i < s.size();\
    \ i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n   \
    \             result += toupper(s[i]);\n            } else {\n               \
    \ result += tolower(s[i]);\n            }\n        } else {\n            result\
    \ += s[i];\n        }\n    }\n    if (result.size() == s.size()) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpst60whx2: /tmp/tmpst60whx2.cpp:35: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    if(s.length() == 0) return result;\n    for(int i = 0; i < s.length();\
    \ i++){\n        if(s[i] >= 'a' && s[i] <= 'z'){\n            result += toupper(s[i]);\n\
    \        }\n        else if(s[i] >= 'A' && s[i] <= 'Z'){\n            result +=\
    \ tolower(s[i]);\n        }\n        else{\n            result += s[i];\n    \
    \    }\n    }\n    if(result == s)\n        std::reverse(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            result += toupper(s[i]);\n        } else if (s[i] >=\
    \ 'A' && s[i] <= 'Z') {\n            result += tolower(s[i]);\n        } else\
    \ {\n            result += s[i];\n        }\n    }\n    if (result == s) {\n \
    \       std::reverse(result.begin(), result.end());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    if(s.size()\
    \ == 0) return res;\n    for(int i = 0; i < s.size(); i++){\n        if(isalpha(s[i])){\n\
    \            if(islower(s[i])){\n                res += toupper(s[i]);\n     \
    \       }else{\n                res += tolower(s[i]);\n            }\n       \
    \ }else{\n            res += s[i];\n        }\n    }\n    if(res.size() == 0)\
    \ return s;\n    return res;\n}\nint main() {\n    auto candidate = solve;\n \
    \   assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpx1uihhg_: /tmp/tmpx1uihhg_.cpp:32: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    if (s.size() == 0) {\n        return result;\n    }\n    for (int i = 0;\
    \ i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n          \
    \  result += toupper(s[i]);\n        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n\
    \            result += tolower(s[i]);\n        } else {\n            result +=\
    \ s[i];\n        }\n    }\n    if (result.size() == s.size()) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpn2jfqcwv: /tmp/tmpn2jfqcwv.cpp:33: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for\
    \ (char c : s) {\n        if (isalpha(c)) {\n            if (isupper(c)) {\n \
    \               result += tolower(c);\n            } else {\n                result\
    \ += toupper(c);\n            }\n        } else {\n            result += c;\n\
    \        }\n    }\n    if (result.size() == 0) {\n        return s;\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpen0uhwa0: /tmp/tmpen0uhwa0.cpp:33: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if(s.empty()) return s;\n\
    \    std::string res;\n    for(auto c : s) {\n        if(isalpha(c)) {\n     \
    \       if(isupper(c)) res += tolower(c);\n            else res += toupper(c);\n\
    \        }\n        else res += c;\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpx1fo7scq: /tmp/tmpx1fo7scq.cpp:27: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res = \"\";\n\
    \    if (s.size() == 0) return res;\n    for (int i = 0; i < s.size(); i++) {\n\
    \        if (s[i] >= 'a' && s[i] <= 'z') {\n            res += toupper(s[i]);\n\
    \        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            res += tolower(s[i]);\n\
    \        } else {\n            res += s[i];\n        }\n    }\n    if (res.find_first_of(\"\
    abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\") == std::string::npos)\
    \ {\n        std::reverse(res.begin(), res.end());\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) ==\
    \ (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if(s.empty()) return s;\n\
    \    std::string res;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            if(isupper(s[i])) res += tolower(s[i]);\n            else res\
    \ += toupper(s[i]);\n        }\n        else res += s[i];\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpu9c_zb8m: /tmp/tmpu9c_zb8m.cpp:27: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for\
    \ (auto c : s) {\n        if (isalpha(c)) {\n            result += isupper(c)\
    \ ? tolower(c) : toupper(c);\n        } else {\n            result += c;\n   \
    \     }\n    }\n    if (result.empty()) {\n        std::reverse(s.begin(), s.end());\n\
    \        return s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpa7fv08bi: /tmp/tmpa7fv08bi.cpp:30: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    int len = s.length();\n  \
    \  if(len == 0) return s;\n    for(int i = 0; i < len; i++) {\n        if(isalpha(s[i]))\
    \ {\n            if(islower(s[i])) {\n                s[i] = toupper(s[i]);\n\
    \            } else {\n                s[i] = tolower(s[i]);\n            }\n\
    \        }\n    }\n    std::reverse(s.begin(), s.end());\n    return s;\n}\nint\
    \ main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"\
    aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpio8wpahj: /tmp/tmpio8wpahj.cpp:29: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    if\
    \ (s.size() == 0) return result;\n    for (int i = 0; i < s.size(); i++) {\n \
    \       if (isalpha(s[i])) {\n            if (islower(s[i])) {\n             \
    \   result += toupper(s[i]);\n            } else {\n                result +=\
    \ tolower(s[i]);\n            }\n        } else {\n            result += s[i];\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpnnx2140c: /tmp/tmpnnx2140c.cpp:31: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    bool is_letter = false;\n    for (int i = 0; i < s.length(); i++) {\n \
    \       if (isalpha(s[i])) {\n            is_letter = true;\n            if (isupper(s[i]))\
    \ {\n                result += tolower(s[i]);\n            } else {\n        \
    \        result += toupper(s[i]);\n            }\n        } else {\n         \
    \   result += s[i];\n        }\n    }\n    if (!is_letter) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if(s.size() == 0) return s;\n\
    \    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n      \
    \      if(isupper(s[i])) s[i] = tolower(s[i]);\n            else s[i] = toupper(s[i]);\n\
    \        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpt5ovasuu: /tmp/tmpt5ovasuu.cpp:25: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    for (char c : s) {\n        if (isalpha(c)) {\n            if (islower(c))\
    \ {\n                result += toupper(c);\n            } else {\n           \
    \     result += tolower(c);\n            }\n        } else {\n            result\
    \ += c;\n        }\n    }\n    if (result.size() == 0) {\n        return s;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n   \
    \ assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpgkhrg_44: /tmp/tmpgkhrg_44.cpp:33: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if (s.size() == 0) return\
    \ s;\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n       \
    \ if (s[i] >= 'a' && s[i] <= 'z') res += toupper(s[i]);\n        else if (s[i]\
    \ >= 'A' && s[i] <= 'Z') res += tolower(s[i]);\n        else res += s[i];\n  \
    \  }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp4atup51x: /tmp/tmp4atup51x.cpp:25: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    int n = s.size();\n    if(n\
    \ == 0) return \"\";\n    for(int i = 0; i < n; i++) {\n        if(s[i] >= 'a'\
    \ && s[i] <= 'z') {\n            s[i] = s[i] - 'a' + 'A';\n        } else if(s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n            s[i] = s[i] - 'A' + 'a';\n        }\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp8d_ag01j: /tmp/tmp8d_ag01j.cpp:27: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for\
    \ (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n\
    \            result += toupper(s[i]);\n        } else if (s[i] >= 'A' && s[i]\
    \ <= 'Z') {\n            result += tolower(s[i]);\n        } else {\n        \
    \    result += s[i];\n        }\n    }\n    if (result.size() == s.size()) {\n\
    \        std::reverse(result.begin(), result.end());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp1cty4d8e: /tmp/tmp1cty4d8e.cpp:30: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if(s.size() == 0) return s;\n\
    \    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n      \
    \      if(islower(s[i])) s[i] = toupper(s[i]);\n            else s[i] = tolower(s[i]);\n\
    \        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmp12hlh9io: /tmp/tmp12hlh9io.cpp:25: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for\
    \ (auto c : s) {\n        if (isalpha(c)) {\n            if (islower(c)) {\n \
    \               res += toupper(c);\n            } else {\n                res\
    \ += tolower(c);\n            }\n        } else {\n            res += c;\n   \
    \     }\n    }\n    if (res.empty()) {\n        std::reverse(s.begin(), s.end());\n\
    \        return s;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpx0kzez0w: /tmp/tmpx0kzez0w.cpp:34: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    if\
    \ (s.size() == 0) {\n        return s;\n    }\n    for (int i = 0; i < s.size();\
    \ i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            result += toupper(s[i]);\n\
    \        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            result += tolower(s[i]);\n\
    \        } else {\n            result += s[i];\n        }\n    }\n    if (result\
    \ == s) {\n        std::reverse(result.begin(), result.end());\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    if(s.size()\
    \ == 0) return res;\n    for(int i = 0; i < s.size(); i++){\n        if(isalpha(s[i])){\n\
    \            if(isupper(s[i])){\n                res.push_back(tolower(s[i]));\n\
    \            }else{\n                res.push_back(toupper(s[i]));\n         \
    \   }\n        }else{\n            res.push_back(s[i]);\n        }\n    }\n  \
    \  if(res.size() == 0) return s;\n    return res;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmp3x4w3_c7: /tmp/tmp3x4w3_c7.cpp:32: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for\
    \ (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n           \
    \ if (islower(s[i])) {\n                result += toupper(s[i]);\n           \
    \ } else {\n                result += tolower(s[i]);\n            }\n        }\
    \ else {\n            result += s[i];\n        }\n    }\n    if (result.size()\
    \ == 0) {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmplrq41l6w: /tmp/tmplrq41l6w.cpp:34: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    if\
    \ (s.length() == 0) {\n        return s;\n    }\n    for (int i = 0; i < s.length();\
    \ i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n   \
    \             result += toupper(s[i]);\n            } else {\n               \
    \ result += tolower(s[i]);\n            }\n        } else {\n            result\
    \ += s[i];\n        }\n    }\n    if (result.length() == s.length()) {\n     \
    \   return result;\n    } else {\n        std::reverse(result.begin(), result.end());\n\
    \        return result;\n    }\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpgpco_s8t: /tmp/tmpgpco_s8t.cpp:38: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    if\
    \ (s.empty()) {\n        return result;\n    }\n    for (int i = 0; i < s.size();\
    \ i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n   \
    \             result += toupper(s[i]);\n            } else {\n               \
    \ result += tolower(s[i]);\n            }\n        } else {\n            result\
    \ += s[i];\n        }\n    }\n    if (result.empty()) {\n        return s;\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpk1ptzjoh: /tmp/tmpk1ptzjoh.cpp:36: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    if(s.length() == 0) return result;\n    for(int i = 0; i < s.length();\
    \ i++){\n        if(s[i] >= 'a' && s[i] <= 'z'){\n            result += toupper(s[i]);\n\
    \        }\n        else if(s[i] >= 'A' && s[i] <= 'Z'){\n            result +=\
    \ tolower(s[i]);\n        }\n        else{\n            result += s[i];\n    \
    \    }\n    }\n    if(result.length() == s.length()){\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpnb1ki1p0: /tmp/tmpnb1ki1p0.cpp:33: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    for (int i = 0; i < s.length(); i++) {\n        if (isalpha(s[i])) {\n\
    \            if (isupper(s[i])) {\n                result += tolower(s[i]);\n\
    \            } else {\n                result += toupper(s[i]);\n            }\n\
    \        } else {\n            result += s[i];\n        }\n    }\n    if (result.length()\
    \ == 0) {\n        return s;\n    }\n    return result;\n}\nint main() {\n   \
    \ auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpc4fa9eq1: /tmp/tmpc4fa9eq1.cpp:33: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    if (s.size() == 0) {\n        return result;\n    }\n    for (int i = 0;\
    \ i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n          \
    \  result += toupper(s[i]);\n        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n\
    \            result += tolower(s[i]);\n        } else {\n            result +=\
    \ s[i];\n        }\n    }\n    if (result.size() == s.size()) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmp9kmfer10: /tmp/tmp9kmfer10.cpp:33: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            result += toupper(s[i]);\n        } else if (s[i] >=\
    \ 'A' && s[i] <= 'Z') {\n            result += tolower(s[i]);\n        } else\
    \ {\n            result += s[i];\n        }\n    }\n    if (result.length() ==\
    \ s.length()) {\n        std::reverse(result.begin(), result.end());\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp0bs6ppu7: /tmp/tmp0bs6ppu7.cpp:30: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    if(s.size()\
    \ == 0) return res;\n    for(int i = 0; i < s.size(); i++){\n        if(isalpha(s[i])){\n\
    \            if(isupper(s[i])){\n                res += tolower(s[i]);\n     \
    \       }\n            else{\n                res += toupper(s[i]);\n        \
    \    }\n        }\n        else{\n            res += s[i];\n        }\n    }\n\
    \    if(res.size() == 0) return s;\n    return res;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpinympcsd: /tmp/tmpinympcsd.cpp:34: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            result += toupper(s[i]);\n        } else if (s[i] >=\
    \ 'A' && s[i] <= 'Z') {\n            result += tolower(s[i]);\n        } else\
    \ {\n            result += s[i];\n        }\n    }\n    if (result == s) {\n \
    \       std::reverse(result.begin(), result.end());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            result += toupper(s[i]);\n        } else if (s[i] >=\
    \ 'A' && s[i] <= 'Z') {\n            result += tolower(s[i]);\n        } else\
    \ {\n            result += s[i];\n        }\n    }\n    if (result.length() ==\
    \ s.length()) {\n        std::reverse(result.begin(), result.end());\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmptekqagqk: /tmp/tmptekqagqk.cpp:30: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if(s.size() == 0) return s;\n\
    \    for(int i = 0; i < s.size(); i++) {\n        if(s[i] >= 'a' && s[i] <= 'z')\
    \ {\n            s[i] = s[i] - 'a' + 'A';\n        } else if(s[i] >= 'A' && s[i]\
    \ <= 'Z') {\n            s[i] = s[i] - 'A' + 'a';\n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"\
    )) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp5jgykatx: /tmp/tmp5jgykatx.cpp:26: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    if(s.size()\
    \ == 0) return s;\n    for(int i = 0; i < s.size(); i++){\n        if(isalpha(s[i])){\n\
    \            if(islower(s[i])){\n                result += toupper(s[i]);\n  \
    \          }\n            else{\n                result += tolower(s[i]);\n  \
    \          }\n        }\n        else{\n            result += s[i];\n        }\n\
    \    }\n    if(isalpha(result[0])){\n        return result;\n    }\n    else{\n\
    \        std::reverse(result.begin(), result.end());\n        return result;\n\
    \    }\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpxqthtemz: /tmp/tmpxqthtemz.cpp:41: int main(): Assertion `candidate((\"\
    #a@C\")) == (\"#A@c\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    if(s.length()\
    \ == 0) {\n        return s;\n    }\n    for(int i = 0; i < s.length(); i++) {\n\
    \        if(isalpha(s[i])) {\n            if(islower(s[i])) {\n              \
    \  result += toupper(s[i]);\n            } else {\n                result += tolower(s[i]);\n\
    \            }\n        } else {\n            result += s[i];\n        }\n   \
    \ }\n    if(result.length() == s.length()) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmp2o_02i7h: /tmp/tmp2o_02i7h.cpp:35: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            result += toupper(s[i]);\n        } else if (s[i] >=\
    \ 'A' && s[i] <= 'Z') {\n            result += tolower(s[i]);\n        } else\
    \ {\n            result += s[i];\n        }\n    }\n    if (result == s) {\n \
    \       std::reverse(result.begin(), result.end());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    int n = s.size();\n    if(n\
    \ == 0) return \"\";\n    for(int i = 0; i < n; i++) {\n        if(isalpha(s[i]))\
    \ {\n            if(islower(s[i])) s[i] = toupper(s[i]);\n            else s[i]\
    \ = tolower(s[i]);\n        }\n    }\n    return s;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpi8mj9tv3: /tmp/tmpi8mj9tv3.cpp:26: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    if (s.size() == 0) return result;\n    for (int i = 0; i < s.size(); i++)\
    \ {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            result += toupper(s[i]);\n\
    \        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            result += tolower(s[i]);\n\
    \        } else {\n            result += s[i];\n        }\n    }\n    if (result.size()\
    \ == s.size()) {\n        std::reverse(result.begin(), result.end());\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp7_exrzt5: /tmp/tmp7_exrzt5.cpp:31: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for\
    \ (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n\
    \            result += toupper(s[i]);\n        } else if (s[i] >= 'A' && s[i]\
    \ <= 'Z') {\n            result += tolower(s[i]);\n        } else {\n        \
    \    result += s[i];\n        }\n    }\n    if (result.size() == s.size()) {\n\
    \        std::reverse(result.begin(), result.end());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpbn9j5diz: /tmp/tmpbn9j5diz.cpp:30: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for\
    \ (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n           \
    \ if (islower(s[i])) {\n                result += toupper(s[i]);\n           \
    \ } else {\n                result += tolower(s[i]);\n            }\n        }\
    \ else {\n            result += s[i];\n        }\n    }\n    if (result.size()\
    \ == 0) {\n        return s;\n    }\n    return result;\n}\nint main() {\n   \
    \ auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp67jm4uoj: /tmp/tmp67jm4uoj.cpp:33: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if(s.size() == 0) return s;\n\
    \    for(int i = 0; i < s.size(); i++) {\n        if(s[i] >= 'a' && s[i] <= 'z')\
    \ {\n            s[i] = s[i] - 'a' + 'A';\n        } else if(s[i] >= 'A' && s[i]\
    \ <= 'Z') {\n            s[i] = s[i] - 'A' + 'a';\n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"\
    )) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpp0jaefrm: /tmp/tmpp0jaefrm.cpp:26: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    if\
    \ (s.size() == 0) {\n        return s;\n    }\n    for (int i = 0; i < s.size();\
    \ i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n   \
    \             result += toupper(s[i]);\n            } else {\n               \
    \ result += tolower(s[i]);\n            }\n        } else {\n            result\
    \ += s[i];\n        }\n    }\n    if (result == s) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    int\
    \ len = s.length();\n    if(len == 0) return result;\n    for(int i = 0; i < len;\
    \ i++) {\n        if(s[i] >= 'a' && s[i] <= 'z') {\n            result += toupper(s[i]);\n\
    \        } else if(s[i] >= 'A' && s[i] <= 'Z') {\n            result += tolower(s[i]);\n\
    \        } else {\n            result += s[i];\n        }\n    }\n    if(result.length()\
    \ == 0) {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp_2j3y6hz: /tmp/tmp_2j3y6hz.cpp:34: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    if(s.length() == 0)\n        return s;\n    for(int i = 0; i < s.length();\
    \ i++){\n        if(s[i] >= 'a' && s[i] <= 'z'){\n            result += toupper(s[i]);\n\
    \        }\n        else if(s[i] >= 'A' && s[i] <= 'Z'){\n            result +=\
    \ tolower(s[i]);\n        }\n        else{\n            result += s[i];\n    \
    \    }\n    }\n    if(result == s){\n        std::reverse(result.begin(), result.end());\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n   \
    \ assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for\
    \ (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n\
    \            result += toupper(s[i]);\n        } else if (s[i] >= 'A' && s[i]\
    \ <= 'Z') {\n            result += tolower(s[i]);\n        } else {\n        \
    \    result += s[i];\n        }\n    }\n    if (result.size() == s.size()) {\n\
    \        std::reverse(result.begin(), result.end());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpf4vrld33: /tmp/tmpf4vrld33.cpp:30: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    if(s.length() == 0) return result;\n    for(int i = 0; i < s.length();\
    \ i++){\n        if(s[i] >= 'a' && s[i] <= 'z'){\n            result += s[i] -\
    \ 'a' + 'A';\n        }\n        else if(s[i] >= 'A' && s[i] <= 'Z'){\n      \
    \      result += s[i] - 'A' + 'a';\n        }\n        else{\n            result\
    \ += s[i];\n        }\n    }\n    if(result.length() == s.length()){\n       \
    \ std::reverse(result.begin(), result.end());\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) ==\
    \ (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpwi4sj6tq: /tmp/tmpwi4sj6tq.cpp:33: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    int\
    \ len = s.length();\n    if(len == 0) return res;\n    for(int i = 0; i < len;\
    \ i++){\n        if(s[i] >= 'a' && s[i] <= 'z'){\n            res += toupper(s[i]);\n\
    \        }\n        else if(s[i] >= 'A' && s[i] <= 'Z'){\n            res += tolower(s[i]);\n\
    \        }\n        else{\n            res += s[i];\n        }\n    }\n    if(res\
    \ == s){\n        std::reverse(res.begin(), res.end());\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    if (s.empty())\
    \ return res;\n    for (auto c : s) {\n        if (isalpha(c)) {\n           \
    \ if (isupper(c)) res += tolower(c);\n            else res += toupper(c);\n  \
    \      } else {\n            res += c;\n        }\n    }\n    if (res.empty())\
    \ return s;\n    return res;\n}\nint main() {\n    auto candidate = solve;\n \
    \   assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmp6zf1upc1: /tmp/tmp6zf1upc1.cpp:29: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    if\
    \ (s.size() == 0) {\n        return result;\n    }\n    for (int i = 0; i < s.size();\
    \ i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n   \
    \             result += toupper(s[i]);\n            } else {\n               \
    \ result += tolower(s[i]);\n            }\n        } else {\n            result\
    \ += s[i];\n        }\n    }\n    if (result.size() == s.size()) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpgdshufpc: /tmp/tmpgdshufpc.cpp:35: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for\
    \ (auto c : s) {\n        if (isalpha(c)) {\n            if (islower(c)) {\n \
    \               res += toupper(c);\n            } else {\n                res\
    \ += tolower(c);\n            }\n        } else {\n            res += c;\n   \
    \     }\n    }\n    if (res.size() == 0) {\n        std::reverse(s.begin(), s.end());\n\
    \        return s;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpvsv71_gp: /tmp/tmpvsv71_gp.cpp:34: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    if (s.length() == 0) {\n        return result;\n    }\n    for (int i =\
    \ 0; i < s.length(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i]))\
    \ {\n                result += toupper(s[i]);\n            } else {\n        \
    \        result += tolower(s[i]);\n            }\n        } else {\n         \
    \   result += s[i];\n        }\n    }\n    if (result.length() == s.length())\
    \ {\n        std::reverse(result.begin(), result.end());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpa_3kgxls: /tmp/tmpa_3kgxls.cpp:35: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  std::string result = \"\";\n\
    \  for (int i = 0; i < s.length(); i++) {\n    if (s[i] >= 'a' && s[i] <= 'z')\
    \ {\n      result += toupper(s[i]);\n    } else if (s[i] >= 'A' && s[i] <= 'Z')\
    \ {\n      result += tolower(s[i]);\n    } else {\n      result += s[i];\n   \
    \ }\n  }\n  if (result == s) {\n    std::reverse(result.begin(), result.end());\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if (s.empty()) {\n       \
    \ return s;\n    }\n    std::string result;\n    for (auto c : s) {\n        if\
    \ (std::isalpha(c)) {\n            result += std::toupper(c);\n        } else\
    \ {\n            result += c;\n        }\n    }\n    if (result == s) {\n    \
    \    std::reverse(s.begin(), s.end());\n        return s;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp0t92agjr: /tmp/tmp0t92agjr.cpp:32: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res = \"\";\n\
    \    int count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            count++;\n            if (islower(s[i])) {\n                res\
    \ += toupper(s[i]);\n            } else {\n                res += tolower(s[i]);\n\
    \            }\n        } else {\n            res += s[i];\n        }\n    }\n\
    \    if (count == 0) {\n        std::reverse(res.begin(), res.end());\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for\
    \ (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n           \
    \ if (isupper(s[i])) {\n                res += tolower(s[i]);\n            } else\
    \ {\n                res += toupper(s[i]);\n            }\n        } else {\n\
    \            res += s[i];\n        }\n    }\n    if (res.size() == 0) {\n    \
    \    std::reverse(s.begin(), s.end());\n        return s;\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpk_1qfnbl: /tmp/tmpk_1qfnbl.cpp:34: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\tstd::string res = \"\";\n\t\
    for (int i = 0; i < s.size(); i++) {\n\t\tif (isalpha(s[i])) {\n\t\t\tif (islower(s[i]))\
    \ {\n\t\t\t\tres += toupper(s[i]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tres += tolower(s[i]);\n\
    \t\t\t}\n\t\t}\n\t\telse {\n\t\t\tres += s[i];\n\t\t}\n\t}\n\tif (res.size() ==\
    \ 0) {\n\t\tstd::reverse(s.begin(), s.end());\n\t\treturn s;\n\t}\n\treturn res;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp5z6k6mxp: /tmp/tmp5z6k6mxp.cpp:36: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    if (s.length() == 0) return result;\n    for (int i = 0; i < s.length();\
    \ i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            result += toupper(s[i]);\n\
    \        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            result += tolower(s[i]);\n\
    \        } else {\n            result += s[i];\n        }\n    }\n    if (result\
    \ == s) {\n        std::reverse(result.begin(), result.end());\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for\
    \ (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n\
    \            result += toupper(s[i]);\n        } else if (s[i] >= 'A' && s[i]\
    \ <= 'Z') {\n            result += tolower(s[i]);\n        } else {\n        \
    \    result += s[i];\n        }\n    }\n    if (result.size() == s.size()) {\n\
    \        std::reverse(result.begin(), result.end());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp0lr2viph: /tmp/tmp0lr2viph.cpp:30: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if(s.empty()) return s;\n\
    \    std::string result;\n    for(auto c : s) {\n        if(isalpha(c)) {\n  \
    \          if(isupper(c)) {\n                result += tolower(c);\n         \
    \   } else {\n                result += toupper(c);\n            }\n        }\
    \ else {\n            result += c;\n        }\n    }\n    if(!isalpha(result[0]))\
    \ {\n        std::reverse(result.begin(), result.end());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpf54dirkq: /tmp/tmpf54dirkq.cpp:36: int main(): Assertion `candidate((\"\
    #a@C\")) == (\"#A@c\")' failed.\n"
  exit_code: -6
  status: Exception
