name: HumanEval_19_sort_numbers
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ temp;\n    while (ss >> temp) {\n        if (temp == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (temp == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (temp == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (temp == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (temp == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (temp == \"five\") {\n            nums.push_back(5);\n        } else if (temp\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (temp == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (temp == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (temp == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx1prqb68.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpx1prqb68.cpp:57:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   57 | int main() {\n      |     \
    \    ^~\n/tmp/tmpx1prqb68.cpp:57:9: note: remove parentheses to default-initialize\
    \ a variable\n   57 | int main() {\n      |         ^~\n      |         --\n/tmp/tmpx1prqb68.cpp:57:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmpx1prqb68.cpp:57:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   57 | int main() {\n      |            ^\n/tmp/tmpx1prqb68.cpp:64:2: error:\
    \ expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmpx1prqb68.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpx1prqb68.cpp:64:2:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmpx1prqb68.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpx1prqb68.cpp:64:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (auto num : nums) {\n       \
    \ if (num == 0) {\n            result += \"zero \";\n        } else if (num ==\
    \ 1) {\n            result += \"one \";\n        } else if (num == 2) {\n    \
    \        result += \"two \";\n        } else if (num == 3) {\n            result\
    \ += \"three \";\n        } else if (num == 4) {\n            result += \"four\
    \ \";\n        } else if (num == 5) {\n            result += \"five \";\n    \
    \    } else if (num == 6) {\n            result += \"six \";\n        } else if\
    \ (num == 7) {\n            result += \"seven \";\n        } else if (num == 8)\
    \ {\n            result += \"eight \";\n        } else if (num == 9) {\n     \
    \       result += \"nine \";\n        }\n    }\n    return result.substr(0, result.\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwf02rkvi.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpwf02rkvi.cpp:61:1: error: expected unqualified-id before \u2018}\u2019\
    \ token\n   61 | }\n      | ^\n/tmp/tmpwf02rkvi.cpp:60:36: error: expected \u2018\
    ;\u2019 before \u2018}\u2019 token\n   60 |     return result.substr(0, result.\n\
    \      |                                    ^\n      |                       \
    \             ;\n   61 | }\n      | ~                                   \n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw_dajij0.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpw_dajij0.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpw_dajij0.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpw_dajij0.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpw_dajij0.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpw_dajij0.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpw_dajij0.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpw_dajij0.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpw_dajij0.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n    std::string\
    \ s;\n    while(ss >> s) {\n        if(s == \"zero\") v.push_back(0);\n      \
    \  else if(s == \"one\") v.push_back(1);\n        else if(s == \"two\") v.push_back(2);\n\
    \        else if(s == \"three\") v.push_back(3);\n        else if(s == \"four\"\
    ) v.push_back(4);\n        else if(s == \"five\") v.push_back(5);\n        else\
    \ if(s == \"six\") v.push_back(6);\n        else if(s == \"seven\") v.push_back(7);\n\
    \        else if(s == \"eight\") v.push_back(8);\n        else if(s == \"nine\"\
    ) v.push_back(9);\n    }\n    std::sort(v.begin(), v.end());\n    std::stringstream\
    \ ss2;\n    for(auto i : v) {\n        if(i == 0) ss2 << \"zero \";\n        else\
    \ if(i == 1) ss2 << \"one \";\n        else if(i == 2) ss2 << \"two \";\n    \
    \    else if(i == 3) ss2 << \"three \";\n        else if(i == 4) ss2 << \"four\
    \ \";\n        else if(i == 5) ss2 << \"five \";\n        else if(i == 6) ss2\
    \ << \"six \";\n        else if(i == 7) ss2 << \"seven \";\n        else if(i\
    \ == 8) ss2 << \"eight \";\n        else if(i == 9) ss2 << \"nine \";\n    }\n\
    \    return ss2.str();\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmpx15zjraj: /tmp/tmpx15zjraj.cpp:43: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n  std::stringstream ss(numbers);\n  std::vector<int> v;\n  std::string word;\n\
    \  while (ss >> word) {\n    if (word == \"zero\") {\n      v.push_back(0);\n\
    \    } else if (word == \"one\") {\n      v.push_back(1);\n    } else if (word\
    \ == \"two\") {\n      v.push_back(2);\n    } else if (word == \"three\") {\n\
    \      v.push_back(3);\n    } else if (word == \"four\") {\n      v.push_back(4);\n\
    \    } else if (word == \"five\") {\n      v.push_back(5);\n    } else if (word\
    \ == \"six\") {\n      v.push_back(6);\n    } else if (word == \"seven\") {\n\
    \      v.push_back(7);\n    } else if (word == \"eight\") {\n      v.push_back(8);\n\
    \    } else if (word == \"nine\") {\n      v.push_back(9);\n    }\n  }\n  std::sort(v.begin(),\
    \ v.end());\n  std::string result;\n  for (int i = 0; i < v.size(); i++) {\n \
    \   if (v[i] == 0) {\n      result += \"zero \";\n    } else if (v[i] == 1) {\n\
    \      result += \"one \";\n    } else if (v[i] == 2) {\n      result += \"two\
    \ \";\n    } else if (v[i] == 3) {\n      result += \"three \";\n    } else if\
    \ (v[i] == 4) {\n      result += \"four \";\n    } else if (v[i] == 5) {\n   \
    \   result += \"five \";\n    } else if (v[i] == 6) {\n      result += \"six \"\
    ;\n    } else if (v[i] == 7) {\n      result += \"seven \";\n    } else if (v[i]\
    \ == 8) {\n      result += \"eight \";\n    } else if (v[i] == 9) {\n     \n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6vijjugr.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp6vijjugr.cpp:59:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   59 | int main() {\n      |     \
    \    ^~\n/tmp/tmp6vijjugr.cpp:59:9: note: remove parentheses to default-initialize\
    \ a variable\n   59 | int main() {\n      |         ^~\n      |         --\n/tmp/tmp6vijjugr.cpp:59:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmp6vijjugr.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmp6vijjugr.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmp6vijjugr.cpp:37:38:\
    \ note: to match this \u2018{\u2019\n   37 |   for (int i = 0; i < v.size(); i++)\
    \ {\n      |                                      ^\n/tmp/tmp6vijjugr.cpp:66:2:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmp6vijjugr.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp6vijjugr.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string token;\n    std::vector<int>\
    \ nums;\n    while (std::getline(ss, token, ' ')) {\n        if (token == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (token == \"one\") {\n\
    \            nums.push_back(1);\n        } else if (token == \"two\") {\n    \
    \        nums.push_back(2);\n        } else if (token == \"three\") {\n      \
    \      nums.push_back(3);\n        } else if (token == \"four\") {\n         \
    \   nums.push_back(4);\n        } else if (token == \"five\") {\n            nums.push_back(5);\n\
    \        } else if (token == \"six\") {\n            nums.push_back(6);\n    \
    \    } else if (token == \"seven\") {\n            nums.push_back(7);\n      \
    \  } else if (token == \"eight\") {\n            nums.push_back(8);\n        }\
    \ else if (token == \"nine\") {\n            nums.push_back(9);\n        }\n \
    \   }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n   \
    \ for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) {\n           \
    \ result += \" \";\n        }\n        if (nums[i] == 0) {\n            result\
    \ += \"zero\";\n        } else if (nums[i] == 1) {\n            result += \"one\"\
    ;\n        } else if (nums[i] == 2) {\n            result += \"two\";\n      \
    \  } else if (nums[i] == 3) {\n            result += \"three\";\n        } else\
    \ if (nums[i] == 4) {\n            result += \"four\";\n        } else if (nums[i]\
    \ == 5) {\n            result += \"five\";\n        } else if (nums[i] == 6) {\n\
    \            result += \"six\";\n        } else if (nums[i] == 7) {\n        \
    \    result +=\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuiu5to0k.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpuiu5to0k.cpp:57:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   57 | }\n      | ^\n/tmp/tmpuiu5to0k.cpp:58:9: warning: empty\
    \ parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   58 | int main() {\n      |         ^~\n/tmp/tmpuiu5to0k.cpp:58:9: note: remove\
    \ parentheses to default-initialize a variable\n   58 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpuiu5to0k.cpp:58:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpuiu5to0k.cpp:58:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   58 | int main() {\n      |            ^\n/tmp/tmpuiu5to0k.cpp:65:2: error:\
    \ expected \u2018}\u2019 at end of input\n   65 | }\n      |  ^\n/tmp/tmpuiu5to0k.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpuiu5to0k.cpp:65:2:\
    \ error: expected \u2018}\u2019 at end of input\n   65 | }\n      |  ^\n/tmp/tmpuiu5to0k.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpuiu5to0k.cpp:65:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   65 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        nums.push_back(word);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        result += nums[i] + \" \"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmpuhlqx92n: /tmp/tmpuhlqx92n.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::stringstream result;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) result << \"\
    \ \";\n        if (nums[i] == 0) result << \"zero\";\n        else if (nums[i]\
    \ == 1) result << \"one\";\n        else if (nums[i] == 2) result << \"two\";\n\
    \        else if (nums[i] == 3) result << \"three\";\n        else if (nums[i]\
    \ == 4) result << \"four\";\n        else if (nums[i] == 5) result << \"five\"\
    ;\n        else if (nums[i] == 6) result << \"six\";\n        else if (nums[i]\
    \ == 7) result << \"seven\";\n        else if (nums[i] == 8) result << \"eight\"\
    ;\n        else if (nums[i] == 9) result << \"nine\";\n    }\n    return result.str();\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::vector<int> nums;\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgez75ymf.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpgez75ymf.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpgez75ymf.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpgez75ymf.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpgez75ymf.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpgez75ymf.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpgez75ymf.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpgez75ymf.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpgez75ymf.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        result += nums[i] + \" \"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmpgesh4wwd: /tmp/tmpgesh4wwd.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> v;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") v.push_back(0);\n\
    \        else if (word == \"one\") v.push_back(1);\n        else if (word == \"\
    two\") v.push_back(2);\n        else if (word == \"three\") v.push_back(3);\n\
    \        else if (word == \"four\") v.push_back(4);\n        else if (word ==\
    \ \"five\") v.push_back(5);\n        else if (word == \"six\") v.push_back(6);\n\
    \        else if (word == \"seven\") v.push_back(7);\n        else if (word ==\
    \ \"eight\") v.push_back(8);\n        else if (word == \"nine\") v.push_back(9);\n\
    \    }\n    std::sort(v.begin(), v.end());\n    std::string result;\n    for (auto\
    \ i : v) {\n        if (i == 0) result += \"zero \";\n        else if (i == 1)\
    \ result += \"one \";\n        else if (i == 2) result += \"two \";\n        else\
    \ if (i == 3) result += \"three \";\n        else if (i == 4) result += \"four\
    \ \";\n        else if (i == 5) result += \"five \";\n        else if (i == 6)\
    \ result += \"six \";\n        else if (i == 7) result += \"seven \";\n      \
    \  else if (i == 8) result += \"eight \";\n        else if (i == 9) result +=\
    \ \"nine \";\n    }\n    return result.substr(0, result.size() - 1);\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzcd1gr5l.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpzcd1gr5l.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpzcd1gr5l.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpzcd1gr5l.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpzcd1gr5l.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpzcd1gr5l.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpzcd1gr5l.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpzcd1gr5l.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpzcd1gr5l.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums = {\"zero\", \"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    std::vector<int>\
    \ num_count(10, 0);\n    std::stringstream ss(numbers);\n    std::string num;\n\
    \    while (ss >> num) {\n        for (int i = 0; i < 10; i++) {\n           \
    \ if (num == nums[i]) {\n                num_count[i]++;\n            }\n    \
    \    }\n    }\n    std::string result;\n    for (int i = 0; i < 10; i++) {\n \
    \       for (int j = 0; j < num_count[i]; j++) {\n            result += nums[i]\
    \ + \" \";\n        }\n    }\n    return result.substr(0, result.size() - 1);\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tstd::stringstream ss(numbers);\n\tstd::string temp;\n\tstd::vector<std::string>\
    \ nums;\n\twhile (ss >> temp) {\n\t\tnums.push_back(temp);\n\t}\n\tstd::sort(nums.begin(),\
    \ nums.end());\n\tstd::string result;\n\tfor (int i = 0; i < nums.size(); i++)\
    \ {\n\t\tresult += nums[i] + \" \";\n\t}\n\treturn result;\n}\nint main() {\n\
    \    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmppqm9vgx8: /tmp/tmppqm9vgx8.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) result += \" \"\
    ;\n        if (nums[i] == 0) result += \"zero\";\n        else if (nums[i] ==\
    \ 1) result += \"one\";\n        else if (nums[i] == 2) result += \"two\";\n \
    \       else if (nums[i] == 3) result += \"three\";\n        else if (nums[i]\
    \ == 4) result += \"four\";\n        else if (nums[i] == 5) result += \"five\"\
    ;\n        else if (nums[i] == 6) result += \"six\";\n        else if (nums[i]\
    \ == 7) result += \"seven\";\n        else if (nums[i] == 8) result += \"eight\"\
    ;\n        else if (nums[i] == 9) result += \"nine\";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   v.push_back(0);\n        } else if (word == \"one\") {\n            v.push_back(1);\n\
    \        } else if (word == \"two\") {\n            v.push_back(2);\n        }\
    \ else if (word == \"three\") {\n            v.push_back(3);\n        } else if\
    \ (word == \"four\") {\n            v.push_back(4);\n        } else if (word ==\
    \ \"five\") {\n            v.push_back(5);\n        } else if (word == \"six\"\
    ) {\n            v.push_back(6);\n        } else if (word == \"seven\") {\n  \
    \          v.push_back(7);\n        } else if (word == \"eight\") {\n        \
    \    v.push_back(8);\n        } else if (word == \"nine\") {\n            v.push_back(9);\n\
    \        }\n    }\n    std::sort(v.begin(), v.end());\n    std::string result;\n\
    \    for (int i = 0; i < v.size(); i++) {\n        if (v[i] == 0) {\n        \
    \    result += \"zero \";\n        } else if (v[i] == 1) {\n            result\
    \ += \"one \";\n        } else if (v[i] == 2) {\n            result += \"two \"\
    ;\n        } else if (v[i] == 3) {\n            result += \"three \";\n      \
    \  } else if (v[i] == 4) {\n            result += \"four \";\n        } else if\
    \ (v[i] == 5) {\n            result += \"five \";\n        } else if (v[i] ==\
    \ 6) {\n            result += \"six \";\n        } else if (v[i] == 7) {\n   \
    \         result += \"seven \";\n        } else if (v[i] == 8) {\n           \
    \ result += \"eight \";\n        } else if (v[i] == 9) {\n           \n}\nint\
    \ main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcqii92jd.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpcqii92jd.cpp:59:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   59 | int main() {\n      |     \
    \    ^~\n/tmp/tmpcqii92jd.cpp:59:9: note: remove parentheses to default-initialize\
    \ a variable\n   59 | int main() {\n      |         ^~\n      |         --\n/tmp/tmpcqii92jd.cpp:59:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmpcqii92jd.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpcqii92jd.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpcqii92jd.cpp:37:40:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < v.size();\
    \ i++) {\n      |                                        ^\n/tmp/tmpcqii92jd.cpp:66:2:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpcqii92jd.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpcqii92jd.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (auto num : nums) {\n       \
    \ switch (num) {\n            case 0:\n                result += \"zero \";\n\
    \                break;\n            case 1:\n                result += \"one\
    \ \";\n                break;\n            case 2:\n                result +=\
    \ \"two \";\n                break;\n            case 3:\n                result\
    \ += \"three \";\n                break;\n            case 4:\n              \
    \  result += \"four \";\n                break;\n            case 5:\n       \
    \         result += \"five \";\n                break;\n            case 6:\n\
    \                result += \"six \";\n                break;\n            case\
    \ 7:\n                result += \"seven \";\n                break;\n        \
    \    case 8:\n                result += \"eight \";\n                break;\n\
    \            case 9:\n                result += \"nine \";\n                break;\n\
    \        }\n    }\n    return result.substr(0, result.size() - 1);\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        result += nums[i] + \" \"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmp0bmrrs00: /tmp/tmp0bmrrs00.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ temp;\n    while (ss >> temp) {\n        if (temp == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (temp == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (temp == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (temp == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (temp == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (temp == \"five\") {\n            nums.push_back(5);\n        } else if (temp\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (temp == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (temp == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (temp == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuoaibl6z.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpuoaibl6z.cpp:57:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   57 | int main() {\n      |     \
    \    ^~\n/tmp/tmpuoaibl6z.cpp:57:9: note: remove parentheses to default-initialize\
    \ a variable\n   57 | int main() {\n      |         ^~\n      |         --\n/tmp/tmpuoaibl6z.cpp:57:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmpuoaibl6z.cpp:57:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   57 | int main() {\n      |            ^\n/tmp/tmpuoaibl6z.cpp:64:2: error:\
    \ expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmpuoaibl6z.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpuoaibl6z.cpp:64:2:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmpuoaibl6z.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpuoaibl6z.cpp:64:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   v.push_back(0);\n        } else if (word == \"one\") {\n            v.push_back(1);\n\
    \        } else if (word == \"two\") {\n            v.push_back(2);\n        }\
    \ else if (word == \"three\") {\n            v.push_back(3);\n        } else if\
    \ (word == \"four\") {\n            v.push_back(4);\n        } else if (word ==\
    \ \"five\") {\n            v.push_back(5);\n        } else if (word == \"six\"\
    ) {\n            v.push_back(6);\n        } else if (word == \"seven\") {\n  \
    \          v.push_back(7);\n        } else if (word == \"eight\") {\n        \
    \    v.push_back(8);\n        } else if (word == \"nine\") {\n            v.push_back(9);\n\
    \        }\n    }\n    std::sort(v.begin(), v.end());\n    std::string res;\n\
    \    for (int i = 0; i < v.size(); i++) {\n        if (v[i] == 0) {\n        \
    \    res += \"zero \";\n        } else if (v[i] == 1) {\n            res += \"\
    one \";\n        } else if (v[i] == 2) {\n            res += \"two \";\n     \
    \   } else if (v[i] == 3) {\n            res += \"three \";\n        } else if\
    \ (v[i] == 4) {\n            res += \"four \";\n        } else if (v[i] == 5)\
    \ {\n            res += \"five \";\n        } else if (v[i] == 6) {\n        \
    \    res += \"six \";\n        } else if (v[i] == 7) {\n            res += \"\
    seven \";\n        } else if (v[i] == 8) {\n            res += \"eight \";\n \
    \       } else if (v[i] == 9) {\n           \n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmppogccgah.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmppogccgah.cpp:59:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   59 | int main() {\n      |     \
    \    ^~\n/tmp/tmppogccgah.cpp:59:9: note: remove parentheses to default-initialize\
    \ a variable\n   59 | int main() {\n      |         ^~\n      |         --\n/tmp/tmppogccgah.cpp:59:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmppogccgah.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmppogccgah.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmppogccgah.cpp:37:40:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < v.size();\
    \ i++) {\n      |                                        ^\n/tmp/tmppogccgah.cpp:66:2:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmppogccgah.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmppogccgah.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuhpn1m1w.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpuhpn1m1w.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpuhpn1m1w.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpuhpn1m1w.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpuhpn1m1w.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpuhpn1m1w.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpuhpn1m1w.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpuhpn1m1w.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpuhpn1m1w.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvnxaz_qw.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpvnxaz_qw.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpvnxaz_qw.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpvnxaz_qw.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpvnxaz_qw.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpvnxaz_qw.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpvnxaz_qw.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpvnxaz_qw.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpvnxaz_qw.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tstd::stringstream ss(numbers);\n\tstd::string word;\n\tstd::vector<int>\
    \ nums;\n\tstd::map<std::string, int> dict;\n\tdict[\"zero\"] = 0;\n\tdict[\"\
    one\"] = 1;\n\tdict[\"two\"] = 2;\n\tdict[\"three\"] = 3;\n\tdict[\"four\"] =\
    \ 4;\n\tdict[\"five\"] = 5;\n\tdict[\"six\"] = 6;\n\tdict[\"seven\"] = 7;\n\t\
    dict[\"eight\"] = 8;\n\tdict[\"nine\"] = 9;\n\twhile (ss >> word) {\n\t\tnums.push_back(dict[word]);\n\
    \t}\n\tstd::sort(nums.begin(), nums.end());\n\tstd::string result;\n\tfor (int\
    \ i = 0; i < nums.size(); i++) {\n\t\tfor (auto it = dict.begin(); it != dict.end();\
    \ it++) {\n\t\t\tif (it->second == nums[i]) {\n\t\t\t\tresult += it->first + \"\
    \ \";\n\t\t\t}\n\t\t}\n\t}\n\tresult.pop_back();\n\treturn result;\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpuvltrmwz: /tmp/tmpuvltrmwz.cpp:40: int main(): Assertion `candidate((\"\
    \")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpef4t9nzw.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpef4t9nzw.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpef4t9nzw.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpef4t9nzw.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpef4t9nzw.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpef4t9nzw.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpef4t9nzw.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpef4t9nzw.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpef4t9nzw.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        nums.push_back(word);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (auto &num : nums) {\n        result += num + \" \";\n    }\n    return\
    \ result.substr(0, result.size() - 1);\n}\nint main() {\n    auto candidate =\
    \ sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmpwtdkev58: /tmp/tmpwtdkev58.cpp:26: int main(): Assertion `candidate((\"\
    three five nine\")) == (\"three five nine\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) result += \" \"\
    ;\n        if (nums[i] == 0) result += \"zero\";\n        else if (nums[i] ==\
    \ 1) result += \"one\";\n        else if (nums[i] == 2) result += \"two\";\n \
    \       else if (nums[i] == 3) result += \"three\";\n        else if (nums[i]\
    \ == 4) result += \"four\";\n        else if (nums[i] == 5) result += \"five\"\
    ;\n        else if (nums[i] == 6) result += \"six\";\n        else if (nums[i]\
    \ == 7) result += \"seven\";\n        else if (nums[i] == 8) result += \"eight\"\
    ;\n        else if (nums[i] == 9) result += \"nine\";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (auto num : nums) {\n        if (num == 0) result += \"zero \";\n     \
    \   else if (num == 1) result += \"one \";\n        else if (num == 2) result\
    \ += \"two \";\n        else if (num == 3) result += \"three \";\n        else\
    \ if (num == 4) result += \"four \";\n        else if (num == 5) result += \"\
    five \";\n        else if (num == 6) result += \"six \";\n        else if (num\
    \ == 7) result += \"seven \";\n        else if (num == 8) result += \"eight \"\
    ;\n        else if (num == 9) result += \"nine \";\n    }\n    return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = sort_numbers;\n \
    \   assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::stringstream ss2;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            ss2 << \" \";\n        }\n      \
    \  if (nums[i] == 0) {\n            ss2 << \"zero\";\n        } else if (nums[i]\
    \ == 1) {\n            ss2 << \"one\";\n        } else if (nums[i] == 2) {\n \
    \           ss2 << \"two\";\n        } else if (nums[i] == 3) {\n            ss2\
    \ << \"three\";\n        } else if (nums[i] == 4) {\n            ss2 << \"four\"\
    ;\n        } else if (nums[i] == 5) {\n            ss2 << \"five\";\n        }\
    \ else if (nums[i] == 6) {\n            ss2 << \"six\";\n        } else if (nums[i]\
    \ == 7) {\n           \n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzkuclhug.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpzkuclhug.cpp:58:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   58 | int main() {\n      |     \
    \    ^~\n/tmp/tmpzkuclhug.cpp:58:9: note: remove parentheses to default-initialize\
    \ a variable\n   58 | int main() {\n      |         ^~\n      |         --\n/tmp/tmpzkuclhug.cpp:58:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmpzkuclhug.cpp:58:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   58 | int main() {\n      |            ^\n/tmp/tmpzkuclhug.cpp:65:2: error:\
    \ expected \u2018}\u2019 at end of input\n   65 | }\n      |  ^\n/tmp/tmpzkuclhug.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpzkuclhug.cpp:65:2:\
    \ error: expected \u2018}\u2019 at end of input\n   65 | }\n      |  ^\n/tmp/tmpzkuclhug.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpzkuclhug.cpp:65:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   65 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (auto i : nums) {\n        result += i + \" \";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpk8kogw8s: /tmp/tmpk8kogw8s.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        if (i > 0) result += \" \"\
    ;\n        if (nums[i] == 0) result += \"zero\";\n        else if (nums[i] ==\
    \ 1) result += \"one\";\n        else if (nums[i] == 2) result += \"two\";\n \
    \       else if (nums[i] == 3) result += \"three\";\n        else if (nums[i]\
    \ == 4) result += \"four\";\n        else if (nums[i] == 5) result += \"five\"\
    ;\n        else if (nums[i] == 6) result += \"six\";\n        else if (nums[i]\
    \ == 7) result += \"seven\";\n        else if (nums[i] == 8) result += \"eight\"\
    ;\n        else if (nums[i] == 9) result += \"nine\";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi7km3kvj.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpi7km3kvj.cpp:57:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   57 | int main() {\n      |     \
    \    ^~\n/tmp/tmpi7km3kvj.cpp:57:9: note: remove parentheses to default-initialize\
    \ a variable\n   57 | int main() {\n      |         ^~\n      |         --\n/tmp/tmpi7km3kvj.cpp:57:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmpi7km3kvj.cpp:57:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   57 | int main() {\n      |            ^\n/tmp/tmpi7km3kvj.cpp:64:2: error:\
    \ expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmpi7km3kvj.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpi7km3kvj.cpp:64:2:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmpi7km3kvj.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpi7km3kvj.cpp:64:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ temp;\n    while (ss >> temp) {\n        if (temp == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (temp == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (temp == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (temp == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (temp == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (temp == \"five\") {\n            nums.push_back(5);\n        } else if (temp\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (temp == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (temp == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (temp == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::stringstream out;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            out << \"zero\";\n        }\
    \ else if (nums[i] == 1) {\n            out << \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            out << \"two\";\n        } else if (nums[i] == 3) {\n \
    \           out << \"three\";\n        } else if (nums[i] == 4) {\n          \
    \  out << \"four\";\n        } else if (nums[i] == 5) {\n            out << \"\
    five\";\n        } else if (nums[i] == 6) {\n            out << \"six\";\n   \
    \     } else if (nums[i] == 7) {\n            out << \"seven\";\n        } else\
    \ if (nums[i] == 8) {\n            out << \"eight\";\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjf0qutcn.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpjf0qutcn.cpp:58:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   58 | int main() {\n      |     \
    \    ^~\n/tmp/tmpjf0qutcn.cpp:58:9: note: remove parentheses to default-initialize\
    \ a variable\n   58 | int main() {\n      |         ^~\n      |         --\n/tmp/tmpjf0qutcn.cpp:58:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmpjf0qutcn.cpp:58:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   58 | int main() {\n      |            ^\n/tmp/tmpjf0qutcn.cpp:65:2: error:\
    \ expected \u2018}\u2019 at end of input\n   65 | }\n      |  ^\n/tmp/tmpjf0qutcn.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpjf0qutcn.cpp:65:2:\
    \ error: expected \u2018}\u2019 at end of input\n   65 | }\n      |  ^\n/tmp/tmpjf0qutcn.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpjf0qutcn.cpp:65:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   65 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ temp;\n    while (ss >> temp) {\n        if (temp == \"zero\") nums.push_back(0);\n\
    \        else if (temp == \"one\") nums.push_back(1);\n        else if (temp ==\
    \ \"two\") nums.push_back(2);\n        else if (temp == \"three\") nums.push_back(3);\n\
    \        else if (temp == \"four\") nums.push_back(4);\n        else if (temp\
    \ == \"five\") nums.push_back(5);\n        else if (temp == \"six\") nums.push_back(6);\n\
    \        else if (temp == \"seven\") nums.push_back(7);\n        else if (temp\
    \ == \"eight\") nums.push_back(8);\n        else if (temp == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) result +=\
    \ \"zero \";\n        else if (nums[i] == 1) result += \"one \";\n        else\
    \ if (nums[i] == 2) result += \"two \";\n        else if (nums[i] == 3) result\
    \ += \"three \";\n        else if (nums[i] == 4) result += \"four \";\n      \
    \  else if (nums[i] == 5) result += \"five \";\n        else if (nums[i] == 6)\
    \ result += \"six \";\n        else if (nums[i] == 7) result += \"seven \";\n\
    \        else if (nums[i] == 8) result += \"eight \";\n        else if (nums[i]\
    \ == 9) result += \"nine \";\n    }\n    return result.substr(0, result.size()\
    \ - 1);\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmply2f53nn.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmply2f53nn.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmply2f53nn.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmply2f53nn.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmply2f53nn.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmply2f53nn.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmply2f53nn.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmply2f53nn.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmply2f53nn.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tstd::vector<int> nums;\n\tstd::stringstream ss(numbers);\n\tstd::string\
    \ token;\n\twhile (std::getline(ss, token, ' ')) {\n\t\tif (token == \"zero\"\
    )\n\t\t\tnums.push_back(0);\n\t\telse if (token == \"one\")\n\t\t\tnums.push_back(1);\n\
    \t\telse if (token == \"two\")\n\t\t\tnums.push_back(2);\n\t\telse if (token ==\
    \ \"three\")\n\t\t\tnums.push_back(3);\n\t\telse if (token == \"four\")\n\t\t\t\
    nums.push_back(4);\n\t\telse if (token == \"five\")\n\t\t\tnums.push_back(5);\n\
    \t\telse if (token == \"six\")\n\t\t\tnums.push_back(6);\n\t\telse if (token ==\
    \ \"seven\")\n\t\t\tnums.push_back(7);\n\t\telse if (token == \"eight\")\n\t\t\
    \tnums.push_back(8);\n\t\telse if (token == \"nine\")\n\t\t\tnums.push_back(9);\n\
    \t}\n\tstd::sort(nums.begin(), nums.end());\n\tstd::string result;\n\tfor (int\
    \ i = 0; i < nums.size(); i++) {\n\t\tif (i != 0)\n\t\t\tresult += \" \";\n\t\t\
    if (nums[i] == 0)\n\t\t\tresult += \"zero\";\n\t\telse if (nums[i] == 1)\n\t\t\
    \tresult += \"one\";\n\t\telse if (nums[i] == 2)\n\t\t\tresult += \"two\";\n\t\
    \telse if (nums[i] == 3)\n\t\t\tresult += \"three\";\n\t\telse if (nums[i] ==\
    \ 4)\n\t\t\tresult += \"four\";\n\t\telse if (nums[i] == 5)\n\t\t\tresult += \"\
    five\";\n\t\telse if (nums[i] == 6)\n\t\t\tresult += \"six\";\n\t\telse\n}\nint\
    \ main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm6p7q08k.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpm6p7q08k.cpp:54:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   54 | }\n      | ^\n/tmp/tmpm6p7q08k.cpp:55:9: warning: empty\
    \ parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   55 | int main() {\n      |         ^~\n/tmp/tmpm6p7q08k.cpp:55:9: note: remove\
    \ parentheses to default-initialize a variable\n   55 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpm6p7q08k.cpp:55:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpm6p7q08k.cpp:55:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   55 | int main() {\n      |            ^\n/tmp/tmpm6p7q08k.cpp:62:2: error:\
    \ expected \u2018}\u2019 at end of input\n   62 | }\n      |  ^\n/tmp/tmpm6p7q08k.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpm6p7q08k.cpp:62:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   62 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpravcd7j_.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpravcd7j_.cpp:57:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   57 | int main() {\n      |     \
    \    ^~\n/tmp/tmpravcd7j_.cpp:57:9: note: remove parentheses to default-initialize\
    \ a variable\n   57 | int main() {\n      |         ^~\n      |         --\n/tmp/tmpravcd7j_.cpp:57:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmpravcd7j_.cpp:57:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   57 | int main() {\n      |            ^\n/tmp/tmpravcd7j_.cpp:64:2: error:\
    \ expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmpravcd7j_.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpravcd7j_.cpp:64:2:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmpravcd7j_.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpravcd7j_.cpp:64:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' '))\n        nums.push_back(token);\n\
    \    std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (auto&\
    \ num : nums) {\n        result += num + \" \";\n    }\n    return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = sort_numbers;\n \
    \   assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmpp1o64i87: /tmp/tmpp1o64i87.cpp:25: int main(): Assertion `candidate((\"\
    three five nine\")) == (\"three five nine\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        result += nums[i] + \" \"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmpql9b7jfz: /tmp/tmpql9b7jfz.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) result += \" \"\
    ;\n        if (nums[i] == 0) result += \"zero\";\n        else if (nums[i] ==\
    \ 1) result += \"one\";\n        else if (nums[i] == 2) result += \"two\";\n \
    \       else if (nums[i] == 3) result += \"three\";\n        else if (nums[i]\
    \ == 4) result += \"four\";\n        else if (nums[i] == 5) result += \"five\"\
    ;\n        else if (nums[i] == 6) result += \"six\";\n        else if (nums[i]\
    \ == 7) result += \"seven\";\n        else if (nums[i] == 8) result += \"eight\"\
    ;\n        else if (nums[i] == 9) result += \"nine\";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string token;\n    std::vector<int>\
    \ nums;\n    while (std::getline(ss, token, ' ')) {\n        if (token == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (token == \"one\") {\n\
    \            nums.push_back(1);\n        } else if (token == \"two\") {\n    \
    \        nums.push_back(2);\n        } else if (token == \"three\") {\n      \
    \      nums.push_back(3);\n        } else if (token == \"four\") {\n         \
    \   nums.push_back(4);\n        } else if (token == \"five\") {\n            nums.push_back(5);\n\
    \        } else if (token == \"six\") {\n            nums.push_back(6);\n    \
    \    } else if (token == \"seven\") {\n            nums.push_back(7);\n      \
    \  } else if (token == \"eight\") {\n            nums.push_back(8);\n        }\
    \ else if (token == \"nine\") {\n            nums.push_back(9);\n        }\n \
    \   }\n    std::sort(nums.begin(), nums.end());\n    std::stringstream ss2;\n\
    \    for (auto num : nums) {\n        if (num == 0) {\n            ss2 << \"zero\
    \ \";\n        } else if (num == 1) {\n            ss2 << \"one \";\n        }\
    \ else if (num == 2) {\n            ss2 << \"two \";\n        } else if (num ==\
    \ 3) {\n            ss2 << \"three \";\n        } else if (num == 4) {\n     \
    \       ss2 << \"four \";\n        } else if (num == 5) {\n            ss2 <<\
    \ \"five \";\n        } else if (num == 6) {\n            ss2 << \"six \";\n \
    \       } else if (num == 7) {\n            ss2 << \"seven \";\n        } else\
    \ if (num == 8) {\n            ss2 << \"eight \";\n        } else if (num == 9)\
    \ {\n            ss2 << \"nine\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8ocyqobg.cpp:57:20: warning: missing terminating \" character\n\
    \   57 |             ss2 << \"nine\n      |                    ^\n/tmp/tmp8ocyqobg.cpp:57:20:\
    \ error: missing terminating \" character\n   57 |             ss2 << \"nine\n\
    \      |                    ^~~~~\n/tmp/tmp8ocyqobg.cpp: In function \u2018std::string\
    \ sort_numbers(std::string)\u2019:\n/tmp/tmp8ocyqobg.cpp:58:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   58 | }\n      | ^\n/tmp/tmp8ocyqobg.cpp:59:9:\
    \ warning: empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmp8ocyqobg.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmp8ocyqobg.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmp8ocyqobg.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmp8ocyqobg.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmp8ocyqobg.cpp:37:27:\
    \ note: to match this \u2018{\u2019\n   37 |     for (auto num : nums) {\n   \
    \   |                           ^\n/tmp/tmp8ocyqobg.cpp:66:2: error: expected\
    \ \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmp8ocyqobg.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp8ocyqobg.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") v.push_back(0);\n\
    \        else if (word == \"one\") v.push_back(1);\n        else if (word == \"\
    two\") v.push_back(2);\n        else if (word == \"three\") v.push_back(3);\n\
    \        else if (word == \"four\") v.push_back(4);\n        else if (word ==\
    \ \"five\") v.push_back(5);\n        else if (word == \"six\") v.push_back(6);\n\
    \        else if (word == \"seven\") v.push_back(7);\n        else if (word ==\
    \ \"eight\") v.push_back(8);\n        else if (word == \"nine\") v.push_back(9);\n\
    \    }\n    std::sort(v.begin(), v.end());\n    std::string result;\n    for (auto\
    \ i : v) {\n        if (i == 0) result += \"zero \";\n        else if (i == 1)\
    \ result += \"one \";\n        else if (i == 2) result += \"two \";\n        else\
    \ if (i == 3) result += \"three \";\n        else if (i == 4) result += \"four\
    \ \";\n        else if (i == 5) result += \"five \";\n        else if (i == 6)\
    \ result += \"six \";\n        else if (i == 7) result += \"seven \";\n      \
    \  else if (i == 8) result += \"eight \";\n        else if (i == 9) result +=\
    \ \"nine \";\n    }\n    return result.substr(0, result.size() - 1);\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n  std::vector<int> nums;\n  std::stringstream ss(numbers);\n  std::string\
    \ word;\n  while (ss >> word) {\n    if (word == \"zero\") {\n      nums.push_back(0);\n\
    \    } else if (word == \"one\") {\n      nums.push_back(1);\n    } else if (word\
    \ == \"two\") {\n      nums.push_back(2);\n    } else if (word == \"three\") {\n\
    \      nums.push_back(3);\n    } else if (word == \"four\") {\n      nums.push_back(4);\n\
    \    } else if (word == \"five\") {\n      nums.push_back(5);\n    } else if (word\
    \ == \"six\") {\n      nums.push_back(6);\n    } else if (word == \"seven\") {\n\
    \      nums.push_back(7);\n    } else if (word == \"eight\") {\n      nums.push_back(8);\n\
    \    } else if (word == \"nine\") {\n      nums.push_back(9);\n    }\n  }\n  std::sort(nums.begin(),\
    \ nums.end());\n  std::string result;\n  for (int i = 0; i < nums.size(); i++)\
    \ {\n    if (nums[i] == 0) {\n      result += \"zero \";\n    } else if (nums[i]\
    \ == 1) {\n      result += \"one \";\n    } else if (nums[i] == 2) {\n      result\
    \ += \"two \";\n    } else if (nums[i] == 3) {\n      result += \"three \";\n\
    \    } else if (nums[i] == 4) {\n      result += \"four \";\n    } else if (nums[i]\
    \ == 5) {\n      result += \"five \";\n    } else if (nums[i] == 6) {\n      result\
    \ += \"six \";\n    } else if (nums[i] == 7) {\n      result += \"seven \";\n\
    \    } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgucioxqj.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpgucioxqj.cpp:57:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   57 | int main() {\n      |     \
    \    ^~\n/tmp/tmpgucioxqj.cpp:57:9: note: remove parentheses to default-initialize\
    \ a variable\n   57 | int main() {\n      |         ^~\n      |         --\n/tmp/tmpgucioxqj.cpp:57:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmpgucioxqj.cpp:57:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   57 | int main() {\n      |            ^\n/tmp/tmpgucioxqj.cpp:64:2: error:\
    \ expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmpgucioxqj.cpp:37:41:\
    \ note: to match this \u2018{\u2019\n   37 |   for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                         ^\n/tmp/tmpgucioxqj.cpp:64:2:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmpgucioxqj.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpgucioxqj.cpp:64:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   v.push_back(0);\n        } else if (word == \"one\") {\n            v.push_back(1);\n\
    \        } else if (word == \"two\") {\n            v.push_back(2);\n        }\
    \ else if (word == \"three\") {\n            v.push_back(3);\n        } else if\
    \ (word == \"four\") {\n            v.push_back(4);\n        } else if (word ==\
    \ \"five\") {\n            v.push_back(5);\n        } else if (word == \"six\"\
    ) {\n            v.push_back(6);\n        } else if (word == \"seven\") {\n  \
    \          v.push_back(7);\n        } else if (word == \"eight\") {\n        \
    \    v.push_back(8);\n        } else if (word == \"nine\") {\n            v.push_back(9);\n\
    \        }\n    }\n    std::sort(v.begin(), v.end());\n    std::string result;\n\
    \    for (int i = 0; i < v.size(); i++) {\n        if (v[i] == 0) {\n        \
    \    result += \"zero \";\n        } else if (v[i] == 1) {\n            result\
    \ += \"one \";\n        } else if (v[i] == 2) {\n            result += \"two \"\
    ;\n        } else if (v[i] == 3) {\n            result += \"three \";\n      \
    \  } else if (v[i] == 4) {\n            result += \"four \";\n        } else if\
    \ (v[i] == 5) {\n            result += \"five \";\n        } else if (v[i] ==\
    \ 6) {\n            result += \"six \";\n        } else if (v[i] == 7) {\n   \
    \         result += \"seven \";\n        } else if (v[i] == 8) {\n           \
    \ result += \"eight \";\n        } else if (v[i] == 9) {\n           \n}\nint\
    \ main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn8mxjjc7.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpn8mxjjc7.cpp:59:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   59 | int main() {\n      |     \
    \    ^~\n/tmp/tmpn8mxjjc7.cpp:59:9: note: remove parentheses to default-initialize\
    \ a variable\n   59 | int main() {\n      |         ^~\n      |         --\n/tmp/tmpn8mxjjc7.cpp:59:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmpn8mxjjc7.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpn8mxjjc7.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpn8mxjjc7.cpp:37:40:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < v.size();\
    \ i++) {\n      |                                        ^\n/tmp/tmpn8mxjjc7.cpp:66:2:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpn8mxjjc7.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpn8mxjjc7.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc4jhshm7.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpc4jhshm7.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpc4jhshm7.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpc4jhshm7.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpc4jhshm7.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpc4jhshm7.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpc4jhshm7.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpc4jhshm7.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpc4jhshm7.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjbex8ge2.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpjbex8ge2.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpjbex8ge2.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpjbex8ge2.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpjbex8ge2.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpjbex8ge2.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpjbex8ge2.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpjbex8ge2.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpjbex8ge2.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tstd::stringstream ss(numbers);\n\tstd::string word;\n\tstd::vector<int>\
    \ nums;\n\twhile (ss >> word) {\n\t\tif (word == \"zero\") {\n\t\t\tnums.push_back(0);\n\
    \t\t}\n\t\telse if (word == \"one\") {\n\t\t\tnums.push_back(1);\n\t\t}\n\t\t\
    else if (word == \"two\") {\n\t\t\tnums.push_back(2);\n\t\t}\n\t\telse if (word\
    \ == \"three\") {\n\t\t\tnums.push_back(3);\n\t\t}\n\t\telse if (word == \"four\"\
    ) {\n\t\t\tnums.push_back(4);\n\t\t}\n\t\telse if (word == \"five\") {\n\t\t\t\
    nums.push_back(5);\n\t\t}\n\t\telse if (word == \"six\") {\n\t\t\tnums.push_back(6);\n\
    \t\t}\n\t\telse if (word == \"seven\") {\n\t\t\tnums.push_back(7);\n\t\t}\n\t\t\
    else if (word == \"eight\") {\n\t\t\tnums.push_back(8);\n\t\t}\n\t\telse if (word\
    \ == \"nine\") {\n\t\t\tnums.push_back(9);\n\t\t}\n\t}\n\tstd::sort(nums.begin(),\
    \ nums.end());\n\tstd::string result;\n\tfor (int i = 0; i < nums.size(); i++)\
    \ {\n\t\tif (nums[i] == 0) {\n\t\t\tresult += \"zero \";\n\t\t}\n\t\telse if (nums[i]\
    \ == 1) {\n\t\t\tresult += \"one \";\n\t\t}\n\t\telse if (nums[i] == 2) {\n\t\t\
    \tresult += \"two \";\n\t\t}\n\t\telse if (nums[i] == 3) {\n\t\t\tresult += \"\
    three \";\n\t\t}\n\t\telse if (nums[i] == 4) {\n\t\t\tresult += \"four \";\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1sw0v2ff.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp1sw0v2ff.cpp:62:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   62 | int main() {\n      |     \
    \    ^~\n/tmp/tmp1sw0v2ff.cpp:62:9: note: remove parentheses to default-initialize\
    \ a variable\n   62 | int main() {\n      |         ^~\n      |         --\n/tmp/tmp1sw0v2ff.cpp:62:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmp1sw0v2ff.cpp:62:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   62 | int main() {\n      |            ^\n/tmp/tmp1sw0v2ff.cpp:69:2: error:\
    \ expected \u2018}\u2019 at end of input\n   69 | }\n      |  ^\n/tmp/tmp1sw0v2ff.cpp:46:47:\
    \ note: to match this \u2018{\u2019\n   46 |         for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                               ^\n/tmp/tmp1sw0v2ff.cpp:69:2:\
    \ error: expected \u2018}\u2019 at end of input\n   69 | }\n      |  ^\n/tmp/tmp1sw0v2ff.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp1sw0v2ff.cpp:69:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   69 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmplkrvjy1q.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmplkrvjy1q.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmplkrvjy1q.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmplkrvjy1q.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmplkrvjy1q.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmplkrvjy1q.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmplkrvjy1q.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmplkrvjy1q.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmplkrvjy1q.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) result += \" \"\
    ;\n        if (nums[i] == 0) result += \"zero\";\n        else if (nums[i] ==\
    \ 1) result += \"one\";\n        else if (nums[i] == 2) result += \"two\";\n \
    \       else if (nums[i] == 3) result += \"three\";\n        else if (nums[i]\
    \ == 4) result += \"four\";\n        else if (nums[i] == 5) result += \"five\"\
    ;\n        else if (nums[i] == 6) result += \"six\";\n        else if (nums[i]\
    \ == 7) result += \"seven\";\n        else if (nums[i] == 8) result += \"eight\"\
    ;\n        else if (nums[i] == 9) result += \"nine\";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ v;\n    while (ss >> word) {\n        if (word == \"zero\") {\n            v.push_back(0);\n\
    \        } else if (word == \"one\") {\n            v.push_back(1);\n        }\
    \ else if (word == \"two\") {\n            v.push_back(2);\n        } else if\
    \ (word == \"three\") {\n            v.push_back(3);\n        } else if (word\
    \ == \"four\") {\n            v.push_back(4);\n        } else if (word == \"five\"\
    ) {\n            v.push_back(5);\n        } else if (word == \"six\") {\n    \
    \        v.push_back(6);\n        } else if (word == \"seven\") {\n          \
    \  v.push_back(7);\n        } else if (word == \"eight\") {\n            v.push_back(8);\n\
    \        } else if (word == \"nine\") {\n            v.push_back(9);\n       \
    \ }\n    }\n    std::sort(v.begin(), v.end());\n    std::string result;\n    for\
    \ (int i = 0; i < v.size(); i++) {\n        if (v[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (v[i] == 1) {\n            result += \"one\
    \ \";\n        } else if (v[i] == 2) {\n            result += \"two \";\n    \
    \    } else if (v[i] == 3) {\n            result += \"three \";\n        } else\
    \ if (v[i] == 4) {\n            result += \"four \";\n        } else if (v[i]\
    \ == 5) {\n            result += \"five \";\n        } else if (v[i] == 6) {\n\
    \            result += \"six \";\n        } else if (v[i] == 7) {\n          \
    \  result += \"seven \";\n        } else if (v[i] == 8) {\n            result\
    \ += \"eight \";\n        } else if (v[i] == 9) {\n           \n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvk5otmz3.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpvk5otmz3.cpp:59:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   59 | int main() {\n      |     \
    \    ^~\n/tmp/tmpvk5otmz3.cpp:59:9: note: remove parentheses to default-initialize\
    \ a variable\n   59 | int main() {\n      |         ^~\n      |         --\n/tmp/tmpvk5otmz3.cpp:59:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmpvk5otmz3.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpvk5otmz3.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpvk5otmz3.cpp:37:40:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < v.size();\
    \ i++) {\n      |                                        ^\n/tmp/tmpvk5otmz3.cpp:66:2:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpvk5otmz3.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpvk5otmz3.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        result += nums[i] + \" \"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmprkjpk1bp: /tmp/tmprkjpk1bp.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ temp;\n    while (ss >> temp) {\n        if (temp == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (temp == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (temp == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (temp == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (temp == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (temp == \"five\") {\n            nums.push_back(5);\n        } else if (temp\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (temp == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (temp == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (temp == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvk1fucmt.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpvk1fucmt.cpp:57:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   57 | int main() {\n      |     \
    \    ^~\n/tmp/tmpvk1fucmt.cpp:57:9: note: remove parentheses to default-initialize\
    \ a variable\n   57 | int main() {\n      |         ^~\n      |         --\n/tmp/tmpvk1fucmt.cpp:57:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmpvk1fucmt.cpp:57:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   57 | int main() {\n      |            ^\n/tmp/tmpvk1fucmt.cpp:64:2: error:\
    \ expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmpvk1fucmt.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpvk1fucmt.cpp:64:2:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmpvk1fucmt.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpvk1fucmt.cpp:64:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums = {\"zero\", \"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    std::vector<int>\
    \ nums_int;\n    std::stringstream ss(numbers);\n    std::string temp;\n    while\
    \ (ss >> temp) {\n        for (int i = 0; i < nums.size(); i++) {\n          \
    \  if (temp == nums[i]) {\n                nums_int.push_back(i);\n          \
    \  }\n        }\n    }\n    std::sort(nums_int.begin(), nums_int.end());\n   \
    \ std::string result;\n    for (int i = 0; i < nums_int.size(); i++) {\n     \
    \   result += nums[nums_int[i]] + \" \";\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpd3n3a33l: /tmp/tmpd3n3a33l.cpp:30: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::stringstream result;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) result << \"\
    \ \";\n        if (nums[i] == 0) result << \"zero\";\n        else if (nums[i]\
    \ == 1) result << \"one\";\n        else if (nums[i] == 2) result << \"two\";\n\
    \        else if (nums[i] == 3) result << \"three\";\n        else if (nums[i]\
    \ == 4) result << \"four\";\n        else if (nums[i] == 5) result << \"five\"\
    ;\n        else if (nums[i] == 6) result << \"six\";\n        else if (nums[i]\
    \ == 7) result << \"seven\";\n        else if (nums[i] == 8) result << \"eight\"\
    ;\n        else if (nums[i] == 9) result << \"nine\";\n    }\n    return result.str();\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (auto num : nums) {\n       \
    \ switch (num) {\n            case 0:\n                result += \"zero \";\n\
    \                break;\n            case 1:\n                result += \"one\
    \ \";\n                break;\n            case 2:\n                result +=\
    \ \"two \";\n                break;\n            case 3:\n                result\
    \ += \"three \";\n                break;\n            case 4:\n              \
    \  result += \"four \";\n                break;\n            case 5:\n       \
    \         result += \"five \";\n                break;\n            case 6:\n\
    \                result += \"six \";\n                break;\n            case\
    \ 7:\n                result += \"seven \";\n                break;\n        \
    \    case 8:\n                result += \"eight \";\n                break;\n\
    \            case 9:\n                result += \"nine \";\n                break;\n\
    \        }\n    }\n    return result.substr(0, result.size() - 1);\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") v.push_back(0);\n\
    \        else if (word == \"one\") v.push_back(1);\n        else if (word == \"\
    two\") v.push_back(2);\n        else if (word == \"three\") v.push_back(3);\n\
    \        else if (word == \"four\") v.push_back(4);\n        else if (word ==\
    \ \"five\") v.push_back(5);\n        else if (word == \"six\") v.push_back(6);\n\
    \        else if (word == \"seven\") v.push_back(7);\n        else if (word ==\
    \ \"eight\") v.push_back(8);\n        else if (word == \"nine\") v.push_back(9);\n\
    \    }\n    std::sort(v.begin(), v.end());\n    std::string result;\n    for (auto\
    \ i : v) {\n        if (i == 0) result += \"zero \";\n        else if (i == 1)\
    \ result += \"one \";\n        else if (i == 2) result += \"two \";\n        else\
    \ if (i == 3) result += \"three \";\n        else if (i == 4) result += \"four\
    \ \";\n        else if (i == 5) result += \"five \";\n        else if (i == 6)\
    \ result += \"six \";\n        else if (i == 7) result += \"seven \";\n      \
    \  else if (i == 8) result += \"eight \";\n        else if (i == 9) result +=\
    \ \"nine \";\n    }\n    return result.substr(0, result.size() - 1);\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0tt7zxk1.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp0tt7zxk1.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmp0tt7zxk1.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmp0tt7zxk1.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmp0tt7zxk1.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmp0tt7zxk1.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmp0tt7zxk1.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmp0tt7zxk1.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp0tt7zxk1.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::vector<int> nums;\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i > 0) {\n            result += \" \";\n        }\n    \
    \    if (nums[i] == 0) {\n            result += \"zero\";\n        } else if (nums[i]\
    \ == 1) {\n            result += \"one\";\n        } else if (nums[i] == 2) {\n\
    \            result += \"two\";\n        } else if (nums[i] == 3) {\n        \
    \    result += \"three\";\n        } else if (nums[i] == 4) {\n            result\
    \ += \"four\";\n        } else if (nums[i] == 5) {\n            result += \"five\"\
    ;\n        } else if (nums[i] == 6) {\n            result += \"six\";\n      \
    \  } else if (nums[i] == 7) {\n            result += \"seven\";\n        } else\
    \ if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjg_0aqrz.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpjg_0aqrz.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpjg_0aqrz.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpjg_0aqrz.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpjg_0aqrz.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpjg_0aqrz.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpjg_0aqrz.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpjg_0aqrz.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpjg_0aqrz.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjoey5z7d.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpjoey5z7d.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpjoey5z7d.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpjoey5z7d.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpjoey5z7d.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpjoey5z7d.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpjoey5z7d.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpjoey5z7d.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpjoey5z7d.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (auto num : nums) {\n        result += num + \" \";\n    }\n    return\
    \ result.substr(0, result.size() - 1);\n}\nint main() {\n    auto candidate =\
    \ sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmpt148nl1p: /tmp/tmpt148nl1p.cpp:26: int main(): Assertion `candidate((\"\
    three five nine\")) == (\"three five nine\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        result += nums[i] + \" \"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmpwoqxkuf1: /tmp/tmpwoqxkuf1.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyrnwnr7m.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpyrnwnr7m.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpyrnwnr7m.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpyrnwnr7m.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpyrnwnr7m.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpyrnwnr7m.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpyrnwnr7m.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpyrnwnr7m.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpyrnwnr7m.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n  std::stringstream ss(numbers);\n  std::vector<int> v;\n  std::string word;\n\
    \  while (ss >> word) {\n    if (word == \"zero\") {\n      v.push_back(0);\n\
    \    } else if (word == \"one\") {\n      v.push_back(1);\n    } else if (word\
    \ == \"two\") {\n      v.push_back(2);\n    } else if (word == \"three\") {\n\
    \      v.push_back(3);\n    } else if (word == \"four\") {\n      v.push_back(4);\n\
    \    } else if (word == \"five\") {\n      v.push_back(5);\n    } else if (word\
    \ == \"six\") {\n      v.push_back(6);\n    } else if (word == \"seven\") {\n\
    \      v.push_back(7);\n    } else if (word == \"eight\") {\n      v.push_back(8);\n\
    \    } else if (word == \"nine\") {\n      v.push_back(9);\n    }\n  }\n  std::sort(v.begin(),\
    \ v.end());\n  std::string result;\n  for (int i = 0; i < v.size(); i++) {\n \
    \   if (v[i] == 0) {\n      result += \"zero \";\n    } else if (v[i] == 1) {\n\
    \      result += \"one \";\n    } else if (v[i] == 2) {\n      result += \"two\
    \ \";\n    } else if (v[i] == 3) {\n      result += \"three \";\n    } else if\
    \ (v[i] == 4) {\n      result += \"four \";\n    } else if (v[i] == 5) {\n   \
    \   result += \"five \";\n    } else if (v[i] == 6) {\n      result += \"six \"\
    ;\n    } else if (v[i] == 7) {\n      result += \"seven \";\n    } else if (v[i]\
    \ == 8) {\n      result += \"eight \";\n    } else if (v[i] == 9) {\n     \n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpeag0184l.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpeag0184l.cpp:59:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   59 | int main() {\n      |     \
    \    ^~\n/tmp/tmpeag0184l.cpp:59:9: note: remove parentheses to default-initialize\
    \ a variable\n   59 | int main() {\n      |         ^~\n      |         --\n/tmp/tmpeag0184l.cpp:59:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmpeag0184l.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpeag0184l.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpeag0184l.cpp:37:38:\
    \ note: to match this \u2018{\u2019\n   37 |   for (int i = 0; i < v.size(); i++)\
    \ {\n      |                                      ^\n/tmp/tmpeag0184l.cpp:66:2:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpeag0184l.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpeag0184l.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::stringstream ss2;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            ss2 << \" \";\n        }\n      \
    \  if (nums[i] == 0) {\n            ss2 << \"zero\";\n        } else if (nums[i]\
    \ == 1) {\n            ss2 << \"one\";\n        } else if (nums[i] == 2) {\n \
    \           ss2 << \"two\";\n        } else if (nums[i] == 3) {\n            ss2\
    \ << \"three\";\n        } else if (nums[i] == 4) {\n            ss2 << \"four\"\
    ;\n        } else if (nums[i] == 5) {\n            ss2 << \"five\";\n        }\
    \ else if (nums[i] == 6) {\n            ss2 << \"six\";\n        } else if (nums[i]\
    \ == 7) {\n           \n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpop08q1s6.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpop08q1s6.cpp:58:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   58 | int main() {\n      |     \
    \    ^~\n/tmp/tmpop08q1s6.cpp:58:9: note: remove parentheses to default-initialize\
    \ a variable\n   58 | int main() {\n      |         ^~\n      |         --\n/tmp/tmpop08q1s6.cpp:58:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmpop08q1s6.cpp:58:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   58 | int main() {\n      |            ^\n/tmp/tmpop08q1s6.cpp:65:2: error:\
    \ expected \u2018}\u2019 at end of input\n   65 | }\n      |  ^\n/tmp/tmpop08q1s6.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpop08q1s6.cpp:65:2:\
    \ error: expected \u2018}\u2019 at end of input\n   65 | }\n      |  ^\n/tmp/tmpop08q1s6.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpop08q1s6.cpp:65:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   65 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) result += \" \"\
    ;\n        if (nums[i] == 0) result += \"zero\";\n        else if (nums[i] ==\
    \ 1) result += \"one\";\n        else if (nums[i] == 2) result += \"two\";\n \
    \       else if (nums[i] == 3) result += \"three\";\n        else if (nums[i]\
    \ == 4) result += \"four\";\n        else if (nums[i] == 5) result += \"five\"\
    ;\n        else if (nums[i] == 6) result += \"six\";\n        else if (nums[i]\
    \ == 7) result += \"seven\";\n        else if (nums[i] == 8) result += \"eight\"\
    ;\n        else if (nums[i] == 9) result += \"nine\";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::map<std::string, int> num_map = {\n        {\"zero\", 0},\n    \
    \    {\"one\", 1},\n        {\"two\", 2},\n        {\"three\", 3},\n        {\"\
    four\", 4},\n        {\"five\", 5},\n        {\"six\", 6},\n        {\"seven\"\
    , 7},\n        {\"eight\", 8},\n        {\"nine\", 9}\n    };\n    std::vector<int>\
    \ num_vec;\n    std::stringstream ss(numbers);\n    std::string word;\n    while\
    \ (ss >> word) {\n        num_vec.push_back(num_map[word]);\n    }\n    std::sort(num_vec.begin(),\
    \ num_vec.end());\n    std::string result = \"\";\n    for (int i = 0; i < num_vec.size();\
    \ i++) {\n        for (auto it = num_map.begin(); it != num_map.end(); it++) {\n\
    \            if (it->second == num_vec[i]) {\n                result += it->first\
    \ + \" \";\n                break;\n            }\n        }\n    }\n    return\
    \ result.substr(0, result.size() - 1);\n}\nint main() {\n    auto candidate =\
    \ sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tstd::stringstream ss(numbers);\n\tstd::vector<int> v;\n\tstd::string word;\n\
    \twhile (ss >> word) {\n\t\tif (word == \"zero\") {\n\t\t\tv.push_back(0);\n\t\
    \t}\n\t\telse if (word == \"one\") {\n\t\t\tv.push_back(1);\n\t\t}\n\t\telse if\
    \ (word == \"two\") {\n\t\t\tv.push_back(2);\n\t\t}\n\t\telse if (word == \"three\"\
    ) {\n\t\t\tv.push_back(3);\n\t\t}\n\t\telse if (word == \"four\") {\n\t\t\tv.push_back(4);\n\
    \t\t}\n\t\telse if (word == \"five\") {\n\t\t\tv.push_back(5);\n\t\t}\n\t\telse\
    \ if (word == \"six\") {\n\t\t\tv.push_back(6);\n\t\t}\n\t\telse if (word == \"\
    seven\") {\n\t\t\tv.push_back(7);\n\t\t}\n\t\telse if (word == \"eight\") {\n\t\
    \t\tv.push_back(8);\n\t\t}\n\t\telse if (word == \"nine\") {\n\t\t\tv.push_back(9);\n\
    \t\t}\n\t}\n\tstd::sort(v.begin(), v.end());\n\tstd::string result;\n\tfor (int\
    \ i = 0; i < v.size(); i++) {\n\t\tif (v[i] == 0) {\n\t\t\tresult += \"zero \"\
    ;\n\t\t}\n\t\telse if (v[i] == 1) {\n\t\t\tresult += \"one \";\n\t\t}\n\t\telse\
    \ if (v[i] == 2) {\n\t\t\tresult += \"two \";\n\t\t}\n\t\telse if (v[i] == 3)\
    \ {\n\t\t\tresult += \"three \";\n\t\t}\n\t\telse if (v[i] == 4) {\n\t\t\tresult\
    \ += \"four \";\n\t\t}\n\t\telse if (v[i] == 5) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyb718yn5.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpyb718yn5.cpp:65:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   65 | int main() {\n      |     \
    \    ^~\n/tmp/tmpyb718yn5.cpp:65:9: note: remove parentheses to default-initialize\
    \ a variable\n   65 | int main() {\n      |         ^~\n      |         --\n/tmp/tmpyb718yn5.cpp:65:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmpyb718yn5.cpp:65:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   65 | int main() {\n      |            ^\n/tmp/tmpyb718yn5.cpp:72:2: error:\
    \ expected \u2018}\u2019 at end of input\n   72 | }\n      |  ^\n/tmp/tmpyb718yn5.cpp:46:44:\
    \ note: to match this \u2018{\u2019\n   46 |         for (int i = 0; i < v.size();\
    \ i++) {\n      |                                            ^\n/tmp/tmpyb718yn5.cpp:72:2:\
    \ error: expected \u2018}\u2019 at end of input\n   72 | }\n      |  ^\n/tmp/tmpyb718yn5.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpyb718yn5.cpp:72:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   72 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) result += \" \"\
    ;\n        if (nums[i] == 0) result += \"zero\";\n        else if (nums[i] ==\
    \ 1) result += \"one\";\n        else if (nums[i] == 2) result += \"two\";\n \
    \       else if (nums[i] == 3) result += \"three\";\n        else if (nums[i]\
    \ == 4) result += \"four\";\n        else if (nums[i] == 5) result += \"five\"\
    ;\n        else if (nums[i] == 6) result += \"six\";\n        else if (nums[i]\
    \ == 7) result += \"seven\";\n        else if (nums[i] == 8) result += \"eight\"\
    ;\n        else if (nums[i] == 9) result += \"nine\";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        result += nums[i] + \" \"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmpjt16t4t1: /tmp/tmpjt16t4t1.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n    int n;\n\
    \    while (ss >> n) {\n        v.push_back(n);\n    }\n    std::sort(v.begin(),\
    \ v.end());\n    std::stringstream ss2;\n    for (int i = 0; i < v.size(); i++)\
    \ {\n        ss2 << v[i] << \" \";\n    }\n    return ss2.str();\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmps7__cqj5: /tmp/tmps7__cqj5.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tstd::stringstream ss(numbers);\n\tstd::string word;\n\tstd::vector<int>\
    \ nums;\n\twhile (ss >> word) {\n\t\tif (word == \"zero\") {\n\t\t\tnums.push_back(0);\n\
    \t\t}\n\t\telse if (word == \"one\") {\n\t\t\tnums.push_back(1);\n\t\t}\n\t\t\
    else if (word == \"two\") {\n\t\t\tnums.push_back(2);\n\t\t}\n\t\telse if (word\
    \ == \"three\") {\n\t\t\tnums.push_back(3);\n\t\t}\n\t\telse if (word == \"four\"\
    ) {\n\t\t\tnums.push_back(4);\n\t\t}\n\t\telse if (word == \"five\") {\n\t\t\t\
    nums.push_back(5);\n\t\t}\n\t\telse if (word == \"six\") {\n\t\t\tnums.push_back(6);\n\
    \t\t}\n\t\telse if (word == \"seven\") {\n\t\t\tnums.push_back(7);\n\t\t}\n\t\t\
    else if (word == \"eight\") {\n\t\t\tnums.push_back(8);\n\t\t}\n\t\telse if (word\
    \ == \"nine\") {\n\t\t\tnums.push_back(9);\n\t\t}\n\t}\n\tstd::sort(nums.begin(),\
    \ nums.end());\n\tstd::string result;\n\tfor (int i = 0; i < nums.size(); i++)\
    \ {\n\t\tif (nums[i] == 0) {\n\t\t\tresult += \"zero \";\n\t\t}\n\t\telse if (nums[i]\
    \ == 1) {\n\t\t\tresult += \"one \";\n\t\t}\n\t\telse if (nums[i] == 2) {\n\t\t\
    \tresult += \"two \";\n\t\t}\n\t\telse if (nums[i] == 3) {\n\t\t\tresult += \"\
    three \";\n\t\t}\n\t\telse if (nums[i] == 4) {\n\t\t\tresult += \"four \";\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxk_0v9pe.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpxk_0v9pe.cpp:62:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   62 | int main() {\n      |     \
    \    ^~\n/tmp/tmpxk_0v9pe.cpp:62:9: note: remove parentheses to default-initialize\
    \ a variable\n   62 | int main() {\n      |         ^~\n      |         --\n/tmp/tmpxk_0v9pe.cpp:62:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmpxk_0v9pe.cpp:62:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   62 | int main() {\n      |            ^\n/tmp/tmpxk_0v9pe.cpp:69:2: error:\
    \ expected \u2018}\u2019 at end of input\n   69 | }\n      |  ^\n/tmp/tmpxk_0v9pe.cpp:46:47:\
    \ note: to match this \u2018{\u2019\n   46 |         for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                               ^\n/tmp/tmpxk_0v9pe.cpp:69:2:\
    \ error: expected \u2018}\u2019 at end of input\n   69 | }\n      |  ^\n/tmp/tmpxk_0v9pe.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpxk_0v9pe.cpp:69:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   69 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n    std::string\
    \ temp;\n    while(ss >> temp) {\n        if(temp == \"zero\") v.push_back(0);\n\
    \        else if(temp == \"one\") v.push_back(1);\n        else if(temp == \"\
    two\") v.push_back(2);\n        else if(temp == \"three\") v.push_back(3);\n \
    \       else if(temp == \"four\") v.push_back(4);\n        else if(temp == \"\
    five\") v.push_back(5);\n        else if(temp == \"six\") v.push_back(6);\n  \
    \      else if(temp == \"seven\") v.push_back(7);\n        else if(temp == \"\
    eight\") v.push_back(8);\n        else if(temp == \"nine\") v.push_back(9);\n\
    \    }\n    std::sort(v.begin(), v.end());\n    std::stringstream ss2;\n    for(int\
    \ i = 0; i < v.size(); i++) {\n        if(v[i] == 0) ss2 << \"zero \";\n     \
    \   else if(v[i] == 1) ss2 << \"one \";\n        else if(v[i] == 2) ss2 << \"\
    two \";\n        else if(v[i] == 3) ss2 << \"three \";\n        else if(v[i] ==\
    \ 4) ss2 << \"four \";\n        else if(v[i] == 5) ss2 << \"five \";\n       \
    \ else if(v[i] == 6) ss2 << \"six \";\n        else if(v[i] == 7) ss2 << \"seven\
    \ \";\n        else if(v[i] == 8) ss2 << \"eight \";\n        else if(v[i] ==\
    \ 9) ss2 << \"nine \";\n    }\n    std::string result = ss2.str();\n    result.pop_back();\n\
    \    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n   \
    \ assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"\
    three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"\
    ));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four\
    \ five seven eight nine\"));\n    assert(candidate((\"six five four three two\
    \ one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmp3igzlpso: /tmp/tmp3igzlpso.cpp:44: int main(): Assertion `candidate((\"\
    \")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::stringstream result;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) result << \"\
    \ \";\n        if (nums[i] == 0) result << \"zero\";\n        else if (nums[i]\
    \ == 1) result << \"one\";\n        else if (nums[i] == 2) result << \"two\";\n\
    \        else if (nums[i] == 3) result << \"three\";\n        else if (nums[i]\
    \ == 4) result << \"four\";\n        else if (nums[i] == 5) result << \"five\"\
    ;\n        else if (nums[i] == 6) result << \"six\";\n        else if (nums[i]\
    \ == 7) result << \"seven\";\n        else if (nums[i] == 8) result << \"eight\"\
    ;\n        else if (nums[i] == 9) result << \"nine\";\n    }\n    return result.str();\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (auto i : nums) {\n        result += i + \" \";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmplv04jup9: /tmp/tmplv04jup9.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::stringstream ss2;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) ss2 << \" \"\
    ;\n        if (nums[i] == 0) ss2 << \"zero\";\n        else if (nums[i] == 1)\
    \ ss2 << \"one\";\n        else if (nums[i] == 2) ss2 << \"two\";\n        else\
    \ if (nums[i] == 3) ss2 << \"three\";\n        else if (nums[i] == 4) ss2 << \"\
    four\";\n        else if (nums[i] == 5) ss2 << \"five\";\n        else if (nums[i]\
    \ == 6) ss2 << \"six\";\n        else if (nums[i] == 7) ss2 << \"seven\";\n  \
    \      else if (nums[i] == 8) ss2 << \"eight\";\n        else if (nums[i] == 9)\
    \ ss2 << \"nine\";\n    }\n    return ss2.str();\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        result += nums[i] + \" \"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmpyas3hwh9: /tmp/tmpyas3hwh9.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5w8zn3n9.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp5w8zn3n9.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmp5w8zn3n9.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmp5w8zn3n9.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmp5w8zn3n9.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmp5w8zn3n9.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmp5w8zn3n9.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmp5w8zn3n9.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp5w8zn3n9.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     switch (nums[i]) {\n            case 0:\n                result += \"zero\"\
    ;\n                break;\n            case 1:\n                result += \"one\"\
    ;\n                break;\n            case 2:\n                result += \"two\"\
    ;\n                break;\n            case 3:\n                result += \"three\"\
    ;\n                break;\n            case 4:\n                result += \"four\"\
    ;\n                break;\n            case 5:\n                result += \"five\"\
    ;\n                break;\n            case 6:\n                result += \"six\"\
    ;\n                break;\n            case 7:\n                result += \"seven\"\
    ;\n                break;\n            case 8:\n                result += \"eight\"\
    ;\n                break;\n            case 9:\n                result += \"nine\"\
    ;\n                break;\n        }\n    }\n    return\n}\nint main() {\n   \
    \ auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n \
    \   assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three\
    \ five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7o2j8h0n.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp7o2j8h0n.cpp:75:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   75 | }\n      | ^\n/tmp/tmp7o2j8h0n.cpp:74:11: error: expected\
    \ \u2018;\u2019 before \u2018}\u2019 token\n   74 |     return\n      |      \
    \     ^\n      |           ;\n   75 | }\n      | ~          \n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1gguhevd.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp1gguhevd.cpp:57:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   57 | int main() {\n      |     \
    \    ^~\n/tmp/tmp1gguhevd.cpp:57:9: note: remove parentheses to default-initialize\
    \ a variable\n   57 | int main() {\n      |         ^~\n      |         --\n/tmp/tmp1gguhevd.cpp:57:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmp1gguhevd.cpp:57:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   57 | int main() {\n      |            ^\n/tmp/tmp1gguhevd.cpp:64:2: error:\
    \ expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmp1gguhevd.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp1gguhevd.cpp:64:2:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmp1gguhevd.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp1gguhevd.cpp:64:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string res;\n    for\
    \ (int i = 0; i < nums.size(); i++) {\n        if (i != 0) res += \" \";\n   \
    \     if (nums[i] == 0) res += \"zero\";\n        else if (nums[i] == 1) res +=\
    \ \"one\";\n        else if (nums[i] == 2) res += \"two\";\n        else if (nums[i]\
    \ == 3) res += \"three\";\n        else if (nums[i] == 4) res += \"four\";\n \
    \       else if (nums[i] == 5) res += \"five\";\n        else if (nums[i] == 6)\
    \ res += \"six\";\n        else if (nums[i] == 7) res += \"seven\";\n        else\
    \ if (nums[i] == 8) res += \"eight\";\n        else if (nums[i] == 9) res += \"\
    nine\";\n    }\n    return res;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg86o9chr.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpg86o9chr.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpg86o9chr.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpg86o9chr.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpg86o9chr.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpg86o9chr.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpg86o9chr.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpg86o9chr.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpg86o9chr.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::vector<int> nums;\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::stringstream result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result << \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result << \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result << \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result << \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result << \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result << \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ << \"five\";\n        } else if (nums[i] == 6) {\n            result << \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result << \"seven\";\n    \
    \    } else\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu0rglz4x.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpu0rglz4x.cpp:58:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   58 | }\n      | ^\n/tmp/tmpu0rglz4x.cpp:59:9: warning: empty\
    \ parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpu0rglz4x.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpu0rglz4x.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpu0rglz4x.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpu0rglz4x.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpu0rglz4x.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpu0rglz4x.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzig6d562.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpzig6d562.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpzig6d562.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpzig6d562.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpzig6d562.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpzig6d562.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpzig6d562.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpzig6d562.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpzig6d562.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (auto i : nums) {\n        if\
    \ (i == 0) {\n            result += \"zero \";\n        } else if (i == 1) {\n\
    \            result += \"one \";\n        } else if (i == 2) {\n            result\
    \ += \"two \";\n        } else if (i == 3) {\n            result += \"three \"\
    ;\n        } else if (i == 4) {\n            result += \"four \";\n        } else\
    \ if (i == 5) {\n            result += \"five \";\n        } else if (i == 6)\
    \ {\n            result += \"six \";\n        } else if (i == 7) {\n         \
    \   result += \"seven \";\n        } else if (i == 8) {\n            result +=\
    \ \"eight \";\n        } else if (i == 9) {\n            result += \"nine \";\n\
    \        }\n    }\n    return result.substr(0, result.\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmplvux2sti.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmplvux2sti.cpp:61:1: error: expected unqualified-id before \u2018}\u2019\
    \ token\n   61 | }\n      | ^\n/tmp/tmplvux2sti.cpp:60:36: error: expected \u2018\
    ;\u2019 before \u2018}\u2019 token\n   60 |     return result.substr(0, result.\n\
    \      |                                    ^\n      |                       \
    \             ;\n   61 | }\n      | ~                                   \n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8cv5twcy.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp8cv5twcy.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmp8cv5twcy.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmp8cv5twcy.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmp8cv5twcy.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmp8cv5twcy.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmp8cv5twcy.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmp8cv5twcy.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp8cv5twcy.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ temp;\n    while (ss >> temp) {\n        if (temp == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (temp == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (temp == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (temp == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (temp == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (temp == \"five\") {\n            nums.push_back(5);\n        } else if (temp\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (temp == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (temp == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (temp == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::stringstream result;\n    for (auto i : nums) {\n   \
    \     if (i == 0) {\n            result << \"zero \";\n        } else if (i ==\
    \ 1) {\n            result << \"one \";\n        } else if (i == 2) {\n      \
    \      result << \"two \";\n        } else if (i == 3) {\n            result <<\
    \ \"three \";\n        } else if (i == 4) {\n            result << \"four \";\n\
    \        } else if (i == 5) {\n            result << \"five \";\n        } else\
    \ if (i == 6) {\n            result << \"six \";\n        } else if (i == 7) {\n\
    \            result << \"seven \";\n        } else if (i == 8) {\n           \
    \ result << \"eight \";\n        } else if (i == 9) {\n            result << \"\
    nine \";\n        }\n    }\n    return result.str();\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmp2gxcvkaz: /tmp/tmp2gxcvkaz.cpp:65: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ temp;\n    while (ss >> temp) {\n        if (temp == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (temp == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (temp == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (temp == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (temp == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (temp == \"five\") {\n            nums.push_back(5);\n        } else if (temp\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (temp == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (temp == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (temp == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzei1emsh.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpzei1emsh.cpp:57:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   57 | int main() {\n      |     \
    \    ^~\n/tmp/tmpzei1emsh.cpp:57:9: note: remove parentheses to default-initialize\
    \ a variable\n   57 | int main() {\n      |         ^~\n      |         --\n/tmp/tmpzei1emsh.cpp:57:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmpzei1emsh.cpp:57:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   57 | int main() {\n      |            ^\n/tmp/tmpzei1emsh.cpp:64:2: error:\
    \ expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmpzei1emsh.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpzei1emsh.cpp:64:2:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmpzei1emsh.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpzei1emsh.cpp:64:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb6bhtvuk.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpb6bhtvuk.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpb6bhtvuk.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpb6bhtvuk.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpb6bhtvuk.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpb6bhtvuk.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpb6bhtvuk.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpb6bhtvuk.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpb6bhtvuk.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt0pfi166.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpt0pfi166.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpt0pfi166.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpt0pfi166.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpt0pfi166.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpt0pfi166.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpt0pfi166.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpt0pfi166.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpt0pfi166.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (auto num : nums) {\n       \
    \ if (num == 0) {\n            result += \"zero \";\n        } else if (num ==\
    \ 1) {\n            result += \"one \";\n        } else if (num == 2) {\n    \
    \        result += \"two \";\n        } else if (num == 3) {\n            result\
    \ += \"three \";\n        } else if (num == 4) {\n            result += \"four\
    \ \";\n        } else if (num == 5) {\n            result += \"five \";\n    \
    \    } else if (num == 6) {\n            result += \"six \";\n        } else if\
    \ (num == 7) {\n            result += \"seven \";\n        } else if (num == 8)\
    \ {\n            result += \"eight \";\n        } else if (num == 9) {\n     \
    \       result += \"nine \";\n        }\n    }\n    return result.substr(0, result.\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdpmvhmxv.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpdpmvhmxv.cpp:61:1: error: expected unqualified-id before \u2018}\u2019\
    \ token\n   61 | }\n      | ^\n/tmp/tmpdpmvhmxv.cpp:60:36: error: expected \u2018\
    ;\u2019 before \u2018}\u2019 token\n   60 |     return result.substr(0, result.\n\
    \      |                                    ^\n      |                       \
    \             ;\n   61 | }\n      | ~                                   \n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) result += \" \"\
    ;\n        if (nums[i] == 0) result += \"zero\";\n        else if (nums[i] ==\
    \ 1) result += \"one\";\n        else if (nums[i] == 2) result += \"two\";\n \
    \       else if (nums[i] == 3) result += \"three\";\n        else if (nums[i]\
    \ == 4) result += \"four\";\n        else if (nums[i] == 5) result += \"five\"\
    ;\n        else if (nums[i] == 6) result += \"six\";\n        else if (nums[i]\
    \ == 7) result += \"seven\";\n        else if (nums[i] == 8) result += \"eight\"\
    ;\n        else if (nums[i] == 9) result += \"nine\";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ v;\n    while (ss >> word) {\n        if (word == \"zero\")\n            v.push_back(0);\n\
    \        else if (word == \"one\")\n            v.push_back(1);\n        else\
    \ if (word == \"two\")\n            v.push_back(2);\n        else if (word ==\
    \ \"three\")\n            v.push_back(3);\n        else if (word == \"four\")\n\
    \            v.push_back(4);\n        else if (word == \"five\")\n           \
    \ v.push_back(5);\n        else if (word == \"six\")\n            v.push_back(6);\n\
    \        else if (word == \"seven\")\n            v.push_back(7);\n        else\
    \ if (word == \"eight\")\n            v.push_back(8);\n        else if (word ==\
    \ \"nine\")\n            v.push_back(9);\n    }\n    std::sort(v.begin(), v.end());\n\
    \    std::string result;\n    for (int i = 0; i < v.size(); i++) {\n        if\
    \ (v[i] == 0)\n            result += \"zero \";\n        else if (v[i] == 1)\n\
    \            result += \"one \";\n        else if (v[i] == 2)\n            result\
    \ += \"two \";\n        else if (v[i] == 3)\n            result += \"three \"\
    ;\n        else if (v[i] == 4)\n            result += \"four \";\n        else\
    \ if (v[i] == 5)\n            result += \"five \";\n        else if (v[i] == 6)\n\
    \            result += \"six \";\n        else if (v[i] == 7)\n            result\
    \ += \"seven \";\n        else if (v[i] == 8)\n            result += \"eight \"\
    ;\n        else if (v[i] == 9)\n            result += \"nine \";\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpraqynmc4: /tmp/tmpraqynmc4.cpp:63: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) result += \" \"\
    ;\n        if (nums[i] == 0) result += \"zero\";\n        else if (nums[i] ==\
    \ 1) result += \"one\";\n        else if (nums[i] == 2) result += \"two\";\n \
    \       else if (nums[i] == 3) result += \"three\";\n        else if (nums[i]\
    \ == 4) result += \"four\";\n        else if (nums[i] == 5) result += \"five\"\
    ;\n        else if (nums[i] == 6) result += \"six\";\n        else if (nums[i]\
    \ == 7) result += \"seven\";\n        else if (nums[i] == 8) result += \"eight\"\
    ;\n        else if (nums[i] == 9) result += \"nine\";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ temp;\n    while (ss >> temp) {\n        if (temp == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (temp == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (temp == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (temp == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (temp == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (temp == \"five\") {\n            nums.push_back(5);\n        } else if (temp\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (temp == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (temp == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (temp == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmppqfu_1uh.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmppqfu_1uh.cpp:57:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   57 | int main() {\n      |     \
    \    ^~\n/tmp/tmppqfu_1uh.cpp:57:9: note: remove parentheses to default-initialize\
    \ a variable\n   57 | int main() {\n      |         ^~\n      |         --\n/tmp/tmppqfu_1uh.cpp:57:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmppqfu_1uh.cpp:57:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   57 | int main() {\n      |            ^\n/tmp/tmppqfu_1uh.cpp:64:2: error:\
    \ expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmppqfu_1uh.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmppqfu_1uh.cpp:64:2:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmppqfu_1uh.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmppqfu_1uh.cpp:64:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n    std::string\
    \ s;\n    while(ss >> s) {\n        if(s == \"zero\") v.push_back(0);\n      \
    \  else if(s == \"one\") v.push_back(1);\n        else if(s == \"two\") v.push_back(2);\n\
    \        else if(s == \"three\") v.push_back(3);\n        else if(s == \"four\"\
    ) v.push_back(4);\n        else if(s == \"five\") v.push_back(5);\n        else\
    \ if(s == \"six\") v.push_back(6);\n        else if(s == \"seven\") v.push_back(7);\n\
    \        else if(s == \"eight\") v.push_back(8);\n        else if(s == \"nine\"\
    ) v.push_back(9);\n    }\n    std::sort(v.begin(), v.end());\n    std::stringstream\
    \ ss2;\n    for(int i = 0; i < v.size(); i++) {\n        if(i != 0) ss2 << \"\
    \ \";\n        if(v[i] == 0) ss2 << \"zero\";\n        else if(v[i] == 1) ss2\
    \ << \"one\";\n        else if(v[i] == 2) ss2 << \"two\";\n        else if(v[i]\
    \ == 3) ss2 << \"three\";\n        else if(v[i] == 4) ss2 << \"four\";\n     \
    \   else if(v[i] == 5) ss2 << \"five\";\n        else if(v[i] == 6) ss2 << \"\
    six\";\n        else if(v[i] == 7) ss2 << \"seven\";\n        else if(v[i] ==\
    \ 8) ss2 << \"eight\";\n        else if(v[i] == 9) ss2 << \"nine\";\n    }\n \
    \   return ss2.str();\n}\nint main() {\n    auto candidate = sort_numbers;\n \
    \   assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwysiodjn.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpwysiodjn.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpwysiodjn.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpwysiodjn.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpwysiodjn.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpwysiodjn.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpwysiodjn.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpwysiodjn.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpwysiodjn.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   v.push_back(0);\n        } else if (word == \"one\") {\n            v.push_back(1);\n\
    \        } else if (word == \"two\") {\n            v.push_back(2);\n        }\
    \ else if (word == \"three\") {\n            v.push_back(3);\n        } else if\
    \ (word == \"four\") {\n            v.push_back(4);\n        } else if (word ==\
    \ \"five\") {\n            v.push_back(5);\n        } else if (word == \"six\"\
    ) {\n            v.push_back(6);\n        } else if (word == \"seven\") {\n  \
    \          v.push_back(7);\n        } else if (word == \"eight\") {\n        \
    \    v.push_back(8);\n        } else if (word == \"nine\") {\n            v.push_back(9);\n\
    \        }\n    }\n    std::sort(v.begin(), v.end());\n    std::string result;\n\
    \    for (int i = 0; i < v.size(); i++) {\n        if (v[i] == 0) {\n        \
    \    result += \"zero \";\n        } else if (v[i] == 1) {\n            result\
    \ += \"one \";\n        } else if (v[i] == 2) {\n            result += \"two \"\
    ;\n        } else if (v[i] == 3) {\n            result += \"three \";\n      \
    \  } else if (v[i] == 4) {\n            result += \"four \";\n        } else if\
    \ (v[i] == 5) {\n            result += \"five \";\n        } else if (v[i] ==\
    \ 6) {\n            result += \"six \";\n        } else if (v[i] == 7) {\n   \
    \         result += \"seven \";\n        } else if (v[i] == 8) {\n           \
    \ result += \"eight \";\n        } else if (v[i] == 9) {\n           \n}\nint\
    \ main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa943mftk.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpa943mftk.cpp:59:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   59 | int main() {\n      |     \
    \    ^~\n/tmp/tmpa943mftk.cpp:59:9: note: remove parentheses to default-initialize\
    \ a variable\n   59 | int main() {\n      |         ^~\n      |         --\n/tmp/tmpa943mftk.cpp:59:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmpa943mftk.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpa943mftk.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpa943mftk.cpp:37:40:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < v.size();\
    \ i++) {\n      |                                        ^\n/tmp/tmpa943mftk.cpp:66:2:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpa943mftk.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpa943mftk.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (auto num : nums) {\n        if (num == 0) result += \"zero \";\n     \
    \   else if (num == 1) result += \"one \";\n        else if (num == 2) result\
    \ += \"two \";\n        else if (num == 3) result += \"three \";\n        else\
    \ if (num == 4) result += \"four \";\n        else if (num == 5) result += \"\
    five \";\n        else if (num == 6) result += \"six \";\n        else if (num\
    \ == 7) result += \"seven \";\n        else if (num == 8) result += \"eight \"\
    ;\n        else if (num == 9) result += \"nine \";\n    }\n    return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = sort_numbers;\n \
    \   assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        result += nums[i] + \" \"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmpynrnxl08: /tmp/tmpynrnxl08.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   v.push_back(0);\n        } else if (word == \"one\") {\n            v.push_back(1);\n\
    \        } else if (word == \"two\") {\n            v.push_back(2);\n        }\
    \ else if (word == \"three\") {\n            v.push_back(3);\n        } else if\
    \ (word == \"four\") {\n            v.push_back(4);\n        } else if (word ==\
    \ \"five\") {\n            v.push_back(5);\n        } else if (word == \"six\"\
    ) {\n            v.push_back(6);\n        } else if (word == \"seven\") {\n  \
    \          v.push_back(7);\n        } else if (word == \"eight\") {\n        \
    \    v.push_back(8);\n        } else if (word == \"nine\") {\n            v.push_back(9);\n\
    \        }\n    }\n    std::sort(v.begin(), v.end());\n    std::string result;\n\
    \    for (int i = 0; i < v.size(); i++) {\n        if (v[i] == 0) {\n        \
    \    result += \"zero \";\n        } else if (v[i] == 1) {\n            result\
    \ += \"one \";\n        } else if (v[i] == 2) {\n            result += \"two \"\
    ;\n        } else if (v[i] == 3) {\n            result += \"three \";\n      \
    \  } else if (v[i] == 4) {\n            result += \"four \";\n        } else if\
    \ (v[i] == 5) {\n            result += \"five \";\n        } else if (v[i] ==\
    \ 6) {\n            result += \"six \";\n        } else if (v[i] == 7) {\n   \
    \         result += \"seven \";\n        } else if (v[i] == 8) {\n           \
    \ result += \"eight \";\n        } else if (v[i] == 9) {\n           \n}\nint\
    \ main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfli2ye2n.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpfli2ye2n.cpp:59:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   59 | int main() {\n      |     \
    \    ^~\n/tmp/tmpfli2ye2n.cpp:59:9: note: remove parentheses to default-initialize\
    \ a variable\n   59 | int main() {\n      |         ^~\n      |         --\n/tmp/tmpfli2ye2n.cpp:59:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmpfli2ye2n.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpfli2ye2n.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpfli2ye2n.cpp:37:40:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < v.size();\
    \ i++) {\n      |                                        ^\n/tmp/tmpfli2ye2n.cpp:66:2:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpfli2ye2n.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpfli2ye2n.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) result += \" \"\
    ;\n        if (nums[i] == 0) result += \"zero\";\n        else if (nums[i] ==\
    \ 1) result += \"one\";\n        else if (nums[i] == 2) result += \"two\";\n \
    \       else if (nums[i] == 3) result += \"three\";\n        else if (nums[i]\
    \ == 4) result += \"four\";\n        else if (nums[i] == 5) result += \"five\"\
    ;\n        else if (nums[i] == 6) result += \"six\";\n        else if (nums[i]\
    \ == 7) result += \"seven\";\n        else if (nums[i] == 8) result += \"eight\"\
    ;\n        else if (nums[i] == 9) result += \"nine\";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n  std::vector<int> nums;\n  std::stringstream ss(numbers);\n  std::string\
    \ word;\n  while (ss >> word) {\n    if (word == \"zero\") {\n      nums.push_back(0);\n\
    \    } else if (word == \"one\") {\n      nums.push_back(1);\n    } else if (word\
    \ == \"two\") {\n      nums.push_back(2);\n    } else if (word == \"three\") {\n\
    \      nums.push_back(3);\n    } else if (word == \"four\") {\n      nums.push_back(4);\n\
    \    } else if (word == \"five\") {\n      nums.push_back(5);\n    } else if (word\
    \ == \"six\") {\n      nums.push_back(6);\n    } else if (word == \"seven\") {\n\
    \      nums.push_back(7);\n    } else if (word == \"eight\") {\n      nums.push_back(8);\n\
    \    } else if (word == \"nine\") {\n      nums.push_back(9);\n    }\n  }\n  std::sort(nums.begin(),\
    \ nums.end());\n  std::string result;\n  for (int i = 0; i < nums.size(); i++)\
    \ {\n    if (i != 0) {\n      result += \" \";\n    }\n    if (nums[i] == 0) {\n\
    \      result += \"zero\";\n    } else if (nums[i] == 1) {\n      result += \"\
    one\";\n    } else if (nums[i] == 2) {\n      result += \"two\";\n    } else if\
    \ (nums[i] == 3) {\n      result += \"three\";\n    } else if (nums[i] == 4) {\n\
    \      result += \"four\";\n    } else if (nums[i] == 5) {\n      result += \"\
    five\";\n    } else if (nums[i] == 6) {\n      result += \"six\";\n    } else\
    \ if (nums[i] == 7) {\n      result += \"seven\";\n    } else if\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmplzuk0gve.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmplzuk0gve.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmplzuk0gve.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmplzuk0gve.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmplzuk0gve.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmplzuk0gve.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmplzuk0gve.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmplzuk0gve.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmplzuk0gve.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkged8p7m.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpkged8p7m.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpkged8p7m.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpkged8p7m.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpkged8p7m.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpkged8p7m.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpkged8p7m.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpkged8p7m.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpkged8p7m.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") v.push_back(0);\n\
    \        else if (word == \"one\") v.push_back(1);\n        else if (word == \"\
    two\") v.push_back(2);\n        else if (word == \"three\") v.push_back(3);\n\
    \        else if (word == \"four\") v.push_back(4);\n        else if (word ==\
    \ \"five\") v.push_back(5);\n        else if (word == \"six\") v.push_back(6);\n\
    \        else if (word == \"seven\") v.push_back(7);\n        else if (word ==\
    \ \"eight\") v.push_back(8);\n        else if (word == \"nine\") v.push_back(9);\n\
    \    }\n    std::sort(v.begin(), v.end());\n    std::string result;\n    for (int\
    \ i = 0; i < v.size(); i++) {\n        if (i > 0) result += \" \";\n        if\
    \ (v[i] == 0) result += \"zero\";\n        else if (v[i] == 1) result += \"one\"\
    ;\n        else if (v[i] == 2) result += \"two\";\n        else if (v[i] == 3)\
    \ result += \"three\";\n        else if (v[i] == 4) result += \"four\";\n    \
    \    else if (v[i] == 5) result += \"five\";\n        else if (v[i] == 6) result\
    \ += \"six\";\n        else if (v[i] == 7) result += \"seven\";\n        else\
    \ if (v[i] == 8) result += \"eight\";\n        else if (v[i] == 9) result += \"\
    nine\";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        if (i == 0) {\n          \
    \  if (nums[i] == 0) result += \"zero\";\n            else if (nums[i] == 1) result\
    \ += \"one\";\n            else if (nums[i] == 2) result += \"two\";\n       \
    \     else if (nums[i] == 3) result += \"three\";\n            else if (nums[i]\
    \ == 4) result += \"four\";\n            else if (nums[i] == 5) result += \"five\"\
    ;\n            else if (nums[i] == 6) result += \"six\";\n            else if\
    \ (nums[i] == 7) result += \"seven\";\n            else if (nums[i] == 8) result\
    \ += \"eight\";\n            else if (nums[i] == 9) result += \"nine\";\n    \
    \    }\n        else {\n            if (nums[i] == 0) result += \" zero\";\n \
    \           else if (nums[i] == 1) result += \" one\";\n            else if (nums[i]\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiwrhy05n.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpiwrhy05n.cpp:42:29: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   42 |             else if (nums[i]\n      |                     ~ \
    \      ^\n      |                             )\n   43 | }\n      | ~        \
    \                    \n/tmp/tmpiwrhy05n.cpp:43:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   43 | }\n      | ^\n/tmp/tmpiwrhy05n.cpp:44:9:\
    \ warning: empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   44 | int main() {\n      |         ^~\n/tmp/tmpiwrhy05n.cpp:44:9: note: remove\
    \ parentheses to default-initialize a variable\n   44 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpiwrhy05n.cpp:44:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpiwrhy05n.cpp:44:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   44 | int main() {\n      |            ^\n/tmp/tmpiwrhy05n.cpp:51:2: error:\
    \ expected \u2018}\u2019 at end of input\n   51 | }\n      |  ^\n/tmp/tmpiwrhy05n.cpp:26:43:\
    \ note: to match this \u2018{\u2019\n   26 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpiwrhy05n.cpp:51:2:\
    \ error: expected \u2018}\u2019 at end of input\n   51 | }\n      |  ^\n/tmp/tmpiwrhy05n.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpiwrhy05n.cpp:51:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   51 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::map<std::string, int> dict = {\n        {\"zero\", 0},\n       \
    \ {\"one\", 1},\n        {\"two\", 2},\n        {\"three\", 3},\n        {\"four\"\
    , 4},\n        {\"five\", 5},\n        {\"six\", 6},\n        {\"seven\", 7},\n\
    \        {\"eight\", 8},\n        {\"nine\", 9}\n    };\n    std::vector<int>\
    \ nums;\n    std::stringstream ss(numbers);\n    std::string word;\n    while\
    \ (ss >> word) {\n        nums.push_back(dict[word]);\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string res;\n    for (auto i : nums) {\n        for (auto\
    \ j : dict) {\n            if (j.second == i) {\n                res += j.first\
    \ + \" \";\n            }\n        }\n    }\n    return res.substr(0, res.size()\
    \ - 1);\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        result += nums[i] + \" \"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmp35njfb60: /tmp/tmp35njfb60.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        result += nums[i] + \" \"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmpjwvb4f9y: /tmp/tmpjwvb4f9y.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::stringstream result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result << \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result << \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result << \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result << \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result << \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result << \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ << \"five\";\n        } else if (nums[i] == 6) {\n            result << \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result << \"seven\";\n    \
    \    } else\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsnduqbr3.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpsnduqbr3.cpp:58:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   58 | }\n      | ^\n/tmp/tmpsnduqbr3.cpp:59:9: warning: empty\
    \ parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpsnduqbr3.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpsnduqbr3.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpsnduqbr3.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpsnduqbr3.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpsnduqbr3.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpsnduqbr3.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tstd::vector<int> nums;\n\tstd::stringstream ss(numbers);\n\tstd::string\
    \ word;\n\twhile (ss >> word) {\n\t\tif (word == \"zero\") {\n\t\t\tnums.push_back(0);\n\
    \t\t}\n\t\telse if (word == \"one\") {\n\t\t\tnums.push_back(1);\n\t\t}\n\t\t\
    else if (word == \"two\") {\n\t\t\tnums.push_back(2);\n\t\t}\n\t\telse if (word\
    \ == \"three\") {\n\t\t\tnums.push_back(3);\n\t\t}\n\t\telse if (word == \"four\"\
    ) {\n\t\t\tnums.push_back(4);\n\t\t}\n\t\telse if (word == \"five\") {\n\t\t\t\
    nums.push_back(5);\n\t\t}\n\t\telse if (word == \"six\") {\n\t\t\tnums.push_back(6);\n\
    \t\t}\n\t\telse if (word == \"seven\") {\n\t\t\tnums.push_back(7);\n\t\t}\n\t\t\
    else if (word == \"eight\") {\n\t\t\tnums.push_back(8);\n\t\t}\n\t\telse if (word\
    \ == \"nine\") {\n\t\t\tnums.push_back(9);\n\t\t}\n\t}\n\tstd::sort(nums.begin(),\
    \ nums.end());\n\tstd::string result;\n\tfor (int i = 0; i < nums.size(); i++)\
    \ {\n\t\tif (nums[i] == 0) {\n\t\t\tresult += \"zero \";\n\t\t}\n\t\telse if (nums[i]\
    \ == 1) {\n\t\t\tresult += \"one \";\n\t\t}\n\t\telse if (nums[i] == 2) {\n\t\t\
    \tresult += \"two \";\n\t\t}\n\t\telse if (nums[i] == 3) {\n\t\t\tresult += \"\
    three \";\n\t\t}\n\t\telse if (nums[i] == 4) {\n\t\t\tresult += \"four \";\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5b5er7p0.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp5b5er7p0.cpp:62:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   62 | int main() {\n      |     \
    \    ^~\n/tmp/tmp5b5er7p0.cpp:62:9: note: remove parentheses to default-initialize\
    \ a variable\n   62 | int main() {\n      |         ^~\n      |         --\n/tmp/tmp5b5er7p0.cpp:62:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmp5b5er7p0.cpp:62:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   62 | int main() {\n      |            ^\n/tmp/tmp5b5er7p0.cpp:69:2: error:\
    \ expected \u2018}\u2019 at end of input\n   69 | }\n      |  ^\n/tmp/tmp5b5er7p0.cpp:46:47:\
    \ note: to match this \u2018{\u2019\n   46 |         for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                               ^\n/tmp/tmp5b5er7p0.cpp:69:2:\
    \ error: expected \u2018}\u2019 at end of input\n   69 | }\n      |  ^\n/tmp/tmp5b5er7p0.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp5b5er7p0.cpp:69:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   69 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) result += \" \"\
    ;\n        if (nums[i] == 0) result += \"zero\";\n        else if (nums[i] ==\
    \ 1) result += \"one\";\n        else if (nums[i] == 2) result += \"two\";\n \
    \       else if (nums[i] == 3) result += \"three\";\n        else if (nums[i]\
    \ == 4) result += \"four\";\n        else if (nums[i] == 5) result += \"five\"\
    ;\n        else if (nums[i] == 6) result += \"six\";\n        else if (nums[i]\
    \ == 7) result += \"seven\";\n        else if (nums[i] == 8) result += \"eight\"\
    ;\n        else if (nums[i] == 9) result += \"nine\";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpht8917h1.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpht8917h1.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpht8917h1.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpht8917h1.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpht8917h1.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpht8917h1.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpht8917h1.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpht8917h1.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpht8917h1.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ temp;\n    while (ss >> temp) {\n        if (temp == \"zero\") nums.push_back(0);\n\
    \        else if (temp == \"one\") nums.push_back(1);\n        else if (temp ==\
    \ \"two\") nums.push_back(2);\n        else if (temp == \"three\") nums.push_back(3);\n\
    \        else if (temp == \"four\") nums.push_back(4);\n        else if (temp\
    \ == \"five\") nums.push_back(5);\n        else if (temp == \"six\") nums.push_back(6);\n\
    \        else if (temp == \"seven\") nums.push_back(7);\n        else if (temp\
    \ == \"eight\") nums.push_back(8);\n        else if (temp == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) result +=\
    \ \"zero \";\n        else if (nums[i] == 1) result += \"one \";\n        else\
    \ if (nums[i] == 2) result += \"two \";\n        else if (nums[i] == 3) result\
    \ += \"three \";\n        else if (nums[i] == 4) result += \"four \";\n      \
    \  else if (nums[i] == 5) result += \"five \";\n        else if (nums[i] == 6)\
    \ result += \"six \";\n        else if (nums[i] == 7) result += \"seven \";\n\
    \        else if (nums[i] == 8) result += \"eight \";\n        else if (nums[i]\
    \ == 9) result += \"nine \";\n    }\n    return result.substr(0, result.size()\
    \ - 1);\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ temp;\n    while (ss >> temp) {\n        if (temp == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (temp == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (temp == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (temp == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (temp == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (temp == \"five\") {\n            nums.push_back(5);\n        } else if (temp\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (temp == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (temp == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (temp == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk_9ehofw.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpk_9ehofw.cpp:57:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   57 | int main() {\n      |     \
    \    ^~\n/tmp/tmpk_9ehofw.cpp:57:9: note: remove parentheses to default-initialize\
    \ a variable\n   57 | int main() {\n      |         ^~\n      |         --\n/tmp/tmpk_9ehofw.cpp:57:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmpk_9ehofw.cpp:57:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   57 | int main() {\n      |            ^\n/tmp/tmpk_9ehofw.cpp:64:2: error:\
    \ expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmpk_9ehofw.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpk_9ehofw.cpp:64:2:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmpk_9ehofw.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpk_9ehofw.cpp:64:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::map<std::string, int> number_map = {\n        {\"zero\", 0},\n \
    \       {\"one\", 1},\n        {\"two\", 2},\n        {\"three\", 3},\n      \
    \  {\"four\", 4},\n        {\"five\", 5},\n        {\"six\", 6},\n        {\"\
    seven\", 7},\n        {\"eight\", 8},\n        {\"nine\", 9}\n    };\n    std::vector<int>\
    \ nums;\n    std::stringstream ss(numbers);\n    std::string word;\n    while\
    \ (ss >> word) {\n        nums.push_back(number_map[word]);\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int num : nums) {\n        for\
    \ (auto it = number_map.begin(); it != number_map.end(); ++it) {\n           \
    \ if (it->second == num) {\n                result += it->first + \" \";\n   \
    \             break;\n            }\n        }\n    }\n    return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = sort_numbers;\n \
    \   assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp351i9awi.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp351i9awi.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmp351i9awi.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmp351i9awi.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmp351i9awi.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmp351i9awi.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmp351i9awi.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmp351i9awi.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp351i9awi.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        result += nums[i] + \" \"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmpioz7hggy: /tmp/tmpioz7hggy.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) result += \" \"\
    ;\n        if (nums[i] == 0) result += \"zero\";\n        else if (nums[i] ==\
    \ 1) result += \"one\";\n        else if (nums[i] == 2) result += \"two\";\n \
    \       else if (nums[i] == 3) result += \"three\";\n        else if (nums[i]\
    \ == 4) result += \"four\";\n        else if (nums[i] == 5) result += \"five\"\
    ;\n        else if (nums[i] == 6) result += \"six\";\n        else if (nums[i]\
    \ == 7) result += \"seven\";\n        else if (nums[i] == 8) result += \"eight\"\
    ;\n        else if (nums[i] == 9) result += \"nine\";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::stringstream result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result << \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result << \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result << \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result << \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result << \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result << \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ << \"five\";\n        } else if (nums[i] == 6) {\n            result << \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result << \"seven\";\n    \
    \    } else\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqb0p_cmt.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpqb0p_cmt.cpp:58:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   58 | }\n      | ^\n/tmp/tmpqb0p_cmt.cpp:59:9: warning: empty\
    \ parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpqb0p_cmt.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpqb0p_cmt.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpqb0p_cmt.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpqb0p_cmt.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpqb0p_cmt.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpqb0p_cmt.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmphaeurav0.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmphaeurav0.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmphaeurav0.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmphaeurav0.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmphaeurav0.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmphaeurav0.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmphaeurav0.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmphaeurav0.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmphaeurav0.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::stringstream result;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        if (i > 0) result << \"\
    \ \";\n        if (nums[i] == 0) result << \"zero\";\n        else if (nums[i]\
    \ == 1) result << \"one\";\n        else if (nums[i] == 2) result << \"two\";\n\
    \        else if (nums[i] == 3) result << \"three\";\n        else if (nums[i]\
    \ == 4) result << \"four\";\n        else if (nums[i] == 5) result << \"five\"\
    ;\n        else if (nums[i] == 6) result << \"six\";\n        else if (nums[i]\
    \ == 7) result << \"seven\";\n        else if (nums[i] == 8) result << \"eight\"\
    ;\n        else if (nums[i] == 9) result << \"nine\";\n    }\n    return result.str();\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmppl60bfqs.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmppl60bfqs.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmppl60bfqs.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmppl60bfqs.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmppl60bfqs.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmppl60bfqs.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmppl60bfqs.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmppl60bfqs.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmppl60bfqs.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   v.push_back(0);\n        } else if (word == \"one\") {\n            v.push_back(1);\n\
    \        } else if (word == \"two\") {\n            v.push_back(2);\n        }\
    \ else if (word == \"three\") {\n            v.push_back(3);\n        } else if\
    \ (word == \"four\") {\n            v.push_back(4);\n        } else if (word ==\
    \ \"five\") {\n            v.push_back(5);\n        } else if (word == \"six\"\
    ) {\n            v.push_back(6);\n        } else if (word == \"seven\") {\n  \
    \          v.push_back(7);\n        } else if (word == \"eight\") {\n        \
    \    v.push_back(8);\n        } else if (word == \"nine\") {\n            v.push_back(9);\n\
    \        }\n    }\n    std::sort(v.begin(), v.end());\n    std::string result;\n\
    \    for (int i = 0; i < v.size(); i++) {\n        if (v[i] == 0) {\n        \
    \    result += \"zero \";\n        } else if (v[i] == 1) {\n            result\
    \ += \"one \";\n        } else if (v[i] == 2) {\n            result += \"two \"\
    ;\n        } else if (v[i] == 3) {\n            result += \"three \";\n      \
    \  } else if (v[i] == 4) {\n            result += \"four \";\n        } else if\
    \ (v[i] == 5) {\n            result += \"five \";\n        } else if (v[i] ==\
    \ 6) {\n            result += \"six \";\n        } else if (v[i] == 7) {\n   \
    \         result += \"seven \";\n        } else if (v[i] == 8) {\n           \
    \ result += \"eight \";\n        } else if (v[i] == 9) {\n           \n}\nint\
    \ main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa472sg7i.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpa472sg7i.cpp:59:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   59 | int main() {\n      |     \
    \    ^~\n/tmp/tmpa472sg7i.cpp:59:9: note: remove parentheses to default-initialize\
    \ a variable\n   59 | int main() {\n      |         ^~\n      |         --\n/tmp/tmpa472sg7i.cpp:59:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmpa472sg7i.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpa472sg7i.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpa472sg7i.cpp:37:40:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < v.size();\
    \ i++) {\n      |                                        ^\n/tmp/tmpa472sg7i.cpp:66:2:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpa472sg7i.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpa472sg7i.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) result += \" \"\
    ;\n        if (nums[i] == 0) result += \"zero\";\n        else if (nums[i] ==\
    \ 1) result += \"one\";\n        else if (nums[i] == 2) result += \"two\";\n \
    \       else if (nums[i] == 3) result += \"three\";\n        else if (nums[i]\
    \ == 4) result += \"four\";\n        else if (nums[i] == 5) result += \"five\"\
    ;\n        else if (nums[i] == 6) result += \"six\";\n        else if (nums[i]\
    \ == 7) result += \"seven\";\n        else if (nums[i] == 8) result += \"eight\"\
    ;\n        else if (nums[i] == 9) result += \"nine\";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        nums.push_back(word);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (auto num : nums) {\n        result += num + \" \";\n    }\n    return\
    \ result.substr(0, result.size() - 1);\n}\nint main() {\n    auto candidate =\
    \ sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmp6a2lvv8c: /tmp/tmp6a2lvv8c.cpp:26: int main(): Assertion `candidate((\"\
    three five nine\")) == (\"three five nine\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string number;\n    std::vector<int>\
    \ nums;\n    while (ss >> number) {\n        if (number == \"zero\") nums.push_back(0);\n\
    \        else if (number == \"one\") nums.push_back(1);\n        else if (number\
    \ == \"two\") nums.push_back(2);\n        else if (number == \"three\") nums.push_back(3);\n\
    \        else if (number == \"four\") nums.push_back(4);\n        else if (number\
    \ == \"five\") nums.push_back(5);\n        else if (number == \"six\") nums.push_back(6);\n\
    \        else if (number == \"seven\") nums.push_back(7);\n        else if (number\
    \ == \"eight\") nums.push_back(8);\n        else if (number == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::stringstream result;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) result << \"\
    \ \";\n        if (nums[i] == 0) result << \"zero\";\n        else if (nums[i]\
    \ == 1) result << \"one\";\n        else if (nums[i] == 2) result << \"two\";\n\
    \        else if (nums[i] == 3) result << \"three\";\n        else if (nums[i]\
    \ == 4) result << \"four\";\n        else if (nums[i] == 5) result << \"five\"\
    ;\n        else if (nums[i] == 6) result << \"six\";\n        else if (nums[i]\
    \ == 7) result << \"seven\";\n        else if (nums[i] == 8) result << \"eight\"\
    ;\n        else if (nums[i] == 9) result << \"nine\";\n    }\n    return result.str();\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i > 0) {\n            result += \" \";\n        }\n    \
    \    if (nums[i] == 0) {\n            result += \"zero\";\n        } else if (nums[i]\
    \ == 1) {\n            result += \"one\";\n        } else if (nums[i] == 2) {\n\
    \            result += \"two\";\n        } else if (nums[i] == 3) {\n        \
    \    result += \"three\";\n        } else if (nums[i] == 4) {\n            result\
    \ += \"four\";\n        } else if (nums[i] == 5) {\n            result += \"five\"\
    ;\n        } else if (nums[i] == 6) {\n            result += \"six\";\n      \
    \  } else if (nums[i] == 7) {\n            result += \"seven\";\n        } else\
    \ if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmppt9fkupu.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmppt9fkupu.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmppt9fkupu.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmppt9fkupu.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmppt9fkupu.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmppt9fkupu.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmppt9fkupu.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmppt9fkupu.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmppt9fkupu.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> num_vec;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        num_vec.push_back(temp);\n\
    \    }\n    std::sort(num_vec.begin(), num_vec.end());\n    std::string result;\n\
    \    for (auto i : num_vec) {\n        result += i + \" \";\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp5ebt_yjv: /tmp/tmp5ebt_yjv.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (auto i : nums) {\n        result += i + \" \";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpupb4r3pq: /tmp/tmpupb4r3pq.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp47ljtmey.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp47ljtmey.cpp:57:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   57 | int main() {\n      |     \
    \    ^~\n/tmp/tmp47ljtmey.cpp:57:9: note: remove parentheses to default-initialize\
    \ a variable\n   57 | int main() {\n      |         ^~\n      |         --\n/tmp/tmp47ljtmey.cpp:57:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmp47ljtmey.cpp:57:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   57 | int main() {\n      |            ^\n/tmp/tmp47ljtmey.cpp:64:2: error:\
    \ expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmp47ljtmey.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp47ljtmey.cpp:64:2:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmp47ljtmey.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp47ljtmey.cpp:64:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::stringstream result;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) result << \"\
    \ \";\n        if (nums[i] == 0) result << \"zero\";\n        else if (nums[i]\
    \ == 1) result << \"one\";\n        else if (nums[i] == 2) result << \"two\";\n\
    \        else if (nums[i] == 3) result << \"three\";\n        else if (nums[i]\
    \ == 4) result << \"four\";\n        else if (nums[i] == 5) result << \"five\"\
    ;\n        else if (nums[i] == 6) result << \"six\";\n        else if (nums[i]\
    \ == 7) result << \"seven\";\n        else if (nums[i] == 8) result << \"eight\"\
    ;\n        else if (nums[i] == 9) result << \"nine\";\n    }\n    return result.str();\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp629t9ix_.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp629t9ix_.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmp629t9ix_.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmp629t9ix_.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmp629t9ix_.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmp629t9ix_.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmp629t9ix_.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmp629t9ix_.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp629t9ix_.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        result += nums[i] + \" \"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmp4cfcoje5: /tmp/tmp4cfcoje5.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3asc4gpl.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp3asc4gpl.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmp3asc4gpl.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmp3asc4gpl.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmp3asc4gpl.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmp3asc4gpl.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmp3asc4gpl.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmp3asc4gpl.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp3asc4gpl.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::stringstream ss2;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        ss2 << nums[i] << \" \"\
    ;\n    }\n    return ss2.str();\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmp6usn2cfg: /tmp/tmp6usn2cfg.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (auto i : nums) {\n        result += i + \" \";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpde75yx6c: /tmp/tmpde75yx6c.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string res;\n    for\
    \ (int i = 0; i < nums.size(); i++) {\n        if (i != 0) res += \" \";\n   \
    \     if (nums[i] == 0) res += \"zero\";\n        else if (nums[i] == 1) res +=\
    \ \"one\";\n        else if (nums[i] == 2) res += \"two\";\n        else if (nums[i]\
    \ == 3) res += \"three\";\n        else if (nums[i] == 4) res += \"four\";\n \
    \       else if (nums[i] == 5) res += \"five\";\n        else if (nums[i] == 6)\
    \ res += \"six\";\n        else if (nums[i] == 7) res += \"seven\";\n        else\
    \ if (nums[i] == 8) res += \"eight\";\n        else if (nums[i] == 9) res += \"\
    nine\";\n    }\n    return res;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::stringstream result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result << \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result << \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result << \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result << \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result << \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result << \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ << \"five\";\n        } else if (nums[i] == 6) {\n            result << \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result << \"seven\";\n    \
    \    } else\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjpy2f8zx.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpjpy2f8zx.cpp:58:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   58 | }\n      | ^\n/tmp/tmpjpy2f8zx.cpp:59:9: warning: empty\
    \ parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpjpy2f8zx.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpjpy2f8zx.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpjpy2f8zx.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpjpy2f8zx.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpjpy2f8zx.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpjpy2f8zx.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string temp;\n    std::vector<std::string>\
    \ v;\n    while(ss >> temp)\n        v.push_back(temp);\n    std::sort(v.begin(),\
    \ v.end());\n    std::string ans;\n    for(int i = 0; i < v.size(); i++)\n   \
    \     ans += v[i] + \" \";\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmpxxgd_fd2: /tmp/tmpxxgd_fd2.cpp:23: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        result += nums[i] + \" \"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmp16es335a: /tmp/tmp16es335a.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        nums.push_back(word);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (auto num : nums) {\n        result += num + \" \";\n    }\n    return\
    \ result.substr(0, result.size() - 1);\n}\nint main() {\n    auto candidate =\
    \ sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmpvkqs59ns: /tmp/tmpvkqs59ns.cpp:26: int main(): Assertion `candidate((\"\
    three five nine\")) == (\"three five nine\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        if (i > 0) result += \" \"\
    ;\n        if (nums[i] == 0) result += \"zero\";\n        else if (nums[i] ==\
    \ 1) result += \"one\";\n        else if (nums[i] == 2) result += \"two\";\n \
    \       else if (nums[i] == 3) result += \"three\";\n        else if (nums[i]\
    \ == 4) result += \"four\";\n        else if (nums[i] == 5) result += \"five\"\
    ;\n        else if (nums[i] == 6) result += \"six\";\n        else if (nums[i]\
    \ == 7) result += \"seven\";\n        else if (nums[i] == 8) result += \"eight\"\
    ;\n        else if (nums[i] == 9) result += \"nine\";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvq6n0spb.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpvq6n0spb.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpvq6n0spb.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpvq6n0spb.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpvq6n0spb.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpvq6n0spb.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpvq6n0spb.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpvq6n0spb.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpvq6n0spb.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5ihqy6o8.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp5ihqy6o8.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmp5ihqy6o8.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmp5ihqy6o8.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmp5ihqy6o8.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmp5ihqy6o8.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmp5ihqy6o8.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmp5ihqy6o8.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp5ihqy6o8.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n  std::vector<std::string> nums;\n  std::stringstream ss(numbers);\n  std::string\
    \ temp;\n  while (ss >> temp) {\n    nums.push_back(temp);\n  }\n  std::sort(nums.begin(),\
    \ nums.end());\n  std::string result;\n  for (int i = 0; i < nums.size(); i++)\
    \ {\n    result += nums[i] + \" \";\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpv2kb0s9a: /tmp/tmpv2kb0s9a.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::vector<int> nums;\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt3mhjycf.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpt3mhjycf.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpt3mhjycf.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpt3mhjycf.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpt3mhjycf.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpt3mhjycf.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpt3mhjycf.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpt3mhjycf.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpt3mhjycf.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n    std::string\
    \ temp;\n    while(ss >> temp) {\n        if(temp == \"zero\") {\n           \
    \ v.push_back(0);\n        }\n        else if(temp == \"one\") {\n           \
    \ v.push_back(1);\n        }\n        else if(temp == \"two\") {\n           \
    \ v.push_back(2);\n        }\n        else if(temp == \"three\") {\n         \
    \   v.push_back(3);\n        }\n        else if(temp == \"four\") {\n        \
    \    v.push_back(4);\n        }\n        else if(temp == \"five\") {\n       \
    \     v.push_back(5);\n        }\n        else if(temp == \"six\") {\n       \
    \     v.push_back(6);\n        }\n        else if(temp == \"seven\") {\n     \
    \       v.push_back(7);\n        }\n        else if(temp == \"eight\") {\n   \
    \         v.push_back(8);\n        }\n        else if(temp == \"nine\") {\n  \
    \          v.push_back(9);\n        }\n    }\n    std::sort(v.begin(), v.end());\n\
    \    std::string result;\n    for(int i = 0; i < v.size(); i++) {\n        if(v[i]\
    \ == 0) {\n            result += \"zero \";\n        }\n        else if(v[i] ==\
    \ 1) {\n            result += \"one \";\n        }\n        else if(v[i] == 2)\
    \ {\n            result += \"two \";\n        }\n        else if(v[i] == 3) {\n\
    \            result += \"three \";\n        }\n        else if(v[i] == 4) {\n\
    \            result += \"four \";\n        }\n        else if(v[i] == 5) {\n \
    \           result += \"five \";\n        }\n        else if(v[i] == 6) {\n  \
    \          result += \"six \";\n        }\n        else if(v[i] == 7) {\n    \
    \        result += \"seven \";\n        }\n        else\n}\nint main() {\n   \
    \ auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n \
    \   assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three\
    \ five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbkf0881i.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpbkf0881i.cpp:72:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   72 | }\n      | ^\n/tmp/tmpbkf0881i.cpp:73:9: warning: empty\
    \ parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   73 | int main() {\n      |         ^~\n/tmp/tmpbkf0881i.cpp:73:9: note: remove\
    \ parentheses to default-initialize a variable\n   73 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpbkf0881i.cpp:73:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpbkf0881i.cpp:73:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   73 | int main() {\n      |            ^\n/tmp/tmpbkf0881i.cpp:80:2: error:\
    \ expected \u2018}\u2019 at end of input\n   80 | }\n      |  ^\n/tmp/tmpbkf0881i.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpbkf0881i.cpp:80:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   80 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::stringstream result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result << \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result << \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result << \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result << \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result << \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result << \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ << \"five\";\n        } else if (nums[i] == 6) {\n            result << \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result << \"seven\";\n    \
    \    } else\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl89f09r4.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpl89f09r4.cpp:58:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   58 | }\n      | ^\n/tmp/tmpl89f09r4.cpp:59:9: warning: empty\
    \ parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpl89f09r4.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpl89f09r4.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpl89f09r4.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpl89f09r4.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpl89f09r4.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpl89f09r4.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb2mz_usg.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpb2mz_usg.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpb2mz_usg.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpb2mz_usg.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpb2mz_usg.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpb2mz_usg.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpb2mz_usg.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpb2mz_usg.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpb2mz_usg.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   v.push_back(0);\n        } else if (word == \"one\") {\n            v.push_back(1);\n\
    \        } else if (word == \"two\") {\n            v.push_back(2);\n        }\
    \ else if (word == \"three\") {\n            v.push_back(3);\n        } else if\
    \ (word == \"four\") {\n            v.push_back(4);\n        } else if (word ==\
    \ \"five\") {\n            v.push_back(5);\n        } else if (word == \"six\"\
    ) {\n            v.push_back(6);\n        } else if (word == \"seven\") {\n  \
    \          v.push_back(7);\n        } else if (word == \"eight\") {\n        \
    \    v.push_back(8);\n        } else if (word == \"nine\") {\n            v.push_back(9);\n\
    \        }\n    }\n    std::sort(v.begin(), v.end());\n    std::string result;\n\
    \    for (int i = 0; i < v.size(); i++) {\n        if (v[i] == 0) {\n        \
    \    result += \"zero \";\n        } else if (v[i] == 1) {\n            result\
    \ += \"one \";\n        } else if (v[i] == 2) {\n            result += \"two \"\
    ;\n        } else if (v[i] == 3) {\n            result += \"three \";\n      \
    \  } else if (v[i] == 4) {\n            result += \"four \";\n        } else if\
    \ (v[i] == 5) {\n            result += \"five \";\n        } else if (v[i] ==\
    \ 6) {\n            result += \"six \";\n        } else if (v[i] == 7) {\n   \
    \         result += \"seven \";\n        } else if (v[i] == 8) {\n           \
    \ result += \"eight \";\n        } else if (v[i] == 9) {\n           \n}\nint\
    \ main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpix3h2onb.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpix3h2onb.cpp:59:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   59 | int main() {\n      |     \
    \    ^~\n/tmp/tmpix3h2onb.cpp:59:9: note: remove parentheses to default-initialize\
    \ a variable\n   59 | int main() {\n      |         ^~\n      |         --\n/tmp/tmpix3h2onb.cpp:59:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmpix3h2onb.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpix3h2onb.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpix3h2onb.cpp:37:40:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < v.size();\
    \ i++) {\n      |                                        ^\n/tmp/tmpix3h2onb.cpp:66:2:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpix3h2onb.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpix3h2onb.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ temp;\n    while (ss >> temp) {\n        if (temp == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (temp == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (temp == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (temp == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (temp == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (temp == \"five\") {\n            nums.push_back(5);\n        } else if (temp\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (temp == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (temp == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (temp == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsv9eq4e1.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpsv9eq4e1.cpp:57:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   57 | int main() {\n      |     \
    \    ^~\n/tmp/tmpsv9eq4e1.cpp:57:9: note: remove parentheses to default-initialize\
    \ a variable\n   57 | int main() {\n      |         ^~\n      |         --\n/tmp/tmpsv9eq4e1.cpp:57:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmpsv9eq4e1.cpp:57:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   57 | int main() {\n      |            ^\n/tmp/tmpsv9eq4e1.cpp:64:2: error:\
    \ expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmpsv9eq4e1.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpsv9eq4e1.cpp:64:2:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmpsv9eq4e1.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpsv9eq4e1.cpp:64:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    std::map<std::string, int> num_map;\n    num_map[\"zero\"] = 0;\n\
    \    num_map[\"one\"] = 1;\n    num_map[\"two\"] = 2;\n    num_map[\"three\"]\
    \ = 3;\n    num_map[\"four\"] = 4;\n    num_map[\"five\"] = 5;\n    num_map[\"\
    six\"] = 6;\n    num_map[\"seven\"] = 7;\n    num_map[\"eight\"] = 8;\n    num_map[\"\
    nine\"] = 9;\n    while (ss >> word) {\n        nums.push_back(num_map[word]);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string res = \"\";\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        for (auto it = num_map.begin();\
    \ it != num_map.end(); it++) {\n            if (it->second == nums[i]) {\n   \
    \             res += it->first + \" \";\n            }\n        }\n    }\n   \
    \ return res.substr(0, res.size() - 1);\n}\nint main() {\n    auto candidate =\
    \ sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::stringstream ss2;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            ss2 << \" \";\n        }\n      \
    \  if (nums[i] == 0) {\n            ss2 << \"zero\";\n        } else if (nums[i]\
    \ == 1) {\n            ss2 << \"one\";\n        } else if (nums[i] == 2) {\n \
    \           ss2 << \"two\";\n        } else if (nums[i] == 3) {\n            ss2\
    \ << \"three\";\n        } else if (nums[i] == 4) {\n            ss2 << \"four\"\
    ;\n        } else if (nums[i] == 5) {\n            ss2 << \"five\";\n        }\
    \ else if (nums[i] == 6) {\n            ss2 << \"six\";\n        } else if (nums[i]\
    \ == 7) {\n           \n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_lhxqgcg.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp_lhxqgcg.cpp:58:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   58 | int main() {\n      |     \
    \    ^~\n/tmp/tmp_lhxqgcg.cpp:58:9: note: remove parentheses to default-initialize\
    \ a variable\n   58 | int main() {\n      |         ^~\n      |         --\n/tmp/tmp_lhxqgcg.cpp:58:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmp_lhxqgcg.cpp:58:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   58 | int main() {\n      |            ^\n/tmp/tmp_lhxqgcg.cpp:65:2: error:\
    \ expected \u2018}\u2019 at end of input\n   65 | }\n      |  ^\n/tmp/tmp_lhxqgcg.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp_lhxqgcg.cpp:65:2:\
    \ error: expected \u2018}\u2019 at end of input\n   65 | }\n      |  ^\n/tmp/tmp_lhxqgcg.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp_lhxqgcg.cpp:65:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   65 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu_kptv7e.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpu_kptv7e.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpu_kptv7e.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpu_kptv7e.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpu_kptv7e.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpu_kptv7e.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpu_kptv7e.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpu_kptv7e.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpu_kptv7e.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\")\n           \
    \ nums.push_back(0);\n        else if (word == \"one\")\n            nums.push_back(1);\n\
    \        else if (word == \"two\")\n            nums.push_back(2);\n        else\
    \ if (word == \"three\")\n            nums.push_back(3);\n        else if (word\
    \ == \"four\")\n            nums.push_back(4);\n        else if (word == \"five\"\
    )\n            nums.push_back(5);\n        else if (word == \"six\")\n       \
    \     nums.push_back(6);\n        else if (word == \"seven\")\n            nums.push_back(7);\n\
    \        else if (word == \"eight\")\n            nums.push_back(8);\n       \
    \ else if (word == \"nine\")\n            nums.push_back(9);\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0)\n            result += \" \";\n        if (nums[i]\
    \ == 0)\n            result += \"zero\";\n        else if (nums[i] == 1)\n   \
    \         result += \"one\";\n        else if (nums[i] == 2)\n            result\
    \ += \"two\";\n        else if (nums[i] == 3)\n            result += \"three\"\
    ;\n        else if (nums[i] == 4)\n            result += \"four\";\n        else\
    \ if (nums[i] == 5)\n            result += \"five\";\n        else if (nums[i]\
    \ == 6)\n            result += \"six\";\n        else if (nums[i] == 7)\n    \
    \        result += \"seven\";\n        else if (nums[i] == 8)\n            result\
    \ += \"eight\";\n        else if (nums[i] == 9)\n            result += \"nine\"\
    ;\n    }\n    return\n}\nint main() {\n    auto candidate = sort_numbers;\n  \
    \  assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6issbh_8.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp6issbh_8.cpp:61:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   61 | }\n      | ^\n/tmp/tmp6issbh_8.cpp:60:11: error: expected\
    \ \u2018;\u2019 before \u2018}\u2019 token\n   60 |     return\n      |      \
    \     ^\n      |           ;\n   61 | }\n      | ~          \n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::stringstream result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i > 0) {\n            result << \" \";\n        }\n    \
    \    if (nums[i] == 0) {\n            result << \"zero\";\n        } else if (nums[i]\
    \ == 1) {\n            result << \"one\";\n        } else if (nums[i] == 2) {\n\
    \            result << \"two\";\n        } else if (nums[i] == 3) {\n        \
    \    result << \"three\";\n        } else if (nums[i] == 4) {\n            result\
    \ << \"four\";\n        } else if (nums[i] == 5) {\n            result << \"five\"\
    ;\n        } else if (nums[i] == 6) {\n            result << \"six\";\n      \
    \  } else if (nums[i] == 7) {\n            result << \"seven\";\n        } else\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwkfd6wmp.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpwkfd6wmp.cpp:58:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   58 | }\n      | ^\n/tmp/tmpwkfd6wmp.cpp:59:9: warning: empty\
    \ parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpwkfd6wmp.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpwkfd6wmp.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpwkfd6wmp.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpwkfd6wmp.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpwkfd6wmp.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpwkfd6wmp.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        result += nums[i] + \" \"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmpfl47aoq2: /tmp/tmpfl47aoq2.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n    std::string\
    \ s;\n    while(ss >> s) {\n        if(s == \"zero\") v.push_back(0);\n      \
    \  else if(s == \"one\") v.push_back(1);\n        else if(s == \"two\") v.push_back(2);\n\
    \        else if(s == \"three\") v.push_back(3);\n        else if(s == \"four\"\
    ) v.push_back(4);\n        else if(s == \"five\") v.push_back(5);\n        else\
    \ if(s == \"six\") v.push_back(6);\n        else if(s == \"seven\") v.push_back(7);\n\
    \        else if(s == \"eight\") v.push_back(8);\n        else if(s == \"nine\"\
    ) v.push_back(9);\n    }\n    std::sort(v.begin(), v.end());\n    std::stringstream\
    \ ss2;\n    for(int i = 0; i < v.size(); i++) {\n        if(i != 0) ss2 << \"\
    \ \";\n        if(v[i] == 0) ss2 << \"zero\";\n        else if(v[i] == 1) ss2\
    \ << \"one\";\n        else if(v[i] == 2) ss2 << \"two\";\n        else if(v[i]\
    \ == 3) ss2 << \"three\";\n        else if(v[i] == 4) ss2 << \"four\";\n     \
    \   else if(v[i] == 5) ss2 << \"five\";\n        else if(v[i] == 6) ss2 << \"\
    six\";\n        else if(v[i] == 7) ss2 << \"seven\";\n        else if(v[i] ==\
    \ 8) ss2 << \"eight\";\n        else if(v[i] == 9) ss2 << \"nine\";\n    }\n \
    \   return ss2.str();\n}\nint main() {\n    auto candidate = sort_numbers;\n \
    \   assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) result += \" \"\
    ;\n        if (nums[i] == 0) result += \"zero\";\n        else if (nums[i] ==\
    \ 1) result += \"one\";\n        else if (nums[i] == 2) result += \"two\";\n \
    \       else if (nums[i] == 3) result += \"three\";\n        else if (nums[i]\
    \ == 4) result += \"four\";\n        else if (nums[i] == 5) result += \"five\"\
    ;\n        else if (nums[i] == 6) result += \"six\";\n        else if (nums[i]\
    \ == 7) result += \"seven\";\n        else if (nums[i] == 8) result += \"eight\"\
    ;\n        else if (nums[i] == 9) result += \"nine\";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2w1h22aq.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp2w1h22aq.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmp2w1h22aq.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmp2w1h22aq.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmp2w1h22aq.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmp2w1h22aq.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmp2w1h22aq.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmp2w1h22aq.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp2w1h22aq.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp47is3sre.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp47is3sre.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmp47is3sre.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmp47is3sre.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmp47is3sre.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmp47is3sre.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmp47is3sre.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmp47is3sre.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp47is3sre.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy5o4qo8k.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpy5o4qo8k.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpy5o4qo8k.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpy5o4qo8k.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpy5o4qo8k.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpy5o4qo8k.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpy5o4qo8k.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpy5o4qo8k.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpy5o4qo8k.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums = {\"zero\", \"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    std::vector<int>\
    \ nums_int;\n    std::stringstream ss(numbers);\n    std::string temp;\n    while\
    \ (ss >> temp) {\n        for (int i = 0; i < nums.size(); i++) {\n          \
    \  if (temp == nums[i]) {\n                nums_int.push_back(i);\n          \
    \  }\n        }\n    }\n    std::sort(nums_int.begin(), nums_int.end());\n   \
    \ std::string result;\n    for (int i = 0; i < nums_int.size(); i++) {\n     \
    \   result += nums[nums_int[i]] + \" \";\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp4bmv7dp1: /tmp/tmp4bmv7dp1.cpp:30: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ temp;\n    while (ss >> temp) {\n        if (temp == \"zero\") nums.push_back(0);\n\
    \        else if (temp == \"one\") nums.push_back(1);\n        else if (temp ==\
    \ \"two\") nums.push_back(2);\n        else if (temp == \"three\") nums.push_back(3);\n\
    \        else if (temp == \"four\") nums.push_back(4);\n        else if (temp\
    \ == \"five\") nums.push_back(5);\n        else if (temp == \"six\") nums.push_back(6);\n\
    \        else if (temp == \"seven\") nums.push_back(7);\n        else if (temp\
    \ == \"eight\") nums.push_back(8);\n        else if (temp == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string ans = \"\";\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) ans +=\
    \ \"zero \";\n        else if (nums[i] == 1) ans += \"one \";\n        else if\
    \ (nums[i] == 2) ans += \"two \";\n        else if (nums[i] == 3) ans += \"three\
    \ \";\n        else if (nums[i] == 4) ans += \"four \";\n        else if (nums[i]\
    \ == 5) ans += \"five \";\n        else if (nums[i] == 6) ans += \"six \";\n \
    \       else if (nums[i] == 7) ans += \"seven \";\n        else if (nums[i] ==\
    \ 8) ans += \"eight \";\n        else if (nums[i] == 9) ans += \"nine \";\n  \
    \  }\n    return ans.substr(0, ans.size() - 1);\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::stringstream result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result << \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result << \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result << \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result << \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result << \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result << \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ << \"five\";\n        } else if (nums[i] == 6) {\n            result << \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result << \"seven\";\n    \
    \    } else\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz98500vs.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpz98500vs.cpp:58:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   58 | }\n      | ^\n/tmp/tmpz98500vs.cpp:59:9: warning: empty\
    \ parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpz98500vs.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpz98500vs.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpz98500vs.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpz98500vs.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpz98500vs.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpz98500vs.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string ans = \"\";\n\
    \    for (auto i : nums) {\n        if (i == 0) ans += \"zero \";\n        else\
    \ if (i == 1) ans += \"one \";\n        else if (i == 2) ans += \"two \";\n  \
    \      else if (i == 3) ans += \"three \";\n        else if (i == 4) ans += \"\
    four \";\n        else if (i == 5) ans += \"five \";\n        else if (i == 6)\
    \ ans += \"six \";\n        else if (i == 7) ans += \"seven \";\n        else\
    \ if (i == 8) ans += \"eight \";\n        else if (i == 9) ans += \"nine \";\n\
    \    }\n    return ans.substr(0, ans.size() - 1);\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm0crqp_v.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpm0crqp_v.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpm0crqp_v.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpm0crqp_v.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpm0crqp_v.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpm0crqp_v.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpm0crqp_v.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpm0crqp_v.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpm0crqp_v.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (auto i : nums) {\n        result += i + \" \";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpvj_6q7jy: /tmp/tmpvj_6q7jy.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::vector<int> nums;\n    int n;\n\
    \    while (ss >> n) {\n        nums.push_back(n);\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::stringstream result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        result << nums[i] << \" \";\n    }\n    return result.str();\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpi8tqlpvg: /tmp/tmpi8tqlpvg.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string res;\n    for\
    \ (int i = 0; i < nums.size(); i++) {\n        res += nums[i] + \" \";\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpnvq37l2z: /tmp/tmpnvq37l2z.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   v.push_back(0);\n        } else if (word == \"one\") {\n            v.push_back(1);\n\
    \        } else if (word == \"two\") {\n            v.push_back(2);\n        }\
    \ else if (word == \"three\") {\n            v.push_back(3);\n        } else if\
    \ (word == \"four\") {\n            v.push_back(4);\n        } else if (word ==\
    \ \"five\") {\n            v.push_back(5);\n        } else if (word == \"six\"\
    ) {\n            v.push_back(6);\n        } else if (word == \"seven\") {\n  \
    \          v.push_back(7);\n        } else if (word == \"eight\") {\n        \
    \    v.push_back(8);\n        } else if (word == \"nine\") {\n            v.push_back(9);\n\
    \        }\n    }\n    std::sort(v.begin(), v.end());\n    std::string result;\n\
    \    for (int i = 0; i < v.size(); i++) {\n        if (v[i] == 0) {\n        \
    \    result += \"zero \";\n        } else if (v[i] == 1) {\n            result\
    \ += \"one \";\n        } else if (v[i] == 2) {\n            result += \"two \"\
    ;\n        } else if (v[i] == 3) {\n            result += \"three \";\n      \
    \  } else if (v[i] == 4) {\n            result += \"four \";\n        } else if\
    \ (v[i] == 5) {\n            result += \"five \";\n        } else if (v[i] ==\
    \ 6) {\n            result += \"six \";\n        } else if (v[i] == 7) {\n   \
    \         result += \"seven \";\n        } else if (v[i] == 8) {\n           \
    \ result += \"eight \";\n        } else if (v[i] == 9) {\n           \n}\nint\
    \ main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7jsuic7a.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp7jsuic7a.cpp:59:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   59 | int main() {\n      |     \
    \    ^~\n/tmp/tmp7jsuic7a.cpp:59:9: note: remove parentheses to default-initialize\
    \ a variable\n   59 | int main() {\n      |         ^~\n      |         --\n/tmp/tmp7jsuic7a.cpp:59:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmp7jsuic7a.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmp7jsuic7a.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmp7jsuic7a.cpp:37:40:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < v.size();\
    \ i++) {\n      |                                        ^\n/tmp/tmp7jsuic7a.cpp:66:2:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmp7jsuic7a.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp7jsuic7a.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd1o4a25h.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpd1o4a25h.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpd1o4a25h.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpd1o4a25h.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpd1o4a25h.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpd1o4a25h.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpd1o4a25h.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpd1o4a25h.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpd1o4a25h.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   v.push_back(0);\n        } else if (word == \"one\") {\n            v.push_back(1);\n\
    \        } else if (word == \"two\") {\n            v.push_back(2);\n        }\
    \ else if (word == \"three\") {\n            v.push_back(3);\n        } else if\
    \ (word == \"four\") {\n            v.push_back(4);\n        } else if (word ==\
    \ \"five\") {\n            v.push_back(5);\n        } else if (word == \"six\"\
    ) {\n            v.push_back(6);\n        } else if (word == \"seven\") {\n  \
    \          v.push_back(7);\n        } else if (word == \"eight\") {\n        \
    \    v.push_back(8);\n        } else if (word == \"nine\") {\n            v.push_back(9);\n\
    \        }\n    }\n    std::sort(v.begin(), v.end());\n    std::string result;\n\
    \    for (int i = 0; i < v.size(); i++) {\n        if (v[i] == 0) {\n        \
    \    result += \"zero \";\n        } else if (v[i] == 1) {\n            result\
    \ += \"one \";\n        } else if (v[i] == 2) {\n            result += \"two \"\
    ;\n        } else if (v[i] == 3) {\n            result += \"three \";\n      \
    \  } else if (v[i] == 4) {\n            result += \"four \";\n        } else if\
    \ (v[i] == 5) {\n            result += \"five \";\n        } else if (v[i] ==\
    \ 6) {\n            result += \"six \";\n        } else if (v[i] == 7) {\n   \
    \         result += \"seven \";\n        } else if (v[i] == 8) {\n           \
    \ result += \"eight \";\n        } else if (v[i] == 9) {\n           \n}\nint\
    \ main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqfhgzu79.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpqfhgzu79.cpp:59:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   59 | int main() {\n      |     \
    \    ^~\n/tmp/tmpqfhgzu79.cpp:59:9: note: remove parentheses to default-initialize\
    \ a variable\n   59 | int main() {\n      |         ^~\n      |         --\n/tmp/tmpqfhgzu79.cpp:59:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmpqfhgzu79.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpqfhgzu79.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpqfhgzu79.cpp:37:40:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < v.size();\
    \ i++) {\n      |                                        ^\n/tmp/tmpqfhgzu79.cpp:66:2:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpqfhgzu79.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpqfhgzu79.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i > 0) {\n            result += \" \";\n        }\n    \
    \    if (nums[i] == 0) {\n            result += \"zero\";\n        } else if (nums[i]\
    \ == 1) {\n            result += \"one\";\n        } else if (nums[i] == 2) {\n\
    \            result += \"two\";\n        } else if (nums[i] == 3) {\n        \
    \    result += \"three\";\n        } else if (nums[i] == 4) {\n            result\
    \ += \"four\";\n        } else if (nums[i] == 5) {\n            result += \"five\"\
    ;\n        } else if (nums[i] == 6) {\n            result += \"six\";\n      \
    \  } else if (nums[i] == 7) {\n            result += \"seven\";\n        } else\
    \ if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvwvgqo5b.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpvwvgqo5b.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpvwvgqo5b.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpvwvgqo5b.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpvwvgqo5b.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpvwvgqo5b.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpvwvgqo5b.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpvwvgqo5b.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpvwvgqo5b.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcniewzfa.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpcniewzfa.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpcniewzfa.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpcniewzfa.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpcniewzfa.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpcniewzfa.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpcniewzfa.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpcniewzfa.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpcniewzfa.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl3d9eoru.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpl3d9eoru.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpl3d9eoru.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpl3d9eoru.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpl3d9eoru.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpl3d9eoru.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpl3d9eoru.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpl3d9eoru.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpl3d9eoru.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        nums.push_back(word);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (auto i : nums) {\n        result += i + \" \";\n    }\n    return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = sort_numbers;\n \
    \   assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmpmpvujqpt: /tmp/tmpmpvujqpt.cpp:26: int main(): Assertion `candidate((\"\
    three five nine\")) == (\"three five nine\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9ruban5z.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp9ruban5z.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmp9ruban5z.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmp9ruban5z.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmp9ruban5z.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmp9ruban5z.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmp9ruban5z.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmp9ruban5z.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp9ruban5z.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tstd::vector<int> nums;\n\tstd::stringstream ss(numbers);\n\tstd::string\
    \ word;\n\twhile (ss >> word) {\n\t\tif (word == \"zero\") nums.push_back(0);\n\
    \t\telse if (word == \"one\") nums.push_back(1);\n\t\telse if (word == \"two\"\
    ) nums.push_back(2);\n\t\telse if (word == \"three\") nums.push_back(3);\n\t\t\
    else if (word == \"four\") nums.push_back(4);\n\t\telse if (word == \"five\")\
    \ nums.push_back(5);\n\t\telse if (word == \"six\") nums.push_back(6);\n\t\telse\
    \ if (word == \"seven\") nums.push_back(7);\n\t\telse if (word == \"eight\") nums.push_back(8);\n\
    \t\telse if (word == \"nine\") nums.push_back(9);\n\t}\n\tstd::sort(nums.begin(),\
    \ nums.end());\n\tstd::string res;\n\tfor (int i = 0; i < nums.size(); i++) {\n\
    \t\tif (i != 0) res += \" \";\n\t\tif (nums[i] == 0) res += \"zero\";\n\t\telse\
    \ if (nums[i] == 1) res += \"one\";\n\t\telse if (nums[i] == 2) res += \"two\"\
    ;\n\t\telse if (nums[i] == 3) res += \"three\";\n\t\telse if (nums[i] == 4) res\
    \ += \"four\";\n\t\telse if (nums[i] == 5) res += \"five\";\n\t\telse if (nums[i]\
    \ == 6) res += \"six\";\n\t\telse if (nums[i] == 7) res += \"seven\";\n\t\telse\
    \ if (nums[i] == 8) res += \"eight\";\n\t\telse if (nums[i] == 9) res += \"nine\"\
    ;\n\t}\n\treturn res;\n}\nint main() {\n    auto candidate = sort_numbers;\n \
    \   assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::map<std::string, int> num_map = {{\"zero\", 0}, {\"one\", 1}, {\"\
    two\", 2}, {\"three\", 3}, {\"four\", 4}, {\"five\", 5}, {\"six\", 6}, {\"seven\"\
    , 7}, {\"eight\", 8}, {\"nine\", 9}};\n    std::vector<int> num_vec;\n    std::stringstream\
    \ ss(numbers);\n    std::string temp;\n    while (ss >> temp) {\n        num_vec.push_back(num_map[temp]);\n\
    \    }\n    std::sort(num_vec.begin(), num_vec.end());\n    std::string result;\n\
    \    for (int i = 0; i < num_vec.size(); i++) {\n        for (auto it = num_map.begin();\
    \ it != num_map.end(); it++) {\n            if (it->second == num_vec[i]) {\n\
    \                result += it->first + \" \";\n            }\n        }\n    }\n\
    \    return result.substr(0, result.size() - 1);\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tstd::vector<int> nums;\n\tstd::stringstream ss(numbers);\n\tstd::string\
    \ word;\n\twhile (ss >> word) {\n\t\tif (word == \"zero\") {\n\t\t\tnums.push_back(0);\n\
    \t\t}\n\t\telse if (word == \"one\") {\n\t\t\tnums.push_back(1);\n\t\t}\n\t\t\
    else if (word == \"two\") {\n\t\t\tnums.push_back(2);\n\t\t}\n\t\telse if (word\
    \ == \"three\") {\n\t\t\tnums.push_back(3);\n\t\t}\n\t\telse if (word == \"four\"\
    ) {\n\t\t\tnums.push_back(4);\n\t\t}\n\t\telse if (word == \"five\") {\n\t\t\t\
    nums.push_back(5);\n\t\t}\n\t\telse if (word == \"six\") {\n\t\t\tnums.push_back(6);\n\
    \t\t}\n\t\telse if (word == \"seven\") {\n\t\t\tnums.push_back(7);\n\t\t}\n\t\t\
    else if (word == \"eight\") {\n\t\t\tnums.push_back(8);\n\t\t}\n\t\telse if (word\
    \ == \"nine\") {\n\t\t\tnums.push_back(9);\n\t\t}\n\t}\n\tstd::sort(nums.begin(),\
    \ nums.end());\n\tstd::string result;\n\tfor (int i = 0; i < nums.size(); i++)\
    \ {\n\t\tif (nums[i] == 0) {\n\t\t\tresult += \"zero \";\n\t\t}\n\t\telse if (nums[i]\
    \ == 1) {\n\t\t\tresult += \"one \";\n\t\t}\n\t\telse if (nums[i] == 2) {\n\t\t\
    \tresult += \"two \";\n\t\t}\n\t\telse if (nums[i] == 3) {\n\t\t\tresult += \"\
    three \";\n\t\t}\n\t\telse if (nums[i] == 4) {\n\t\t\tresult += \"four \";\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptw5gha1m.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmptw5gha1m.cpp:62:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   62 | int main() {\n      |     \
    \    ^~\n/tmp/tmptw5gha1m.cpp:62:9: note: remove parentheses to default-initialize\
    \ a variable\n   62 | int main() {\n      |         ^~\n      |         --\n/tmp/tmptw5gha1m.cpp:62:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmptw5gha1m.cpp:62:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   62 | int main() {\n      |            ^\n/tmp/tmptw5gha1m.cpp:69:2: error:\
    \ expected \u2018}\u2019 at end of input\n   69 | }\n      |  ^\n/tmp/tmptw5gha1m.cpp:46:47:\
    \ note: to match this \u2018{\u2019\n   46 |         for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                               ^\n/tmp/tmptw5gha1m.cpp:69:2:\
    \ error: expected \u2018}\u2019 at end of input\n   69 | }\n      |  ^\n/tmp/tmptw5gha1m.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmptw5gha1m.cpp:69:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   69 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string num;\n    while (ss >> num) {\n        nums.push_back(num);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (auto num : nums) {\n        result += num + \" \";\n    }\n    return\
    \ result.substr(0, result.size() - 1);\n}\nint main() {\n    auto candidate =\
    \ sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmptyz94xlr: /tmp/tmptyz94xlr.cpp:26: int main(): Assertion `candidate((\"\
    three five nine\")) == (\"three five nine\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ temp;\n    while (ss >> temp) {\n        if (temp == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (temp == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (temp == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (temp == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (temp == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (temp == \"five\") {\n            nums.push_back(5);\n        } else if (temp\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (temp == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (temp == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (temp == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx8dpplbu.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpx8dpplbu.cpp:57:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   57 | int main() {\n      |     \
    \    ^~\n/tmp/tmpx8dpplbu.cpp:57:9: note: remove parentheses to default-initialize\
    \ a variable\n   57 | int main() {\n      |         ^~\n      |         --\n/tmp/tmpx8dpplbu.cpp:57:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmpx8dpplbu.cpp:57:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   57 | int main() {\n      |            ^\n/tmp/tmpx8dpplbu.cpp:64:2: error:\
    \ expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmpx8dpplbu.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpx8dpplbu.cpp:64:2:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmpx8dpplbu.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpx8dpplbu.cpp:64:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::stringstream result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result << \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result << \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result << \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result << \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result << \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result << \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ << \"five\";\n        } else if (nums[i] == 6) {\n            result << \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result << \"seven\";\n    \
    \    } else\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb8eyf06y.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpb8eyf06y.cpp:58:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   58 | }\n      | ^\n/tmp/tmpb8eyf06y.cpp:59:9: warning: empty\
    \ parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpb8eyf06y.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpb8eyf06y.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpb8eyf06y.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpb8eyf06y.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpb8eyf06y.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpb8eyf06y.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tstd::vector<std::string> num_list;\n\tstd::stringstream ss(numbers);\n\t\
    std::string temp;\n\twhile (ss >> temp) {\n\t\tnum_list.push_back(temp);\n\t}\n\
    \tstd::sort(num_list.begin(), num_list.end());\n\tstd::string result;\n\tfor (int\
    \ i = 0; i < num_list.size(); i++) {\n\t\tresult += num_list[i] + \" \";\n\t}\n\
    \treturn result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpncu29zdd: /tmp/tmpncu29zdd.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string temp;\n    std::vector<std::string>\
    \ v;\n    while(ss >> temp)\n        v.push_back(temp);\n    std::sort(v.begin(),\
    \ v.end());\n    std::string result;\n    for(auto i : v)\n        result += i\
    \ + \" \";\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmp7qsgfkcx: /tmp/tmp7qsgfkcx.cpp:23: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ temp;\n    while (ss >> temp) {\n        if (temp == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (temp == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (temp == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (temp == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (temp == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (temp == \"five\") {\n            nums.push_back(5);\n        } else if (temp\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (temp == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (temp == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (temp == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9wub3_k4.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp9wub3_k4.cpp:57:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   57 | int main() {\n      |     \
    \    ^~\n/tmp/tmp9wub3_k4.cpp:57:9: note: remove parentheses to default-initialize\
    \ a variable\n   57 | int main() {\n      |         ^~\n      |         --\n/tmp/tmp9wub3_k4.cpp:57:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmp9wub3_k4.cpp:57:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   57 | int main() {\n      |            ^\n/tmp/tmp9wub3_k4.cpp:64:2: error:\
    \ expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmp9wub3_k4.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp9wub3_k4.cpp:64:2:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmp9wub3_k4.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp9wub3_k4.cpp:64:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzhx2n1__.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpzhx2n1__.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpzhx2n1__.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpzhx2n1__.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpzhx2n1__.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpzhx2n1__.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpzhx2n1__.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpzhx2n1__.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpzhx2n1__.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf42681wr.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpf42681wr.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpf42681wr.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpf42681wr.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpf42681wr.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpf42681wr.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpf42681wr.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpf42681wr.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpf42681wr.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf5k3yxc5.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpf5k3yxc5.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpf5k3yxc5.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpf5k3yxc5.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpf5k3yxc5.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpf5k3yxc5.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpf5k3yxc5.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpf5k3yxc5.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpf5k3yxc5.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     switch (nums[i]) {\n            case 0:\n                result += \"zero\"\
    ;\n                break;\n            case 1:\n                result += \"one\"\
    ;\n                break;\n            case 2:\n                result += \"two\"\
    ;\n                break;\n            case 3:\n                result += \"three\"\
    ;\n                break;\n            case 4:\n                result += \"four\"\
    ;\n                break;\n            case 5:\n                result += \"five\"\
    ;\n                break;\n            case 6:\n                result += \"six\"\
    ;\n                break;\n            case 7:\n                result += \"seven\"\
    ;\n                break;\n            case 8:\n                result += \"eight\"\
    ;\n                break;\n            case 9:\n                result += \"nine\"\
    ;\n                break;\n        }\n    }\n    return\n}\nint main() {\n   \
    \ auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n \
    \   assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three\
    \ five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpokv3jg_z.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpokv3jg_z.cpp:75:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   75 | }\n      | ^\n/tmp/tmpokv3jg_z.cpp:74:11: error: expected\
    \ \u2018;\u2019 before \u2018}\u2019 token\n   74 |     return\n      |      \
    \     ^\n      |           ;\n   75 | }\n      | ~          \n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_twbeto7.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp_twbeto7.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmp_twbeto7.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmp_twbeto7.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmp_twbeto7.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmp_twbeto7.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmp_twbeto7.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmp_twbeto7.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp_twbeto7.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::stringstream result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result << \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result << \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result << \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result << \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result << \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result << \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ << \"five\";\n        } else if (nums[i] == 6) {\n            result << \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result << \"seven\";\n    \
    \    } else\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgny4qvvj.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpgny4qvvj.cpp:58:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   58 | }\n      | ^\n/tmp/tmpgny4qvvj.cpp:59:9: warning: empty\
    \ parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpgny4qvvj.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpgny4qvvj.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpgny4qvvj.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpgny4qvvj.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpgny4qvvj.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpgny4qvvj.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdtifgv72.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpdtifgv72.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpdtifgv72.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpdtifgv72.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpdtifgv72.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpdtifgv72.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpdtifgv72.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpdtifgv72.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpdtifgv72.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string temp;\n    std::vector<std::string>\
    \ v;\n    while (ss >> temp) {\n        v.push_back(temp);\n    }\n    std::sort(v.begin(),\
    \ v.end());\n    std::string result;\n    for (auto i : v) {\n        result +=\
    \ i + \" \";\n    }\n    return result.substr(0, result.size() - 1);\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpch7rohpc: /tmp/tmpch7rohpc.cpp:26: int main(): Assertion `candidate((\"\
    three five nine\")) == (\"three five nine\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string ret = \"\";\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            ret += \"zero \";\n       \
    \ } else if (nums[i] == 1) {\n            ret += \"one \";\n        } else if\
    \ (nums[i] == 2) {\n            ret += \"two \";\n        } else if (nums[i] ==\
    \ 3) {\n            ret += \"three \";\n        } else if (nums[i] == 4) {\n \
    \           ret += \"four \";\n        } else if (nums[i] == 5) {\n          \
    \  ret += \"five \";\n        } else if (nums[i] == 6) {\n            ret += \"\
    six \";\n        } else if (nums[i] == 7) {\n            ret += \"seven \";\n\
    \        } else if (nums[i] == 8)\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2_febmra.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp2_febmra.cpp:55:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   55 | }\n      | ^\n/tmp/tmp2_febmra.cpp:56:9: warning: empty\
    \ parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   56 | int main() {\n      |         ^~\n/tmp/tmp2_febmra.cpp:56:9: note: remove\
    \ parentheses to default-initialize a variable\n   56 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmp2_febmra.cpp:56:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmp2_febmra.cpp:56:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   56 | int main() {\n      |            ^\n/tmp/tmp2_febmra.cpp:63:2: error:\
    \ expected \u2018}\u2019 at end of input\n   63 | }\n      |  ^\n/tmp/tmp2_febmra.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp2_febmra.cpp:63:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   63 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string res = \"\";\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        res += nums[i] + \" \";\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmp8r9_l1v4: /tmp/tmp8r9_l1v4.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ token;\n    while (std::getline(ss, token, ' ')) {\n        if (token == \"\
    zero\") {\n            nums.push_back(0);\n        } else if (token == \"one\"\
    ) {\n            nums.push_back(1);\n        } else if (token == \"two\") {\n\
    \            nums.push_back(2);\n        } else if (token == \"three\") {\n  \
    \          nums.push_back(3);\n        } else if (token == \"four\") {\n     \
    \       nums.push_back(4);\n        } else if (token == \"five\") {\n        \
    \    nums.push_back(5);\n        } else if (token == \"six\") {\n            nums.push_back(6);\n\
    \        } else if (token == \"seven\") {\n            nums.push_back(7);\n  \
    \      } else if (token == \"eight\") {\n            nums.push_back(8);\n    \
    \    } else if (token == \"nine\") {\n            nums.push_back(9);\n       \
    \ }\n    }\n    std::sort(nums.begin(), nums.end());\n    std::stringstream result;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) {\n        \
    \    result << \" \";\n        }\n        if (nums[i] == 0) {\n            result\
    \ << \"zero\";\n        } else if (nums[i] == 1) {\n            result << \"one\"\
    ;\n        } else if (nums[i] == 2) {\n            result << \"two\";\n      \
    \  } else if (nums[i] == 3) {\n            result << \"three\";\n        } else\
    \ if (nums[i] == 4) {\n            result << \"four\";\n        } else if (nums[i]\
    \ == 5) {\n            result << \"five\";\n        } else if (nums[i] == 6) {\n\
    \            result << \"six\";\n        } else if (nums[i] == 7) {\n        \
    \    result\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7ifktb0r.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp7ifktb0r.cpp:56:19: error: expected \u2018;\u2019 before \u2018}\u2019\
    \ token\n   56 |             result\n      |                   ^\n      |    \
    \               ;\n   57 | }\n      | ~                  \n/tmp/tmp7ifktb0r.cpp:58:9:\
    \ warning: empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   58 | int main() {\n      |         ^~\n/tmp/tmp7ifktb0r.cpp:58:9: note: remove\
    \ parentheses to default-initialize a variable\n   58 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmp7ifktb0r.cpp:58:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmp7ifktb0r.cpp:58:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   58 | int main() {\n      |            ^\n/tmp/tmp7ifktb0r.cpp:65:2: error:\
    \ expected \u2018}\u2019 at end of input\n   65 | }\n      |  ^\n/tmp/tmp7ifktb0r.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp7ifktb0r.cpp:65:2:\
    \ error: expected \u2018}\u2019 at end of input\n   65 | }\n      |  ^\n/tmp/tmp7ifktb0r.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp7ifktb0r.cpp:65:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   65 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) result += \" \"\
    ;\n        if (nums[i] == 0) result += \"zero\";\n        else if (nums[i] ==\
    \ 1) result += \"one\";\n        else if (nums[i] == 2) result += \"two\";\n \
    \       else if (nums[i] == 3) result += \"three\";\n        else if (nums[i]\
    \ == 4) result += \"four\";\n        else if (nums[i] == 5) result += \"five\"\
    ;\n        else if (nums[i] == 6) result += \"six\";\n        else if (nums[i]\
    \ == 7) result += \"seven\";\n        else if (nums[i] == 8) result += \"eight\"\
    ;\n        else if (nums[i] == 9) result += \"nine\";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tstd::vector<int> nums;\n\tstd::stringstream ss(numbers);\n\tstd::string\
    \ word;\n\twhile (ss >> word) {\n\t\tif (word == \"zero\") {\n\t\t\tnums.push_back(0);\n\
    \t\t}\n\t\telse if (word == \"one\") {\n\t\t\tnums.push_back(1);\n\t\t}\n\t\t\
    else if (word == \"two\") {\n\t\t\tnums.push_back(2);\n\t\t}\n\t\telse if (word\
    \ == \"three\") {\n\t\t\tnums.push_back(3);\n\t\t}\n\t\telse if (word == \"four\"\
    ) {\n\t\t\tnums.push_back(4);\n\t\t}\n\t\telse if (word == \"five\") {\n\t\t\t\
    nums.push_back(5);\n\t\t}\n\t\telse if (word == \"six\") {\n\t\t\tnums.push_back(6);\n\
    \t\t}\n\t\telse if (word == \"seven\") {\n\t\t\tnums.push_back(7);\n\t\t}\n\t\t\
    else if (word == \"eight\") {\n\t\t\tnums.push_back(8);\n\t\t}\n\t\telse if (word\
    \ == \"nine\") {\n\t\t\tnums.push_back(9);\n\t\t}\n\t}\n\tstd::sort(nums.begin(),\
    \ nums.end());\n\tstd::string result;\n\tfor (int i = 0; i < nums.size(); i++)\
    \ {\n\t\tif (nums[i] == 0) {\n\t\t\tresult += \"zero \";\n\t\t}\n\t\telse if (nums[i]\
    \ == 1) {\n\t\t\tresult += \"one \";\n\t\t}\n\t\telse if (nums[i] == 2) {\n\t\t\
    \tresult += \"two \";\n\t\t}\n\t\telse if (nums[i] == 3) {\n\t\t\tresult += \"\
    three \";\n\t\t}\n\t\telse if (nums[i] == 4) {\n\t\t\tresult += \"four \";\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz0gsl69r.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpz0gsl69r.cpp:62:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   62 | int main() {\n      |     \
    \    ^~\n/tmp/tmpz0gsl69r.cpp:62:9: note: remove parentheses to default-initialize\
    \ a variable\n   62 | int main() {\n      |         ^~\n      |         --\n/tmp/tmpz0gsl69r.cpp:62:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmpz0gsl69r.cpp:62:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   62 | int main() {\n      |            ^\n/tmp/tmpz0gsl69r.cpp:69:2: error:\
    \ expected \u2018}\u2019 at end of input\n   69 | }\n      |  ^\n/tmp/tmpz0gsl69r.cpp:46:47:\
    \ note: to match this \u2018{\u2019\n   46 |         for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                               ^\n/tmp/tmpz0gsl69r.cpp:69:2:\
    \ error: expected \u2018}\u2019 at end of input\n   69 | }\n      |  ^\n/tmp/tmpz0gsl69r.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpz0gsl69r.cpp:69:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   69 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::stringstream result;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) result << \"\
    \ \";\n        if (nums[i] == 0) result << \"zero\";\n        else if (nums[i]\
    \ == 1) result << \"one\";\n        else if (nums[i] == 2) result << \"two\";\n\
    \        else if (nums[i] == 3) result << \"three\";\n        else if (nums[i]\
    \ == 4) result << \"four\";\n        else if (nums[i] == 5) result << \"five\"\
    ;\n        else if (nums[i] == 6) result << \"six\";\n        else if (nums[i]\
    \ == 7) result << \"seven\";\n        else if (nums[i] == 8) result << \"eight\"\
    ;\n        else if (nums[i] == 9) result << \"nine\";\n    }\n    return result.str();\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ temp;\n    while (ss >> temp) {\n        if (temp == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (temp == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (temp == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (temp == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (temp == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (temp == \"five\") {\n            nums.push_back(5);\n        } else if (temp\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (temp == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (temp == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (temp == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_i6y9ghs.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp_i6y9ghs.cpp:57:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   57 | int main() {\n      |     \
    \    ^~\n/tmp/tmp_i6y9ghs.cpp:57:9: note: remove parentheses to default-initialize\
    \ a variable\n   57 | int main() {\n      |         ^~\n      |         --\n/tmp/tmp_i6y9ghs.cpp:57:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmp_i6y9ghs.cpp:57:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   57 | int main() {\n      |            ^\n/tmp/tmp_i6y9ghs.cpp:64:2: error:\
    \ expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmp_i6y9ghs.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp_i6y9ghs.cpp:64:2:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmp_i6y9ghs.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp_i6y9ghs.cpp:64:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (auto num : nums) {\n       \
    \ if (num == 0) {\n            result += \"zero \";\n        } else if (num ==\
    \ 1) {\n            result += \"one \";\n        } else if (num == 2) {\n    \
    \        result += \"two \";\n        } else if (num == 3) {\n            result\
    \ += \"three \";\n        } else if (num == 4) {\n            result += \"four\
    \ \";\n        } else if (num == 5) {\n            result += \"five \";\n    \
    \    } else if (num == 6) {\n            result += \"six \";\n        } else if\
    \ (num == 7) {\n            result += \"seven \";\n        } else if (num == 8)\
    \ {\n            result += \"eight \";\n        } else if (num == 9) {\n     \
    \       result += \"nine \";\n        }\n    }\n    return result.substr(0, result.\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp92jblr1k.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp92jblr1k.cpp:61:1: error: expected unqualified-id before \u2018}\u2019\
    \ token\n   61 | }\n      | ^\n/tmp/tmp92jblr1k.cpp:60:36: error: expected \u2018\
    ;\u2019 before \u2018}\u2019 token\n   60 |     return result.substr(0, result.\n\
    \      |                                    ^\n      |                       \
    \             ;\n   61 | }\n      | ~                                   \n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxbxkoc0s.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpxbxkoc0s.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpxbxkoc0s.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpxbxkoc0s.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpxbxkoc0s.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpxbxkoc0s.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpxbxkoc0s.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpxbxkoc0s.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpxbxkoc0s.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n    std::string\
    \ s;\n    while(ss >> s) {\n        if(s == \"zero\") v.push_back(0);\n      \
    \  else if(s == \"one\") v.push_back(1);\n        else if(s == \"two\") v.push_back(2);\n\
    \        else if(s == \"three\") v.push_back(3);\n        else if(s == \"four\"\
    ) v.push_back(4);\n        else if(s == \"five\") v.push_back(5);\n        else\
    \ if(s == \"six\") v.push_back(6);\n        else if(s == \"seven\") v.push_back(7);\n\
    \        else if(s == \"eight\") v.push_back(8);\n        else if(s == \"nine\"\
    ) v.push_back(9);\n    }\n    std::sort(v.begin(), v.end());\n    std::stringstream\
    \ ss2;\n    for(auto i : v) {\n        if(i == 0) ss2 << \"zero \";\n        else\
    \ if(i == 1) ss2 << \"one \";\n        else if(i == 2) ss2 << \"two \";\n    \
    \    else if(i == 3) ss2 << \"three \";\n        else if(i == 4) ss2 << \"four\
    \ \";\n        else if(i == 5) ss2 << \"five \";\n        else if(i == 6) ss2\
    \ << \"six \";\n        else if(i == 7) ss2 << \"seven \";\n        else if(i\
    \ == 8) ss2 << \"eight \";\n        else if(i == 9) ss2 << \"nine \";\n    }\n\
    \    return ss2.str();\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmpyh29v5j5: /tmp/tmpyh29v5j5.cpp:43: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n  std::stringstream ss(numbers);\n  std::vector<int> v;\n  std::string word;\n\
    \  while (ss >> word) {\n    if (word == \"zero\") {\n      v.push_back(0);\n\
    \    } else if (word == \"one\") {\n      v.push_back(1);\n    } else if (word\
    \ == \"two\") {\n      v.push_back(2);\n    } else if (word == \"three\") {\n\
    \      v.push_back(3);\n    } else if (word == \"four\") {\n      v.push_back(4);\n\
    \    } else if (word == \"five\") {\n      v.push_back(5);\n    } else if (word\
    \ == \"six\") {\n      v.push_back(6);\n    } else if (word == \"seven\") {\n\
    \      v.push_back(7);\n    } else if (word == \"eight\") {\n      v.push_back(8);\n\
    \    } else if (word == \"nine\") {\n      v.push_back(9);\n    }\n  }\n  std::sort(v.begin(),\
    \ v.end());\n  std::string result;\n  for (int i = 0; i < v.size(); i++) {\n \
    \   if (v[i] == 0) {\n      result += \"zero \";\n    } else if (v[i] == 1) {\n\
    \      result += \"one \";\n    } else if (v[i] == 2) {\n      result += \"two\
    \ \";\n    } else if (v[i] == 3) {\n      result += \"three \";\n    } else if\
    \ (v[i] == 4) {\n      result += \"four \";\n    } else if (v[i] == 5) {\n   \
    \   result += \"five \";\n    } else if (v[i] == 6) {\n      result += \"six \"\
    ;\n    } else if (v[i] == 7) {\n      result += \"seven \";\n    } else if (v[i]\
    \ == 8) {\n      result += \"eight \";\n    } else if (v[i] == 9) {\n     \n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpup8u1he6.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpup8u1he6.cpp:59:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   59 | int main() {\n      |     \
    \    ^~\n/tmp/tmpup8u1he6.cpp:59:9: note: remove parentheses to default-initialize\
    \ a variable\n   59 | int main() {\n      |         ^~\n      |         --\n/tmp/tmpup8u1he6.cpp:59:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmpup8u1he6.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpup8u1he6.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpup8u1he6.cpp:37:38:\
    \ note: to match this \u2018{\u2019\n   37 |   for (int i = 0; i < v.size(); i++)\
    \ {\n      |                                      ^\n/tmp/tmpup8u1he6.cpp:66:2:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpup8u1he6.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpup8u1he6.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string token;\n    std::vector<int>\
    \ nums;\n    while (std::getline(ss, token, ' ')) {\n        if (token == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (token == \"one\") {\n\
    \            nums.push_back(1);\n        } else if (token == \"two\") {\n    \
    \        nums.push_back(2);\n        } else if (token == \"three\") {\n      \
    \      nums.push_back(3);\n        } else if (token == \"four\") {\n         \
    \   nums.push_back(4);\n        } else if (token == \"five\") {\n            nums.push_back(5);\n\
    \        } else if (token == \"six\") {\n            nums.push_back(6);\n    \
    \    } else if (token == \"seven\") {\n            nums.push_back(7);\n      \
    \  } else if (token == \"eight\") {\n            nums.push_back(8);\n        }\
    \ else if (token == \"nine\") {\n            nums.push_back(9);\n        }\n \
    \   }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n   \
    \ for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) {\n           \
    \ result += \" \";\n        }\n        if (nums[i] == 0) {\n            result\
    \ += \"zero\";\n        } else if (nums[i] == 1) {\n            result += \"one\"\
    ;\n        } else if (nums[i] == 2) {\n            result += \"two\";\n      \
    \  } else if (nums[i] == 3) {\n            result += \"three\";\n        } else\
    \ if (nums[i] == 4) {\n            result += \"four\";\n        } else if (nums[i]\
    \ == 5) {\n            result += \"five\";\n        } else if (nums[i] == 6) {\n\
    \            result += \"six\";\n        } else if (nums[i] == 7) {\n        \
    \    result +=\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9ki6rxqr.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp9ki6rxqr.cpp:57:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   57 | }\n      | ^\n/tmp/tmp9ki6rxqr.cpp:58:9: warning: empty\
    \ parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   58 | int main() {\n      |         ^~\n/tmp/tmp9ki6rxqr.cpp:58:9: note: remove\
    \ parentheses to default-initialize a variable\n   58 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmp9ki6rxqr.cpp:58:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmp9ki6rxqr.cpp:58:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   58 | int main() {\n      |            ^\n/tmp/tmp9ki6rxqr.cpp:65:2: error:\
    \ expected \u2018}\u2019 at end of input\n   65 | }\n      |  ^\n/tmp/tmp9ki6rxqr.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp9ki6rxqr.cpp:65:2:\
    \ error: expected \u2018}\u2019 at end of input\n   65 | }\n      |  ^\n/tmp/tmp9ki6rxqr.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp9ki6rxqr.cpp:65:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   65 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        nums.push_back(word);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        result += nums[i] + \" \"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmpt_zoqfoq: /tmp/tmpt_zoqfoq.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::stringstream result;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) result << \"\
    \ \";\n        if (nums[i] == 0) result << \"zero\";\n        else if (nums[i]\
    \ == 1) result << \"one\";\n        else if (nums[i] == 2) result << \"two\";\n\
    \        else if (nums[i] == 3) result << \"three\";\n        else if (nums[i]\
    \ == 4) result << \"four\";\n        else if (nums[i] == 5) result << \"five\"\
    ;\n        else if (nums[i] == 6) result << \"six\";\n        else if (nums[i]\
    \ == 7) result << \"seven\";\n        else if (nums[i] == 8) result << \"eight\"\
    ;\n        else if (nums[i] == 9) result << \"nine\";\n    }\n    return result.str();\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::vector<int> nums;\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1wm90ov4.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp1wm90ov4.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmp1wm90ov4.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmp1wm90ov4.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmp1wm90ov4.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmp1wm90ov4.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmp1wm90ov4.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmp1wm90ov4.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp1wm90ov4.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        result += nums[i] + \" \"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmppaev58xr: /tmp/tmppaev58xr.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> v;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") v.push_back(0);\n\
    \        else if (word == \"one\") v.push_back(1);\n        else if (word == \"\
    two\") v.push_back(2);\n        else if (word == \"three\") v.push_back(3);\n\
    \        else if (word == \"four\") v.push_back(4);\n        else if (word ==\
    \ \"five\") v.push_back(5);\n        else if (word == \"six\") v.push_back(6);\n\
    \        else if (word == \"seven\") v.push_back(7);\n        else if (word ==\
    \ \"eight\") v.push_back(8);\n        else if (word == \"nine\") v.push_back(9);\n\
    \    }\n    std::sort(v.begin(), v.end());\n    std::string result;\n    for (auto\
    \ i : v) {\n        if (i == 0) result += \"zero \";\n        else if (i == 1)\
    \ result += \"one \";\n        else if (i == 2) result += \"two \";\n        else\
    \ if (i == 3) result += \"three \";\n        else if (i == 4) result += \"four\
    \ \";\n        else if (i == 5) result += \"five \";\n        else if (i == 6)\
    \ result += \"six \";\n        else if (i == 7) result += \"seven \";\n      \
    \  else if (i == 8) result += \"eight \";\n        else if (i == 9) result +=\
    \ \"nine \";\n    }\n    return result.substr(0, result.size() - 1);\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8pz2xnxl.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp8pz2xnxl.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmp8pz2xnxl.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmp8pz2xnxl.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmp8pz2xnxl.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmp8pz2xnxl.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmp8pz2xnxl.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmp8pz2xnxl.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp8pz2xnxl.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums = {\"zero\", \"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    std::vector<int>\
    \ num_count(10, 0);\n    std::stringstream ss(numbers);\n    std::string num;\n\
    \    while (ss >> num) {\n        for (int i = 0; i < 10; i++) {\n           \
    \ if (num == nums[i]) {\n                num_count[i]++;\n            }\n    \
    \    }\n    }\n    std::string result;\n    for (int i = 0; i < 10; i++) {\n \
    \       for (int j = 0; j < num_count[i]; j++) {\n            result += nums[i]\
    \ + \" \";\n        }\n    }\n    return result.substr(0, result.size() - 1);\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tstd::stringstream ss(numbers);\n\tstd::string temp;\n\tstd::vector<std::string>\
    \ nums;\n\twhile (ss >> temp) {\n\t\tnums.push_back(temp);\n\t}\n\tstd::sort(nums.begin(),\
    \ nums.end());\n\tstd::string result;\n\tfor (int i = 0; i < nums.size(); i++)\
    \ {\n\t\tresult += nums[i] + \" \";\n\t}\n\treturn result;\n}\nint main() {\n\
    \    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpz01r92v9: /tmp/tmpz01r92v9.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) result += \" \"\
    ;\n        if (nums[i] == 0) result += \"zero\";\n        else if (nums[i] ==\
    \ 1) result += \"one\";\n        else if (nums[i] == 2) result += \"two\";\n \
    \       else if (nums[i] == 3) result += \"three\";\n        else if (nums[i]\
    \ == 4) result += \"four\";\n        else if (nums[i] == 5) result += \"five\"\
    ;\n        else if (nums[i] == 6) result += \"six\";\n        else if (nums[i]\
    \ == 7) result += \"seven\";\n        else if (nums[i] == 8) result += \"eight\"\
    ;\n        else if (nums[i] == 9) result += \"nine\";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   v.push_back(0);\n        } else if (word == \"one\") {\n            v.push_back(1);\n\
    \        } else if (word == \"two\") {\n            v.push_back(2);\n        }\
    \ else if (word == \"three\") {\n            v.push_back(3);\n        } else if\
    \ (word == \"four\") {\n            v.push_back(4);\n        } else if (word ==\
    \ \"five\") {\n            v.push_back(5);\n        } else if (word == \"six\"\
    ) {\n            v.push_back(6);\n        } else if (word == \"seven\") {\n  \
    \          v.push_back(7);\n        } else if (word == \"eight\") {\n        \
    \    v.push_back(8);\n        } else if (word == \"nine\") {\n            v.push_back(9);\n\
    \        }\n    }\n    std::sort(v.begin(), v.end());\n    std::string result;\n\
    \    for (int i = 0; i < v.size(); i++) {\n        if (v[i] == 0) {\n        \
    \    result += \"zero \";\n        } else if (v[i] == 1) {\n            result\
    \ += \"one \";\n        } else if (v[i] == 2) {\n            result += \"two \"\
    ;\n        } else if (v[i] == 3) {\n            result += \"three \";\n      \
    \  } else if (v[i] == 4) {\n            result += \"four \";\n        } else if\
    \ (v[i] == 5) {\n            result += \"five \";\n        } else if (v[i] ==\
    \ 6) {\n            result += \"six \";\n        } else if (v[i] == 7) {\n   \
    \         result += \"seven \";\n        } else if (v[i] == 8) {\n           \
    \ result += \"eight \";\n        } else if (v[i] == 9) {\n           \n}\nint\
    \ main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsf7msfq1.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpsf7msfq1.cpp:59:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   59 | int main() {\n      |     \
    \    ^~\n/tmp/tmpsf7msfq1.cpp:59:9: note: remove parentheses to default-initialize\
    \ a variable\n   59 | int main() {\n      |         ^~\n      |         --\n/tmp/tmpsf7msfq1.cpp:59:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmpsf7msfq1.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpsf7msfq1.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpsf7msfq1.cpp:37:40:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < v.size();\
    \ i++) {\n      |                                        ^\n/tmp/tmpsf7msfq1.cpp:66:2:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpsf7msfq1.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpsf7msfq1.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (auto num : nums) {\n       \
    \ switch (num) {\n            case 0:\n                result += \"zero \";\n\
    \                break;\n            case 1:\n                result += \"one\
    \ \";\n                break;\n            case 2:\n                result +=\
    \ \"two \";\n                break;\n            case 3:\n                result\
    \ += \"three \";\n                break;\n            case 4:\n              \
    \  result += \"four \";\n                break;\n            case 5:\n       \
    \         result += \"five \";\n                break;\n            case 6:\n\
    \                result += \"six \";\n                break;\n            case\
    \ 7:\n                result += \"seven \";\n                break;\n        \
    \    case 8:\n                result += \"eight \";\n                break;\n\
    \            case 9:\n                result += \"nine \";\n                break;\n\
    \        }\n    }\n    return result.substr(0, result.size() - 1);\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        result += nums[i] + \" \"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmpl9z_quj_: /tmp/tmpl9z_quj_.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ temp;\n    while (ss >> temp) {\n        if (temp == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (temp == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (temp == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (temp == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (temp == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (temp == \"five\") {\n            nums.push_back(5);\n        } else if (temp\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (temp == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (temp == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (temp == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp23bnstc4.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp23bnstc4.cpp:57:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   57 | int main() {\n      |     \
    \    ^~\n/tmp/tmp23bnstc4.cpp:57:9: note: remove parentheses to default-initialize\
    \ a variable\n   57 | int main() {\n      |         ^~\n      |         --\n/tmp/tmp23bnstc4.cpp:57:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmp23bnstc4.cpp:57:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   57 | int main() {\n      |            ^\n/tmp/tmp23bnstc4.cpp:64:2: error:\
    \ expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmp23bnstc4.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp23bnstc4.cpp:64:2:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmp23bnstc4.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp23bnstc4.cpp:64:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   v.push_back(0);\n        } else if (word == \"one\") {\n            v.push_back(1);\n\
    \        } else if (word == \"two\") {\n            v.push_back(2);\n        }\
    \ else if (word == \"three\") {\n            v.push_back(3);\n        } else if\
    \ (word == \"four\") {\n            v.push_back(4);\n        } else if (word ==\
    \ \"five\") {\n            v.push_back(5);\n        } else if (word == \"six\"\
    ) {\n            v.push_back(6);\n        } else if (word == \"seven\") {\n  \
    \          v.push_back(7);\n        } else if (word == \"eight\") {\n        \
    \    v.push_back(8);\n        } else if (word == \"nine\") {\n            v.push_back(9);\n\
    \        }\n    }\n    std::sort(v.begin(), v.end());\n    std::string res;\n\
    \    for (int i = 0; i < v.size(); i++) {\n        if (v[i] == 0) {\n        \
    \    res += \"zero \";\n        } else if (v[i] == 1) {\n            res += \"\
    one \";\n        } else if (v[i] == 2) {\n            res += \"two \";\n     \
    \   } else if (v[i] == 3) {\n            res += \"three \";\n        } else if\
    \ (v[i] == 4) {\n            res += \"four \";\n        } else if (v[i] == 5)\
    \ {\n            res += \"five \";\n        } else if (v[i] == 6) {\n        \
    \    res += \"six \";\n        } else if (v[i] == 7) {\n            res += \"\
    seven \";\n        } else if (v[i] == 8) {\n            res += \"eight \";\n \
    \       } else if (v[i] == 9) {\n           \n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7a4ptnlq.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp7a4ptnlq.cpp:59:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   59 | int main() {\n      |     \
    \    ^~\n/tmp/tmp7a4ptnlq.cpp:59:9: note: remove parentheses to default-initialize\
    \ a variable\n   59 | int main() {\n      |         ^~\n      |         --\n/tmp/tmp7a4ptnlq.cpp:59:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmp7a4ptnlq.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmp7a4ptnlq.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmp7a4ptnlq.cpp:37:40:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < v.size();\
    \ i++) {\n      |                                        ^\n/tmp/tmp7a4ptnlq.cpp:66:2:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmp7a4ptnlq.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp7a4ptnlq.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmplgqcpkkj.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmplgqcpkkj.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmplgqcpkkj.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmplgqcpkkj.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmplgqcpkkj.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmplgqcpkkj.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmplgqcpkkj.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmplgqcpkkj.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmplgqcpkkj.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl2yly3j7.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpl2yly3j7.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpl2yly3j7.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpl2yly3j7.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpl2yly3j7.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpl2yly3j7.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpl2yly3j7.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpl2yly3j7.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpl2yly3j7.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tstd::stringstream ss(numbers);\n\tstd::string word;\n\tstd::vector<int>\
    \ nums;\n\tstd::map<std::string, int> dict;\n\tdict[\"zero\"] = 0;\n\tdict[\"\
    one\"] = 1;\n\tdict[\"two\"] = 2;\n\tdict[\"three\"] = 3;\n\tdict[\"four\"] =\
    \ 4;\n\tdict[\"five\"] = 5;\n\tdict[\"six\"] = 6;\n\tdict[\"seven\"] = 7;\n\t\
    dict[\"eight\"] = 8;\n\tdict[\"nine\"] = 9;\n\twhile (ss >> word) {\n\t\tnums.push_back(dict[word]);\n\
    \t}\n\tstd::sort(nums.begin(), nums.end());\n\tstd::string result;\n\tfor (int\
    \ i = 0; i < nums.size(); i++) {\n\t\tfor (auto it = dict.begin(); it != dict.end();\
    \ it++) {\n\t\t\tif (it->second == nums[i]) {\n\t\t\t\tresult += it->first + \"\
    \ \";\n\t\t\t}\n\t\t}\n\t}\n\tresult.pop_back();\n\treturn result;\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmps2ekqwp8: /tmp/tmps2ekqwp8.cpp:40: int main(): Assertion `candidate((\"\
    \")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf7zf_txm.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpf7zf_txm.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpf7zf_txm.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpf7zf_txm.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpf7zf_txm.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpf7zf_txm.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpf7zf_txm.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpf7zf_txm.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpf7zf_txm.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        nums.push_back(word);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (auto &num : nums) {\n        result += num + \" \";\n    }\n    return\
    \ result.substr(0, result.size() - 1);\n}\nint main() {\n    auto candidate =\
    \ sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmp9ur481dn: /tmp/tmp9ur481dn.cpp:26: int main(): Assertion `candidate((\"\
    three five nine\")) == (\"three five nine\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) result += \" \"\
    ;\n        if (nums[i] == 0) result += \"zero\";\n        else if (nums[i] ==\
    \ 1) result += \"one\";\n        else if (nums[i] == 2) result += \"two\";\n \
    \       else if (nums[i] == 3) result += \"three\";\n        else if (nums[i]\
    \ == 4) result += \"four\";\n        else if (nums[i] == 5) result += \"five\"\
    ;\n        else if (nums[i] == 6) result += \"six\";\n        else if (nums[i]\
    \ == 7) result += \"seven\";\n        else if (nums[i] == 8) result += \"eight\"\
    ;\n        else if (nums[i] == 9) result += \"nine\";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (auto num : nums) {\n        if (num == 0) result += \"zero \";\n     \
    \   else if (num == 1) result += \"one \";\n        else if (num == 2) result\
    \ += \"two \";\n        else if (num == 3) result += \"three \";\n        else\
    \ if (num == 4) result += \"four \";\n        else if (num == 5) result += \"\
    five \";\n        else if (num == 6) result += \"six \";\n        else if (num\
    \ == 7) result += \"seven \";\n        else if (num == 8) result += \"eight \"\
    ;\n        else if (num == 9) result += \"nine \";\n    }\n    return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = sort_numbers;\n \
    \   assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::stringstream ss2;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            ss2 << \" \";\n        }\n      \
    \  if (nums[i] == 0) {\n            ss2 << \"zero\";\n        } else if (nums[i]\
    \ == 1) {\n            ss2 << \"one\";\n        } else if (nums[i] == 2) {\n \
    \           ss2 << \"two\";\n        } else if (nums[i] == 3) {\n            ss2\
    \ << \"three\";\n        } else if (nums[i] == 4) {\n            ss2 << \"four\"\
    ;\n        } else if (nums[i] == 5) {\n            ss2 << \"five\";\n        }\
    \ else if (nums[i] == 6) {\n            ss2 << \"six\";\n        } else if (nums[i]\
    \ == 7) {\n           \n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpscf9s313.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpscf9s313.cpp:58:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   58 | int main() {\n      |     \
    \    ^~\n/tmp/tmpscf9s313.cpp:58:9: note: remove parentheses to default-initialize\
    \ a variable\n   58 | int main() {\n      |         ^~\n      |         --\n/tmp/tmpscf9s313.cpp:58:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmpscf9s313.cpp:58:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   58 | int main() {\n      |            ^\n/tmp/tmpscf9s313.cpp:65:2: error:\
    \ expected \u2018}\u2019 at end of input\n   65 | }\n      |  ^\n/tmp/tmpscf9s313.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpscf9s313.cpp:65:2:\
    \ error: expected \u2018}\u2019 at end of input\n   65 | }\n      |  ^\n/tmp/tmpscf9s313.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpscf9s313.cpp:65:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   65 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (auto i : nums) {\n        result += i + \" \";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp76_k7uqj: /tmp/tmp76_k7uqj.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        if (i > 0) result += \" \"\
    ;\n        if (nums[i] == 0) result += \"zero\";\n        else if (nums[i] ==\
    \ 1) result += \"one\";\n        else if (nums[i] == 2) result += \"two\";\n \
    \       else if (nums[i] == 3) result += \"three\";\n        else if (nums[i]\
    \ == 4) result += \"four\";\n        else if (nums[i] == 5) result += \"five\"\
    ;\n        else if (nums[i] == 6) result += \"six\";\n        else if (nums[i]\
    \ == 7) result += \"seven\";\n        else if (nums[i] == 8) result += \"eight\"\
    ;\n        else if (nums[i] == 9) result += \"nine\";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6zt4ax3h.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp6zt4ax3h.cpp:57:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   57 | int main() {\n      |     \
    \    ^~\n/tmp/tmp6zt4ax3h.cpp:57:9: note: remove parentheses to default-initialize\
    \ a variable\n   57 | int main() {\n      |         ^~\n      |         --\n/tmp/tmp6zt4ax3h.cpp:57:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmp6zt4ax3h.cpp:57:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   57 | int main() {\n      |            ^\n/tmp/tmp6zt4ax3h.cpp:64:2: error:\
    \ expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmp6zt4ax3h.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp6zt4ax3h.cpp:64:2:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmp6zt4ax3h.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp6zt4ax3h.cpp:64:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ temp;\n    while (ss >> temp) {\n        if (temp == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (temp == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (temp == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (temp == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (temp == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (temp == \"five\") {\n            nums.push_back(5);\n        } else if (temp\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (temp == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (temp == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (temp == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::stringstream out;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            out << \"zero\";\n        }\
    \ else if (nums[i] == 1) {\n            out << \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            out << \"two\";\n        } else if (nums[i] == 3) {\n \
    \           out << \"three\";\n        } else if (nums[i] == 4) {\n          \
    \  out << \"four\";\n        } else if (nums[i] == 5) {\n            out << \"\
    five\";\n        } else if (nums[i] == 6) {\n            out << \"six\";\n   \
    \     } else if (nums[i] == 7) {\n            out << \"seven\";\n        } else\
    \ if (nums[i] == 8) {\n            out << \"eight\";\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptvj2l83c.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmptvj2l83c.cpp:58:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   58 | int main() {\n      |     \
    \    ^~\n/tmp/tmptvj2l83c.cpp:58:9: note: remove parentheses to default-initialize\
    \ a variable\n   58 | int main() {\n      |         ^~\n      |         --\n/tmp/tmptvj2l83c.cpp:58:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmptvj2l83c.cpp:58:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   58 | int main() {\n      |            ^\n/tmp/tmptvj2l83c.cpp:65:2: error:\
    \ expected \u2018}\u2019 at end of input\n   65 | }\n      |  ^\n/tmp/tmptvj2l83c.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmptvj2l83c.cpp:65:2:\
    \ error: expected \u2018}\u2019 at end of input\n   65 | }\n      |  ^\n/tmp/tmptvj2l83c.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmptvj2l83c.cpp:65:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   65 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ temp;\n    while (ss >> temp) {\n        if (temp == \"zero\") nums.push_back(0);\n\
    \        else if (temp == \"one\") nums.push_back(1);\n        else if (temp ==\
    \ \"two\") nums.push_back(2);\n        else if (temp == \"three\") nums.push_back(3);\n\
    \        else if (temp == \"four\") nums.push_back(4);\n        else if (temp\
    \ == \"five\") nums.push_back(5);\n        else if (temp == \"six\") nums.push_back(6);\n\
    \        else if (temp == \"seven\") nums.push_back(7);\n        else if (temp\
    \ == \"eight\") nums.push_back(8);\n        else if (temp == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) result +=\
    \ \"zero \";\n        else if (nums[i] == 1) result += \"one \";\n        else\
    \ if (nums[i] == 2) result += \"two \";\n        else if (nums[i] == 3) result\
    \ += \"three \";\n        else if (nums[i] == 4) result += \"four \";\n      \
    \  else if (nums[i] == 5) result += \"five \";\n        else if (nums[i] == 6)\
    \ result += \"six \";\n        else if (nums[i] == 7) result += \"seven \";\n\
    \        else if (nums[i] == 8) result += \"eight \";\n        else if (nums[i]\
    \ == 9) result += \"nine \";\n    }\n    return result.substr(0, result.size()\
    \ - 1);\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp08n5m1xn.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp08n5m1xn.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmp08n5m1xn.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmp08n5m1xn.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmp08n5m1xn.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmp08n5m1xn.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmp08n5m1xn.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmp08n5m1xn.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp08n5m1xn.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tstd::vector<int> nums;\n\tstd::stringstream ss(numbers);\n\tstd::string\
    \ token;\n\twhile (std::getline(ss, token, ' ')) {\n\t\tif (token == \"zero\"\
    )\n\t\t\tnums.push_back(0);\n\t\telse if (token == \"one\")\n\t\t\tnums.push_back(1);\n\
    \t\telse if (token == \"two\")\n\t\t\tnums.push_back(2);\n\t\telse if (token ==\
    \ \"three\")\n\t\t\tnums.push_back(3);\n\t\telse if (token == \"four\")\n\t\t\t\
    nums.push_back(4);\n\t\telse if (token == \"five\")\n\t\t\tnums.push_back(5);\n\
    \t\telse if (token == \"six\")\n\t\t\tnums.push_back(6);\n\t\telse if (token ==\
    \ \"seven\")\n\t\t\tnums.push_back(7);\n\t\telse if (token == \"eight\")\n\t\t\
    \tnums.push_back(8);\n\t\telse if (token == \"nine\")\n\t\t\tnums.push_back(9);\n\
    \t}\n\tstd::sort(nums.begin(), nums.end());\n\tstd::string result;\n\tfor (int\
    \ i = 0; i < nums.size(); i++) {\n\t\tif (i != 0)\n\t\t\tresult += \" \";\n\t\t\
    if (nums[i] == 0)\n\t\t\tresult += \"zero\";\n\t\telse if (nums[i] == 1)\n\t\t\
    \tresult += \"one\";\n\t\telse if (nums[i] == 2)\n\t\t\tresult += \"two\";\n\t\
    \telse if (nums[i] == 3)\n\t\t\tresult += \"three\";\n\t\telse if (nums[i] ==\
    \ 4)\n\t\t\tresult += \"four\";\n\t\telse if (nums[i] == 5)\n\t\t\tresult += \"\
    five\";\n\t\telse if (nums[i] == 6)\n\t\t\tresult += \"six\";\n\t\telse\n}\nint\
    \ main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpknjlpbah.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpknjlpbah.cpp:54:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   54 | }\n      | ^\n/tmp/tmpknjlpbah.cpp:55:9: warning: empty\
    \ parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   55 | int main() {\n      |         ^~\n/tmp/tmpknjlpbah.cpp:55:9: note: remove\
    \ parentheses to default-initialize a variable\n   55 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpknjlpbah.cpp:55:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpknjlpbah.cpp:55:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   55 | int main() {\n      |            ^\n/tmp/tmpknjlpbah.cpp:62:2: error:\
    \ expected \u2018}\u2019 at end of input\n   62 | }\n      |  ^\n/tmp/tmpknjlpbah.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpknjlpbah.cpp:62:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   62 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkyuwb059.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpkyuwb059.cpp:57:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   57 | int main() {\n      |     \
    \    ^~\n/tmp/tmpkyuwb059.cpp:57:9: note: remove parentheses to default-initialize\
    \ a variable\n   57 | int main() {\n      |         ^~\n      |         --\n/tmp/tmpkyuwb059.cpp:57:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmpkyuwb059.cpp:57:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   57 | int main() {\n      |            ^\n/tmp/tmpkyuwb059.cpp:64:2: error:\
    \ expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmpkyuwb059.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpkyuwb059.cpp:64:2:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmpkyuwb059.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpkyuwb059.cpp:64:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' '))\n        nums.push_back(token);\n\
    \    std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (auto&\
    \ num : nums) {\n        result += num + \" \";\n    }\n    return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = sort_numbers;\n \
    \   assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmpao4uv69z: /tmp/tmpao4uv69z.cpp:25: int main(): Assertion `candidate((\"\
    three five nine\")) == (\"three five nine\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        result += nums[i] + \" \"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmpqz43wpn3: /tmp/tmpqz43wpn3.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) result += \" \"\
    ;\n        if (nums[i] == 0) result += \"zero\";\n        else if (nums[i] ==\
    \ 1) result += \"one\";\n        else if (nums[i] == 2) result += \"two\";\n \
    \       else if (nums[i] == 3) result += \"three\";\n        else if (nums[i]\
    \ == 4) result += \"four\";\n        else if (nums[i] == 5) result += \"five\"\
    ;\n        else if (nums[i] == 6) result += \"six\";\n        else if (nums[i]\
    \ == 7) result += \"seven\";\n        else if (nums[i] == 8) result += \"eight\"\
    ;\n        else if (nums[i] == 9) result += \"nine\";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string token;\n    std::vector<int>\
    \ nums;\n    while (std::getline(ss, token, ' ')) {\n        if (token == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (token == \"one\") {\n\
    \            nums.push_back(1);\n        } else if (token == \"two\") {\n    \
    \        nums.push_back(2);\n        } else if (token == \"three\") {\n      \
    \      nums.push_back(3);\n        } else if (token == \"four\") {\n         \
    \   nums.push_back(4);\n        } else if (token == \"five\") {\n            nums.push_back(5);\n\
    \        } else if (token == \"six\") {\n            nums.push_back(6);\n    \
    \    } else if (token == \"seven\") {\n            nums.push_back(7);\n      \
    \  } else if (token == \"eight\") {\n            nums.push_back(8);\n        }\
    \ else if (token == \"nine\") {\n            nums.push_back(9);\n        }\n \
    \   }\n    std::sort(nums.begin(), nums.end());\n    std::stringstream ss2;\n\
    \    for (auto num : nums) {\n        if (num == 0) {\n            ss2 << \"zero\
    \ \";\n        } else if (num == 1) {\n            ss2 << \"one \";\n        }\
    \ else if (num == 2) {\n            ss2 << \"two \";\n        } else if (num ==\
    \ 3) {\n            ss2 << \"three \";\n        } else if (num == 4) {\n     \
    \       ss2 << \"four \";\n        } else if (num == 5) {\n            ss2 <<\
    \ \"five \";\n        } else if (num == 6) {\n            ss2 << \"six \";\n \
    \       } else if (num == 7) {\n            ss2 << \"seven \";\n        } else\
    \ if (num == 8) {\n            ss2 << \"eight \";\n        } else if (num == 9)\
    \ {\n            ss2 << \"nine\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg4unuiz8.cpp:57:20: warning: missing terminating \" character\n\
    \   57 |             ss2 << \"nine\n      |                    ^\n/tmp/tmpg4unuiz8.cpp:57:20:\
    \ error: missing terminating \" character\n   57 |             ss2 << \"nine\n\
    \      |                    ^~~~~\n/tmp/tmpg4unuiz8.cpp: In function \u2018std::string\
    \ sort_numbers(std::string)\u2019:\n/tmp/tmpg4unuiz8.cpp:58:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   58 | }\n      | ^\n/tmp/tmpg4unuiz8.cpp:59:9:\
    \ warning: empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpg4unuiz8.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpg4unuiz8.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpg4unuiz8.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpg4unuiz8.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpg4unuiz8.cpp:37:27:\
    \ note: to match this \u2018{\u2019\n   37 |     for (auto num : nums) {\n   \
    \   |                           ^\n/tmp/tmpg4unuiz8.cpp:66:2: error: expected\
    \ \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpg4unuiz8.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpg4unuiz8.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") v.push_back(0);\n\
    \        else if (word == \"one\") v.push_back(1);\n        else if (word == \"\
    two\") v.push_back(2);\n        else if (word == \"three\") v.push_back(3);\n\
    \        else if (word == \"four\") v.push_back(4);\n        else if (word ==\
    \ \"five\") v.push_back(5);\n        else if (word == \"six\") v.push_back(6);\n\
    \        else if (word == \"seven\") v.push_back(7);\n        else if (word ==\
    \ \"eight\") v.push_back(8);\n        else if (word == \"nine\") v.push_back(9);\n\
    \    }\n    std::sort(v.begin(), v.end());\n    std::string result;\n    for (auto\
    \ i : v) {\n        if (i == 0) result += \"zero \";\n        else if (i == 1)\
    \ result += \"one \";\n        else if (i == 2) result += \"two \";\n        else\
    \ if (i == 3) result += \"three \";\n        else if (i == 4) result += \"four\
    \ \";\n        else if (i == 5) result += \"five \";\n        else if (i == 6)\
    \ result += \"six \";\n        else if (i == 7) result += \"seven \";\n      \
    \  else if (i == 8) result += \"eight \";\n        else if (i == 9) result +=\
    \ \"nine \";\n    }\n    return result.substr(0, result.size() - 1);\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n  std::vector<int> nums;\n  std::stringstream ss(numbers);\n  std::string\
    \ word;\n  while (ss >> word) {\n    if (word == \"zero\") {\n      nums.push_back(0);\n\
    \    } else if (word == \"one\") {\n      nums.push_back(1);\n    } else if (word\
    \ == \"two\") {\n      nums.push_back(2);\n    } else if (word == \"three\") {\n\
    \      nums.push_back(3);\n    } else if (word == \"four\") {\n      nums.push_back(4);\n\
    \    } else if (word == \"five\") {\n      nums.push_back(5);\n    } else if (word\
    \ == \"six\") {\n      nums.push_back(6);\n    } else if (word == \"seven\") {\n\
    \      nums.push_back(7);\n    } else if (word == \"eight\") {\n      nums.push_back(8);\n\
    \    } else if (word == \"nine\") {\n      nums.push_back(9);\n    }\n  }\n  std::sort(nums.begin(),\
    \ nums.end());\n  std::string result;\n  for (int i = 0; i < nums.size(); i++)\
    \ {\n    if (nums[i] == 0) {\n      result += \"zero \";\n    } else if (nums[i]\
    \ == 1) {\n      result += \"one \";\n    } else if (nums[i] == 2) {\n      result\
    \ += \"two \";\n    } else if (nums[i] == 3) {\n      result += \"three \";\n\
    \    } else if (nums[i] == 4) {\n      result += \"four \";\n    } else if (nums[i]\
    \ == 5) {\n      result += \"five \";\n    } else if (nums[i] == 6) {\n      result\
    \ += \"six \";\n    } else if (nums[i] == 7) {\n      result += \"seven \";\n\
    \    } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyykz03qt.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpyykz03qt.cpp:57:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   57 | int main() {\n      |     \
    \    ^~\n/tmp/tmpyykz03qt.cpp:57:9: note: remove parentheses to default-initialize\
    \ a variable\n   57 | int main() {\n      |         ^~\n      |         --\n/tmp/tmpyykz03qt.cpp:57:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmpyykz03qt.cpp:57:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   57 | int main() {\n      |            ^\n/tmp/tmpyykz03qt.cpp:64:2: error:\
    \ expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmpyykz03qt.cpp:37:41:\
    \ note: to match this \u2018{\u2019\n   37 |   for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                         ^\n/tmp/tmpyykz03qt.cpp:64:2:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmpyykz03qt.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpyykz03qt.cpp:64:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   v.push_back(0);\n        } else if (word == \"one\") {\n            v.push_back(1);\n\
    \        } else if (word == \"two\") {\n            v.push_back(2);\n        }\
    \ else if (word == \"three\") {\n            v.push_back(3);\n        } else if\
    \ (word == \"four\") {\n            v.push_back(4);\n        } else if (word ==\
    \ \"five\") {\n            v.push_back(5);\n        } else if (word == \"six\"\
    ) {\n            v.push_back(6);\n        } else if (word == \"seven\") {\n  \
    \          v.push_back(7);\n        } else if (word == \"eight\") {\n        \
    \    v.push_back(8);\n        } else if (word == \"nine\") {\n            v.push_back(9);\n\
    \        }\n    }\n    std::sort(v.begin(), v.end());\n    std::string result;\n\
    \    for (int i = 0; i < v.size(); i++) {\n        if (v[i] == 0) {\n        \
    \    result += \"zero \";\n        } else if (v[i] == 1) {\n            result\
    \ += \"one \";\n        } else if (v[i] == 2) {\n            result += \"two \"\
    ;\n        } else if (v[i] == 3) {\n            result += \"three \";\n      \
    \  } else if (v[i] == 4) {\n            result += \"four \";\n        } else if\
    \ (v[i] == 5) {\n            result += \"five \";\n        } else if (v[i] ==\
    \ 6) {\n            result += \"six \";\n        } else if (v[i] == 7) {\n   \
    \         result += \"seven \";\n        } else if (v[i] == 8) {\n           \
    \ result += \"eight \";\n        } else if (v[i] == 9) {\n           \n}\nint\
    \ main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfe7ayx1c.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpfe7ayx1c.cpp:59:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   59 | int main() {\n      |     \
    \    ^~\n/tmp/tmpfe7ayx1c.cpp:59:9: note: remove parentheses to default-initialize\
    \ a variable\n   59 | int main() {\n      |         ^~\n      |         --\n/tmp/tmpfe7ayx1c.cpp:59:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmpfe7ayx1c.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpfe7ayx1c.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpfe7ayx1c.cpp:37:40:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < v.size();\
    \ i++) {\n      |                                        ^\n/tmp/tmpfe7ayx1c.cpp:66:2:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpfe7ayx1c.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpfe7ayx1c.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy7_f7dkx.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpy7_f7dkx.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpy7_f7dkx.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpy7_f7dkx.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpy7_f7dkx.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpy7_f7dkx.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpy7_f7dkx.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpy7_f7dkx.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpy7_f7dkx.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnzy9wj63.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpnzy9wj63.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpnzy9wj63.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpnzy9wj63.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpnzy9wj63.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpnzy9wj63.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpnzy9wj63.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpnzy9wj63.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpnzy9wj63.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tstd::stringstream ss(numbers);\n\tstd::string word;\n\tstd::vector<int>\
    \ nums;\n\twhile (ss >> word) {\n\t\tif (word == \"zero\") {\n\t\t\tnums.push_back(0);\n\
    \t\t}\n\t\telse if (word == \"one\") {\n\t\t\tnums.push_back(1);\n\t\t}\n\t\t\
    else if (word == \"two\") {\n\t\t\tnums.push_back(2);\n\t\t}\n\t\telse if (word\
    \ == \"three\") {\n\t\t\tnums.push_back(3);\n\t\t}\n\t\telse if (word == \"four\"\
    ) {\n\t\t\tnums.push_back(4);\n\t\t}\n\t\telse if (word == \"five\") {\n\t\t\t\
    nums.push_back(5);\n\t\t}\n\t\telse if (word == \"six\") {\n\t\t\tnums.push_back(6);\n\
    \t\t}\n\t\telse if (word == \"seven\") {\n\t\t\tnums.push_back(7);\n\t\t}\n\t\t\
    else if (word == \"eight\") {\n\t\t\tnums.push_back(8);\n\t\t}\n\t\telse if (word\
    \ == \"nine\") {\n\t\t\tnums.push_back(9);\n\t\t}\n\t}\n\tstd::sort(nums.begin(),\
    \ nums.end());\n\tstd::string result;\n\tfor (int i = 0; i < nums.size(); i++)\
    \ {\n\t\tif (nums[i] == 0) {\n\t\t\tresult += \"zero \";\n\t\t}\n\t\telse if (nums[i]\
    \ == 1) {\n\t\t\tresult += \"one \";\n\t\t}\n\t\telse if (nums[i] == 2) {\n\t\t\
    \tresult += \"two \";\n\t\t}\n\t\telse if (nums[i] == 3) {\n\t\t\tresult += \"\
    three \";\n\t\t}\n\t\telse if (nums[i] == 4) {\n\t\t\tresult += \"four \";\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxd3tgsfu.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpxd3tgsfu.cpp:62:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   62 | int main() {\n      |     \
    \    ^~\n/tmp/tmpxd3tgsfu.cpp:62:9: note: remove parentheses to default-initialize\
    \ a variable\n   62 | int main() {\n      |         ^~\n      |         --\n/tmp/tmpxd3tgsfu.cpp:62:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmpxd3tgsfu.cpp:62:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   62 | int main() {\n      |            ^\n/tmp/tmpxd3tgsfu.cpp:69:2: error:\
    \ expected \u2018}\u2019 at end of input\n   69 | }\n      |  ^\n/tmp/tmpxd3tgsfu.cpp:46:47:\
    \ note: to match this \u2018{\u2019\n   46 |         for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                               ^\n/tmp/tmpxd3tgsfu.cpp:69:2:\
    \ error: expected \u2018}\u2019 at end of input\n   69 | }\n      |  ^\n/tmp/tmpxd3tgsfu.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpxd3tgsfu.cpp:69:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   69 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxt3kpmzq.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpxt3kpmzq.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpxt3kpmzq.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpxt3kpmzq.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpxt3kpmzq.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpxt3kpmzq.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpxt3kpmzq.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpxt3kpmzq.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpxt3kpmzq.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) result += \" \"\
    ;\n        if (nums[i] == 0) result += \"zero\";\n        else if (nums[i] ==\
    \ 1) result += \"one\";\n        else if (nums[i] == 2) result += \"two\";\n \
    \       else if (nums[i] == 3) result += \"three\";\n        else if (nums[i]\
    \ == 4) result += \"four\";\n        else if (nums[i] == 5) result += \"five\"\
    ;\n        else if (nums[i] == 6) result += \"six\";\n        else if (nums[i]\
    \ == 7) result += \"seven\";\n        else if (nums[i] == 8) result += \"eight\"\
    ;\n        else if (nums[i] == 9) result += \"nine\";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ v;\n    while (ss >> word) {\n        if (word == \"zero\") {\n            v.push_back(0);\n\
    \        } else if (word == \"one\") {\n            v.push_back(1);\n        }\
    \ else if (word == \"two\") {\n            v.push_back(2);\n        } else if\
    \ (word == \"three\") {\n            v.push_back(3);\n        } else if (word\
    \ == \"four\") {\n            v.push_back(4);\n        } else if (word == \"five\"\
    ) {\n            v.push_back(5);\n        } else if (word == \"six\") {\n    \
    \        v.push_back(6);\n        } else if (word == \"seven\") {\n          \
    \  v.push_back(7);\n        } else if (word == \"eight\") {\n            v.push_back(8);\n\
    \        } else if (word == \"nine\") {\n            v.push_back(9);\n       \
    \ }\n    }\n    std::sort(v.begin(), v.end());\n    std::string result;\n    for\
    \ (int i = 0; i < v.size(); i++) {\n        if (v[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (v[i] == 1) {\n            result += \"one\
    \ \";\n        } else if (v[i] == 2) {\n            result += \"two \";\n    \
    \    } else if (v[i] == 3) {\n            result += \"three \";\n        } else\
    \ if (v[i] == 4) {\n            result += \"four \";\n        } else if (v[i]\
    \ == 5) {\n            result += \"five \";\n        } else if (v[i] == 6) {\n\
    \            result += \"six \";\n        } else if (v[i] == 7) {\n          \
    \  result += \"seven \";\n        } else if (v[i] == 8) {\n            result\
    \ += \"eight \";\n        } else if (v[i] == 9) {\n           \n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2lfvmrsa.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp2lfvmrsa.cpp:59:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   59 | int main() {\n      |     \
    \    ^~\n/tmp/tmp2lfvmrsa.cpp:59:9: note: remove parentheses to default-initialize\
    \ a variable\n   59 | int main() {\n      |         ^~\n      |         --\n/tmp/tmp2lfvmrsa.cpp:59:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmp2lfvmrsa.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmp2lfvmrsa.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmp2lfvmrsa.cpp:37:40:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < v.size();\
    \ i++) {\n      |                                        ^\n/tmp/tmp2lfvmrsa.cpp:66:2:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmp2lfvmrsa.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp2lfvmrsa.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        result += nums[i] + \" \"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmpf1oywfin: /tmp/tmpf1oywfin.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ temp;\n    while (ss >> temp) {\n        if (temp == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (temp == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (temp == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (temp == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (temp == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (temp == \"five\") {\n            nums.push_back(5);\n        } else if (temp\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (temp == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (temp == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (temp == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx6_llnqt.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpx6_llnqt.cpp:57:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   57 | int main() {\n      |     \
    \    ^~\n/tmp/tmpx6_llnqt.cpp:57:9: note: remove parentheses to default-initialize\
    \ a variable\n   57 | int main() {\n      |         ^~\n      |         --\n/tmp/tmpx6_llnqt.cpp:57:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmpx6_llnqt.cpp:57:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   57 | int main() {\n      |            ^\n/tmp/tmpx6_llnqt.cpp:64:2: error:\
    \ expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmpx6_llnqt.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpx6_llnqt.cpp:64:2:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmpx6_llnqt.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpx6_llnqt.cpp:64:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums = {\"zero\", \"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    std::vector<int>\
    \ nums_int;\n    std::stringstream ss(numbers);\n    std::string temp;\n    while\
    \ (ss >> temp) {\n        for (int i = 0; i < nums.size(); i++) {\n          \
    \  if (temp == nums[i]) {\n                nums_int.push_back(i);\n          \
    \  }\n        }\n    }\n    std::sort(nums_int.begin(), nums_int.end());\n   \
    \ std::string result;\n    for (int i = 0; i < nums_int.size(); i++) {\n     \
    \   result += nums[nums_int[i]] + \" \";\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmprg6v8zvo: /tmp/tmprg6v8zvo.cpp:30: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::stringstream result;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) result << \"\
    \ \";\n        if (nums[i] == 0) result << \"zero\";\n        else if (nums[i]\
    \ == 1) result << \"one\";\n        else if (nums[i] == 2) result << \"two\";\n\
    \        else if (nums[i] == 3) result << \"three\";\n        else if (nums[i]\
    \ == 4) result << \"four\";\n        else if (nums[i] == 5) result << \"five\"\
    ;\n        else if (nums[i] == 6) result << \"six\";\n        else if (nums[i]\
    \ == 7) result << \"seven\";\n        else if (nums[i] == 8) result << \"eight\"\
    ;\n        else if (nums[i] == 9) result << \"nine\";\n    }\n    return result.str();\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (auto num : nums) {\n       \
    \ switch (num) {\n            case 0:\n                result += \"zero \";\n\
    \                break;\n            case 1:\n                result += \"one\
    \ \";\n                break;\n            case 2:\n                result +=\
    \ \"two \";\n                break;\n            case 3:\n                result\
    \ += \"three \";\n                break;\n            case 4:\n              \
    \  result += \"four \";\n                break;\n            case 5:\n       \
    \         result += \"five \";\n                break;\n            case 6:\n\
    \                result += \"six \";\n                break;\n            case\
    \ 7:\n                result += \"seven \";\n                break;\n        \
    \    case 8:\n                result += \"eight \";\n                break;\n\
    \            case 9:\n                result += \"nine \";\n                break;\n\
    \        }\n    }\n    return result.substr(0, result.size() - 1);\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") v.push_back(0);\n\
    \        else if (word == \"one\") v.push_back(1);\n        else if (word == \"\
    two\") v.push_back(2);\n        else if (word == \"three\") v.push_back(3);\n\
    \        else if (word == \"four\") v.push_back(4);\n        else if (word ==\
    \ \"five\") v.push_back(5);\n        else if (word == \"six\") v.push_back(6);\n\
    \        else if (word == \"seven\") v.push_back(7);\n        else if (word ==\
    \ \"eight\") v.push_back(8);\n        else if (word == \"nine\") v.push_back(9);\n\
    \    }\n    std::sort(v.begin(), v.end());\n    std::string result;\n    for (auto\
    \ i : v) {\n        if (i == 0) result += \"zero \";\n        else if (i == 1)\
    \ result += \"one \";\n        else if (i == 2) result += \"two \";\n        else\
    \ if (i == 3) result += \"three \";\n        else if (i == 4) result += \"four\
    \ \";\n        else if (i == 5) result += \"five \";\n        else if (i == 6)\
    \ result += \"six \";\n        else if (i == 7) result += \"seven \";\n      \
    \  else if (i == 8) result += \"eight \";\n        else if (i == 9) result +=\
    \ \"nine \";\n    }\n    return result.substr(0, result.size() - 1);\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvmhwu8i8.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpvmhwu8i8.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpvmhwu8i8.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpvmhwu8i8.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpvmhwu8i8.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpvmhwu8i8.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpvmhwu8i8.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpvmhwu8i8.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpvmhwu8i8.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::vector<int> nums;\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i > 0) {\n            result += \" \";\n        }\n    \
    \    if (nums[i] == 0) {\n            result += \"zero\";\n        } else if (nums[i]\
    \ == 1) {\n            result += \"one\";\n        } else if (nums[i] == 2) {\n\
    \            result += \"two\";\n        } else if (nums[i] == 3) {\n        \
    \    result += \"three\";\n        } else if (nums[i] == 4) {\n            result\
    \ += \"four\";\n        } else if (nums[i] == 5) {\n            result += \"five\"\
    ;\n        } else if (nums[i] == 6) {\n            result += \"six\";\n      \
    \  } else if (nums[i] == 7) {\n            result += \"seven\";\n        } else\
    \ if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu8wyaz4u.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpu8wyaz4u.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpu8wyaz4u.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpu8wyaz4u.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpu8wyaz4u.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpu8wyaz4u.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpu8wyaz4u.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpu8wyaz4u.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpu8wyaz4u.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe7xh6ya1.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpe7xh6ya1.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpe7xh6ya1.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpe7xh6ya1.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpe7xh6ya1.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpe7xh6ya1.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpe7xh6ya1.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpe7xh6ya1.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpe7xh6ya1.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (auto num : nums) {\n        result += num + \" \";\n    }\n    return\
    \ result.substr(0, result.size() - 1);\n}\nint main() {\n    auto candidate =\
    \ sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmpn4ly9syz: /tmp/tmpn4ly9syz.cpp:26: int main(): Assertion `candidate((\"\
    three five nine\")) == (\"three five nine\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        result += nums[i] + \" \"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmpvm8_6345: /tmp/tmpvm8_6345.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2reo34lp.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp2reo34lp.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmp2reo34lp.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmp2reo34lp.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmp2reo34lp.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmp2reo34lp.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmp2reo34lp.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmp2reo34lp.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp2reo34lp.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n  std::stringstream ss(numbers);\n  std::vector<int> v;\n  std::string word;\n\
    \  while (ss >> word) {\n    if (word == \"zero\") {\n      v.push_back(0);\n\
    \    } else if (word == \"one\") {\n      v.push_back(1);\n    } else if (word\
    \ == \"two\") {\n      v.push_back(2);\n    } else if (word == \"three\") {\n\
    \      v.push_back(3);\n    } else if (word == \"four\") {\n      v.push_back(4);\n\
    \    } else if (word == \"five\") {\n      v.push_back(5);\n    } else if (word\
    \ == \"six\") {\n      v.push_back(6);\n    } else if (word == \"seven\") {\n\
    \      v.push_back(7);\n    } else if (word == \"eight\") {\n      v.push_back(8);\n\
    \    } else if (word == \"nine\") {\n      v.push_back(9);\n    }\n  }\n  std::sort(v.begin(),\
    \ v.end());\n  std::string result;\n  for (int i = 0; i < v.size(); i++) {\n \
    \   if (v[i] == 0) {\n      result += \"zero \";\n    } else if (v[i] == 1) {\n\
    \      result += \"one \";\n    } else if (v[i] == 2) {\n      result += \"two\
    \ \";\n    } else if (v[i] == 3) {\n      result += \"three \";\n    } else if\
    \ (v[i] == 4) {\n      result += \"four \";\n    } else if (v[i] == 5) {\n   \
    \   result += \"five \";\n    } else if (v[i] == 6) {\n      result += \"six \"\
    ;\n    } else if (v[i] == 7) {\n      result += \"seven \";\n    } else if (v[i]\
    \ == 8) {\n      result += \"eight \";\n    } else if (v[i] == 9) {\n     \n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfcslfs52.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpfcslfs52.cpp:59:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   59 | int main() {\n      |     \
    \    ^~\n/tmp/tmpfcslfs52.cpp:59:9: note: remove parentheses to default-initialize\
    \ a variable\n   59 | int main() {\n      |         ^~\n      |         --\n/tmp/tmpfcslfs52.cpp:59:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmpfcslfs52.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpfcslfs52.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpfcslfs52.cpp:37:38:\
    \ note: to match this \u2018{\u2019\n   37 |   for (int i = 0; i < v.size(); i++)\
    \ {\n      |                                      ^\n/tmp/tmpfcslfs52.cpp:66:2:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpfcslfs52.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpfcslfs52.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::stringstream ss2;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            ss2 << \" \";\n        }\n      \
    \  if (nums[i] == 0) {\n            ss2 << \"zero\";\n        } else if (nums[i]\
    \ == 1) {\n            ss2 << \"one\";\n        } else if (nums[i] == 2) {\n \
    \           ss2 << \"two\";\n        } else if (nums[i] == 3) {\n            ss2\
    \ << \"three\";\n        } else if (nums[i] == 4) {\n            ss2 << \"four\"\
    ;\n        } else if (nums[i] == 5) {\n            ss2 << \"five\";\n        }\
    \ else if (nums[i] == 6) {\n            ss2 << \"six\";\n        } else if (nums[i]\
    \ == 7) {\n           \n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk88ejkmm.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpk88ejkmm.cpp:58:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   58 | int main() {\n      |     \
    \    ^~\n/tmp/tmpk88ejkmm.cpp:58:9: note: remove parentheses to default-initialize\
    \ a variable\n   58 | int main() {\n      |         ^~\n      |         --\n/tmp/tmpk88ejkmm.cpp:58:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmpk88ejkmm.cpp:58:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   58 | int main() {\n      |            ^\n/tmp/tmpk88ejkmm.cpp:65:2: error:\
    \ expected \u2018}\u2019 at end of input\n   65 | }\n      |  ^\n/tmp/tmpk88ejkmm.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpk88ejkmm.cpp:65:2:\
    \ error: expected \u2018}\u2019 at end of input\n   65 | }\n      |  ^\n/tmp/tmpk88ejkmm.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpk88ejkmm.cpp:65:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   65 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) result += \" \"\
    ;\n        if (nums[i] == 0) result += \"zero\";\n        else if (nums[i] ==\
    \ 1) result += \"one\";\n        else if (nums[i] == 2) result += \"two\";\n \
    \       else if (nums[i] == 3) result += \"three\";\n        else if (nums[i]\
    \ == 4) result += \"four\";\n        else if (nums[i] == 5) result += \"five\"\
    ;\n        else if (nums[i] == 6) result += \"six\";\n        else if (nums[i]\
    \ == 7) result += \"seven\";\n        else if (nums[i] == 8) result += \"eight\"\
    ;\n        else if (nums[i] == 9) result += \"nine\";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::map<std::string, int> num_map = {\n        {\"zero\", 0},\n    \
    \    {\"one\", 1},\n        {\"two\", 2},\n        {\"three\", 3},\n        {\"\
    four\", 4},\n        {\"five\", 5},\n        {\"six\", 6},\n        {\"seven\"\
    , 7},\n        {\"eight\", 8},\n        {\"nine\", 9}\n    };\n    std::vector<int>\
    \ num_vec;\n    std::stringstream ss(numbers);\n    std::string word;\n    while\
    \ (ss >> word) {\n        num_vec.push_back(num_map[word]);\n    }\n    std::sort(num_vec.begin(),\
    \ num_vec.end());\n    std::string result = \"\";\n    for (int i = 0; i < num_vec.size();\
    \ i++) {\n        for (auto it = num_map.begin(); it != num_map.end(); it++) {\n\
    \            if (it->second == num_vec[i]) {\n                result += it->first\
    \ + \" \";\n                break;\n            }\n        }\n    }\n    return\
    \ result.substr(0, result.size() - 1);\n}\nint main() {\n    auto candidate =\
    \ sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tstd::stringstream ss(numbers);\n\tstd::vector<int> v;\n\tstd::string word;\n\
    \twhile (ss >> word) {\n\t\tif (word == \"zero\") {\n\t\t\tv.push_back(0);\n\t\
    \t}\n\t\telse if (word == \"one\") {\n\t\t\tv.push_back(1);\n\t\t}\n\t\telse if\
    \ (word == \"two\") {\n\t\t\tv.push_back(2);\n\t\t}\n\t\telse if (word == \"three\"\
    ) {\n\t\t\tv.push_back(3);\n\t\t}\n\t\telse if (word == \"four\") {\n\t\t\tv.push_back(4);\n\
    \t\t}\n\t\telse if (word == \"five\") {\n\t\t\tv.push_back(5);\n\t\t}\n\t\telse\
    \ if (word == \"six\") {\n\t\t\tv.push_back(6);\n\t\t}\n\t\telse if (word == \"\
    seven\") {\n\t\t\tv.push_back(7);\n\t\t}\n\t\telse if (word == \"eight\") {\n\t\
    \t\tv.push_back(8);\n\t\t}\n\t\telse if (word == \"nine\") {\n\t\t\tv.push_back(9);\n\
    \t\t}\n\t}\n\tstd::sort(v.begin(), v.end());\n\tstd::string result;\n\tfor (int\
    \ i = 0; i < v.size(); i++) {\n\t\tif (v[i] == 0) {\n\t\t\tresult += \"zero \"\
    ;\n\t\t}\n\t\telse if (v[i] == 1) {\n\t\t\tresult += \"one \";\n\t\t}\n\t\telse\
    \ if (v[i] == 2) {\n\t\t\tresult += \"two \";\n\t\t}\n\t\telse if (v[i] == 3)\
    \ {\n\t\t\tresult += \"three \";\n\t\t}\n\t\telse if (v[i] == 4) {\n\t\t\tresult\
    \ += \"four \";\n\t\t}\n\t\telse if (v[i] == 5) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_hb12h4z.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp_hb12h4z.cpp:65:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   65 | int main() {\n      |     \
    \    ^~\n/tmp/tmp_hb12h4z.cpp:65:9: note: remove parentheses to default-initialize\
    \ a variable\n   65 | int main() {\n      |         ^~\n      |         --\n/tmp/tmp_hb12h4z.cpp:65:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmp_hb12h4z.cpp:65:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   65 | int main() {\n      |            ^\n/tmp/tmp_hb12h4z.cpp:72:2: error:\
    \ expected \u2018}\u2019 at end of input\n   72 | }\n      |  ^\n/tmp/tmp_hb12h4z.cpp:46:44:\
    \ note: to match this \u2018{\u2019\n   46 |         for (int i = 0; i < v.size();\
    \ i++) {\n      |                                            ^\n/tmp/tmp_hb12h4z.cpp:72:2:\
    \ error: expected \u2018}\u2019 at end of input\n   72 | }\n      |  ^\n/tmp/tmp_hb12h4z.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp_hb12h4z.cpp:72:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   72 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) result += \" \"\
    ;\n        if (nums[i] == 0) result += \"zero\";\n        else if (nums[i] ==\
    \ 1) result += \"one\";\n        else if (nums[i] == 2) result += \"two\";\n \
    \       else if (nums[i] == 3) result += \"three\";\n        else if (nums[i]\
    \ == 4) result += \"four\";\n        else if (nums[i] == 5) result += \"five\"\
    ;\n        else if (nums[i] == 6) result += \"six\";\n        else if (nums[i]\
    \ == 7) result += \"seven\";\n        else if (nums[i] == 8) result += \"eight\"\
    ;\n        else if (nums[i] == 9) result += \"nine\";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        result += nums[i] + \" \"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmp0j_iqz35: /tmp/tmp0j_iqz35.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n    int n;\n\
    \    while (ss >> n) {\n        v.push_back(n);\n    }\n    std::sort(v.begin(),\
    \ v.end());\n    std::stringstream ss2;\n    for (int i = 0; i < v.size(); i++)\
    \ {\n        ss2 << v[i] << \" \";\n    }\n    return ss2.str();\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp0av19ozh: /tmp/tmp0av19ozh.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tstd::stringstream ss(numbers);\n\tstd::string word;\n\tstd::vector<int>\
    \ nums;\n\twhile (ss >> word) {\n\t\tif (word == \"zero\") {\n\t\t\tnums.push_back(0);\n\
    \t\t}\n\t\telse if (word == \"one\") {\n\t\t\tnums.push_back(1);\n\t\t}\n\t\t\
    else if (word == \"two\") {\n\t\t\tnums.push_back(2);\n\t\t}\n\t\telse if (word\
    \ == \"three\") {\n\t\t\tnums.push_back(3);\n\t\t}\n\t\telse if (word == \"four\"\
    ) {\n\t\t\tnums.push_back(4);\n\t\t}\n\t\telse if (word == \"five\") {\n\t\t\t\
    nums.push_back(5);\n\t\t}\n\t\telse if (word == \"six\") {\n\t\t\tnums.push_back(6);\n\
    \t\t}\n\t\telse if (word == \"seven\") {\n\t\t\tnums.push_back(7);\n\t\t}\n\t\t\
    else if (word == \"eight\") {\n\t\t\tnums.push_back(8);\n\t\t}\n\t\telse if (word\
    \ == \"nine\") {\n\t\t\tnums.push_back(9);\n\t\t}\n\t}\n\tstd::sort(nums.begin(),\
    \ nums.end());\n\tstd::string result;\n\tfor (int i = 0; i < nums.size(); i++)\
    \ {\n\t\tif (nums[i] == 0) {\n\t\t\tresult += \"zero \";\n\t\t}\n\t\telse if (nums[i]\
    \ == 1) {\n\t\t\tresult += \"one \";\n\t\t}\n\t\telse if (nums[i] == 2) {\n\t\t\
    \tresult += \"two \";\n\t\t}\n\t\telse if (nums[i] == 3) {\n\t\t\tresult += \"\
    three \";\n\t\t}\n\t\telse if (nums[i] == 4) {\n\t\t\tresult += \"four \";\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf4dswxbu.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpf4dswxbu.cpp:62:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   62 | int main() {\n      |     \
    \    ^~\n/tmp/tmpf4dswxbu.cpp:62:9: note: remove parentheses to default-initialize\
    \ a variable\n   62 | int main() {\n      |         ^~\n      |         --\n/tmp/tmpf4dswxbu.cpp:62:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmpf4dswxbu.cpp:62:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   62 | int main() {\n      |            ^\n/tmp/tmpf4dswxbu.cpp:69:2: error:\
    \ expected \u2018}\u2019 at end of input\n   69 | }\n      |  ^\n/tmp/tmpf4dswxbu.cpp:46:47:\
    \ note: to match this \u2018{\u2019\n   46 |         for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                               ^\n/tmp/tmpf4dswxbu.cpp:69:2:\
    \ error: expected \u2018}\u2019 at end of input\n   69 | }\n      |  ^\n/tmp/tmpf4dswxbu.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpf4dswxbu.cpp:69:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   69 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n    std::string\
    \ temp;\n    while(ss >> temp) {\n        if(temp == \"zero\") v.push_back(0);\n\
    \        else if(temp == \"one\") v.push_back(1);\n        else if(temp == \"\
    two\") v.push_back(2);\n        else if(temp == \"three\") v.push_back(3);\n \
    \       else if(temp == \"four\") v.push_back(4);\n        else if(temp == \"\
    five\") v.push_back(5);\n        else if(temp == \"six\") v.push_back(6);\n  \
    \      else if(temp == \"seven\") v.push_back(7);\n        else if(temp == \"\
    eight\") v.push_back(8);\n        else if(temp == \"nine\") v.push_back(9);\n\
    \    }\n    std::sort(v.begin(), v.end());\n    std::stringstream ss2;\n    for(int\
    \ i = 0; i < v.size(); i++) {\n        if(v[i] == 0) ss2 << \"zero \";\n     \
    \   else if(v[i] == 1) ss2 << \"one \";\n        else if(v[i] == 2) ss2 << \"\
    two \";\n        else if(v[i] == 3) ss2 << \"three \";\n        else if(v[i] ==\
    \ 4) ss2 << \"four \";\n        else if(v[i] == 5) ss2 << \"five \";\n       \
    \ else if(v[i] == 6) ss2 << \"six \";\n        else if(v[i] == 7) ss2 << \"seven\
    \ \";\n        else if(v[i] == 8) ss2 << \"eight \";\n        else if(v[i] ==\
    \ 9) ss2 << \"nine \";\n    }\n    std::string result = ss2.str();\n    result.pop_back();\n\
    \    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n   \
    \ assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"\
    three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"\
    ));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four\
    \ five seven eight nine\"));\n    assert(candidate((\"six five four three two\
    \ one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmpl6_g502m: /tmp/tmpl6_g502m.cpp:44: int main(): Assertion `candidate((\"\
    \")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::stringstream result;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) result << \"\
    \ \";\n        if (nums[i] == 0) result << \"zero\";\n        else if (nums[i]\
    \ == 1) result << \"one\";\n        else if (nums[i] == 2) result << \"two\";\n\
    \        else if (nums[i] == 3) result << \"three\";\n        else if (nums[i]\
    \ == 4) result << \"four\";\n        else if (nums[i] == 5) result << \"five\"\
    ;\n        else if (nums[i] == 6) result << \"six\";\n        else if (nums[i]\
    \ == 7) result << \"seven\";\n        else if (nums[i] == 8) result << \"eight\"\
    ;\n        else if (nums[i] == 9) result << \"nine\";\n    }\n    return result.str();\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (auto i : nums) {\n        result += i + \" \";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpmsmzw84_: /tmp/tmpmsmzw84_.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::stringstream ss2;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) ss2 << \" \"\
    ;\n        if (nums[i] == 0) ss2 << \"zero\";\n        else if (nums[i] == 1)\
    \ ss2 << \"one\";\n        else if (nums[i] == 2) ss2 << \"two\";\n        else\
    \ if (nums[i] == 3) ss2 << \"three\";\n        else if (nums[i] == 4) ss2 << \"\
    four\";\n        else if (nums[i] == 5) ss2 << \"five\";\n        else if (nums[i]\
    \ == 6) ss2 << \"six\";\n        else if (nums[i] == 7) ss2 << \"seven\";\n  \
    \      else if (nums[i] == 8) ss2 << \"eight\";\n        else if (nums[i] == 9)\
    \ ss2 << \"nine\";\n    }\n    return ss2.str();\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        result += nums[i] + \" \"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmpfnom_uga: /tmp/tmpfnom_uga.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_c8f7vwc.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp_c8f7vwc.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmp_c8f7vwc.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmp_c8f7vwc.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmp_c8f7vwc.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmp_c8f7vwc.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmp_c8f7vwc.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmp_c8f7vwc.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp_c8f7vwc.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     switch (nums[i]) {\n            case 0:\n                result += \"zero\"\
    ;\n                break;\n            case 1:\n                result += \"one\"\
    ;\n                break;\n            case 2:\n                result += \"two\"\
    ;\n                break;\n            case 3:\n                result += \"three\"\
    ;\n                break;\n            case 4:\n                result += \"four\"\
    ;\n                break;\n            case 5:\n                result += \"five\"\
    ;\n                break;\n            case 6:\n                result += \"six\"\
    ;\n                break;\n            case 7:\n                result += \"seven\"\
    ;\n                break;\n            case 8:\n                result += \"eight\"\
    ;\n                break;\n            case 9:\n                result += \"nine\"\
    ;\n                break;\n        }\n    }\n    return\n}\nint main() {\n   \
    \ auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n \
    \   assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three\
    \ five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp193wx7k.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpp193wx7k.cpp:75:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   75 | }\n      | ^\n/tmp/tmpp193wx7k.cpp:74:11: error: expected\
    \ \u2018;\u2019 before \u2018}\u2019 token\n   74 |     return\n      |      \
    \     ^\n      |           ;\n   75 | }\n      | ~          \n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsi7qutrw.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpsi7qutrw.cpp:57:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   57 | int main() {\n      |     \
    \    ^~\n/tmp/tmpsi7qutrw.cpp:57:9: note: remove parentheses to default-initialize\
    \ a variable\n   57 | int main() {\n      |         ^~\n      |         --\n/tmp/tmpsi7qutrw.cpp:57:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmpsi7qutrw.cpp:57:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   57 | int main() {\n      |            ^\n/tmp/tmpsi7qutrw.cpp:64:2: error:\
    \ expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmpsi7qutrw.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpsi7qutrw.cpp:64:2:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmpsi7qutrw.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpsi7qutrw.cpp:64:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string res;\n    for\
    \ (int i = 0; i < nums.size(); i++) {\n        if (i != 0) res += \" \";\n   \
    \     if (nums[i] == 0) res += \"zero\";\n        else if (nums[i] == 1) res +=\
    \ \"one\";\n        else if (nums[i] == 2) res += \"two\";\n        else if (nums[i]\
    \ == 3) res += \"three\";\n        else if (nums[i] == 4) res += \"four\";\n \
    \       else if (nums[i] == 5) res += \"five\";\n        else if (nums[i] == 6)\
    \ res += \"six\";\n        else if (nums[i] == 7) res += \"seven\";\n        else\
    \ if (nums[i] == 8) res += \"eight\";\n        else if (nums[i] == 9) res += \"\
    nine\";\n    }\n    return res;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptrdlmzpo.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmptrdlmzpo.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmptrdlmzpo.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmptrdlmzpo.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmptrdlmzpo.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmptrdlmzpo.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmptrdlmzpo.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmptrdlmzpo.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmptrdlmzpo.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::vector<int> nums;\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::stringstream result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result << \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result << \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result << \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result << \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result << \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result << \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ << \"five\";\n        } else if (nums[i] == 6) {\n            result << \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result << \"seven\";\n    \
    \    } else\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmphx8p0_3k.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmphx8p0_3k.cpp:58:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   58 | }\n      | ^\n/tmp/tmphx8p0_3k.cpp:59:9: warning: empty\
    \ parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmphx8p0_3k.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmphx8p0_3k.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmphx8p0_3k.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmphx8p0_3k.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmphx8p0_3k.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmphx8p0_3k.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbpmfy2cb.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpbpmfy2cb.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpbpmfy2cb.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpbpmfy2cb.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpbpmfy2cb.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpbpmfy2cb.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpbpmfy2cb.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpbpmfy2cb.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpbpmfy2cb.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (auto i : nums) {\n        if\
    \ (i == 0) {\n            result += \"zero \";\n        } else if (i == 1) {\n\
    \            result += \"one \";\n        } else if (i == 2) {\n            result\
    \ += \"two \";\n        } else if (i == 3) {\n            result += \"three \"\
    ;\n        } else if (i == 4) {\n            result += \"four \";\n        } else\
    \ if (i == 5) {\n            result += \"five \";\n        } else if (i == 6)\
    \ {\n            result += \"six \";\n        } else if (i == 7) {\n         \
    \   result += \"seven \";\n        } else if (i == 8) {\n            result +=\
    \ \"eight \";\n        } else if (i == 9) {\n            result += \"nine \";\n\
    \        }\n    }\n    return result.substr(0, result.\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmn1lq7kl.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpmn1lq7kl.cpp:61:1: error: expected unqualified-id before \u2018}\u2019\
    \ token\n   61 | }\n      | ^\n/tmp/tmpmn1lq7kl.cpp:60:36: error: expected \u2018\
    ;\u2019 before \u2018}\u2019 token\n   60 |     return result.substr(0, result.\n\
    \      |                                    ^\n      |                       \
    \             ;\n   61 | }\n      | ~                                   \n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6ts3fca9.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp6ts3fca9.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmp6ts3fca9.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmp6ts3fca9.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmp6ts3fca9.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmp6ts3fca9.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmp6ts3fca9.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmp6ts3fca9.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp6ts3fca9.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ temp;\n    while (ss >> temp) {\n        if (temp == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (temp == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (temp == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (temp == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (temp == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (temp == \"five\") {\n            nums.push_back(5);\n        } else if (temp\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (temp == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (temp == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (temp == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::stringstream result;\n    for (auto i : nums) {\n   \
    \     if (i == 0) {\n            result << \"zero \";\n        } else if (i ==\
    \ 1) {\n            result << \"one \";\n        } else if (i == 2) {\n      \
    \      result << \"two \";\n        } else if (i == 3) {\n            result <<\
    \ \"three \";\n        } else if (i == 4) {\n            result << \"four \";\n\
    \        } else if (i == 5) {\n            result << \"five \";\n        } else\
    \ if (i == 6) {\n            result << \"six \";\n        } else if (i == 7) {\n\
    \            result << \"seven \";\n        } else if (i == 8) {\n           \
    \ result << \"eight \";\n        } else if (i == 9) {\n            result << \"\
    nine \";\n        }\n    }\n    return result.str();\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmpg4d833r9: /tmp/tmpg4d833r9.cpp:65: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ temp;\n    while (ss >> temp) {\n        if (temp == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (temp == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (temp == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (temp == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (temp == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (temp == \"five\") {\n            nums.push_back(5);\n        } else if (temp\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (temp == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (temp == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (temp == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl7mesi4y.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpl7mesi4y.cpp:57:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   57 | int main() {\n      |     \
    \    ^~\n/tmp/tmpl7mesi4y.cpp:57:9: note: remove parentheses to default-initialize\
    \ a variable\n   57 | int main() {\n      |         ^~\n      |         --\n/tmp/tmpl7mesi4y.cpp:57:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmpl7mesi4y.cpp:57:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   57 | int main() {\n      |            ^\n/tmp/tmpl7mesi4y.cpp:64:2: error:\
    \ expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmpl7mesi4y.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpl7mesi4y.cpp:64:2:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmpl7mesi4y.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpl7mesi4y.cpp:64:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5k52z61j.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp5k52z61j.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmp5k52z61j.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmp5k52z61j.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmp5k52z61j.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmp5k52z61j.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmp5k52z61j.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmp5k52z61j.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp5k52z61j.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpozg2u44v.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpozg2u44v.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpozg2u44v.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpozg2u44v.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpozg2u44v.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpozg2u44v.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpozg2u44v.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpozg2u44v.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpozg2u44v.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (auto num : nums) {\n       \
    \ if (num == 0) {\n            result += \"zero \";\n        } else if (num ==\
    \ 1) {\n            result += \"one \";\n        } else if (num == 2) {\n    \
    \        result += \"two \";\n        } else if (num == 3) {\n            result\
    \ += \"three \";\n        } else if (num == 4) {\n            result += \"four\
    \ \";\n        } else if (num == 5) {\n            result += \"five \";\n    \
    \    } else if (num == 6) {\n            result += \"six \";\n        } else if\
    \ (num == 7) {\n            result += \"seven \";\n        } else if (num == 8)\
    \ {\n            result += \"eight \";\n        } else if (num == 9) {\n     \
    \       result += \"nine \";\n        }\n    }\n    return result.substr(0, result.\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvc7auzko.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpvc7auzko.cpp:61:1: error: expected unqualified-id before \u2018}\u2019\
    \ token\n   61 | }\n      | ^\n/tmp/tmpvc7auzko.cpp:60:36: error: expected \u2018\
    ;\u2019 before \u2018}\u2019 token\n   60 |     return result.substr(0, result.\n\
    \      |                                    ^\n      |                       \
    \             ;\n   61 | }\n      | ~                                   \n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) result += \" \"\
    ;\n        if (nums[i] == 0) result += \"zero\";\n        else if (nums[i] ==\
    \ 1) result += \"one\";\n        else if (nums[i] == 2) result += \"two\";\n \
    \       else if (nums[i] == 3) result += \"three\";\n        else if (nums[i]\
    \ == 4) result += \"four\";\n        else if (nums[i] == 5) result += \"five\"\
    ;\n        else if (nums[i] == 6) result += \"six\";\n        else if (nums[i]\
    \ == 7) result += \"seven\";\n        else if (nums[i] == 8) result += \"eight\"\
    ;\n        else if (nums[i] == 9) result += \"nine\";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ v;\n    while (ss >> word) {\n        if (word == \"zero\")\n            v.push_back(0);\n\
    \        else if (word == \"one\")\n            v.push_back(1);\n        else\
    \ if (word == \"two\")\n            v.push_back(2);\n        else if (word ==\
    \ \"three\")\n            v.push_back(3);\n        else if (word == \"four\")\n\
    \            v.push_back(4);\n        else if (word == \"five\")\n           \
    \ v.push_back(5);\n        else if (word == \"six\")\n            v.push_back(6);\n\
    \        else if (word == \"seven\")\n            v.push_back(7);\n        else\
    \ if (word == \"eight\")\n            v.push_back(8);\n        else if (word ==\
    \ \"nine\")\n            v.push_back(9);\n    }\n    std::sort(v.begin(), v.end());\n\
    \    std::string result;\n    for (int i = 0; i < v.size(); i++) {\n        if\
    \ (v[i] == 0)\n            result += \"zero \";\n        else if (v[i] == 1)\n\
    \            result += \"one \";\n        else if (v[i] == 2)\n            result\
    \ += \"two \";\n        else if (v[i] == 3)\n            result += \"three \"\
    ;\n        else if (v[i] == 4)\n            result += \"four \";\n        else\
    \ if (v[i] == 5)\n            result += \"five \";\n        else if (v[i] == 6)\n\
    \            result += \"six \";\n        else if (v[i] == 7)\n            result\
    \ += \"seven \";\n        else if (v[i] == 8)\n            result += \"eight \"\
    ;\n        else if (v[i] == 9)\n            result += \"nine \";\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpr5w6o0fd: /tmp/tmpr5w6o0fd.cpp:63: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) result += \" \"\
    ;\n        if (nums[i] == 0) result += \"zero\";\n        else if (nums[i] ==\
    \ 1) result += \"one\";\n        else if (nums[i] == 2) result += \"two\";\n \
    \       else if (nums[i] == 3) result += \"three\";\n        else if (nums[i]\
    \ == 4) result += \"four\";\n        else if (nums[i] == 5) result += \"five\"\
    ;\n        else if (nums[i] == 6) result += \"six\";\n        else if (nums[i]\
    \ == 7) result += \"seven\";\n        else if (nums[i] == 8) result += \"eight\"\
    ;\n        else if (nums[i] == 9) result += \"nine\";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ temp;\n    while (ss >> temp) {\n        if (temp == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (temp == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (temp == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (temp == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (temp == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (temp == \"five\") {\n            nums.push_back(5);\n        } else if (temp\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (temp == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (temp == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (temp == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg2wmstp7.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpg2wmstp7.cpp:57:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   57 | int main() {\n      |     \
    \    ^~\n/tmp/tmpg2wmstp7.cpp:57:9: note: remove parentheses to default-initialize\
    \ a variable\n   57 | int main() {\n      |         ^~\n      |         --\n/tmp/tmpg2wmstp7.cpp:57:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmpg2wmstp7.cpp:57:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   57 | int main() {\n      |            ^\n/tmp/tmpg2wmstp7.cpp:64:2: error:\
    \ expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmpg2wmstp7.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpg2wmstp7.cpp:64:2:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmpg2wmstp7.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpg2wmstp7.cpp:64:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n    std::string\
    \ s;\n    while(ss >> s) {\n        if(s == \"zero\") v.push_back(0);\n      \
    \  else if(s == \"one\") v.push_back(1);\n        else if(s == \"two\") v.push_back(2);\n\
    \        else if(s == \"three\") v.push_back(3);\n        else if(s == \"four\"\
    ) v.push_back(4);\n        else if(s == \"five\") v.push_back(5);\n        else\
    \ if(s == \"six\") v.push_back(6);\n        else if(s == \"seven\") v.push_back(7);\n\
    \        else if(s == \"eight\") v.push_back(8);\n        else if(s == \"nine\"\
    ) v.push_back(9);\n    }\n    std::sort(v.begin(), v.end());\n    std::stringstream\
    \ ss2;\n    for(int i = 0; i < v.size(); i++) {\n        if(i != 0) ss2 << \"\
    \ \";\n        if(v[i] == 0) ss2 << \"zero\";\n        else if(v[i] == 1) ss2\
    \ << \"one\";\n        else if(v[i] == 2) ss2 << \"two\";\n        else if(v[i]\
    \ == 3) ss2 << \"three\";\n        else if(v[i] == 4) ss2 << \"four\";\n     \
    \   else if(v[i] == 5) ss2 << \"five\";\n        else if(v[i] == 6) ss2 << \"\
    six\";\n        else if(v[i] == 7) ss2 << \"seven\";\n        else if(v[i] ==\
    \ 8) ss2 << \"eight\";\n        else if(v[i] == 9) ss2 << \"nine\";\n    }\n \
    \   return ss2.str();\n}\nint main() {\n    auto candidate = sort_numbers;\n \
    \   assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptswunqj3.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmptswunqj3.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmptswunqj3.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmptswunqj3.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmptswunqj3.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmptswunqj3.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmptswunqj3.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmptswunqj3.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmptswunqj3.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   v.push_back(0);\n        } else if (word == \"one\") {\n            v.push_back(1);\n\
    \        } else if (word == \"two\") {\n            v.push_back(2);\n        }\
    \ else if (word == \"three\") {\n            v.push_back(3);\n        } else if\
    \ (word == \"four\") {\n            v.push_back(4);\n        } else if (word ==\
    \ \"five\") {\n            v.push_back(5);\n        } else if (word == \"six\"\
    ) {\n            v.push_back(6);\n        } else if (word == \"seven\") {\n  \
    \          v.push_back(7);\n        } else if (word == \"eight\") {\n        \
    \    v.push_back(8);\n        } else if (word == \"nine\") {\n            v.push_back(9);\n\
    \        }\n    }\n    std::sort(v.begin(), v.end());\n    std::string result;\n\
    \    for (int i = 0; i < v.size(); i++) {\n        if (v[i] == 0) {\n        \
    \    result += \"zero \";\n        } else if (v[i] == 1) {\n            result\
    \ += \"one \";\n        } else if (v[i] == 2) {\n            result += \"two \"\
    ;\n        } else if (v[i] == 3) {\n            result += \"three \";\n      \
    \  } else if (v[i] == 4) {\n            result += \"four \";\n        } else if\
    \ (v[i] == 5) {\n            result += \"five \";\n        } else if (v[i] ==\
    \ 6) {\n            result += \"six \";\n        } else if (v[i] == 7) {\n   \
    \         result += \"seven \";\n        } else if (v[i] == 8) {\n           \
    \ result += \"eight \";\n        } else if (v[i] == 9) {\n           \n}\nint\
    \ main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz1jo86nf.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpz1jo86nf.cpp:59:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   59 | int main() {\n      |     \
    \    ^~\n/tmp/tmpz1jo86nf.cpp:59:9: note: remove parentheses to default-initialize\
    \ a variable\n   59 | int main() {\n      |         ^~\n      |         --\n/tmp/tmpz1jo86nf.cpp:59:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmpz1jo86nf.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpz1jo86nf.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpz1jo86nf.cpp:37:40:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < v.size();\
    \ i++) {\n      |                                        ^\n/tmp/tmpz1jo86nf.cpp:66:2:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpz1jo86nf.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpz1jo86nf.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (auto num : nums) {\n        if (num == 0) result += \"zero \";\n     \
    \   else if (num == 1) result += \"one \";\n        else if (num == 2) result\
    \ += \"two \";\n        else if (num == 3) result += \"three \";\n        else\
    \ if (num == 4) result += \"four \";\n        else if (num == 5) result += \"\
    five \";\n        else if (num == 6) result += \"six \";\n        else if (num\
    \ == 7) result += \"seven \";\n        else if (num == 8) result += \"eight \"\
    ;\n        else if (num == 9) result += \"nine \";\n    }\n    return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = sort_numbers;\n \
    \   assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        result += nums[i] + \" \"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmpv7vahjii: /tmp/tmpv7vahjii.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   v.push_back(0);\n        } else if (word == \"one\") {\n            v.push_back(1);\n\
    \        } else if (word == \"two\") {\n            v.push_back(2);\n        }\
    \ else if (word == \"three\") {\n            v.push_back(3);\n        } else if\
    \ (word == \"four\") {\n            v.push_back(4);\n        } else if (word ==\
    \ \"five\") {\n            v.push_back(5);\n        } else if (word == \"six\"\
    ) {\n            v.push_back(6);\n        } else if (word == \"seven\") {\n  \
    \          v.push_back(7);\n        } else if (word == \"eight\") {\n        \
    \    v.push_back(8);\n        } else if (word == \"nine\") {\n            v.push_back(9);\n\
    \        }\n    }\n    std::sort(v.begin(), v.end());\n    std::string result;\n\
    \    for (int i = 0; i < v.size(); i++) {\n        if (v[i] == 0) {\n        \
    \    result += \"zero \";\n        } else if (v[i] == 1) {\n            result\
    \ += \"one \";\n        } else if (v[i] == 2) {\n            result += \"two \"\
    ;\n        } else if (v[i] == 3) {\n            result += \"three \";\n      \
    \  } else if (v[i] == 4) {\n            result += \"four \";\n        } else if\
    \ (v[i] == 5) {\n            result += \"five \";\n        } else if (v[i] ==\
    \ 6) {\n            result += \"six \";\n        } else if (v[i] == 7) {\n   \
    \         result += \"seven \";\n        } else if (v[i] == 8) {\n           \
    \ result += \"eight \";\n        } else if (v[i] == 9) {\n           \n}\nint\
    \ main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpto_dilyf.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpto_dilyf.cpp:59:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   59 | int main() {\n      |     \
    \    ^~\n/tmp/tmpto_dilyf.cpp:59:9: note: remove parentheses to default-initialize\
    \ a variable\n   59 | int main() {\n      |         ^~\n      |         --\n/tmp/tmpto_dilyf.cpp:59:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmpto_dilyf.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpto_dilyf.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpto_dilyf.cpp:37:40:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < v.size();\
    \ i++) {\n      |                                        ^\n/tmp/tmpto_dilyf.cpp:66:2:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpto_dilyf.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpto_dilyf.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) result += \" \"\
    ;\n        if (nums[i] == 0) result += \"zero\";\n        else if (nums[i] ==\
    \ 1) result += \"one\";\n        else if (nums[i] == 2) result += \"two\";\n \
    \       else if (nums[i] == 3) result += \"three\";\n        else if (nums[i]\
    \ == 4) result += \"four\";\n        else if (nums[i] == 5) result += \"five\"\
    ;\n        else if (nums[i] == 6) result += \"six\";\n        else if (nums[i]\
    \ == 7) result += \"seven\";\n        else if (nums[i] == 8) result += \"eight\"\
    ;\n        else if (nums[i] == 9) result += \"nine\";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n  std::vector<int> nums;\n  std::stringstream ss(numbers);\n  std::string\
    \ word;\n  while (ss >> word) {\n    if (word == \"zero\") {\n      nums.push_back(0);\n\
    \    } else if (word == \"one\") {\n      nums.push_back(1);\n    } else if (word\
    \ == \"two\") {\n      nums.push_back(2);\n    } else if (word == \"three\") {\n\
    \      nums.push_back(3);\n    } else if (word == \"four\") {\n      nums.push_back(4);\n\
    \    } else if (word == \"five\") {\n      nums.push_back(5);\n    } else if (word\
    \ == \"six\") {\n      nums.push_back(6);\n    } else if (word == \"seven\") {\n\
    \      nums.push_back(7);\n    } else if (word == \"eight\") {\n      nums.push_back(8);\n\
    \    } else if (word == \"nine\") {\n      nums.push_back(9);\n    }\n  }\n  std::sort(nums.begin(),\
    \ nums.end());\n  std::string result;\n  for (int i = 0; i < nums.size(); i++)\
    \ {\n    if (i != 0) {\n      result += \" \";\n    }\n    if (nums[i] == 0) {\n\
    \      result += \"zero\";\n    } else if (nums[i] == 1) {\n      result += \"\
    one\";\n    } else if (nums[i] == 2) {\n      result += \"two\";\n    } else if\
    \ (nums[i] == 3) {\n      result += \"three\";\n    } else if (nums[i] == 4) {\n\
    \      result += \"four\";\n    } else if (nums[i] == 5) {\n      result += \"\
    five\";\n    } else if (nums[i] == 6) {\n      result += \"six\";\n    } else\
    \ if (nums[i] == 7) {\n      result += \"seven\";\n    } else if\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpegwpqcur.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpegwpqcur.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpegwpqcur.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpegwpqcur.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpegwpqcur.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpegwpqcur.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpegwpqcur.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpegwpqcur.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpegwpqcur.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2ne8dllt.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp2ne8dllt.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmp2ne8dllt.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmp2ne8dllt.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmp2ne8dllt.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmp2ne8dllt.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmp2ne8dllt.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmp2ne8dllt.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp2ne8dllt.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") v.push_back(0);\n\
    \        else if (word == \"one\") v.push_back(1);\n        else if (word == \"\
    two\") v.push_back(2);\n        else if (word == \"three\") v.push_back(3);\n\
    \        else if (word == \"four\") v.push_back(4);\n        else if (word ==\
    \ \"five\") v.push_back(5);\n        else if (word == \"six\") v.push_back(6);\n\
    \        else if (word == \"seven\") v.push_back(7);\n        else if (word ==\
    \ \"eight\") v.push_back(8);\n        else if (word == \"nine\") v.push_back(9);\n\
    \    }\n    std::sort(v.begin(), v.end());\n    std::string result;\n    for (int\
    \ i = 0; i < v.size(); i++) {\n        if (i > 0) result += \" \";\n        if\
    \ (v[i] == 0) result += \"zero\";\n        else if (v[i] == 1) result += \"one\"\
    ;\n        else if (v[i] == 2) result += \"two\";\n        else if (v[i] == 3)\
    \ result += \"three\";\n        else if (v[i] == 4) result += \"four\";\n    \
    \    else if (v[i] == 5) result += \"five\";\n        else if (v[i] == 6) result\
    \ += \"six\";\n        else if (v[i] == 7) result += \"seven\";\n        else\
    \ if (v[i] == 8) result += \"eight\";\n        else if (v[i] == 9) result += \"\
    nine\";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        if (i == 0) {\n          \
    \  if (nums[i] == 0) result += \"zero\";\n            else if (nums[i] == 1) result\
    \ += \"one\";\n            else if (nums[i] == 2) result += \"two\";\n       \
    \     else if (nums[i] == 3) result += \"three\";\n            else if (nums[i]\
    \ == 4) result += \"four\";\n            else if (nums[i] == 5) result += \"five\"\
    ;\n            else if (nums[i] == 6) result += \"six\";\n            else if\
    \ (nums[i] == 7) result += \"seven\";\n            else if (nums[i] == 8) result\
    \ += \"eight\";\n            else if (nums[i] == 9) result += \"nine\";\n    \
    \    }\n        else {\n            if (nums[i] == 0) result += \" zero\";\n \
    \           else if (nums[i] == 1) result += \" one\";\n            else if (nums[i]\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnf20pn02.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpnf20pn02.cpp:42:29: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   42 |             else if (nums[i]\n      |                     ~ \
    \      ^\n      |                             )\n   43 | }\n      | ~        \
    \                    \n/tmp/tmpnf20pn02.cpp:43:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   43 | }\n      | ^\n/tmp/tmpnf20pn02.cpp:44:9:\
    \ warning: empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   44 | int main() {\n      |         ^~\n/tmp/tmpnf20pn02.cpp:44:9: note: remove\
    \ parentheses to default-initialize a variable\n   44 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpnf20pn02.cpp:44:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpnf20pn02.cpp:44:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   44 | int main() {\n      |            ^\n/tmp/tmpnf20pn02.cpp:51:2: error:\
    \ expected \u2018}\u2019 at end of input\n   51 | }\n      |  ^\n/tmp/tmpnf20pn02.cpp:26:43:\
    \ note: to match this \u2018{\u2019\n   26 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpnf20pn02.cpp:51:2:\
    \ error: expected \u2018}\u2019 at end of input\n   51 | }\n      |  ^\n/tmp/tmpnf20pn02.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpnf20pn02.cpp:51:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   51 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::map<std::string, int> dict = {\n        {\"zero\", 0},\n       \
    \ {\"one\", 1},\n        {\"two\", 2},\n        {\"three\", 3},\n        {\"four\"\
    , 4},\n        {\"five\", 5},\n        {\"six\", 6},\n        {\"seven\", 7},\n\
    \        {\"eight\", 8},\n        {\"nine\", 9}\n    };\n    std::vector<int>\
    \ nums;\n    std::stringstream ss(numbers);\n    std::string word;\n    while\
    \ (ss >> word) {\n        nums.push_back(dict[word]);\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string res;\n    for (auto i : nums) {\n        for (auto\
    \ j : dict) {\n            if (j.second == i) {\n                res += j.first\
    \ + \" \";\n            }\n        }\n    }\n    return res.substr(0, res.size()\
    \ - 1);\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        result += nums[i] + \" \"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmpmgseu650: /tmp/tmpmgseu650.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        result += nums[i] + \" \"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmpxjxp1dgt: /tmp/tmpxjxp1dgt.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::stringstream result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result << \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result << \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result << \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result << \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result << \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result << \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ << \"five\";\n        } else if (nums[i] == 6) {\n            result << \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result << \"seven\";\n    \
    \    } else\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo__ae4r3.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpo__ae4r3.cpp:58:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   58 | }\n      | ^\n/tmp/tmpo__ae4r3.cpp:59:9: warning: empty\
    \ parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpo__ae4r3.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpo__ae4r3.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpo__ae4r3.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpo__ae4r3.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpo__ae4r3.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpo__ae4r3.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tstd::vector<int> nums;\n\tstd::stringstream ss(numbers);\n\tstd::string\
    \ word;\n\twhile (ss >> word) {\n\t\tif (word == \"zero\") {\n\t\t\tnums.push_back(0);\n\
    \t\t}\n\t\telse if (word == \"one\") {\n\t\t\tnums.push_back(1);\n\t\t}\n\t\t\
    else if (word == \"two\") {\n\t\t\tnums.push_back(2);\n\t\t}\n\t\telse if (word\
    \ == \"three\") {\n\t\t\tnums.push_back(3);\n\t\t}\n\t\telse if (word == \"four\"\
    ) {\n\t\t\tnums.push_back(4);\n\t\t}\n\t\telse if (word == \"five\") {\n\t\t\t\
    nums.push_back(5);\n\t\t}\n\t\telse if (word == \"six\") {\n\t\t\tnums.push_back(6);\n\
    \t\t}\n\t\telse if (word == \"seven\") {\n\t\t\tnums.push_back(7);\n\t\t}\n\t\t\
    else if (word == \"eight\") {\n\t\t\tnums.push_back(8);\n\t\t}\n\t\telse if (word\
    \ == \"nine\") {\n\t\t\tnums.push_back(9);\n\t\t}\n\t}\n\tstd::sort(nums.begin(),\
    \ nums.end());\n\tstd::string result;\n\tfor (int i = 0; i < nums.size(); i++)\
    \ {\n\t\tif (nums[i] == 0) {\n\t\t\tresult += \"zero \";\n\t\t}\n\t\telse if (nums[i]\
    \ == 1) {\n\t\t\tresult += \"one \";\n\t\t}\n\t\telse if (nums[i] == 2) {\n\t\t\
    \tresult += \"two \";\n\t\t}\n\t\telse if (nums[i] == 3) {\n\t\t\tresult += \"\
    three \";\n\t\t}\n\t\telse if (nums[i] == 4) {\n\t\t\tresult += \"four \";\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmps0jddhah.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmps0jddhah.cpp:62:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   62 | int main() {\n      |     \
    \    ^~\n/tmp/tmps0jddhah.cpp:62:9: note: remove parentheses to default-initialize\
    \ a variable\n   62 | int main() {\n      |         ^~\n      |         --\n/tmp/tmps0jddhah.cpp:62:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmps0jddhah.cpp:62:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   62 | int main() {\n      |            ^\n/tmp/tmps0jddhah.cpp:69:2: error:\
    \ expected \u2018}\u2019 at end of input\n   69 | }\n      |  ^\n/tmp/tmps0jddhah.cpp:46:47:\
    \ note: to match this \u2018{\u2019\n   46 |         for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                               ^\n/tmp/tmps0jddhah.cpp:69:2:\
    \ error: expected \u2018}\u2019 at end of input\n   69 | }\n      |  ^\n/tmp/tmps0jddhah.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmps0jddhah.cpp:69:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   69 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) result += \" \"\
    ;\n        if (nums[i] == 0) result += \"zero\";\n        else if (nums[i] ==\
    \ 1) result += \"one\";\n        else if (nums[i] == 2) result += \"two\";\n \
    \       else if (nums[i] == 3) result += \"three\";\n        else if (nums[i]\
    \ == 4) result += \"four\";\n        else if (nums[i] == 5) result += \"five\"\
    ;\n        else if (nums[i] == 6) result += \"six\";\n        else if (nums[i]\
    \ == 7) result += \"seven\";\n        else if (nums[i] == 8) result += \"eight\"\
    ;\n        else if (nums[i] == 9) result += \"nine\";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2gf569zs.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp2gf569zs.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmp2gf569zs.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmp2gf569zs.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmp2gf569zs.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmp2gf569zs.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmp2gf569zs.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmp2gf569zs.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp2gf569zs.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ temp;\n    while (ss >> temp) {\n        if (temp == \"zero\") nums.push_back(0);\n\
    \        else if (temp == \"one\") nums.push_back(1);\n        else if (temp ==\
    \ \"two\") nums.push_back(2);\n        else if (temp == \"three\") nums.push_back(3);\n\
    \        else if (temp == \"four\") nums.push_back(4);\n        else if (temp\
    \ == \"five\") nums.push_back(5);\n        else if (temp == \"six\") nums.push_back(6);\n\
    \        else if (temp == \"seven\") nums.push_back(7);\n        else if (temp\
    \ == \"eight\") nums.push_back(8);\n        else if (temp == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) result +=\
    \ \"zero \";\n        else if (nums[i] == 1) result += \"one \";\n        else\
    \ if (nums[i] == 2) result += \"two \";\n        else if (nums[i] == 3) result\
    \ += \"three \";\n        else if (nums[i] == 4) result += \"four \";\n      \
    \  else if (nums[i] == 5) result += \"five \";\n        else if (nums[i] == 6)\
    \ result += \"six \";\n        else if (nums[i] == 7) result += \"seven \";\n\
    \        else if (nums[i] == 8) result += \"eight \";\n        else if (nums[i]\
    \ == 9) result += \"nine \";\n    }\n    return result.substr(0, result.size()\
    \ - 1);\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ temp;\n    while (ss >> temp) {\n        if (temp == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (temp == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (temp == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (temp == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (temp == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (temp == \"five\") {\n            nums.push_back(5);\n        } else if (temp\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (temp == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (temp == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (temp == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpodtwlrvq.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpodtwlrvq.cpp:57:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   57 | int main() {\n      |     \
    \    ^~\n/tmp/tmpodtwlrvq.cpp:57:9: note: remove parentheses to default-initialize\
    \ a variable\n   57 | int main() {\n      |         ^~\n      |         --\n/tmp/tmpodtwlrvq.cpp:57:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmpodtwlrvq.cpp:57:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   57 | int main() {\n      |            ^\n/tmp/tmpodtwlrvq.cpp:64:2: error:\
    \ expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmpodtwlrvq.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpodtwlrvq.cpp:64:2:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmpodtwlrvq.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpodtwlrvq.cpp:64:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::map<std::string, int> number_map = {\n        {\"zero\", 0},\n \
    \       {\"one\", 1},\n        {\"two\", 2},\n        {\"three\", 3},\n      \
    \  {\"four\", 4},\n        {\"five\", 5},\n        {\"six\", 6},\n        {\"\
    seven\", 7},\n        {\"eight\", 8},\n        {\"nine\", 9}\n    };\n    std::vector<int>\
    \ nums;\n    std::stringstream ss(numbers);\n    std::string word;\n    while\
    \ (ss >> word) {\n        nums.push_back(number_map[word]);\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int num : nums) {\n        for\
    \ (auto it = number_map.begin(); it != number_map.end(); ++it) {\n           \
    \ if (it->second == num) {\n                result += it->first + \" \";\n   \
    \             break;\n            }\n        }\n    }\n    return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = sort_numbers;\n \
    \   assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp76uwiczg.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp76uwiczg.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmp76uwiczg.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmp76uwiczg.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmp76uwiczg.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmp76uwiczg.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmp76uwiczg.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmp76uwiczg.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp76uwiczg.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        result += nums[i] + \" \"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmpnz6mg6d1: /tmp/tmpnz6mg6d1.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) result += \" \"\
    ;\n        if (nums[i] == 0) result += \"zero\";\n        else if (nums[i] ==\
    \ 1) result += \"one\";\n        else if (nums[i] == 2) result += \"two\";\n \
    \       else if (nums[i] == 3) result += \"three\";\n        else if (nums[i]\
    \ == 4) result += \"four\";\n        else if (nums[i] == 5) result += \"five\"\
    ;\n        else if (nums[i] == 6) result += \"six\";\n        else if (nums[i]\
    \ == 7) result += \"seven\";\n        else if (nums[i] == 8) result += \"eight\"\
    ;\n        else if (nums[i] == 9) result += \"nine\";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::stringstream result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result << \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result << \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result << \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result << \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result << \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result << \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ << \"five\";\n        } else if (nums[i] == 6) {\n            result << \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result << \"seven\";\n    \
    \    } else\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr2o0nvi5.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpr2o0nvi5.cpp:58:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   58 | }\n      | ^\n/tmp/tmpr2o0nvi5.cpp:59:9: warning: empty\
    \ parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpr2o0nvi5.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpr2o0nvi5.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpr2o0nvi5.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpr2o0nvi5.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpr2o0nvi5.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpr2o0nvi5.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpikr2t25u.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpikr2t25u.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpikr2t25u.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpikr2t25u.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpikr2t25u.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpikr2t25u.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpikr2t25u.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpikr2t25u.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpikr2t25u.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::stringstream result;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        if (i > 0) result << \"\
    \ \";\n        if (nums[i] == 0) result << \"zero\";\n        else if (nums[i]\
    \ == 1) result << \"one\";\n        else if (nums[i] == 2) result << \"two\";\n\
    \        else if (nums[i] == 3) result << \"three\";\n        else if (nums[i]\
    \ == 4) result << \"four\";\n        else if (nums[i] == 5) result << \"five\"\
    ;\n        else if (nums[i] == 6) result << \"six\";\n        else if (nums[i]\
    \ == 7) result << \"seven\";\n        else if (nums[i] == 8) result << \"eight\"\
    ;\n        else if (nums[i] == 9) result << \"nine\";\n    }\n    return result.str();\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxo2_pv99.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpxo2_pv99.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpxo2_pv99.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpxo2_pv99.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpxo2_pv99.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpxo2_pv99.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpxo2_pv99.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpxo2_pv99.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpxo2_pv99.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   v.push_back(0);\n        } else if (word == \"one\") {\n            v.push_back(1);\n\
    \        } else if (word == \"two\") {\n            v.push_back(2);\n        }\
    \ else if (word == \"three\") {\n            v.push_back(3);\n        } else if\
    \ (word == \"four\") {\n            v.push_back(4);\n        } else if (word ==\
    \ \"five\") {\n            v.push_back(5);\n        } else if (word == \"six\"\
    ) {\n            v.push_back(6);\n        } else if (word == \"seven\") {\n  \
    \          v.push_back(7);\n        } else if (word == \"eight\") {\n        \
    \    v.push_back(8);\n        } else if (word == \"nine\") {\n            v.push_back(9);\n\
    \        }\n    }\n    std::sort(v.begin(), v.end());\n    std::string result;\n\
    \    for (int i = 0; i < v.size(); i++) {\n        if (v[i] == 0) {\n        \
    \    result += \"zero \";\n        } else if (v[i] == 1) {\n            result\
    \ += \"one \";\n        } else if (v[i] == 2) {\n            result += \"two \"\
    ;\n        } else if (v[i] == 3) {\n            result += \"three \";\n      \
    \  } else if (v[i] == 4) {\n            result += \"four \";\n        } else if\
    \ (v[i] == 5) {\n            result += \"five \";\n        } else if (v[i] ==\
    \ 6) {\n            result += \"six \";\n        } else if (v[i] == 7) {\n   \
    \         result += \"seven \";\n        } else if (v[i] == 8) {\n           \
    \ result += \"eight \";\n        } else if (v[i] == 9) {\n           \n}\nint\
    \ main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6fqwo69j.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp6fqwo69j.cpp:59:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   59 | int main() {\n      |     \
    \    ^~\n/tmp/tmp6fqwo69j.cpp:59:9: note: remove parentheses to default-initialize\
    \ a variable\n   59 | int main() {\n      |         ^~\n      |         --\n/tmp/tmp6fqwo69j.cpp:59:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmp6fqwo69j.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmp6fqwo69j.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmp6fqwo69j.cpp:37:40:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < v.size();\
    \ i++) {\n      |                                        ^\n/tmp/tmp6fqwo69j.cpp:66:2:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmp6fqwo69j.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp6fqwo69j.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) result += \" \"\
    ;\n        if (nums[i] == 0) result += \"zero\";\n        else if (nums[i] ==\
    \ 1) result += \"one\";\n        else if (nums[i] == 2) result += \"two\";\n \
    \       else if (nums[i] == 3) result += \"three\";\n        else if (nums[i]\
    \ == 4) result += \"four\";\n        else if (nums[i] == 5) result += \"five\"\
    ;\n        else if (nums[i] == 6) result += \"six\";\n        else if (nums[i]\
    \ == 7) result += \"seven\";\n        else if (nums[i] == 8) result += \"eight\"\
    ;\n        else if (nums[i] == 9) result += \"nine\";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        nums.push_back(word);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (auto num : nums) {\n        result += num + \" \";\n    }\n    return\
    \ result.substr(0, result.size() - 1);\n}\nint main() {\n    auto candidate =\
    \ sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmpvxee0r18: /tmp/tmpvxee0r18.cpp:26: int main(): Assertion `candidate((\"\
    three five nine\")) == (\"three five nine\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string number;\n    std::vector<int>\
    \ nums;\n    while (ss >> number) {\n        if (number == \"zero\") nums.push_back(0);\n\
    \        else if (number == \"one\") nums.push_back(1);\n        else if (number\
    \ == \"two\") nums.push_back(2);\n        else if (number == \"three\") nums.push_back(3);\n\
    \        else if (number == \"four\") nums.push_back(4);\n        else if (number\
    \ == \"five\") nums.push_back(5);\n        else if (number == \"six\") nums.push_back(6);\n\
    \        else if (number == \"seven\") nums.push_back(7);\n        else if (number\
    \ == \"eight\") nums.push_back(8);\n        else if (number == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::stringstream result;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) result << \"\
    \ \";\n        if (nums[i] == 0) result << \"zero\";\n        else if (nums[i]\
    \ == 1) result << \"one\";\n        else if (nums[i] == 2) result << \"two\";\n\
    \        else if (nums[i] == 3) result << \"three\";\n        else if (nums[i]\
    \ == 4) result << \"four\";\n        else if (nums[i] == 5) result << \"five\"\
    ;\n        else if (nums[i] == 6) result << \"six\";\n        else if (nums[i]\
    \ == 7) result << \"seven\";\n        else if (nums[i] == 8) result << \"eight\"\
    ;\n        else if (nums[i] == 9) result << \"nine\";\n    }\n    return result.str();\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i > 0) {\n            result += \" \";\n        }\n    \
    \    if (nums[i] == 0) {\n            result += \"zero\";\n        } else if (nums[i]\
    \ == 1) {\n            result += \"one\";\n        } else if (nums[i] == 2) {\n\
    \            result += \"two\";\n        } else if (nums[i] == 3) {\n        \
    \    result += \"three\";\n        } else if (nums[i] == 4) {\n            result\
    \ += \"four\";\n        } else if (nums[i] == 5) {\n            result += \"five\"\
    ;\n        } else if (nums[i] == 6) {\n            result += \"six\";\n      \
    \  } else if (nums[i] == 7) {\n            result += \"seven\";\n        } else\
    \ if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgqakyhyk.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpgqakyhyk.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpgqakyhyk.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpgqakyhyk.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpgqakyhyk.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpgqakyhyk.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpgqakyhyk.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpgqakyhyk.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpgqakyhyk.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> num_vec;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        num_vec.push_back(temp);\n\
    \    }\n    std::sort(num_vec.begin(), num_vec.end());\n    std::string result;\n\
    \    for (auto i : num_vec) {\n        result += i + \" \";\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp35036vrq: /tmp/tmp35036vrq.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (auto i : nums) {\n        result += i + \" \";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpq4qzdd1k: /tmp/tmpq4qzdd1k.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1e7i10w1.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp1e7i10w1.cpp:57:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   57 | int main() {\n      |     \
    \    ^~\n/tmp/tmp1e7i10w1.cpp:57:9: note: remove parentheses to default-initialize\
    \ a variable\n   57 | int main() {\n      |         ^~\n      |         --\n/tmp/tmp1e7i10w1.cpp:57:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmp1e7i10w1.cpp:57:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   57 | int main() {\n      |            ^\n/tmp/tmp1e7i10w1.cpp:64:2: error:\
    \ expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmp1e7i10w1.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp1e7i10w1.cpp:64:2:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmp1e7i10w1.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp1e7i10w1.cpp:64:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::stringstream result;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) result << \"\
    \ \";\n        if (nums[i] == 0) result << \"zero\";\n        else if (nums[i]\
    \ == 1) result << \"one\";\n        else if (nums[i] == 2) result << \"two\";\n\
    \        else if (nums[i] == 3) result << \"three\";\n        else if (nums[i]\
    \ == 4) result << \"four\";\n        else if (nums[i] == 5) result << \"five\"\
    ;\n        else if (nums[i] == 6) result << \"six\";\n        else if (nums[i]\
    \ == 7) result << \"seven\";\n        else if (nums[i] == 8) result << \"eight\"\
    ;\n        else if (nums[i] == 9) result << \"nine\";\n    }\n    return result.str();\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj2urm_tu.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpj2urm_tu.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpj2urm_tu.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpj2urm_tu.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpj2urm_tu.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpj2urm_tu.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpj2urm_tu.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpj2urm_tu.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpj2urm_tu.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        result += nums[i] + \" \"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmp_7x67ehy: /tmp/tmp_7x67ehy.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyxzkekud.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpyxzkekud.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpyxzkekud.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpyxzkekud.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpyxzkekud.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpyxzkekud.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpyxzkekud.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpyxzkekud.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpyxzkekud.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::stringstream ss2;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        ss2 << nums[i] << \" \"\
    ;\n    }\n    return ss2.str();\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmpn_gw6yir: /tmp/tmpn_gw6yir.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (auto i : nums) {\n        result += i + \" \";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpc3abi_v3: /tmp/tmpc3abi_v3.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string res;\n    for\
    \ (int i = 0; i < nums.size(); i++) {\n        if (i != 0) res += \" \";\n   \
    \     if (nums[i] == 0) res += \"zero\";\n        else if (nums[i] == 1) res +=\
    \ \"one\";\n        else if (nums[i] == 2) res += \"two\";\n        else if (nums[i]\
    \ == 3) res += \"three\";\n        else if (nums[i] == 4) res += \"four\";\n \
    \       else if (nums[i] == 5) res += \"five\";\n        else if (nums[i] == 6)\
    \ res += \"six\";\n        else if (nums[i] == 7) res += \"seven\";\n        else\
    \ if (nums[i] == 8) res += \"eight\";\n        else if (nums[i] == 9) res += \"\
    nine\";\n    }\n    return res;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::stringstream result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result << \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result << \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result << \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result << \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result << \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result << \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ << \"five\";\n        } else if (nums[i] == 6) {\n            result << \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result << \"seven\";\n    \
    \    } else\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpeery4shd.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpeery4shd.cpp:58:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   58 | }\n      | ^\n/tmp/tmpeery4shd.cpp:59:9: warning: empty\
    \ parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpeery4shd.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpeery4shd.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpeery4shd.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpeery4shd.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpeery4shd.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpeery4shd.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string temp;\n    std::vector<std::string>\
    \ v;\n    while(ss >> temp)\n        v.push_back(temp);\n    std::sort(v.begin(),\
    \ v.end());\n    std::string ans;\n    for(int i = 0; i < v.size(); i++)\n   \
    \     ans += v[i] + \" \";\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmp3jcajxqj: /tmp/tmp3jcajxqj.cpp:23: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        result += nums[i] + \" \"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmp04klq5t6: /tmp/tmp04klq5t6.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        nums.push_back(word);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (auto num : nums) {\n        result += num + \" \";\n    }\n    return\
    \ result.substr(0, result.size() - 1);\n}\nint main() {\n    auto candidate =\
    \ sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmpn_zsunfj: /tmp/tmpn_zsunfj.cpp:26: int main(): Assertion `candidate((\"\
    three five nine\")) == (\"three five nine\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        if (i > 0) result += \" \"\
    ;\n        if (nums[i] == 0) result += \"zero\";\n        else if (nums[i] ==\
    \ 1) result += \"one\";\n        else if (nums[i] == 2) result += \"two\";\n \
    \       else if (nums[i] == 3) result += \"three\";\n        else if (nums[i]\
    \ == 4) result += \"four\";\n        else if (nums[i] == 5) result += \"five\"\
    ;\n        else if (nums[i] == 6) result += \"six\";\n        else if (nums[i]\
    \ == 7) result += \"seven\";\n        else if (nums[i] == 8) result += \"eight\"\
    ;\n        else if (nums[i] == 9) result += \"nine\";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb8gz54oy.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpb8gz54oy.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpb8gz54oy.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpb8gz54oy.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpb8gz54oy.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpb8gz54oy.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpb8gz54oy.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpb8gz54oy.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpb8gz54oy.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgx2u03tl.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpgx2u03tl.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpgx2u03tl.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpgx2u03tl.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpgx2u03tl.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpgx2u03tl.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpgx2u03tl.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpgx2u03tl.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpgx2u03tl.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n  std::vector<std::string> nums;\n  std::stringstream ss(numbers);\n  std::string\
    \ temp;\n  while (ss >> temp) {\n    nums.push_back(temp);\n  }\n  std::sort(nums.begin(),\
    \ nums.end());\n  std::string result;\n  for (int i = 0; i < nums.size(); i++)\
    \ {\n    result += nums[i] + \" \";\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpio4awmwb: /tmp/tmpio4awmwb.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::vector<int> nums;\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptpnxqu_o.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmptpnxqu_o.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmptpnxqu_o.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmptpnxqu_o.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmptpnxqu_o.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmptpnxqu_o.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmptpnxqu_o.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmptpnxqu_o.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmptpnxqu_o.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n    std::string\
    \ temp;\n    while(ss >> temp) {\n        if(temp == \"zero\") {\n           \
    \ v.push_back(0);\n        }\n        else if(temp == \"one\") {\n           \
    \ v.push_back(1);\n        }\n        else if(temp == \"two\") {\n           \
    \ v.push_back(2);\n        }\n        else if(temp == \"three\") {\n         \
    \   v.push_back(3);\n        }\n        else if(temp == \"four\") {\n        \
    \    v.push_back(4);\n        }\n        else if(temp == \"five\") {\n       \
    \     v.push_back(5);\n        }\n        else if(temp == \"six\") {\n       \
    \     v.push_back(6);\n        }\n        else if(temp == \"seven\") {\n     \
    \       v.push_back(7);\n        }\n        else if(temp == \"eight\") {\n   \
    \         v.push_back(8);\n        }\n        else if(temp == \"nine\") {\n  \
    \          v.push_back(9);\n        }\n    }\n    std::sort(v.begin(), v.end());\n\
    \    std::string result;\n    for(int i = 0; i < v.size(); i++) {\n        if(v[i]\
    \ == 0) {\n            result += \"zero \";\n        }\n        else if(v[i] ==\
    \ 1) {\n            result += \"one \";\n        }\n        else if(v[i] == 2)\
    \ {\n            result += \"two \";\n        }\n        else if(v[i] == 3) {\n\
    \            result += \"three \";\n        }\n        else if(v[i] == 4) {\n\
    \            result += \"four \";\n        }\n        else if(v[i] == 5) {\n \
    \           result += \"five \";\n        }\n        else if(v[i] == 6) {\n  \
    \          result += \"six \";\n        }\n        else if(v[i] == 7) {\n    \
    \        result += \"seven \";\n        }\n        else\n}\nint main() {\n   \
    \ auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n \
    \   assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three\
    \ five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpeavrb_zq.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpeavrb_zq.cpp:72:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   72 | }\n      | ^\n/tmp/tmpeavrb_zq.cpp:73:9: warning: empty\
    \ parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   73 | int main() {\n      |         ^~\n/tmp/tmpeavrb_zq.cpp:73:9: note: remove\
    \ parentheses to default-initialize a variable\n   73 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpeavrb_zq.cpp:73:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpeavrb_zq.cpp:73:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   73 | int main() {\n      |            ^\n/tmp/tmpeavrb_zq.cpp:80:2: error:\
    \ expected \u2018}\u2019 at end of input\n   80 | }\n      |  ^\n/tmp/tmpeavrb_zq.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpeavrb_zq.cpp:80:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   80 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::stringstream result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result << \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result << \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result << \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result << \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result << \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result << \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ << \"five\";\n        } else if (nums[i] == 6) {\n            result << \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result << \"seven\";\n    \
    \    } else\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_k0xlfuu.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp_k0xlfuu.cpp:58:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   58 | }\n      | ^\n/tmp/tmp_k0xlfuu.cpp:59:9: warning: empty\
    \ parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmp_k0xlfuu.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmp_k0xlfuu.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmp_k0xlfuu.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmp_k0xlfuu.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmp_k0xlfuu.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp_k0xlfuu.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqbv74fyj.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpqbv74fyj.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpqbv74fyj.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpqbv74fyj.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpqbv74fyj.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpqbv74fyj.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpqbv74fyj.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpqbv74fyj.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpqbv74fyj.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   v.push_back(0);\n        } else if (word == \"one\") {\n            v.push_back(1);\n\
    \        } else if (word == \"two\") {\n            v.push_back(2);\n        }\
    \ else if (word == \"three\") {\n            v.push_back(3);\n        } else if\
    \ (word == \"four\") {\n            v.push_back(4);\n        } else if (word ==\
    \ \"five\") {\n            v.push_back(5);\n        } else if (word == \"six\"\
    ) {\n            v.push_back(6);\n        } else if (word == \"seven\") {\n  \
    \          v.push_back(7);\n        } else if (word == \"eight\") {\n        \
    \    v.push_back(8);\n        } else if (word == \"nine\") {\n            v.push_back(9);\n\
    \        }\n    }\n    std::sort(v.begin(), v.end());\n    std::string result;\n\
    \    for (int i = 0; i < v.size(); i++) {\n        if (v[i] == 0) {\n        \
    \    result += \"zero \";\n        } else if (v[i] == 1) {\n            result\
    \ += \"one \";\n        } else if (v[i] == 2) {\n            result += \"two \"\
    ;\n        } else if (v[i] == 3) {\n            result += \"three \";\n      \
    \  } else if (v[i] == 4) {\n            result += \"four \";\n        } else if\
    \ (v[i] == 5) {\n            result += \"five \";\n        } else if (v[i] ==\
    \ 6) {\n            result += \"six \";\n        } else if (v[i] == 7) {\n   \
    \         result += \"seven \";\n        } else if (v[i] == 8) {\n           \
    \ result += \"eight \";\n        } else if (v[i] == 9) {\n           \n}\nint\
    \ main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9ja7mlq2.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp9ja7mlq2.cpp:59:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   59 | int main() {\n      |     \
    \    ^~\n/tmp/tmp9ja7mlq2.cpp:59:9: note: remove parentheses to default-initialize\
    \ a variable\n   59 | int main() {\n      |         ^~\n      |         --\n/tmp/tmp9ja7mlq2.cpp:59:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmp9ja7mlq2.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmp9ja7mlq2.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmp9ja7mlq2.cpp:37:40:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < v.size();\
    \ i++) {\n      |                                        ^\n/tmp/tmp9ja7mlq2.cpp:66:2:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmp9ja7mlq2.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp9ja7mlq2.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ temp;\n    while (ss >> temp) {\n        if (temp == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (temp == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (temp == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (temp == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (temp == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (temp == \"five\") {\n            nums.push_back(5);\n        } else if (temp\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (temp == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (temp == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (temp == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7vx1yerk.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp7vx1yerk.cpp:57:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   57 | int main() {\n      |     \
    \    ^~\n/tmp/tmp7vx1yerk.cpp:57:9: note: remove parentheses to default-initialize\
    \ a variable\n   57 | int main() {\n      |         ^~\n      |         --\n/tmp/tmp7vx1yerk.cpp:57:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmp7vx1yerk.cpp:57:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   57 | int main() {\n      |            ^\n/tmp/tmp7vx1yerk.cpp:64:2: error:\
    \ expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmp7vx1yerk.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp7vx1yerk.cpp:64:2:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmp7vx1yerk.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp7vx1yerk.cpp:64:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    std::map<std::string, int> num_map;\n    num_map[\"zero\"] = 0;\n\
    \    num_map[\"one\"] = 1;\n    num_map[\"two\"] = 2;\n    num_map[\"three\"]\
    \ = 3;\n    num_map[\"four\"] = 4;\n    num_map[\"five\"] = 5;\n    num_map[\"\
    six\"] = 6;\n    num_map[\"seven\"] = 7;\n    num_map[\"eight\"] = 8;\n    num_map[\"\
    nine\"] = 9;\n    while (ss >> word) {\n        nums.push_back(num_map[word]);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string res = \"\";\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        for (auto it = num_map.begin();\
    \ it != num_map.end(); it++) {\n            if (it->second == nums[i]) {\n   \
    \             res += it->first + \" \";\n            }\n        }\n    }\n   \
    \ return res.substr(0, res.size() - 1);\n}\nint main() {\n    auto candidate =\
    \ sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::stringstream ss2;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            ss2 << \" \";\n        }\n      \
    \  if (nums[i] == 0) {\n            ss2 << \"zero\";\n        } else if (nums[i]\
    \ == 1) {\n            ss2 << \"one\";\n        } else if (nums[i] == 2) {\n \
    \           ss2 << \"two\";\n        } else if (nums[i] == 3) {\n            ss2\
    \ << \"three\";\n        } else if (nums[i] == 4) {\n            ss2 << \"four\"\
    ;\n        } else if (nums[i] == 5) {\n            ss2 << \"five\";\n        }\
    \ else if (nums[i] == 6) {\n            ss2 << \"six\";\n        } else if (nums[i]\
    \ == 7) {\n           \n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdvz2qjhd.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpdvz2qjhd.cpp:58:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   58 | int main() {\n      |     \
    \    ^~\n/tmp/tmpdvz2qjhd.cpp:58:9: note: remove parentheses to default-initialize\
    \ a variable\n   58 | int main() {\n      |         ^~\n      |         --\n/tmp/tmpdvz2qjhd.cpp:58:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmpdvz2qjhd.cpp:58:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   58 | int main() {\n      |            ^\n/tmp/tmpdvz2qjhd.cpp:65:2: error:\
    \ expected \u2018}\u2019 at end of input\n   65 | }\n      |  ^\n/tmp/tmpdvz2qjhd.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpdvz2qjhd.cpp:65:2:\
    \ error: expected \u2018}\u2019 at end of input\n   65 | }\n      |  ^\n/tmp/tmpdvz2qjhd.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpdvz2qjhd.cpp:65:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   65 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_wqyzibd.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp_wqyzibd.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmp_wqyzibd.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmp_wqyzibd.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmp_wqyzibd.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmp_wqyzibd.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmp_wqyzibd.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmp_wqyzibd.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp_wqyzibd.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\")\n           \
    \ nums.push_back(0);\n        else if (word == \"one\")\n            nums.push_back(1);\n\
    \        else if (word == \"two\")\n            nums.push_back(2);\n        else\
    \ if (word == \"three\")\n            nums.push_back(3);\n        else if (word\
    \ == \"four\")\n            nums.push_back(4);\n        else if (word == \"five\"\
    )\n            nums.push_back(5);\n        else if (word == \"six\")\n       \
    \     nums.push_back(6);\n        else if (word == \"seven\")\n            nums.push_back(7);\n\
    \        else if (word == \"eight\")\n            nums.push_back(8);\n       \
    \ else if (word == \"nine\")\n            nums.push_back(9);\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0)\n            result += \" \";\n        if (nums[i]\
    \ == 0)\n            result += \"zero\";\n        else if (nums[i] == 1)\n   \
    \         result += \"one\";\n        else if (nums[i] == 2)\n            result\
    \ += \"two\";\n        else if (nums[i] == 3)\n            result += \"three\"\
    ;\n        else if (nums[i] == 4)\n            result += \"four\";\n        else\
    \ if (nums[i] == 5)\n            result += \"five\";\n        else if (nums[i]\
    \ == 6)\n            result += \"six\";\n        else if (nums[i] == 7)\n    \
    \        result += \"seven\";\n        else if (nums[i] == 8)\n            result\
    \ += \"eight\";\n        else if (nums[i] == 9)\n            result += \"nine\"\
    ;\n    }\n    return\n}\nint main() {\n    auto candidate = sort_numbers;\n  \
    \  assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1bq9mli5.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp1bq9mli5.cpp:61:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   61 | }\n      | ^\n/tmp/tmp1bq9mli5.cpp:60:11: error: expected\
    \ \u2018;\u2019 before \u2018}\u2019 token\n   60 |     return\n      |      \
    \     ^\n      |           ;\n   61 | }\n      | ~          \n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::stringstream result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i > 0) {\n            result << \" \";\n        }\n    \
    \    if (nums[i] == 0) {\n            result << \"zero\";\n        } else if (nums[i]\
    \ == 1) {\n            result << \"one\";\n        } else if (nums[i] == 2) {\n\
    \            result << \"two\";\n        } else if (nums[i] == 3) {\n        \
    \    result << \"three\";\n        } else if (nums[i] == 4) {\n            result\
    \ << \"four\";\n        } else if (nums[i] == 5) {\n            result << \"five\"\
    ;\n        } else if (nums[i] == 6) {\n            result << \"six\";\n      \
    \  } else if (nums[i] == 7) {\n            result << \"seven\";\n        } else\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1wdc5sbp.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp1wdc5sbp.cpp:58:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   58 | }\n      | ^\n/tmp/tmp1wdc5sbp.cpp:59:9: warning: empty\
    \ parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmp1wdc5sbp.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmp1wdc5sbp.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmp1wdc5sbp.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmp1wdc5sbp.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmp1wdc5sbp.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp1wdc5sbp.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        result += nums[i] + \" \"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmpm9sox_n3: /tmp/tmpm9sox_n3.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n    std::string\
    \ s;\n    while(ss >> s) {\n        if(s == \"zero\") v.push_back(0);\n      \
    \  else if(s == \"one\") v.push_back(1);\n        else if(s == \"two\") v.push_back(2);\n\
    \        else if(s == \"three\") v.push_back(3);\n        else if(s == \"four\"\
    ) v.push_back(4);\n        else if(s == \"five\") v.push_back(5);\n        else\
    \ if(s == \"six\") v.push_back(6);\n        else if(s == \"seven\") v.push_back(7);\n\
    \        else if(s == \"eight\") v.push_back(8);\n        else if(s == \"nine\"\
    ) v.push_back(9);\n    }\n    std::sort(v.begin(), v.end());\n    std::stringstream\
    \ ss2;\n    for(int i = 0; i < v.size(); i++) {\n        if(i != 0) ss2 << \"\
    \ \";\n        if(v[i] == 0) ss2 << \"zero\";\n        else if(v[i] == 1) ss2\
    \ << \"one\";\n        else if(v[i] == 2) ss2 << \"two\";\n        else if(v[i]\
    \ == 3) ss2 << \"three\";\n        else if(v[i] == 4) ss2 << \"four\";\n     \
    \   else if(v[i] == 5) ss2 << \"five\";\n        else if(v[i] == 6) ss2 << \"\
    six\";\n        else if(v[i] == 7) ss2 << \"seven\";\n        else if(v[i] ==\
    \ 8) ss2 << \"eight\";\n        else if(v[i] == 9) ss2 << \"nine\";\n    }\n \
    \   return ss2.str();\n}\nint main() {\n    auto candidate = sort_numbers;\n \
    \   assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) result += \" \"\
    ;\n        if (nums[i] == 0) result += \"zero\";\n        else if (nums[i] ==\
    \ 1) result += \"one\";\n        else if (nums[i] == 2) result += \"two\";\n \
    \       else if (nums[i] == 3) result += \"three\";\n        else if (nums[i]\
    \ == 4) result += \"four\";\n        else if (nums[i] == 5) result += \"five\"\
    ;\n        else if (nums[i] == 6) result += \"six\";\n        else if (nums[i]\
    \ == 7) result += \"seven\";\n        else if (nums[i] == 8) result += \"eight\"\
    ;\n        else if (nums[i] == 9) result += \"nine\";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptzo9r1s2.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmptzo9r1s2.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmptzo9r1s2.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmptzo9r1s2.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmptzo9r1s2.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmptzo9r1s2.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmptzo9r1s2.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmptzo9r1s2.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmptzo9r1s2.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdsb5y0hr.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpdsb5y0hr.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpdsb5y0hr.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpdsb5y0hr.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpdsb5y0hr.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpdsb5y0hr.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpdsb5y0hr.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpdsb5y0hr.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpdsb5y0hr.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzraq_h5r.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpzraq_h5r.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpzraq_h5r.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpzraq_h5r.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpzraq_h5r.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpzraq_h5r.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpzraq_h5r.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpzraq_h5r.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpzraq_h5r.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums = {\"zero\", \"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    std::vector<int>\
    \ nums_int;\n    std::stringstream ss(numbers);\n    std::string temp;\n    while\
    \ (ss >> temp) {\n        for (int i = 0; i < nums.size(); i++) {\n          \
    \  if (temp == nums[i]) {\n                nums_int.push_back(i);\n          \
    \  }\n        }\n    }\n    std::sort(nums_int.begin(), nums_int.end());\n   \
    \ std::string result;\n    for (int i = 0; i < nums_int.size(); i++) {\n     \
    \   result += nums[nums_int[i]] + \" \";\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpg_du6zbj: /tmp/tmpg_du6zbj.cpp:30: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ temp;\n    while (ss >> temp) {\n        if (temp == \"zero\") nums.push_back(0);\n\
    \        else if (temp == \"one\") nums.push_back(1);\n        else if (temp ==\
    \ \"two\") nums.push_back(2);\n        else if (temp == \"three\") nums.push_back(3);\n\
    \        else if (temp == \"four\") nums.push_back(4);\n        else if (temp\
    \ == \"five\") nums.push_back(5);\n        else if (temp == \"six\") nums.push_back(6);\n\
    \        else if (temp == \"seven\") nums.push_back(7);\n        else if (temp\
    \ == \"eight\") nums.push_back(8);\n        else if (temp == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string ans = \"\";\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) ans +=\
    \ \"zero \";\n        else if (nums[i] == 1) ans += \"one \";\n        else if\
    \ (nums[i] == 2) ans += \"two \";\n        else if (nums[i] == 3) ans += \"three\
    \ \";\n        else if (nums[i] == 4) ans += \"four \";\n        else if (nums[i]\
    \ == 5) ans += \"five \";\n        else if (nums[i] == 6) ans += \"six \";\n \
    \       else if (nums[i] == 7) ans += \"seven \";\n        else if (nums[i] ==\
    \ 8) ans += \"eight \";\n        else if (nums[i] == 9) ans += \"nine \";\n  \
    \  }\n    return ans.substr(0, ans.size() - 1);\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::stringstream result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result << \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result << \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result << \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result << \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result << \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result << \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ << \"five\";\n        } else if (nums[i] == 6) {\n            result << \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result << \"seven\";\n    \
    \    } else\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjhse7dzp.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpjhse7dzp.cpp:58:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   58 | }\n      | ^\n/tmp/tmpjhse7dzp.cpp:59:9: warning: empty\
    \ parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpjhse7dzp.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpjhse7dzp.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpjhse7dzp.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpjhse7dzp.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpjhse7dzp.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpjhse7dzp.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string ans = \"\";\n\
    \    for (auto i : nums) {\n        if (i == 0) ans += \"zero \";\n        else\
    \ if (i == 1) ans += \"one \";\n        else if (i == 2) ans += \"two \";\n  \
    \      else if (i == 3) ans += \"three \";\n        else if (i == 4) ans += \"\
    four \";\n        else if (i == 5) ans += \"five \";\n        else if (i == 6)\
    \ ans += \"six \";\n        else if (i == 7) ans += \"seven \";\n        else\
    \ if (i == 8) ans += \"eight \";\n        else if (i == 9) ans += \"nine \";\n\
    \    }\n    return ans.substr(0, ans.size() - 1);\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqrysub9o.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpqrysub9o.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpqrysub9o.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpqrysub9o.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpqrysub9o.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpqrysub9o.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpqrysub9o.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpqrysub9o.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpqrysub9o.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (auto i : nums) {\n        result += i + \" \";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpc_451x8s: /tmp/tmpc_451x8s.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::vector<int> nums;\n    int n;\n\
    \    while (ss >> n) {\n        nums.push_back(n);\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::stringstream result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        result << nums[i] << \" \";\n    }\n    return result.str();\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpbli5bl5y: /tmp/tmpbli5bl5y.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string res;\n    for\
    \ (int i = 0; i < nums.size(); i++) {\n        res += nums[i] + \" \";\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpkljieewg: /tmp/tmpkljieewg.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   v.push_back(0);\n        } else if (word == \"one\") {\n            v.push_back(1);\n\
    \        } else if (word == \"two\") {\n            v.push_back(2);\n        }\
    \ else if (word == \"three\") {\n            v.push_back(3);\n        } else if\
    \ (word == \"four\") {\n            v.push_back(4);\n        } else if (word ==\
    \ \"five\") {\n            v.push_back(5);\n        } else if (word == \"six\"\
    ) {\n            v.push_back(6);\n        } else if (word == \"seven\") {\n  \
    \          v.push_back(7);\n        } else if (word == \"eight\") {\n        \
    \    v.push_back(8);\n        } else if (word == \"nine\") {\n            v.push_back(9);\n\
    \        }\n    }\n    std::sort(v.begin(), v.end());\n    std::string result;\n\
    \    for (int i = 0; i < v.size(); i++) {\n        if (v[i] == 0) {\n        \
    \    result += \"zero \";\n        } else if (v[i] == 1) {\n            result\
    \ += \"one \";\n        } else if (v[i] == 2) {\n            result += \"two \"\
    ;\n        } else if (v[i] == 3) {\n            result += \"three \";\n      \
    \  } else if (v[i] == 4) {\n            result += \"four \";\n        } else if\
    \ (v[i] == 5) {\n            result += \"five \";\n        } else if (v[i] ==\
    \ 6) {\n            result += \"six \";\n        } else if (v[i] == 7) {\n   \
    \         result += \"seven \";\n        } else if (v[i] == 8) {\n           \
    \ result += \"eight \";\n        } else if (v[i] == 9) {\n           \n}\nint\
    \ main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy43t97qo.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpy43t97qo.cpp:59:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   59 | int main() {\n      |     \
    \    ^~\n/tmp/tmpy43t97qo.cpp:59:9: note: remove parentheses to default-initialize\
    \ a variable\n   59 | int main() {\n      |         ^~\n      |         --\n/tmp/tmpy43t97qo.cpp:59:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmpy43t97qo.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpy43t97qo.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpy43t97qo.cpp:37:40:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < v.size();\
    \ i++) {\n      |                                        ^\n/tmp/tmpy43t97qo.cpp:66:2:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpy43t97qo.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpy43t97qo.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc7vvuj2e.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpc7vvuj2e.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpc7vvuj2e.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpc7vvuj2e.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpc7vvuj2e.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpc7vvuj2e.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpc7vvuj2e.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpc7vvuj2e.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpc7vvuj2e.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   v.push_back(0);\n        } else if (word == \"one\") {\n            v.push_back(1);\n\
    \        } else if (word == \"two\") {\n            v.push_back(2);\n        }\
    \ else if (word == \"three\") {\n            v.push_back(3);\n        } else if\
    \ (word == \"four\") {\n            v.push_back(4);\n        } else if (word ==\
    \ \"five\") {\n            v.push_back(5);\n        } else if (word == \"six\"\
    ) {\n            v.push_back(6);\n        } else if (word == \"seven\") {\n  \
    \          v.push_back(7);\n        } else if (word == \"eight\") {\n        \
    \    v.push_back(8);\n        } else if (word == \"nine\") {\n            v.push_back(9);\n\
    \        }\n    }\n    std::sort(v.begin(), v.end());\n    std::string result;\n\
    \    for (int i = 0; i < v.size(); i++) {\n        if (v[i] == 0) {\n        \
    \    result += \"zero \";\n        } else if (v[i] == 1) {\n            result\
    \ += \"one \";\n        } else if (v[i] == 2) {\n            result += \"two \"\
    ;\n        } else if (v[i] == 3) {\n            result += \"three \";\n      \
    \  } else if (v[i] == 4) {\n            result += \"four \";\n        } else if\
    \ (v[i] == 5) {\n            result += \"five \";\n        } else if (v[i] ==\
    \ 6) {\n            result += \"six \";\n        } else if (v[i] == 7) {\n   \
    \         result += \"seven \";\n        } else if (v[i] == 8) {\n           \
    \ result += \"eight \";\n        } else if (v[i] == 9) {\n           \n}\nint\
    \ main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpckrqv6ef.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpckrqv6ef.cpp:59:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   59 | int main() {\n      |     \
    \    ^~\n/tmp/tmpckrqv6ef.cpp:59:9: note: remove parentheses to default-initialize\
    \ a variable\n   59 | int main() {\n      |         ^~\n      |         --\n/tmp/tmpckrqv6ef.cpp:59:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmpckrqv6ef.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpckrqv6ef.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpckrqv6ef.cpp:37:40:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < v.size();\
    \ i++) {\n      |                                        ^\n/tmp/tmpckrqv6ef.cpp:66:2:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpckrqv6ef.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpckrqv6ef.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i > 0) {\n            result += \" \";\n        }\n    \
    \    if (nums[i] == 0) {\n            result += \"zero\";\n        } else if (nums[i]\
    \ == 1) {\n            result += \"one\";\n        } else if (nums[i] == 2) {\n\
    \            result += \"two\";\n        } else if (nums[i] == 3) {\n        \
    \    result += \"three\";\n        } else if (nums[i] == 4) {\n            result\
    \ += \"four\";\n        } else if (nums[i] == 5) {\n            result += \"five\"\
    ;\n        } else if (nums[i] == 6) {\n            result += \"six\";\n      \
    \  } else if (nums[i] == 7) {\n            result += \"seven\";\n        } else\
    \ if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1bzlgo8v.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp1bzlgo8v.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmp1bzlgo8v.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmp1bzlgo8v.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmp1bzlgo8v.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmp1bzlgo8v.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmp1bzlgo8v.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmp1bzlgo8v.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp1bzlgo8v.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc84ci1uz.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpc84ci1uz.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpc84ci1uz.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpc84ci1uz.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpc84ci1uz.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpc84ci1uz.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpc84ci1uz.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpc84ci1uz.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpc84ci1uz.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2f3g_zle.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp2f3g_zle.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmp2f3g_zle.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmp2f3g_zle.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmp2f3g_zle.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmp2f3g_zle.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmp2f3g_zle.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmp2f3g_zle.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp2f3g_zle.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        nums.push_back(word);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (auto i : nums) {\n        result += i + \" \";\n    }\n    return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = sort_numbers;\n \
    \   assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmp3ka1sb86: /tmp/tmp3ka1sb86.cpp:26: int main(): Assertion `candidate((\"\
    three five nine\")) == (\"three five nine\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxx0cy6rn.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpxx0cy6rn.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpxx0cy6rn.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpxx0cy6rn.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpxx0cy6rn.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpxx0cy6rn.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpxx0cy6rn.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpxx0cy6rn.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpxx0cy6rn.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tstd::vector<int> nums;\n\tstd::stringstream ss(numbers);\n\tstd::string\
    \ word;\n\twhile (ss >> word) {\n\t\tif (word == \"zero\") nums.push_back(0);\n\
    \t\telse if (word == \"one\") nums.push_back(1);\n\t\telse if (word == \"two\"\
    ) nums.push_back(2);\n\t\telse if (word == \"three\") nums.push_back(3);\n\t\t\
    else if (word == \"four\") nums.push_back(4);\n\t\telse if (word == \"five\")\
    \ nums.push_back(5);\n\t\telse if (word == \"six\") nums.push_back(6);\n\t\telse\
    \ if (word == \"seven\") nums.push_back(7);\n\t\telse if (word == \"eight\") nums.push_back(8);\n\
    \t\telse if (word == \"nine\") nums.push_back(9);\n\t}\n\tstd::sort(nums.begin(),\
    \ nums.end());\n\tstd::string res;\n\tfor (int i = 0; i < nums.size(); i++) {\n\
    \t\tif (i != 0) res += \" \";\n\t\tif (nums[i] == 0) res += \"zero\";\n\t\telse\
    \ if (nums[i] == 1) res += \"one\";\n\t\telse if (nums[i] == 2) res += \"two\"\
    ;\n\t\telse if (nums[i] == 3) res += \"three\";\n\t\telse if (nums[i] == 4) res\
    \ += \"four\";\n\t\telse if (nums[i] == 5) res += \"five\";\n\t\telse if (nums[i]\
    \ == 6) res += \"six\";\n\t\telse if (nums[i] == 7) res += \"seven\";\n\t\telse\
    \ if (nums[i] == 8) res += \"eight\";\n\t\telse if (nums[i] == 9) res += \"nine\"\
    ;\n\t}\n\treturn res;\n}\nint main() {\n    auto candidate = sort_numbers;\n \
    \   assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::map<std::string, int> num_map = {{\"zero\", 0}, {\"one\", 1}, {\"\
    two\", 2}, {\"three\", 3}, {\"four\", 4}, {\"five\", 5}, {\"six\", 6}, {\"seven\"\
    , 7}, {\"eight\", 8}, {\"nine\", 9}};\n    std::vector<int> num_vec;\n    std::stringstream\
    \ ss(numbers);\n    std::string temp;\n    while (ss >> temp) {\n        num_vec.push_back(num_map[temp]);\n\
    \    }\n    std::sort(num_vec.begin(), num_vec.end());\n    std::string result;\n\
    \    for (int i = 0; i < num_vec.size(); i++) {\n        for (auto it = num_map.begin();\
    \ it != num_map.end(); it++) {\n            if (it->second == num_vec[i]) {\n\
    \                result += it->first + \" \";\n            }\n        }\n    }\n\
    \    return result.substr(0, result.size() - 1);\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tstd::vector<int> nums;\n\tstd::stringstream ss(numbers);\n\tstd::string\
    \ word;\n\twhile (ss >> word) {\n\t\tif (word == \"zero\") {\n\t\t\tnums.push_back(0);\n\
    \t\t}\n\t\telse if (word == \"one\") {\n\t\t\tnums.push_back(1);\n\t\t}\n\t\t\
    else if (word == \"two\") {\n\t\t\tnums.push_back(2);\n\t\t}\n\t\telse if (word\
    \ == \"three\") {\n\t\t\tnums.push_back(3);\n\t\t}\n\t\telse if (word == \"four\"\
    ) {\n\t\t\tnums.push_back(4);\n\t\t}\n\t\telse if (word == \"five\") {\n\t\t\t\
    nums.push_back(5);\n\t\t}\n\t\telse if (word == \"six\") {\n\t\t\tnums.push_back(6);\n\
    \t\t}\n\t\telse if (word == \"seven\") {\n\t\t\tnums.push_back(7);\n\t\t}\n\t\t\
    else if (word == \"eight\") {\n\t\t\tnums.push_back(8);\n\t\t}\n\t\telse if (word\
    \ == \"nine\") {\n\t\t\tnums.push_back(9);\n\t\t}\n\t}\n\tstd::sort(nums.begin(),\
    \ nums.end());\n\tstd::string result;\n\tfor (int i = 0; i < nums.size(); i++)\
    \ {\n\t\tif (nums[i] == 0) {\n\t\t\tresult += \"zero \";\n\t\t}\n\t\telse if (nums[i]\
    \ == 1) {\n\t\t\tresult += \"one \";\n\t\t}\n\t\telse if (nums[i] == 2) {\n\t\t\
    \tresult += \"two \";\n\t\t}\n\t\telse if (nums[i] == 3) {\n\t\t\tresult += \"\
    three \";\n\t\t}\n\t\telse if (nums[i] == 4) {\n\t\t\tresult += \"four \";\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu4z2nrhn.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpu4z2nrhn.cpp:62:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   62 | int main() {\n      |     \
    \    ^~\n/tmp/tmpu4z2nrhn.cpp:62:9: note: remove parentheses to default-initialize\
    \ a variable\n   62 | int main() {\n      |         ^~\n      |         --\n/tmp/tmpu4z2nrhn.cpp:62:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmpu4z2nrhn.cpp:62:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   62 | int main() {\n      |            ^\n/tmp/tmpu4z2nrhn.cpp:69:2: error:\
    \ expected \u2018}\u2019 at end of input\n   69 | }\n      |  ^\n/tmp/tmpu4z2nrhn.cpp:46:47:\
    \ note: to match this \u2018{\u2019\n   46 |         for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                               ^\n/tmp/tmpu4z2nrhn.cpp:69:2:\
    \ error: expected \u2018}\u2019 at end of input\n   69 | }\n      |  ^\n/tmp/tmpu4z2nrhn.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpu4z2nrhn.cpp:69:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   69 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string num;\n    while (ss >> num) {\n        nums.push_back(num);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (auto num : nums) {\n        result += num + \" \";\n    }\n    return\
    \ result.substr(0, result.size() - 1);\n}\nint main() {\n    auto candidate =\
    \ sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmpfbswzq6h: /tmp/tmpfbswzq6h.cpp:26: int main(): Assertion `candidate((\"\
    three five nine\")) == (\"three five nine\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ temp;\n    while (ss >> temp) {\n        if (temp == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (temp == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (temp == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (temp == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (temp == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (temp == \"five\") {\n            nums.push_back(5);\n        } else if (temp\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (temp == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (temp == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (temp == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp98i7y8il.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp98i7y8il.cpp:57:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   57 | int main() {\n      |     \
    \    ^~\n/tmp/tmp98i7y8il.cpp:57:9: note: remove parentheses to default-initialize\
    \ a variable\n   57 | int main() {\n      |         ^~\n      |         --\n/tmp/tmp98i7y8il.cpp:57:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmp98i7y8il.cpp:57:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   57 | int main() {\n      |            ^\n/tmp/tmp98i7y8il.cpp:64:2: error:\
    \ expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmp98i7y8il.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp98i7y8il.cpp:64:2:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmp98i7y8il.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp98i7y8il.cpp:64:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::stringstream result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result << \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result << \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result << \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result << \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result << \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result << \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ << \"five\";\n        } else if (nums[i] == 6) {\n            result << \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result << \"seven\";\n    \
    \    } else\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx6_y64sp.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpx6_y64sp.cpp:58:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   58 | }\n      | ^\n/tmp/tmpx6_y64sp.cpp:59:9: warning: empty\
    \ parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpx6_y64sp.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpx6_y64sp.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpx6_y64sp.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpx6_y64sp.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpx6_y64sp.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpx6_y64sp.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tstd::vector<std::string> num_list;\n\tstd::stringstream ss(numbers);\n\t\
    std::string temp;\n\twhile (ss >> temp) {\n\t\tnum_list.push_back(temp);\n\t}\n\
    \tstd::sort(num_list.begin(), num_list.end());\n\tstd::string result;\n\tfor (int\
    \ i = 0; i < num_list.size(); i++) {\n\t\tresult += num_list[i] + \" \";\n\t}\n\
    \treturn result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmppldkitqx: /tmp/tmppldkitqx.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string temp;\n    std::vector<std::string>\
    \ v;\n    while(ss >> temp)\n        v.push_back(temp);\n    std::sort(v.begin(),\
    \ v.end());\n    std::string result;\n    for(auto i : v)\n        result += i\
    \ + \" \";\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmpt5op9rjn: /tmp/tmpt5op9rjn.cpp:23: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ temp;\n    while (ss >> temp) {\n        if (temp == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (temp == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (temp == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (temp == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (temp == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (temp == \"five\") {\n            nums.push_back(5);\n        } else if (temp\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (temp == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (temp == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (temp == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9v_6_un_.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp9v_6_un_.cpp:57:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   57 | int main() {\n      |     \
    \    ^~\n/tmp/tmp9v_6_un_.cpp:57:9: note: remove parentheses to default-initialize\
    \ a variable\n   57 | int main() {\n      |         ^~\n      |         --\n/tmp/tmp9v_6_un_.cpp:57:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmp9v_6_un_.cpp:57:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   57 | int main() {\n      |            ^\n/tmp/tmp9v_6_un_.cpp:64:2: error:\
    \ expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmp9v_6_un_.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp9v_6_un_.cpp:64:2:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      |  ^\n/tmp/tmp9v_6_un_.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp9v_6_un_.cpp:64:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwl8k7njx.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpwl8k7njx.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpwl8k7njx.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpwl8k7njx.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpwl8k7njx.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpwl8k7njx.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpwl8k7njx.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpwl8k7njx.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpwl8k7njx.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqshi2u2d.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpqshi2u2d.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpqshi2u2d.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpqshi2u2d.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpqshi2u2d.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpqshi2u2d.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpqshi2u2d.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpqshi2u2d.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpqshi2u2d.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgt6fsxte.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpgt6fsxte.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpgt6fsxte.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpgt6fsxte.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpgt6fsxte.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpgt6fsxte.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpgt6fsxte.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpgt6fsxte.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpgt6fsxte.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     switch (nums[i]) {\n            case 0:\n                result += \"zero\"\
    ;\n                break;\n            case 1:\n                result += \"one\"\
    ;\n                break;\n            case 2:\n                result += \"two\"\
    ;\n                break;\n            case 3:\n                result += \"three\"\
    ;\n                break;\n            case 4:\n                result += \"four\"\
    ;\n                break;\n            case 5:\n                result += \"five\"\
    ;\n                break;\n            case 6:\n                result += \"six\"\
    ;\n                break;\n            case 7:\n                result += \"seven\"\
    ;\n                break;\n            case 8:\n                result += \"eight\"\
    ;\n                break;\n            case 9:\n                result += \"nine\"\
    ;\n                break;\n        }\n    }\n    return\n}\nint main() {\n   \
    \ auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n \
    \   assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three\
    \ five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6fps5ako.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp6fps5ako.cpp:75:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   75 | }\n      | ^\n/tmp/tmp6fps5ako.cpp:74:11: error: expected\
    \ \u2018;\u2019 before \u2018}\u2019 token\n   74 |     return\n      |      \
    \     ^\n      |           ;\n   75 | }\n      | ~          \n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjkwjq2sn.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpjkwjq2sn.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpjkwjq2sn.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpjkwjq2sn.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpjkwjq2sn.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpjkwjq2sn.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpjkwjq2sn.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpjkwjq2sn.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpjkwjq2sn.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::stringstream result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result << \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result << \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result << \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result << \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result << \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result << \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ << \"five\";\n        } else if (nums[i] == 6) {\n            result << \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result << \"seven\";\n    \
    \    } else\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfv9x423p.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpfv9x423p.cpp:58:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   58 | }\n      | ^\n/tmp/tmpfv9x423p.cpp:59:9: warning: empty\
    \ parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpfv9x423p.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpfv9x423p.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpfv9x423p.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpfv9x423p.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpfv9x423p.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpfv9x423p.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsjwmiizl.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpsjwmiizl.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpsjwmiizl.cpp:59:9: warning:\
    \ empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   59 | int main() {\n      |         ^~\n/tmp/tmpsjwmiizl.cpp:59:9: note: remove\
    \ parentheses to default-initialize a variable\n   59 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpsjwmiizl.cpp:59:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpsjwmiizl.cpp:59:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   59 | int main() {\n      |            ^\n/tmp/tmpsjwmiizl.cpp:66:2: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      |  ^\n/tmp/tmpsjwmiizl.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpsjwmiizl.cpp:66:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string temp;\n    std::vector<std::string>\
    \ v;\n    while (ss >> temp) {\n        v.push_back(temp);\n    }\n    std::sort(v.begin(),\
    \ v.end());\n    std::string result;\n    for (auto i : v) {\n        result +=\
    \ i + \" \";\n    }\n    return result.substr(0, result.size() - 1);\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpdmzd0yo8: /tmp/tmpdmzd0yo8.cpp:26: int main(): Assertion `candidate((\"\
    three five nine\")) == (\"three five nine\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string ret = \"\";\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            ret += \"zero \";\n       \
    \ } else if (nums[i] == 1) {\n            ret += \"one \";\n        } else if\
    \ (nums[i] == 2) {\n            ret += \"two \";\n        } else if (nums[i] ==\
    \ 3) {\n            ret += \"three \";\n        } else if (nums[i] == 4) {\n \
    \           ret += \"four \";\n        } else if (nums[i] == 5) {\n          \
    \  ret += \"five \";\n        } else if (nums[i] == 6) {\n            ret += \"\
    six \";\n        } else if (nums[i] == 7) {\n            ret += \"seven \";\n\
    \        } else if (nums[i] == 8)\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp44_3jilh.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp44_3jilh.cpp:55:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   55 | }\n      | ^\n/tmp/tmp44_3jilh.cpp:56:9: warning: empty\
    \ parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   56 | int main() {\n      |         ^~\n/tmp/tmp44_3jilh.cpp:56:9: note: remove\
    \ parentheses to default-initialize a variable\n   56 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmp44_3jilh.cpp:56:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmp44_3jilh.cpp:56:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   56 | int main() {\n      |            ^\n/tmp/tmp44_3jilh.cpp:63:2: error:\
    \ expected \u2018}\u2019 at end of input\n   63 | }\n      |  ^\n/tmp/tmp44_3jilh.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp44_3jilh.cpp:63:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   63 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string res = \"\";\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        res += nums[i] + \" \";\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "tmpcw1dwv0i: /tmp/tmpcw1dwv0i.cpp:25: int main(): Assertion `candidate((\"\
    three\")) == (\"three\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ token;\n    while (std::getline(ss, token, ' ')) {\n        if (token == \"\
    zero\") {\n            nums.push_back(0);\n        } else if (token == \"one\"\
    ) {\n            nums.push_back(1);\n        } else if (token == \"two\") {\n\
    \            nums.push_back(2);\n        } else if (token == \"three\") {\n  \
    \          nums.push_back(3);\n        } else if (token == \"four\") {\n     \
    \       nums.push_back(4);\n        } else if (token == \"five\") {\n        \
    \    nums.push_back(5);\n        } else if (token == \"six\") {\n            nums.push_back(6);\n\
    \        } else if (token == \"seven\") {\n            nums.push_back(7);\n  \
    \      } else if (token == \"eight\") {\n            nums.push_back(8);\n    \
    \    } else if (token == \"nine\") {\n            nums.push_back(9);\n       \
    \ }\n    }\n    std::sort(nums.begin(), nums.end());\n    std::stringstream result;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) {\n        \
    \    result << \" \";\n        }\n        if (nums[i] == 0) {\n            result\
    \ << \"zero\";\n        } else if (nums[i] == 1) {\n            result << \"one\"\
    ;\n        } else if (nums[i] == 2) {\n            result << \"two\";\n      \
    \  } else if (nums[i] == 3) {\n            result << \"three\";\n        } else\
    \ if (nums[i] == 4) {\n            result << \"four\";\n        } else if (nums[i]\
    \ == 5) {\n            result << \"five\";\n        } else if (nums[i] == 6) {\n\
    \            result << \"six\";\n        } else if (nums[i] == 7) {\n        \
    \    result\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyu7iqo8g.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpyu7iqo8g.cpp:56:19: error: expected \u2018;\u2019 before \u2018}\u2019\
    \ token\n   56 |             result\n      |                   ^\n      |    \
    \               ;\n   57 | }\n      | ~                  \n/tmp/tmpyu7iqo8g.cpp:58:9:\
    \ warning: empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   58 | int main() {\n      |         ^~\n/tmp/tmpyu7iqo8g.cpp:58:9: note: remove\
    \ parentheses to default-initialize a variable\n   58 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpyu7iqo8g.cpp:58:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpyu7iqo8g.cpp:58:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   58 | int main() {\n      |            ^\n/tmp/tmpyu7iqo8g.cpp:65:2: error:\
    \ expected \u2018}\u2019 at end of input\n   65 | }\n      |  ^\n/tmp/tmpyu7iqo8g.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpyu7iqo8g.cpp:65:2:\
    \ error: expected \u2018}\u2019 at end of input\n   65 | }\n      |  ^\n/tmp/tmpyu7iqo8g.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpyu7iqo8g.cpp:65:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   65 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) result += \" \"\
    ;\n        if (nums[i] == 0) result += \"zero\";\n        else if (nums[i] ==\
    \ 1) result += \"one\";\n        else if (nums[i] == 2) result += \"two\";\n \
    \       else if (nums[i] == 3) result += \"three\";\n        else if (nums[i]\
    \ == 4) result += \"four\";\n        else if (nums[i] == 5) result += \"five\"\
    ;\n        else if (nums[i] == 6) result += \"six\";\n        else if (nums[i]\
    \ == 7) result += \"seven\";\n        else if (nums[i] == 8) result += \"eight\"\
    ;\n        else if (nums[i] == 9) result += \"nine\";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tstd::vector<int> nums;\n\tstd::stringstream ss(numbers);\n\tstd::string\
    \ word;\n\twhile (ss >> word) {\n\t\tif (word == \"zero\") {\n\t\t\tnums.push_back(0);\n\
    \t\t}\n\t\telse if (word == \"one\") {\n\t\t\tnums.push_back(1);\n\t\t}\n\t\t\
    else if (word == \"two\") {\n\t\t\tnums.push_back(2);\n\t\t}\n\t\telse if (word\
    \ == \"three\") {\n\t\t\tnums.push_back(3);\n\t\t}\n\t\telse if (word == \"four\"\
    ) {\n\t\t\tnums.push_back(4);\n\t\t}\n\t\telse if (word == \"five\") {\n\t\t\t\
    nums.push_back(5);\n\t\t}\n\t\telse if (word == \"six\") {\n\t\t\tnums.push_back(6);\n\
    \t\t}\n\t\telse if (word == \"seven\") {\n\t\t\tnums.push_back(7);\n\t\t}\n\t\t\
    else if (word == \"eight\") {\n\t\t\tnums.push_back(8);\n\t\t}\n\t\telse if (word\
    \ == \"nine\") {\n\t\t\tnums.push_back(9);\n\t\t}\n\t}\n\tstd::sort(nums.begin(),\
    \ nums.end());\n\tstd::string result;\n\tfor (int i = 0; i < nums.size(); i++)\
    \ {\n\t\tif (nums[i] == 0) {\n\t\t\tresult += \"zero \";\n\t\t}\n\t\telse if (nums[i]\
    \ == 1) {\n\t\t\tresult += \"one \";\n\t\t}\n\t\telse if (nums[i] == 2) {\n\t\t\
    \tresult += \"two \";\n\t\t}\n\t\telse if (nums[i] == 3) {\n\t\t\tresult += \"\
    three \";\n\t\t}\n\t\telse if (nums[i] == 4) {\n\t\t\tresult += \"four \";\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_w93s7hi.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp_w93s7hi.cpp:62:9: warning: empty parentheses were disambiguated as\
    \ a function declaration [-Wvexing-parse]\n   62 | int main() {\n      |     \
    \    ^~\n/tmp/tmp_w93s7hi.cpp:62:9: note: remove parentheses to default-initialize\
    \ a variable\n   62 | int main() {\n      |         ^~\n      |         --\n/tmp/tmp_w93s7hi.cpp:62:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmp_w93s7hi.cpp:62:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   62 | int main() {\n      |            ^\n/tmp/tmp_w93s7hi.cpp:69:2: error:\
    \ expected \u2018}\u2019 at end of input\n   69 | }\n      |  ^\n/tmp/tmp_w93s7hi.cpp:46:47:\
    \ note: to match this \u2018{\u2019\n   46 |         for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                               ^\n/tmp/tmp_w93s7hi.cpp:69:2:\
    \ error: expected \u2018}\u2019 at end of input\n   69 | }\n      |  ^\n/tmp/tmp_w93s7hi.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp_w93s7hi.cpp:69:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   69 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::stringstream result;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) result << \"\
    \ \";\n        if (nums[i] == 0) result << \"zero\";\n        else if (nums[i]\
    \ == 1) result << \"one\";\n        else if (nums[i] == 2) result << \"two\";\n\
    \        else if (nums[i] == 3) result << \"three\";\n        else if (nums[i]\
    \ == 4) result << \"four\";\n        else if (nums[i] == 5) result << \"five\"\
    ;\n        else if (nums[i] == 6) result << \"six\";\n        else if (nums[i]\
    \ == 7) result << \"seven\";\n        else if (nums[i] == 8) result << \"eight\"\
    ;\n        else if (nums[i] == 9) result << \"nine\";\n    }\n    return result.str();\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
