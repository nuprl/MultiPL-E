name: HumanEval_46_fib4
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long a = 0, b = 0, c = 2, d = 0, e;\n    if (n\
    \ == 0)\n        return a;\n    else if (n == 1)\n        return b;\n    else\
    \ if (n == 2)\n        return c;\n    else if (n == 3)\n        return d;\n  \
    \  for (int i = 4; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n\
    \        b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n}\nint\
    \ main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n \
    \   assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n \
    \   assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    } else if\
    \ (n == 1) {\n        return 0;\n    } else if (n == 2) {\n        return 2;\n\
    \    } else if (n == 3) {\n        return 0;\n    } else {\n        long fib4_n_1\
    \ = 0;\n        long fib4_n_2 = 0;\n        long fib4_n_3 = 2;\n        long fib4_n_4\
    \ = 0;\n        long fib4_n = 0;\n        for (int i = 4; i <= n; i++) {\n   \
    \         fib4_n = fib4_n_1 + fib4_n_2 + fib4_n_3 + fib4_n_4;\n            fib4_n_1\
    \ = fib4_n_2;\n            fib4_n_2 = fib4_n_3;\n            fib4_n_3 = fib4_n_4;\n\
    \            fib4_n_4 = fib4_n;\n        }\n        return fib4_n;\n    }\n}\n\
    int main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tif (n == 0) {\n\t\treturn 0;\n\t}\n\tif (n == 1)\
    \ {\n\t\treturn 0;\n\t}\n\tif (n == 2) {\n\t\treturn 2;\n\t}\n\tif (n == 3) {\n\
    \t\treturn 0;\n\t}\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 2;\n\tlong d = 0;\n\
    \tlong temp;\n\tfor (int i = 4; i <= n; i++) {\n\t\ttemp = a + b + c + d;\n\t\t\
    a = b;\n\t\tb = c;\n\t\tc = d;\n\t\td = temp;\n\t}\n\treturn d;\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmp077z0gdz: /tmp/tmp077z0gdz.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long e = a +\
    \ b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n\
    \    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpuchhyr09: /tmp/tmpuchhyr09.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0, e = 0;\n    for (int i = 4; i <= n; i++) {\n        e = a\
    \ + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n\
    \    }\n    return e;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmpqlmf4wd8: /tmp/tmpqlmf4wd8.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmphcq8_lvh: /tmp/tmphcq8_lvh.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0, e;\n    for (int i = 4; i <= n; i++) {\n        e = a + b\
    \ + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n \
    \   }\n    return e;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long a = 0, b = 0, c = 2, d = 0, e;\n    if (n\
    \ == 0)\n        return a;\n    else if (n == 1)\n        return b;\n    else\
    \ if (n == 2)\n        return c;\n    else if (n == 3)\n        return d;\n  \
    \  for (int i = 4; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n\
    \        b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n}\nint\
    \ main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n \
    \   assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n \
    \   assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if\
    \ (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n\
    \    }\n    if (n == 3) {\n        return 0;\n    }\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    for (int i = 4; i <= n; i++) {\n\
    \        long temp = a + b + c + d;\n        a = b;\n        b = c;\n        c\
    \ = d;\n        d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmpzn5oc01d: /tmp/tmpzn5oc01d.cpp:44: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long a = 0, b = 0, c = 2, d = 0, e;\n    if (n\
    \ == 0)\n        return a;\n    else if (n == 1)\n        return b;\n    else\
    \ if (n == 2)\n        return c;\n    else if (n == 3)\n        return d;\n  \
    \  for (int i = 4; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n\
    \        b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n}\nint\
    \ main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n \
    \   assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n \
    \   assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  assert(n >= 0);\n  if (n == 0) return 0;\n  if (n\
    \ == 1) return 0;\n  if (n == 2) return 2;\n  if (n == 3) return 0;\n  long a\
    \ = 0, b = 0, c = 2, d = 0, e = 0;\n  for (long i = 4; i <= n; i++) {\n    e =\
    \ a + b + c + d;\n    a = b;\n    b = c;\n    c = d;\n    d = e;\n  }\n  return\
    \ e;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) ==\
    \ (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmp51_0mj8o: /tmp/tmp51_0mj8o.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if\
    \ (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n\
    \    }\n    if (n == 3) {\n        return 0;\n    }\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    for (int i = 4; i <= n; i++) {\n\
    \        long temp = a + b + c + d;\n        a = b;\n        b = c;\n        c\
    \ = d;\n        d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmplmd_sdrx: /tmp/tmplmd_sdrx.cpp:44: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0, e = 0;\n    for (int i = 4; i <= n; i++) {\n        e = a\
    \ + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n\
    \    }\n    return e;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tif (n == 0) {\n\t\treturn 0;\n\t}\n\tif (n == 1)\
    \ {\n\t\treturn 0;\n\t}\n\tif (n == 2) {\n\t\treturn 2;\n\t}\n\tif (n == 3) {\n\
    \t\treturn 0;\n\t}\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 2;\n\tlong d = 0;\n\
    \tlong e = 0;\n\tfor (int i = 4; i <= n; i++) {\n\t\te = a + b + c + d;\n\t\t\
    a = b;\n\t\tb = c;\n\t\tc = d;\n\t\td = e;\n\t}\n\treturn e;\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmpr9yd2dnp: /tmp/tmpr9yd2dnp.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        d = a + b +\
    \ c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\n\
    int main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpfy9250m4: /tmp/tmpfy9250m4.cpp:33: int main(): Assertion `candidate((8))\
    \ == (28)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmpq6k5cjhj: /tmp/tmpq6k5cjhj.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    // your code here\n    if(n==0)\n        return\
    \ 0;\n    if(n==1)\n        return 0;\n    if(n==2)\n        return 2;\n    if(n==3)\n\
    \        return 0;\n    long a=0,b=0,c=2,d=0,e=0;\n    for(int i=4;i<=n;i++)\n\
    \    {\n        e=a+b+c+d;\n        a=b;\n        b=c;\n        c=d;\n       \
    \ d=e;\n    }\n    return e;\n}\nint main() {\n    auto candidate = fib4;\n  \
    \  assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10))\
    \ == (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmpzsi1xmlh: /tmp/tmpzsi1xmlh.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if\
    \ (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n\
    \    }\n    if (n == 3) {\n        return 0;\n    }\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    for (int i =\
    \ 4; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n\
    \        c = d;\n        d = e;\n    }\n    return e;\n}\nint main() {\n    auto\
    \ candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmpi3hj82pu: /tmp/tmpi3hj82pu.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmp7mhd8v7s: /tmp/tmp7mhd8v7s.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n < 4) {\n        return n;\n    }\n    long\
    \ a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    for (int i =\
    \ 4; i <= n; i++) {\n        d = a + b + c;\n        a = b;\n        b = c;\n\
    \        c = d;\n    }\n    return d;\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpglz3fcn3: /tmp/tmpglz3fcn3.cpp:35: int main(): Assertion `candidate((8))\
    \ == (28)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if\
    \ (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n\
    \    }\n    if (n == 3) {\n        return 0;\n    }\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    for (int i = 4; i <= n; i++) {\n\
    \        long temp = a + b + c + d;\n        a = b;\n        b = c;\n        c\
    \ = d;\n        d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmp_txtiwz_: /tmp/tmp_txtiwz_.cpp:44: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if\
    \ (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n\
    \    }\n    if (n == 3) {\n        return 0;\n    }\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    for (int i = 4; i <= n; i++) {\n\
    \        long temp = a + b + c + d;\n        a = b;\n        b = c;\n        c\
    \ = d;\n        d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmppdzh9mn0: /tmp/tmppdzh9mn0.cpp:44: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    // your code here\n    long a = 0, b = 0, c =\
    \ 2, d = 0, e = 0;\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n   \
    \ if (n == 2) return 2;\n    if (n == 3) return 0;\n    for (int i = 4; i <= n;\
    \ i++) {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n       \
    \ c = d;\n        d = e;\n    }\n    return e;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmpomezedva: /tmp/tmpomezedva.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tlong a = 0, b = 0, c = 2, d = 0, e = 0;\n\tif (n\
    \ == 0) return 0;\n\tif (n == 1) return 0;\n\tif (n == 2) return 2;\n\tif (n ==\
    \ 3) return 0;\n\tfor (int i = 4; i <= n; i++) {\n\t\te = a + b + c + d;\n\t\t\
    a = b;\n\t\tb = c;\n\t\tc = d;\n\t\td = e;\n\t}\n\treturn e;\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  // your code here\n  if(n==0) return 0;\n  if(n==1)\
    \ return 0;\n  if(n==2) return 2;\n  if(n==3) return 0;\n  long a=0,b=0,c=2,d=0,e;\n\
    \  for(int i=4;i<=n;i++){\n    e=a+b+c+d;\n    a=b;\n    b=c;\n    c=d;\n    d=e;\n\
    \  }\n  return e;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmpom2cf1w7: /tmp/tmpom2cf1w7.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long a = 0, b = 0, c = 2, d = 0, e = 0;\n    for\
    \ (int i = 4; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n   \
    \     b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  // your code here\n  if(n==0)\n    return 0;\n \
    \ if(n==1)\n    return 0;\n  if(n==2)\n    return 2;\n  if(n==3)\n    return 0;\n\
    \  long a=0,b=0,c=2,d=0,e;\n  for(int i=4;i<=n;i++)\n  {\n    e=a+b+c+d;\n   \
    \ a=b;\n    b=c;\n    c=d;\n    d=e;\n  }\n  return e;\n}\nint main() {\n    auto\
    \ candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if\
    \ (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n\
    \    }\n    if (n == 3) {\n        return 0;\n    }\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    for (int i =\
    \ 4; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n\
    \        c = d;\n        d = e;\n    }\n    return e;\n}\nint main() {\n    auto\
    \ candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmpx36v7qxu: /tmp/tmpx36v7qxu.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  if (n == 0) {\n    return 0;\n  }\n  if (n == 1)\
    \ {\n    return 0;\n  }\n  if (n == 2) {\n    return 2;\n  }\n  if (n == 3) {\n\
    \    return 0;\n  }\n  long a = 0;\n  long b = 0;\n  long c = 2;\n  long d = 0;\n\
    \  long e = 0;\n  for (int i = 4; i <= n; i++) {\n    e = a + b + c + d;\n   \
    \ a = b;\n    b = c;\n    c = d;\n    d = e;\n  }\n  return e;\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmprexih74w: /tmp/tmprexih74w.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmp313i0a_e: /tmp/tmp313i0a_e.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmpjdulpgto: /tmp/tmpjdulpgto.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmplo90j6pj: /tmp/tmplo90j6pj.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tlong a = 0, b = 0, c = 2, d = 0, e;\n\tif (n ==\
    \ 0)\n\t\treturn a;\n\tif (n == 1)\n\t\treturn b;\n\tif (n == 2)\n\t\treturn c;\n\
    \tif (n == 3)\n\t\treturn d;\n\tfor (int i = 4; i <= n; i++) {\n\t\te = a + b\
    \ + c + d;\n\t\ta = b;\n\t\tb = c;\n\t\tc = d;\n\t\td = e;\n\t}\n\treturn e;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmp6i_glrjg: /tmp/tmp6i_glrjg.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmpnjkd8e6b: /tmp/tmpnjkd8e6b.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if\
    \ (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n\
    \    }\n    if (n == 3) {\n        return 0;\n    }\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    for (int i = 4; i <= n; i++) {\n\
    \        long temp = a + b + c + d;\n        a = b;\n        b = c;\n        c\
    \ = d;\n        d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmpxsutgtqw: /tmp/tmpxsutgtqw.cpp:44: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    // your code here\n    if(n==0)\n        return\
    \ 0;\n    if(n==1)\n        return 0;\n    if(n==2)\n        return 2;\n    if(n==3)\n\
    \        return 0;\n    long a=0,b=0,c=2,d=0,e=0;\n    for(int i=4;i<=n;i++)\n\
    \    {\n        e=a+b+c+d;\n        a=b;\n        b=c;\n        c=d;\n       \
    \ d=e;\n    }\n    return e;\n}\nint main() {\n    auto candidate = fib4;\n  \
    \  assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10))\
    \ == (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmp4czrqln8: /tmp/tmp4czrqln8.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmpiqwqvmnp: /tmp/tmpiqwqvmnp.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if\
    \ (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n\
    \    }\n    if (n == 3) {\n        return 0;\n    }\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    for (int i =\
    \ 4; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n\
    \        c = d;\n        d = e;\n    }\n    return e;\n}\nint main() {\n    auto\
    \ candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmpyj8x_mpw: /tmp/tmpyj8x_mpw.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmppqcd0tof: /tmp/tmppqcd0tof.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if\
    \ (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n\
    \    }\n    if (n == 3) {\n        return 0;\n    }\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    for (int i = 4; i <= n; i++) {\n\
    \        long temp = a + b + c + d;\n        a = b;\n        b = c;\n        c\
    \ = d;\n        d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmplz6kgj09: /tmp/tmplz6kgj09.cpp:44: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmpsr__l24h: /tmp/tmpsr__l24h.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if\
    \ (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n\
    \    }\n    if (n == 3) {\n        return 0;\n    }\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    for (int i = 4; i <= n; i++) {\n\
    \        long temp = a + b + c + d;\n        a = b;\n        b = c;\n        c\
    \ = d;\n        d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmp5x73_j0x: /tmp/tmp5x73_j0x.cpp:44: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    // your code here\n    long a = 0, b = 0, c =\
    \ 2, d = 0, e = 0;\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n   \
    \ if (n == 2) return 2;\n    if (n == 3) return 0;\n    for (int i = 4; i <= n;\
    \ i++) {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n       \
    \ c = d;\n        d = e;\n    }\n    return e;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    assert(n >= 0);\n    if (n == 0) return 0;\n \
    \   if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n\
    \    long a = 0, b = 0, c = 2, d = 0, e = 0;\n    for (int i = 4; i <= n; i++)\
    \ {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n\
    \        d = e;\n    }\n    return e;\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if\
    \ (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n\
    \    }\n    if (n == 3) {\n        return 0;\n    }\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long temp;\n    for (int i = 4;\
    \ i <= n; i++) {\n        temp = a + b + c + d;\n        a = b;\n        b = c;\n\
    \        c = d;\n        d = temp;\n    }\n    return d;\n}\nint main() {\n  \
    \  auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmp02voqh40: /tmp/tmp02voqh40.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if\
    \ (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n\
    \    }\n    if (n == 3) {\n        return 0;\n    }\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    for (int i = 4; i <= n; i++) {\n\
    \        long temp = a + b + c + d;\n        a = b;\n        b = c;\n        c\
    \ = d;\n        d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmp7ig_j5z2: /tmp/tmp7ig_j5z2.cpp:44: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmpbnr7ngx1: /tmp/tmpbnr7ngx1.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmpk_az5abi: /tmp/tmpk_az5abi.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a;\n        a = b;\n        b = c;\n        c = d;\n        d = temp + b + c\
    \ + d;\n    }\n    return d;\n}\nint main() {\n    auto candidate = fib4;\n  \
    \  assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10))\
    \ == (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpfdlcn96q: /tmp/tmpfdlcn96q.cpp:34: int main(): Assertion `candidate((8))\
    \ == (28)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if\
    \ (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n\
    \    }\n    if (n == 3) {\n        return 0;\n    }\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    for (int i =\
    \ 4; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n\
    \        c = d;\n        d = e;\n    }\n    return e;\n}\nint main() {\n    auto\
    \ candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmpabdeyd4n: /tmp/tmpabdeyd4n.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    assert(n >= 0);\n    if (n == 0) return 0;\n \
    \   if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n\
    \    long a = 0, b = 0, c = 2, d = 0, e;\n    for (int i = 4; i <= n; i++) {\n\
    \        e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n\
    \        d = e;\n    }\n    return e;\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if\
    \ (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n\
    \    }\n    if (n == 3) {\n        return 0;\n    }\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long temp;\n    for (int i = 4;\
    \ i <= n; i++) {\n        temp = a + b + c + d;\n        a = b;\n        b = c;\n\
    \        c = d;\n        d = temp;\n    }\n    return d;\n}\nint main() {\n  \
    \  auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if\
    \ (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n\
    \    }\n    if (n == 3) {\n        return 0;\n    }\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    for (int i = 4; i <= n; i++) {\n\
    \        long temp = a + b + c + d;\n        a = b;\n        b = c;\n        c\
    \ = d;\n        d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmp1nevg59r: /tmp/tmp1nevg59r.cpp:44: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmp6jhk043r: /tmp/tmp6jhk043r.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmpbj8fvbos: /tmp/tmpbj8fvbos.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long a = 0, b = 0, c = 2, d = 0, e;\n    if (n\
    \ == 0)\n        return a;\n    else if (n == 1)\n        return b;\n    else\
    \ if (n == 2)\n        return c;\n    else if (n == 3)\n        return d;\n  \
    \  for (int i = 4; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n\
    \        b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n}\nint\
    \ main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n \
    \   assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n \
    \   assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tlong a = 0, b = 0, c = 2, d = 0, e = 0;\n\tif (n\
    \ == 0) return 0;\n\tif (n == 1) return 0;\n\tif (n == 2) return 2;\n\tif (n ==\
    \ 3) return 0;\n\tfor (int i = 4; i <= n; i++) {\n\t\te = a + b + c + d;\n\t\t\
    a = b;\n\t\tb = c;\n\t\tc = d;\n\t\td = e;\n\t}\n\treturn e;\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmprs91onz2: /tmp/tmprs91onz2.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmp1h97tig6: /tmp/tmp1h97tig6.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    // your code here\n    if(n==0)\n        return\
    \ 0;\n    if(n==1)\n        return 0;\n    if(n==2)\n        return 2;\n    if(n==3)\n\
    \        return 0;\n    long a=0,b=0,c=2,d=0,e=0;\n    for(int i=4;i<=n;i++)\n\
    \    {\n        e=a+b+c+d;\n        a=b;\n        b=c;\n        c=d;\n       \
    \ d=e;\n    }\n    return e;\n}\nint main() {\n    auto candidate = fib4;\n  \
    \  assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10))\
    \ == (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    assert(n >= 0);\n    if (n == 0) {\n        return\
    \ 0;\n    }\n    if (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n\
    \        return 2;\n    }\n    if (n == 3) {\n        return 0;\n    }\n    long\
    \ a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    for (int i =\
    \ 4; i <= n; i++) {\n        long temp = a + b + c + d;\n        a = b;\n    \
    \    b = c;\n        c = d;\n        d = temp;\n    }\n    return a + b + c +\
    \ d;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) ==\
    \ (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpuk64vakx: /tmp/tmpuk64vakx.cpp:45: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if\
    \ (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n\
    \    }\n    if (n == 3) {\n        return 0;\n    }\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    for (int i =\
    \ 4; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n\
    \        c = d;\n        d = e;\n    }\n    return e;\n}\nint main() {\n    auto\
    \ candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  if (n == 0) return 0;\n  if (n == 1) return 0;\n\
    \  if (n == 2) return 2;\n  if (n == 3) return 0;\n  long a = 0;\n  long b = 0;\n\
    \  long c = 2;\n  long d = 0;\n  for (int i = 4; i <= n; i++) {\n    long temp\
    \ = a + b + c + d;\n    a = b;\n    b = c;\n    c = d;\n    d = temp;\n  }\n \
    \ return a + b + c + d;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpsjsh2elm: /tmp/tmpsjsh2elm.cpp:36: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    // your code here\n    if(n == 0) return 0;\n\
    \    if(n == 1) return 0;\n    if(n == 2) return 2;\n    if(n == 3) return 0;\n\
    \    long a = 0, b = 0, c = 2, d = 0, e = 0;\n    for(int i = 4; i <= n; i++){\n\
    \        e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n\
    \        d = e;\n    }\n    return e;\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmptsnrk9yq: /tmp/tmptsnrk9yq.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  // your code here\n  long a = 0, b = 0, c = 2, d\
    \ = 0, e;\n  if (n == 0)\n    return a;\n  if (n == 1)\n    return b;\n  if (n\
    \ == 2)\n    return c;\n  if (n == 3)\n    return d;\n  for (int i = 4; i <= n;\
    \ i++) {\n    e = a + b + c + d;\n    a = b;\n    b = c;\n    c = d;\n    d =\
    \ e;\n  }\n  return e;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if\
    \ (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n\
    \    }\n    if (n == 3) {\n        return 0;\n    }\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    for (int i = 4; i <= n; i++) {\n\
    \        long temp = a + b + c + d;\n        a = b;\n        b = c;\n        c\
    \ = d;\n        d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmpxqnn95_r: /tmp/tmpxqnn95_r.cpp:44: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if\
    \ (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n\
    \    }\n    if (n == 3) {\n        return 0;\n    }\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    for (int i =\
    \ 4; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n\
    \        c = d;\n        d = e;\n    }\n    return e;\n}\nint main() {\n    auto\
    \ candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if\
    \ (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n\
    \    }\n    if (n == 3) {\n        return 0;\n    }\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    for (int i =\
    \ 4; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n\
    \        c = d;\n        d = e;\n    }\n    return e;\n}\nint main() {\n    auto\
    \ candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    assert(n >= 0);\n    if (n == 0) return 0;\n \
    \   if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n\
    \    long a = 0, b = 0, c = 2, d = 0, e = 0;\n    for (int i = 4; i <= n; i++)\
    \ {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n\
    \        d = e;\n    }\n    return e;\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmpeddstsop: /tmp/tmpeddstsop.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if\
    \ (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n\
    \    }\n    if (n == 3) {\n        return 0;\n    }\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    for (int i = 4; i <= n; i++) {\n\
    \        long temp = a + b + c + d;\n        a = b;\n        b = c;\n        c\
    \ = d;\n        d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmp7t6lle4q: /tmp/tmp7t6lle4q.cpp:44: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tlong a = 0, b = 0, c = 2, d = 0, e = 0;\n\tif (n\
    \ == 0) return 0;\n\tif (n == 1) return 0;\n\tif (n == 2) return 2;\n\tif (n ==\
    \ 3) return 0;\n\tfor (int i = 4; i <= n; i++) {\n\t\te = a + b + c + d;\n\t\t\
    a = b;\n\t\tb = c;\n\t\tc = d;\n\t\td = e;\n\t}\n\treturn e;\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tlong a = 0, b = 0, c = 2, d = 0, e;\n\tif (n ==\
    \ 0) return a;\n\tif (n == 1) return b;\n\tif (n == 2) return c;\n\tif (n == 3)\
    \ return d;\n\tfor (int i = 4; i <= n; i++) {\n\t\te = a + b + c + d;\n\t\ta =\
    \ b;\n\t\tb = c;\n\t\tc = d;\n\t\td = e;\n\t}\n\treturn e;\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmp44uhs1fa: /tmp/tmp44uhs1fa.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if\
    \ (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n\
    \    }\n    if (n == 3) {\n        return 0;\n    }\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    for (int i = 4; i <= n; i++) {\n\
    \        long temp = a + b + c + d;\n        a = b;\n        b = c;\n        c\
    \ = d;\n        d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmpi_hsei9k: /tmp/tmpi_hsei9k.cpp:44: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmpcb596q_y: /tmp/tmpcb596q_y.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmp2jqeeo39: /tmp/tmp2jqeeo39.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmp5y22b0zr: /tmp/tmp5y22b0zr.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if\
    \ (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n\
    \    }\n    if (n == 3) {\n        return 0;\n    }\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    for (int i =\
    \ 4; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n\
    \        c = d;\n        d = e;\n    }\n    return e;\n}\nint main() {\n    auto\
    \ candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tlong a = 0, b = 0, c = 2, d = 0, e = 0;\n\tif (n\
    \ == 0) return 0;\n\tif (n == 1) return 0;\n\tif (n == 2) return 2;\n\tif (n ==\
    \ 3) return 0;\n\tfor (int i = 4; i <= n; i++) {\n\t\te = a + b + c + d;\n\t\t\
    a = b;\n\t\tb = c;\n\t\tc = d;\n\t\td = e;\n\t}\n\treturn e;\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long a = 0, b = 0, c = 2, d = 0, e = 0;\n    if\
    \ (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n \
    \   if (n == 3) return 0;\n    for (int i = 4; i <= n; i++) {\n        e = a +\
    \ b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n\
    \    }\n    return e;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long a = 0, b = 0, c = 2, d = 0, e;\n    if (n\
    \ == 0)\n        return a;\n    else if (n == 1)\n        return b;\n    else\
    \ if (n == 2)\n        return c;\n    else if (n == 3)\n        return d;\n  \
    \  for (int i = 4; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n\
    \        b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n}\nint\
    \ main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n \
    \   assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n \
    \   assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long a = 0, b = 0, c = 2, d = 0, e;\n    if (n\
    \ == 0)\n        return a;\n    else if (n == 1)\n        return b;\n    else\
    \ if (n == 2)\n        return c;\n    else if (n == 3)\n        return d;\n  \
    \  for (int i = 4; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n\
    \        b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n}\nint\
    \ main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n \
    \   assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n \
    \   assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmpv5m0joah: /tmp/tmpv5m0joah.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmpmhnxky63: /tmp/tmpmhnxky63.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        d = a + b +\
    \ c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\n\
    int main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpwck8444d: /tmp/tmpwck8444d.cpp:33: int main(): Assertion `candidate((8))\
    \ == (28)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n <= 2) return n;\n    long a = 0, b = 0,\
    \ c = 2, d = 0;\n    for (int i = 3; i <= n; i++) {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\nint\
    \ main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n \
    \   assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n \
    \   assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpi1n2r33e: /tmp/tmpi1n2r33e.cpp:29: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long a = 0, b = 0, c = 2, d = 0, e;\n    if (n\
    \ == 0)\n        return a;\n    else if (n == 1)\n        return b;\n    else\
    \ if (n == 2)\n        return c;\n    else if (n == 3)\n        return d;\n  \
    \  for (int i = 4; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n\
    \        b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n}\nint\
    \ main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n \
    \   assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n \
    \   assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmpmb9i0vn6: /tmp/tmpmb9i0vn6.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmp9i45wz8_: /tmp/tmp9i45wz8_.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long a = 0, b = 0, c = 2, d = 0, e;\n    if (n\
    \ == 0)\n        return a;\n    else if (n == 1)\n        return b;\n    else\
    \ if (n == 2)\n        return c;\n    else if (n == 3)\n        return d;\n  \
    \  for (int i = 4; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n\
    \        b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n}\nint\
    \ main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n \
    \   assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n \
    \   assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long a = 0, b = 0, c = 2, d = 0, e;\n    if (n\
    \ == 0) return a;\n    if (n == 1) return b;\n    if (n == 2) return c;\n    for\
    \ (int i = 3; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n   \
    \     b = c;\n        c = d;\n        d = e;\n    }\n    return d;\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmpwzy2zi0_: /tmp/tmpwzy2zi0_.cpp:32: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if\
    \ (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n\
    \    }\n    if (n == 3) {\n        return 0;\n    }\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    for (int i =\
    \ 4; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n\
    \        c = d;\n        d = e;\n    }\n    return e;\n}\nint main() {\n    auto\
    \ candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if\
    \ (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n\
    \    }\n    if (n == 3) {\n        return 0;\n    }\n    long fib4_n_minus_1 =\
    \ 0;\n    long fib4_n_minus_2 = 0;\n    long fib4_n_minus_3 = 2;\n    long fib4_n_minus_4\
    \ = 0;\n    long fib4_n = 0;\n    for (int i = 4; i <= n; i++) {\n        fib4_n\
    \ = fib4_n_minus_1 + fib4_n_minus_2 + fib4_n_minus_3 + fib4_n_minus_4;\n     \
    \   fib4_n_minus_4 = fib4_n_minus_3;\n        fib4_n_minus_3 = fib4_n_minus_2;\n\
    \        fib4_n_minus_2 = fib4_n_minus_1;\n        fib4_n_minus_1 = fib4_n;\n\
    \    }\n    return fib4_n;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmplmpgw7fu: /tmp/tmplmpgw7fu.cpp:46: int main(): Assertion `candidate((8))\
    \ == (28)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmpdk6ce6r2: /tmp/tmpdk6ce6r2.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    // your code here\n    long a = 0, b = 0, c =\
    \ 2, d = 0, e = 0;\n    if (n == 0)\n        return 0;\n    else if (n == 1)\n\
    \        return 0;\n    else if (n == 2)\n        return 2;\n    else if (n ==\
    \ 3)\n        return 0;\n    else {\n        for (int i = 4; i <= n; i++) {\n\
    \            e = a + b + c + d;\n            a = b;\n            b = c;\n    \
    \        c = d;\n            d = e;\n        }\n        return e;\n    }\n}\n\
    int main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmpm9a1e4rv: /tmp/tmpm9a1e4rv.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if\
    \ (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n\
    \    }\n    if (n == 3) {\n        return 0;\n    }\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    for (int i = 4; i <= n; i++) {\n\
    \        long temp = a + b + c + d;\n        a = b;\n        b = c;\n        c\
    \ = d;\n        d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmp0uch6noh: /tmp/tmp0uch6noh.cpp:44: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    // your code here\n    long a = 0, b = 0, c =\
    \ 2, d = 0, e;\n    if (n == 0)\n        return a;\n    if (n == 1)\n        return\
    \ b;\n    if (n == 2)\n        return c;\n    if (n == 3)\n        return d;\n\
    \    for (int i = 4; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n\
    \        b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n}\nint\
    \ main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n \
    \   assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n \
    \   assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmpnxzxob5m: /tmp/tmpnxzxob5m.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    // Your code here\n    if(n==0)\n        return\
    \ 0;\n    if(n==1)\n        return 0;\n    if(n==2)\n        return 2;\n    if(n==3)\n\
    \        return 0;\n    long a=0,b=0,c=2,d=0,e=0;\n    for(int i=4;i<=n;i++)\n\
    \    {\n        e=a+b+c+d;\n        a=b;\n        b=c;\n        c=d;\n       \
    \ d=e;\n    }\n    return e;\n}\nint main() {\n    auto candidate = fib4;\n  \
    \  assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10))\
    \ == (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmp02nwk8s6: /tmp/tmp02nwk8s6.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmpkxxse1zl: /tmp/tmpkxxse1zl.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if\
    \ (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n\
    \    }\n    if (n == 3) {\n        return 0;\n    }\n    long n1 = 0;\n    long\
    \ n2 = 0;\n    long n3 = 2;\n    long n4 = 0;\n    long n5 = 0;\n    for (int\
    \ i = 4; i <= n; i++) {\n        n5 = n1 + n2 + n3 + n4;\n        n1 = n2;\n \
    \       n2 = n3;\n        n3 = n4;\n        n4 = n5;\n    }\n    return n5;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long a = 0, b = 0, c = 2, d = 0, e;\n    if (n\
    \ == 0)\n        return a;\n    else if (n == 1)\n        return b;\n    else\
    \ if (n == 2)\n        return c;\n    else if (n == 3)\n        return d;\n  \
    \  for (int i = 4; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n\
    \        b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n}\nint\
    \ main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n \
    \   assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n \
    \   assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmphotkzcux: /tmp/tmphotkzcux.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  if (n == 0) return 0;\n  if (n == 1) return 0;\n\
    \  if (n == 2) return 2;\n  if (n == 3) return 0;\n  long a = 0, b = 0, c = 2,\
    \ d = 0;\n  for (int i = 4; i <= n; i++) {\n    long temp = a + b + c + d;\n \
    \   a = b;\n    b = c;\n    c = d;\n    d = temp;\n  }\n  return a + b + c + d;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpf5qn7kd7: /tmp/tmpf5qn7kd7.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if\
    \ (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n\
    \    }\n    if (n == 3) {\n        return 0;\n    }\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    for (int i = 4; i <= n; i++) {\n\
    \        long temp = a + b + c + d;\n        a = b;\n        b = c;\n        c\
    \ = d;\n        d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmpdpx2olj3: /tmp/tmpdpx2olj3.cpp:44: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmpwbejrnm8: /tmp/tmpwbejrnm8.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmp2jzh29nn: /tmp/tmp2jzh29nn.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    // your code here\n    if(n==0)\n        return\
    \ 0;\n    if(n==1)\n        return 0;\n    if(n==2)\n        return 2;\n    if(n==3)\n\
    \        return 0;\n    long a=0,b=0,c=2,d=0,e=0;\n    for(int i=4;i<=n;i++)\n\
    \    {\n        e=a+b+c+d;\n        a=b;\n        b=c;\n        c=d;\n       \
    \ d=e;\n    }\n    return e;\n}\nint main() {\n    auto candidate = fib4;\n  \
    \  assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10))\
    \ == (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long a = 0, b = 0, c = 2, d = 0, e;\n    if (n\
    \ == 0) return a;\n    if (n == 1) return b;\n    if (n == 2) return c;\n    if\
    \ (n == 3) return d;\n    for (int i = 4; i <= n; i++) {\n        e = a + b +\
    \ c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n   \
    \ }\n    return e;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if\
    \ (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n\
    \    }\n    if (n == 3) {\n        return 0;\n    }\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    for (int i =\
    \ 4; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n\
    \        c = d;\n        d = e;\n    }\n    return e;\n}\nint main() {\n    auto\
    \ candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmp5f5y_umh: /tmp/tmp5f5y_umh.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long a = 0, b = 0, c = 2, d = 0, e;\n    if (n\
    \ == 0)\n        return a;\n    else if (n == 1)\n        return b;\n    else\
    \ if (n == 2)\n        return c;\n    else if (n == 3)\n        return d;\n  \
    \  for (int i = 4; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n\
    \        b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n}\nint\
    \ main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n \
    \   assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n \
    \   assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmp8jxl5jug: /tmp/tmp8jxl5jug.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if\
    \ (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n\
    \    }\n    if (n == 3) {\n        return 0;\n    }\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    for (int i =\
    \ 4; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n\
    \        c = d;\n        d = e;\n    }\n    return e;\n}\nint main() {\n    auto\
    \ candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmp649wsd1z: /tmp/tmp649wsd1z.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long a = 0, b = 0, c = 2, d = 0, e;\n    if (n\
    \ == 0)\n        return a;\n    else if (n == 1)\n        return b;\n    else\
    \ if (n == 2)\n        return c;\n    else if (n == 3)\n        return d;\n  \
    \  for (int i = 4; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n\
    \        b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n}\nint\
    \ main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n \
    \   assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n \
    \   assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  if (n == 0) {\n    return 0;\n  }\n  if (n == 1)\
    \ {\n    return 0;\n  }\n  if (n == 2) {\n    return 2;\n  }\n  if (n == 3) {\n\
    \    return 0;\n  }\n  long a = 0;\n  long b = 0;\n  long c = 2;\n  long d = 0;\n\
    \  long e = 0;\n  for (int i = 4; i <= n; i++) {\n    e = a + b + c + d;\n   \
    \ a = b;\n    b = c;\n    c = d;\n    d = e;\n  }\n  return e;\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if\
    \ (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n\
    \    }\n    if (n == 3) {\n        return 0;\n    }\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    for (int i = 4; i <= n; i++) {\n\
    \        long temp = a + b + c + d;\n        a = b;\n        b = c;\n        c\
    \ = d;\n        d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmpah6y_xoz: /tmp/tmpah6y_xoz.cpp:44: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if\
    \ (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n\
    \    }\n    if (n == 3) {\n        return 0;\n    }\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    for (int i =\
    \ 4; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n\
    \        c = d;\n        d = e;\n    }\n    return e;\n}\nint main() {\n    auto\
    \ candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmpjzo52wp6: /tmp/tmpjzo52wp6.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmpun4vf5mi: /tmp/tmpun4vf5mi.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        d = a + b +\
    \ c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\n\
    int main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpomiqe2aa: /tmp/tmpomiqe2aa.cpp:33: int main(): Assertion `candidate((8))\
    \ == (28)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if\
    \ (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n\
    \    }\n    if (n == 3) {\n        return 0;\n    }\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    for (int i =\
    \ 4; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n\
    \        c = d;\n        d = e;\n    }\n    return e;\n}\nint main() {\n    auto\
    \ candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmph909c3m6: /tmp/tmph909c3m6.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  if (n == 0) return 0;\n  if (n == 1) return 0;\n\
    \  if (n == 2) return 2;\n  if (n == 3) return 0;\n  long a = 0;\n  long b = 0;\n\
    \  long c = 2;\n  long d = 0;\n  long e = 0;\n  for (int i = 4; i <= n; i++) {\n\
    \    e = a + b + c + d;\n    a = b;\n    b = c;\n    c = d;\n    d = e;\n  }\n\
    \  return e;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if\
    \ (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n\
    \    }\n    if (n == 3) {\n        return 0;\n    }\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    for (int i =\
    \ 4; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n\
    \        c = d;\n        d = e;\n    }\n    return e;\n}\nint main() {\n    auto\
    \ candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        d = a + b +\
    \ c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\n\
    int main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmp0okyi6ua: /tmp/tmp0okyi6ua.cpp:33: int main(): Assertion `candidate((8))\
    \ == (28)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmpys0fhq5u: /tmp/tmpys0fhq5u.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n < 2) {\n        return 0;\n    }\n    if\
    \ (n == 2) {\n        return 2;\n    }\n    long a = 0;\n    long b = 0;\n   \
    \ long c = 2;\n    long d = 0;\n    for (int i = 3; i <= n; i++) {\n        d\
    \ = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return\
    \ d;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) ==\
    \ (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpj745002s: /tmp/tmpj745002s.cpp:37: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmpy___26lb: /tmp/tmpy___26lb.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmpfwrb1w6y: /tmp/tmpfwrb1w6y.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmpr6kxm_v2: /tmp/tmpr6kxm_v2.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long a = 0, b = 0, c = 2, d = 0, e;\n    if (n\
    \ == 0)\n        return a;\n    else if (n == 1)\n        return b;\n    else\
    \ if (n == 2)\n        return c;\n    else if (n == 3)\n        return d;\n  \
    \  for (int i = 4; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n\
    \        b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n}\nint\
    \ main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n \
    \   assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n \
    \   assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if\
    \ (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n\
    \    }\n    if (n == 3) {\n        return 0;\n    }\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    for (int i =\
    \ 4; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n\
    \        c = d;\n        d = e;\n    }\n    return e;\n}\nint main() {\n    auto\
    \ candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long a = 0, b = 0, c = 2, d = 0, e;\n    if (n\
    \ == 0) return a;\n    if (n == 1) return b;\n    if (n == 2) return c;\n    for\
    \ (int i = 3; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n   \
    \     b = c;\n        c = d;\n        d = e;\n    }\n    return d;\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmp0blotptf: /tmp/tmp0blotptf.cpp:32: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long a = 0, b = 0, c = 2, d = 0, e;\n    if (n\
    \ == 0)\n        return a;\n    else if (n == 1)\n        return b;\n    else\
    \ if (n == 2)\n        return c;\n    else if (n == 3)\n        return d;\n  \
    \  for (int i = 4; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n\
    \        b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n}\nint\
    \ main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n \
    \   assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n \
    \   assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmp0_xuo806: /tmp/tmp0_xuo806.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  if (n == 0) return 0;\n  if (n == 1) return 0;\n\
    \  if (n == 2) return 2;\n  if (n == 3) return 0;\n  long a = 0;\n  long b = 0;\n\
    \  long c = 2;\n  long d = 0;\n  long e = 0;\n  for (int i = 4; i <= n; i++) {\n\
    \    e = a + b + c + d;\n    a = b;\n    b = c;\n    c = d;\n    d = e;\n  }\n\
    \  return e;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        d = a + b +\
    \ c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\n\
    int main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmp3s53t87t: /tmp/tmp3s53t87t.cpp:33: int main(): Assertion `candidate((8))\
    \ == (28)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmpa40c_oip: /tmp/tmpa40c_oip.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if\
    \ (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n\
    \    }\n    if (n == 3) {\n        return 0;\n    }\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    for (int i = 4; i <= n; i++) {\n\
    \        long temp = a + b + c + d;\n        a = b;\n        b = c;\n        c\
    \ = d;\n        d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmpgf4e5sxy: /tmp/tmpgf4e5sxy.cpp:44: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmpcfo1enm6: /tmp/tmpcfo1enm6.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmpnp8d6kji: /tmp/tmpnp8d6kji.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmpa7h1kyvs: /tmp/tmpa7h1kyvs.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmp3cz9l7ui: /tmp/tmp3cz9l7ui.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        d = a + b +\
    \ c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\n\
    int main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpyrrxvm4c: /tmp/tmpyrrxvm4c.cpp:33: int main(): Assertion `candidate((8))\
    \ == (28)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmp2okrlhy5: /tmp/tmp2okrlhy5.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long tmp = a\
    \ + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = tmp;\n\
    \    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmp3_fwnbmc: /tmp/tmp3_fwnbmc.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if\
    \ (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n\
    \    }\n    if (n == 3) {\n        return 0;\n    }\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    for (int i =\
    \ 4; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n\
    \        c = d;\n        d = e;\n    }\n    return e;\n}\nint main() {\n    auto\
    \ candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if\
    \ (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n\
    \    }\n    if (n == 3) {\n        return 0;\n    }\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    for (int i =\
    \ 4; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n\
    \        c = d;\n        d = e;\n    }\n    return e;\n}\nint main() {\n    auto\
    \ candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmp3li1umdg: /tmp/tmp3li1umdg.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmp3ac13vbz: /tmp/tmp3ac13vbz.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        d = a + b +\
    \ c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\n\
    int main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpvqia80nv: /tmp/tmpvqia80nv.cpp:33: int main(): Assertion `candidate((8))\
    \ == (28)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmpr12j25t8: /tmp/tmpr12j25t8.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmpofq0rrae: /tmp/tmpofq0rrae.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  if (n == 0) {\n    return 0;\n  }\n  if (n == 1)\
    \ {\n    return 0;\n  }\n  if (n == 2) {\n    return 2;\n  }\n  if (n == 3) {\n\
    \    return 0;\n  }\n  long a = 0;\n  long b = 0;\n  long c = 2;\n  long d = 0;\n\
    \  for (int i = 4; i <= n; i++) {\n    long temp = a + b + c + d;\n    a = b;\n\
    \    b = c;\n    c = d;\n    d = temp;\n  }\n  return a + b + c + d;\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmpmelp9d0f: /tmp/tmpmelp9d0f.cpp:44: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    // your code here\n    long a = 0, b = 0, c =\
    \ 2, d = 0, e;\n    if (n == 0)\n        return a;\n    if (n == 1)\n        return\
    \ b;\n    if (n == 2)\n        return c;\n    if (n == 3)\n        return d;\n\
    \    for (int i = 4; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n\
    \        b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n}\nint\
    \ main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n \
    \   assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n \
    \   assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    assert(n >= 0);\n    if (n == 0) return 0;\n \
    \   if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n\
    \    long a = 0, b = 0, c = 2, d = 0, e;\n    for (int i = 4; i <= n; i++) {\n\
    \        e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n\
    \        d = e;\n    }\n    return e;\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if\
    \ (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n\
    \    }\n    if (n == 3) {\n        return 0;\n    }\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    for (int i =\
    \ 4; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n\
    \        c = d;\n        d = e;\n    }\n    return e;\n}\nint main() {\n    auto\
    \ candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmpdo1m895p: /tmp/tmpdo1m895p.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmps3payf51: /tmp/tmps3payf51.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long a = 0, b = 0, c = 2, d = 0, e;\n    if (n\
    \ == 0)\n        return a;\n    else if (n == 1)\n        return b;\n    else\
    \ if (n == 2)\n        return c;\n    else if (n == 3)\n        return d;\n  \
    \  for (int i = 4; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n\
    \        b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n}\nint\
    \ main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n \
    \   assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n \
    \   assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if\
    \ (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n\
    \    }\n    if (n == 3) {\n        return 0;\n    }\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    for (int i = 4; i <= n; i++) {\n\
    \        long temp = a + b + c + d;\n        a = b;\n        b = c;\n        c\
    \ = d;\n        d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmpoun23_qv: /tmp/tmpoun23_qv.cpp:44: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long a = 0, b = 0, c = 2, d = 0, e = 0;\n    for\
    \ (int i = 4; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n   \
    \     b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if\
    \ (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n\
    \    }\n    if (n == 3) {\n        return 0;\n    }\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    for (int i = 4; i <= n; i++) {\n\
    \        long temp = a + b + c + d;\n        a = b;\n        b = c;\n        c\
    \ = d;\n        d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmpqvct7u0b: /tmp/tmpqvct7u0b.cpp:44: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  if (n == 0) {\n    return 0;\n  }\n  if (n == 1)\
    \ {\n    return 0;\n  }\n  if (n == 2) {\n    return 2;\n  }\n  if (n == 3) {\n\
    \    return 0;\n  }\n  long a = 0;\n  long b = 0;\n  long c = 2;\n  long d = 0;\n\
    \  long e = 0;\n  for (int i = 4; i <= n; i++) {\n    e = a + b + c + d;\n   \
    \ a = b;\n    b = c;\n    c = d;\n    d = e;\n  }\n  return e;\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    // your code here\n    long a = 0, b = 0, c =\
    \ 2, d = 0, e = 0;\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n   \
    \ if (n == 2) return 2;\n    if (n == 3) return 0;\n    for (int i = 4; i <= n;\
    \ i++) {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n       \
    \ c = d;\n        d = e;\n    }\n    return e;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long a = 0, b = 0, c = 2, d = 0, e = 0;\n    if\
    \ (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n \
    \   if (n == 3) return 0;\n    for (int i = 4; i <= n; i++) {\n        e = a +\
    \ b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n\
    \    }\n    return e;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long a = 0, b = 0, c = 2, d = 0, e;\n    if (n\
    \ == 0) return a;\n    if (n == 1) return b;\n    if (n == 2) return c;\n    if\
    \ (n == 3) return d;\n    for (int i = 4; i <= n; i++) {\n        e = a + b +\
    \ c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n   \
    \ }\n    return e;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if\
    \ (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n\
    \    }\n    if (n == 3) {\n        return 0;\n    }\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    for (int i = 4; i <= n; i++) {\n\
    \        long temp = a + b + c + d;\n        a = b;\n        b = c;\n        c\
    \ = d;\n        d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmpjl2i381i: /tmp/tmpjl2i381i.cpp:44: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmponea4ojm: /tmp/tmponea4ojm.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    // your code here\n    if(n==0)\n        return\
    \ 0;\n    if(n==1)\n        return 0;\n    if(n==2)\n        return 2;\n    if(n==3)\n\
    \        return 0;\n    long a = 0, b = 0, c = 2, d = 0, e;\n    for(int i=4;\
    \ i<=n; i++){\n        e = a + b + c + d;\n        a = b;\n        b = c;\n  \
    \      c = d;\n        d = e;\n    }\n    return e;\n}\nint main() {\n    auto\
    \ candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        d = a + b +\
    \ c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\n\
    int main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: "tmpal0j9wxq: /tmp/tmpal0j9wxq.cpp:33: int main(): Assertion `candidate((8))\
    \ == (28)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long a = 0, b = 0, c = 2, d = 0, e = 0;\n    if\
    \ (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n \
    \   if (n == 3) return 0;\n    for (int i = 4; i <= n; i++) {\n        e = a +\
    \ b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n\
    \    }\n    return e;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmp4dh1ttj4: /tmp/tmp4dh1ttj4.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmpda_egcs0: /tmp/tmpda_egcs0.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmpc6c1jbv9: /tmp/tmpc6c1jbv9.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if\
    \ (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n\
    \    }\n    if (n == 3) {\n        return 0;\n    }\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    for (int i = 4; i <= n; i++) {\n\
    \        long temp = a + b + c + d;\n        a = b;\n        b = c;\n        c\
    \ = d;\n        d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmp0bqtzhm4: /tmp/tmp0bqtzhm4.cpp:44: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmp82hkr0wa: /tmp/tmp82hkr0wa.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long a = 0, b = 0, c = 2, d = 0, e;\n    if (n\
    \ == 0) return a;\n    if (n == 1) return b;\n    if (n == 2) return c;\n    for\
    \ (int i = 3; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n   \
    \     b = c;\n        c = d;\n        d = e;\n    }\n    return d;\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  stdout: ''
  stderr: "tmp5kdqyoql: /tmp/tmp5kdqyoql.cpp:32: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  stdout: ''
  stderr: "tmpdyvdx2iz: /tmp/tmpdyvdx2iz.cpp:33: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
