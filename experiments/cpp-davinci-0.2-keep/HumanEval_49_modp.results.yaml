name: HumanEval_49_modp
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n;\n    long res = 1;\n    while (n > 0) {\n        if (n & 1) res = (res *\
    \ n) % p;\n        n = n >> 1;\n        n = (n * n) % p;\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t *\
    \ t) % p;\n    }\n    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp93v28qc7: /tmp/tmp93v28qc7.cpp:26: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n;\n    long res = 1;\n    while (n > 0) {\n        if (n & 1) res = (res *\
    \ n) % p;\n        n = n >> 1;\n        n = (n * n) % p;\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n;\n    long res = 1;\n    while (n > 0) {\n        if (n % 2 == 1) {\n    \
    \        res = (res * n) % p;\n        }\n        n = n / 2;\n        n = (n *\
    \ n) % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n > 0) {\n     \
    \   if (n % 2 == 1) {\n            r = (r * 2) % p;\n        }\n        n = n\
    \ / 2;\n        if (n > 0) {\n            r = (r * r) % p;\n        }\n    }\n\
    \    return r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp5qxiw4lz: /tmp/tmp5qxiw4lz.cpp:30: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) {\n        return 1;\n    }\n\
    \    if (n % 2 == 0) {\n        long tmp = modp(n / 2, p);\n        return (tmp\
    \ * tmp) % p;\n    }\n    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp8yrnd6e7: /tmp/tmp8yrnd6e7.cpp:27: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n == 1) return n % p;\n    long res = 1;\n    while (n > 0) {\n     \
    \   if (n & 1) {\n            res = (res * n) % p;\n        }\n        n = n >>\
    \ 1;\n        n = (n * n) % p;\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t *\
    \ t) % p;\n    }\n    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp3lhul_m8: /tmp/tmp3lhul_m8.cpp:26: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ else {\n        return (modp(n-1, p) * n) % p;\n    }\n}\nint main() {\n   \
    \ auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpc1qxyz0t: /tmp/tmpc1qxyz0t.cpp:27: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n\tif (n == 0) return 1;\n\tif (n % 2 == 0) {\n\
    \t\tlong t = modp(n / 2, p);\n\t\treturn (t * t) % p;\n\t}\n\telse return (modp(n\
    \ - 1, p) * 2) % p;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) {\n        return 1;\n    }\n\
    \    if (n % 2 == 0) {\n        long half = modp(n / 2, p);\n        return (half\
    \ * half) % p;\n    }\n    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp8uwsv__z: /tmp/tmp8uwsv__z.cpp:27: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t *\
    \ t) % p;\n    }\n    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpujigt_bo: /tmp/tmpujigt_bo.cpp:26: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n;\n    long res = 1;\n    while (n > 0) {\n        if (n & 1) {\n         \
    \   res = (res * n) % p;\n        }\n        n = n >> 1;\n        n = (n * n)\
    \ % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpt2n6aaya: /tmp/tmpt2n6aaya.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long y = modp(n/2, p);\n        return (y*y) %\
    \ p;\n    } else {\n        return (n * modp(n-1, p)) % p;\n    }\n}\nint main()\
    \ {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n   \
    \ assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) ==\
    \ (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp5o80gtpo: /tmp/tmp5o80gtpo.cpp:27: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long res = modp(n/2, p);\n        return (res * res) % p;\n  \
    \  }\n    return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmppd62lkld: /tmp/tmppd62lkld.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    long res = modp(n/2,\
    \ p);\n    res = (res * res) % p;\n    if (n % 2 == 1) {\n        res = (res *\
    \ 2) % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long r = modp(n / 2, p);\n        return (r * r) % p;\n    } else\
    \ {\n        return (modp(n - 1, p) * n) % p;\n    }\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpwv3xcdv_: /tmp/tmpwv3xcdv_.cpp:26: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpnw6nnh6j: /tmp/tmpnw6nnh6j.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    long res = modp(n/2,\
    \ p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n\
    \    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp0klobg88: /tmp/tmp0klobg88.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp22ivops_: /tmp/tmp22ivops_.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long r = modp(n / 2, p);\n        return (r * r) % p;\n    }\n\
    \    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp30q5h3n4: /tmp/tmp30q5h3n4.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long r = modp(n / 2, p);\n        return (r * r) % p;\n    }\n\
    \    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp_zi1ewpj: /tmp/tmp_zi1ewpj.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp4y0mgaqf: /tmp/tmp4y0mgaqf.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long x = modp(n/2, p);\n        return (x * x) % p;\n    } else\
    \ {\n        return (n * modp(n-1, p)) % p;\n    }\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp6exfrb1i: /tmp/tmp6exfrb1i.cpp:26: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    long res = modp(n/2,\
    \ p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n\
    \    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) {\n        return 1;\n    }\n\
    \    long res = modp(n / 2, p);\n    res = (res * res) % p;\n    if (n % 2 ==\
    \ 1) {\n        res = (res * 2) % p;\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  long res = 1;\n  while (n > 0) {\n    if (n\
    \ & 1) {\n      res = (res * n) % p;\n    }\n    n = n >> 1;\n    n = (n * n)\
    \ % p;\n  }\n  return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp309bz2cu: /tmp/tmp309bz2cu.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n;\n    if (n % 2 == 0) {\n        long r = modp(n/2, p);\n        return (r*r)\
    \ % p;\n    }\n    else {\n        long r = modp(n/2, p);\n        return (r*r*n)\
    \ % p;\n    }\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp6lxmb42l: /tmp/tmp6lxmb42l.cpp:29: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp045ej9oa: /tmp/tmp045ej9oa.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp7lji99ky: /tmp/tmp7lji99ky.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) {\n        return 1;\n    }\n\
    \    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t *\
    \ t) % p;\n    }\n    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp1yff5w7m: /tmp/tmp1yff5w7m.cpp:27: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp1j1gqb6a: /tmp/tmp1j1gqb6a.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  if (n == 0) return 1;\n\
    \  if (n % 2 == 0) {\n    long t = modp(n / 2, p);\n    return (t * t) % p;\n\
    \  } else {\n    return (modp(n - 1, p) * n) % p;\n  }\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp77l1_yy0: /tmp/tmp77l1_yy0.cpp:27: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpvbbp65m1: /tmp/tmpvbbp65m1.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n % p;\n    long res = modp(n/2, p);\n    res = (res * res) % p;\n    if (n\
    \ % 2 == 1) {\n        res = (res * n) % p;\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n   \
    \ assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) ==\
    \ (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpm9alx7ne: /tmp/tmpm9alx7ne.cpp:27: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpd7wdxrkq: /tmp/tmpd7wdxrkq.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n % p;\n    long res = 1;\n    while (n > 0) {\n        if (n & 1) res = (res\
    \ * n) % p;\n        n = n >> 1;\n        n = (n * n) % p;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpmrmxohu4: /tmp/tmpmrmxohu4.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    long res = modp(n/2,\
    \ p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n\
    \    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) {\n        return 1;\n    }\n\
    \    if (n % 2 == 0) {\n        long r = modp(n / 2, p);\n        return (r *\
    \ r) % p;\n    }\n    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmphtrvncb1: /tmp/tmphtrvncb1.cpp:27: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmppd5gzkcv: /tmp/tmppd5gzkcv.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long x = modp(n/2, p);\n        return (x * x) % p;\n    } else\
    \ {\n        return (modp(n-1, p) * n) % p;\n    }\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp1xnwec04: /tmp/tmp1xnwec04.cpp:26: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    for (int i = 0; i < n;\
    \ i++) {\n        res = (res * 2) % p;\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n   \
    \ assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) ==\
    \ (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  if (n < 0)\n    n = (n %\
    \ p) + p;\n  if (n == 0)\n    return 1;\n  long res = 1;\n  while (n > 0) {\n\
    \    if (n & 1)\n      res = (res * 2) % p;\n    n >>= 1;\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpnbk_op8y: /tmp/tmpnbk_op8y.cpp:30: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp1nup0_7l: /tmp/tmp1nup0_7l.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpww8ltj2k: /tmp/tmpww8ltj2k.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t *\
    \ t) % p;\n    }\n    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpp1d6xsrd: /tmp/tmpp1d6xsrd.cpp:26: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t *\
    \ t) % p;\n    }\n    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmptjmetdjc: /tmp/tmptjmetdjc.cpp:26: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n % p;\n    long half = modp(n / 2, p);\n    long half_sq = (half * half) %\
    \ p;\n    if (n % 2 == 0) {\n        return half_sq;\n    } else {\n        return\
    \ (half_sq * n) % p;\n    }\n}\nint main() {\n    auto candidate = modp;\n   \
    \ assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101)) ==\
    \ (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpveczuhqq: /tmp/tmpveczuhqq.cpp:28: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n;\n    long res = 1;\n    while (n > 0) {\n        if (n % 2 == 1) {\n    \
    \        res = (res * n) % p;\n        }\n        n = n / 2;\n        n = (n *\
    \ n) % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp6d2e0c2h: /tmp/tmp6d2e0c2h.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    long res = modp(n/2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1)\
    \ res = (res * 2) % p;\n    return res;\n}\nint main() {\n    auto candidate =\
    \ modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long res = modp(n/2, p);\n        return (res * res) % p;\n  \
    \  }\n    return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp9tgnf0_o: /tmp/tmp9tgnf0_o.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n == 1) return n % p;\n    if (n % 2 == 0) {\n        long t = modp(n\
    \ / 2, p);\n        return (t * t) % p;\n    }\n    return (n * modp(n - 1, p))\
    \ % p;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpkwln_ra1: /tmp/tmpkwln_ra1.cpp:27: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n % p;\n    long res = modp(n / 2, p);\n    res = (res * res) % p;\n    if (n\
    \ % 2) res = (res * n) % p;\n    return res;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpl62ovn2a: /tmp/tmpl62ovn2a.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n % p;\n    long res = 1;\n    while (n > 0) {\n        if (n & 1) res = (res\
    \ * n) % p;\n        n = n >> 1;\n        n = (n * n) % p;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n > 0) {\n   \
    \     if (n & 1)\n            res = (res * 2) % p;\n        n >>= 1;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpoc3zwb6m: /tmp/tmpoc3zwb6m.cpp:25: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpzfm3p7ez: /tmp/tmpzfm3p7ez.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n % p;\n    long long res = modp(n/2, p);\n    res = (res * res) % p;\n    if\
    \ (n % 2 == 1) res = (res * n) % p;\n    return res;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpu7izov87: /tmp/tmpu7izov87.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n;\n    long res = 1;\n    while (n > 0) {\n        if (n & 1) res = (res *\
    \ n) % p;\n        n = n >> 1;\n        n = (n * n) % p;\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpdbpng2i1: /tmp/tmpdbpng2i1.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    long res = modp(n/2,\
    \ p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n\
    \    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    long res = modp(n/2,\
    \ p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n\
    \    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t *\
    \ t) % p;\n    }\n    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp9c2063zh: /tmp/tmp9c2063zh.cpp:26: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpwca044e4: /tmp/tmpwca044e4.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long x = modp(n/2, p);\n        return (x * x) % p;\n    } else\
    \ {\n        return (modp(n-1, p) * n) % p;\n    }\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp1h3werqn: /tmp/tmp1h3werqn.cpp:26: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(n >= 0);\n    assert(p > 0);\n  \
    \  if (n == 0) return 1;\n    if (n == 1) return n % p;\n    long half = modp(n\
    \ / 2, p);\n    long result = (half * half) % p;\n    if (n % 2 == 1) result =\
    \ (result * n) % p;\n    return result;\n}\nint main() {\n    auto candidate =\
    \ modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmptfbt9umt: /tmp/tmptfbt9umt.cpp:27: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n;\n    long res = 1;\n    while (n > 0) {\n        if (n % 2 == 1) {\n    \
    \        res = (res * n) % p;\n        }\n        n = n / 2;\n        n = (n *\
    \ n) % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n  long r = modp(n/2,\
    \ p);\n  r = (r*r) % p;\n  if (n % 2 == 1) r = (r*2) % p;\n  return r;\n}\nint\
    \ main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n\
    \    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101))\
    \ == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp3cl_feed: /tmp/tmp3cl_feed.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ (n & 1) {\n            r = (r * 2) % p;\n        }\n        n >>= 1;\n    }\n\
    \    return r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp3bva74cn: /tmp/tmp3bva74cn.cpp:26: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp9yrf2oz0: /tmp/tmp9yrf2oz0.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    long res = modp(n/2,\
    \ p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n\
    \    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t *\
    \ t) % p;\n    }\n    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmphba18370: /tmp/tmphba18370.cpp:26: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpnqgoj4gy: /tmp/tmpnqgoj4gy.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    long res = modp(n\
    \ / 2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) %\
    \ p;\n    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmph7vbsp6h: /tmp/tmph7vbsp6h.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n % p;\n    long r = modp(n/2, p);\n    r = (r * r) % p;\n    if (n % 2 == 1)\
    \ r = (r * n) % p;\n    return r;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp5es_u1lb: /tmp/tmp5es_u1lb.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    long res = modp(n/2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1)\
    \ res = (res * 2) % p;\n    return res;\n}\nint main() {\n    auto candidate =\
    \ modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long m = modp(n / 2, p);\n        return (m *\
    \ m) % p;\n    } else {\n        return (modp(n - 1, p) * n) % p;\n    }\n}\n\
    int main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n\
    \    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101))\
    \ == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp4fexcw55: /tmp/tmp4fexcw55.cpp:27: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t *\
    \ t) % p;\n    }\n    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpfoohwn_y: /tmp/tmpfoohwn_y.cpp:26: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp5d6pwnm4: /tmp/tmp5d6pwnm4.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n > 0) {\n   \
    \     if (n % 2 == 1) {\n            res = (res * n) % p;\n        }\n       \
    \ n = n >> 1;\n        n = (n * n) % p;\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n   \
    \ assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) ==\
    \ (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    long res = modp(n/2,\
    \ p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n\
    \    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long y = modp(n/2, p);\n        return (y*y) %\
    \ p;\n    } else {\n        return (n % p) * modp(n-1, p) % p;\n    }\n}\nint\
    \ main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n\
    \    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101))\
    \ == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpkxnvu9qy: /tmp/tmpkxnvu9qy.cpp:27: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpehsabrxk: /tmp/tmpehsabrxk.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp7bhtx0y7: /tmp/tmp7bhtx0y7.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpdyljxc0a: /tmp/tmpdyljxc0a.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    long res = modp(n/2,\
    \ p);\n    if (n % 2 == 0) {\n        return (res * res) % p;\n    } else {\n\
    \        return (res * res * 2) % p;\n    }\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpog1l12k7: /tmp/tmpog1l12k7.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t *\
    \ t) % p;\n    }\n    else {\n        return (modp(n - 1, p) * n) % p;\n    }\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpj3bk0o1g: /tmp/tmpj3bk0o1g.cpp:28: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n % p;\n    long x = modp(n/2, p);\n    x = (x * x) % p;\n    if (n % 2 == 1)\
    \ x = (x * n) % p;\n    return x;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpv2so693s: /tmp/tmpv2so693s.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n;\n    long tmp = modp(n/2, p);\n    if (n % 2 == 0) return (tmp * tmp) % p;\n\
    \    else return (tmp * tmp * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpy0seblrp: /tmp/tmpy0seblrp.cpp:24: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n > 0) {\n   \
    \     if (n & 1) {\n            res = (res * n) % p;\n        }\n        n = n\
    \ >> 1;\n        n = (n * n) % p;\n    }\n    return res;\n}\nint main() {\n \
    \   auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp79uwbxg7: /tmp/tmp79uwbxg7.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) {\n        return 1;\n    }\n\
    \    long res = modp(n / 2, p);\n    res = (res * res) % p;\n    if (n % 2 ==\
    \ 1) {\n        res = (res * 2) % p;\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    assert(n >= 0);\n  \
    \  if (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n / 2,\
    \ p);\n        return (t * t) % p;\n    } else {\n        return (modp(n - 1,\
    \ p) * 2) % p;\n    }\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    long res = modp(n/2,\
    \ p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n\
    \    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpa3birar4: /tmp/tmpa3birar4.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmps5cu56zb: /tmp/tmps5cu56zb.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) {\n        return 1;\n    }\n\
    \    long res = modp(n / 2, p);\n    res = (res * res) % p;\n    if (n % 2 ==\
    \ 1) {\n        res = (res * 2) % p;\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long r = modp(n / 2, p);\n        return (r * r) % p;\n    } else\
    \ {\n        return (modp(n - 1, p) * n) % p;\n    }\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp1rdfu2so: /tmp/tmp1rdfu2so.cpp:26: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n;\n    long half = modp(n/2, p);\n    long result = (half * half) % p;\n  \
    \  if (n % 2 == 1) result = (result * n) % p;\n    return result;\n}\nint main()\
    \ {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n   \
    \ assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) ==\
    \ (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpbhlqp2t2: /tmp/tmpbhlqp2t2.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  if (n < 0) {\n    n = (n\
    \ % p) + p;\n  }\n  return n % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpa649jmi9: /tmp/tmpa649jmi9.cpp:24: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) {\n        return 1;\n    }\n\
    \    if (n % 2 == 0) {\n        long tmp = modp(n / 2, p);\n        return (tmp\
    \ * tmp) % p;\n    }\n    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp8idbfnih: /tmp/tmp8idbfnih.cpp:27: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n > 0) {\n   \
    \     if (n & 1)\n            res = (res * 2) % p;\n        n >>= 1;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpj9tx4qyj: /tmp/tmpj9tx4qyj.cpp:25: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long tmp = modp(n/2, p);\n        return (tmp * tmp) % p;\n  \
    \  } else {\n        return (modp(n-1, p) * n) % p;\n    }\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpr925a2vq: /tmp/tmpr925a2vq.cpp:26: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t *\
    \ t) % p;\n    }\n    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmposcb4lxi: /tmp/tmposcb4lxi.cpp:26: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n;\n    long res = modp(n/2, p);\n    res = (res * res) % p;\n    if (n % 2\
    \ == 1) res = (res * n) % p;\n    return res;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp68391vag: /tmp/tmp68391vag.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n;\n    long res = modp(n/2, p);\n    res = (res * res) % p;\n    if (n % 2\
    \ == 1) res = (res * n) % p;\n    return res;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpjvgyfy18: /tmp/tmpjvgyfy18.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) {\n        return 1;\n    }\n\
    \    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t *\
    \ t) % p;\n    }\n    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpiqg3vuyp: /tmp/tmpiqg3vuyp.cpp:27: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n;\n    long res = 1;\n    while (n > 0) {\n        if (n % 2 == 1) {\n    \
    \        res = (res * n) % p;\n        }\n        n = n / 2;\n        n = (n *\
    \ n) % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp_f5c6ssh: /tmp/tmp_f5c6ssh.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpsg4zus48: /tmp/tmpsg4zus48.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n == 1) return n;\n    if (n % 2 == 0) {\n        long x = modp(n/2,\
    \ p);\n        return (x * x) % p;\n    } else {\n        return (n * modp(n-1,\
    \ p)) % p;\n    }\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpr5y_fy44: /tmp/tmpr5y_fy44.cpp:28: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    long res = modp(n\
    \ / 2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) %\
    \ p;\n    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long res = modp(n/2, p);\n        return (res * res) % p;\n  \
    \  }\n    return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpegjsccwj: /tmp/tmpegjsccwj.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n) {\n       \
    \ if (n & 1) {\n            res = (res * 2) % p;\n        }\n        n >>= 1;\n\
    \        if (n) {\n            res = (res * res) % p;\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpb7quvmf2: /tmp/tmpb7quvmf2.cpp:30: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n;\n    long res = 1;\n    while (n > 0) {\n        if (n % 2 == 1) {\n    \
    \        res = (res * n) % p;\n        }\n        n = n / 2;\n        n = (n *\
    \ n) % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n > 0) {\n   \
    \     if (n & 1) {\n            res = (res * 2) % p;\n        }\n        n >>=\
    \ 1;\n    }\n    return res;\n}\nint main() {\n    auto candidate = modp;\n  \
    \  assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101)) ==\
    \ (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmptt9abden: /tmp/tmptt9abden.cpp:26: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpx0fbund3: /tmp/tmpx0fbund3.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n > 0) {\n   \
    \     if (n & 1) {\n            res = (res * n) % p;\n        }\n        n = n\
    \ >> 1;\n        n = (n * n) % p;\n    }\n    return res;\n}\nint main() {\n \
    \   auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpl_923ys_: /tmp/tmpl_923ys_.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    for (int i = 0; i < n;\
    \ i++) {\n        res = (res * 2) % p;\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n   \
    \ assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) ==\
    \ (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpkpu7ggrw: /tmp/tmpkpu7ggrw.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpx5lmh6k1: /tmp/tmpx5lmh6k1.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    long res = modp(n\
    \ / 2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) %\
    \ p;\n    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n % p;\n    long res = modp(n/2, p);\n    res = (res * res) % p;\n    if (n\
    \ % 2 == 1) res = (res * 2) % p;\n    return res;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp1am6igtt: /tmp/tmp1am6igtt.cpp:24: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t *\
    \ t) % p;\n    }\n    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp166b6gwq: /tmp/tmp166b6gwq.cpp:26: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n;\n    long res = 1;\n    while (n > 0) {\n        if (n % 2 == 1) {\n    \
    \        res = (res * 2) % p;\n        }\n        n /= 2;\n        if (n > 0)\
    \ {\n            res = (res * res) % p;\n        }\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n\
    \    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101))\
    \ == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpc15caqd1: /tmp/tmpc15caqd1.cpp:32: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpkjdf9b40: /tmp/tmpkjdf9b40.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    long res = modp(n\
    \ / 2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) %\
    \ p;\n    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n % p;\n    long res = modp(n / 2, p);\n    res = (res * res) % p;\n    if (n\
    \ % 2 == 1) res = (res * n) % p;\n    return res;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp3r4k66yy: /tmp/tmp3r4k66yy.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n > 0) {\n     \
    \   if (n % 2 == 1) {\n            r = (r * 2) % p;\n        }\n        n = n\
    \ / 2;\n        if (n > 0) {\n            r = (r * r) % p;\n        }\n    }\n\
    \    return r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmprnhkyo5f: /tmp/tmprnhkyo5f.cpp:30: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpgf6_fy0v: /tmp/tmpgf6_fy0v.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n % p;\n    long res = 1;\n    while (n > 0) {\n        if (n & 1) res = (res\
    \ * n) % p;\n        n = n >> 1;\n        n = (n * n) % p;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t *\
    \ t) % p;\n    }\n    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp8dbstgdz: /tmp/tmp8dbstgdz.cpp:26: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmplok74pys: /tmp/tmplok74pys.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long y = modp(n/2, p);\n        return (y*y) %\
    \ p;\n    } else {\n        return (n*modp(n-1, p)) % p;\n    }\n}\nint main()\
    \ {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n   \
    \ assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) ==\
    \ (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp20kiz1r2: /tmp/tmp20kiz1r2.cpp:27: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpicl667q0: /tmp/tmpicl667q0.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpa9nx3lgt: /tmp/tmpa9nx3lgt.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpvuj6jxel: /tmp/tmpvuj6jxel.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    long res = modp(n\
    \ / 2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) %\
    \ p;\n    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t *\
    \ t) % p;\n    }\n    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp6jbay3v7: /tmp/tmp6jbay3v7.cpp:26: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(n >= 0);\n    assert(p > 0);\n  \
    \  if (n == 0) {\n        return 1;\n    }\n    long half = modp(n / 2, p);\n\
    \    long result = half * half % p;\n    if (n % 2 == 1) {\n        result = result\
    \ * 2 % p;\n    }\n    return result;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long r = modp(n / 2, p);\n        return (r * r) % p;\n    }\n\
    \    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpl4riq8va: /tmp/tmpl4riq8va.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t *\
    \ t) % p;\n    }\n    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp6hh9w7fm: /tmp/tmp6hh9w7fm.cpp:26: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    long res = modp(n\
    \ / 2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) %\
    \ p;\n    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp46xhpkez: /tmp/tmp46xhpkez.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  if (n == 0) return 1;\n\
    \  if (n % 2 == 0) {\n    long t = modp(n / 2, p);\n    return (t * t) % p;\n\
    \  } else {\n    return (modp(n - 1, p) * n) % p;\n  }\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpguylqruz: /tmp/tmpguylqruz.cpp:27: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpvb3wki12: /tmp/tmpvb3wki12.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp1jn20t13: /tmp/tmp1jn20t13.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n % p;\n    long res = 1;\n    while (n > 0) {\n        if (n & 1) res = (res\
    \ * n) % p;\n        n = n >> 1;\n        n = (n * n) % p;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpb8xkd4x_: /tmp/tmpb8xkd4x_.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    long ans = modp(n/2,\
    \ p);\n    ans = (ans * ans) % p;\n    if (n % 2 == 1) ans = (ans * 2) % p;\n\
    \    return ans;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long r = modp(n / 2, p);\n        return (r * r) % p;\n    }\n\
    \    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpysm3qgn2: /tmp/tmpysm3qgn2.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    long r = modp(n\
    \ >> 1, p);\n    r = (r * r) % p;\n    if (n & 1) r = (r * 2) % p;\n    return\
    \ r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5))\
    \ == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    assert(n >= 0);\n  \
    \  if (n == 0) return 1;\n    long res = modp(n/2, p);\n    res = (res * res)\
    \ % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n    return res;\n}\nint main()\
    \ {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n   \
    \ assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) ==\
    \ (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n;\n    long res = 1;\n    while (n > 0) {\n        if (n & 1) res = (res *\
    \ n) % p;\n        n = n >> 1;\n        n = (n * n) % p;\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpo_fa7xug: /tmp/tmpo_fa7xug.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t *\
    \ t) % p;\n    }\n    else {\n        return (modp(n - 1, p) * n) % p;\n    }\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp04bzcz8w: /tmp/tmp04bzcz8w.cpp:28: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t *\
    \ t) % p;\n    }\n    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpqbek5mnp: /tmp/tmpqbek5mnp.cpp:26: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n\tif (n == 0) return 1;\n\tif (n == 1) return\
    \ n;\n\tlong res = modp(n / 2, p);\n\tres = (res * res) % p;\n\tif (n % 2 == 1)\
    \ res = (res * n) % p;\n\treturn res;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpi07k617m: /tmp/tmpi07k617m.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t *\
    \ t) % p;\n    }\n    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpaol24m1t: /tmp/tmpaol24m1t.cpp:26: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpsly951oq: /tmp/tmpsly951oq.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpoz5ijs5l: /tmp/tmpoz5ijs5l.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp6dv8j7l8: /tmp/tmp6dv8j7l8.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    long res = modp(n\
    \ / 2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) %\
    \ p;\n    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t *\
    \ t) % p;\n    }\n    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpemrwisqp: /tmp/tmpemrwisqp.cpp:26: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    long r = modp(n/2,\
    \ p);\n    r = (r*r) % p;\n    if (n % 2 == 1) r = (r*2) % p;\n    return r;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n;\n    if (n % 2 == 0) {\n        long x = modp(n/2, p);\n        return (x*x)\
    \ % p;\n    }\n    return (n*modp(n-1, p)) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpuz1b2z61: /tmp/tmpuz1b2z61.cpp:26: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    long res = 1;\n    for\
    \ (long i = 0; i < n; i++) {\n        res = (res * 2) % p;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n  if (n % 2 == 0) {\n\
    \    long t = modp(n / 2, p);\n    return (t * t) % p;\n  }\n  return (modp(n\
    \ - 1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpmkjh96os: /tmp/tmpmkjh96os.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    long res = modp(n\
    \ / 2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) %\
    \ p;\n    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n;\n    long res = 1;\n    while (n > 0) {\n        if (n & 1) {\n         \
    \   res = (res * n) % p;\n        }\n        n = n >> 1;\n        n = (n * n)\
    \ % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ else {\n        return (modp(n-1, p) * n) % p;\n    }\n}\nint main() {\n   \
    \ auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp0sildxms: /tmp/tmp0sildxms.cpp:27: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    long res = modp(n\
    \ / 2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) %\
    \ p;\n    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t *\
    \ t) % p;\n    }\n    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpk9gsw277: /tmp/tmpk9gsw277.cpp:26: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  if (n == 0) return 1;\n\
    \  if (n % 2 == 0) {\n    long x = modp(n/2, p);\n    return (x * x) % p;\n  }\
    \ else {\n    return (modp(n-1, p) * n) % p;\n  }\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpzhzl_bsk: /tmp/tmpzhzl_bsk.cpp:27: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n == 1) return n % p;\n    if (n % 2 == 0) {\n        long t = modp(n\
    \ / 2, p);\n        return (t * t) % p;\n    }\n    return (n * modp(n - 1, p))\
    \ % p;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpq5_nxray: /tmp/tmpq5_nxray.cpp:27: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n % p;\n    long res = 1;\n    while (n > 0) {\n        if (n & 1) res = (res\
    \ * n) % p;\n        n = n >> 1;\n        n = (n * n) % p;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpf2ay62oz: /tmp/tmpf2ay62oz.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpogp87n49: /tmp/tmpogp87n49.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpky8wt8zh: /tmp/tmpky8wt8zh.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    long res = modp(n/2,\
    \ p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n\
    \    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    long res = modp(n/2,\
    \ p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n\
    \    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpo7vzs98k: /tmp/tmpo7vzs98k.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n\tif (n == 0) return 1;\n\tif (n % 2 == 0) {\n\
    \t\tlong t = modp(n / 2, p);\n\t\treturn (t * t) % p;\n\t}\n\telse {\n\t\treturn\
    \ (2 * modp(n - 1, p)) % p;\n\t}\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    long res = modp(n/2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1)\
    \ res = (res * 2) % p;\n    return res;\n}\nint main() {\n    auto candidate =\
    \ modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    assert(n >= 0);\n  \
    \  if (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n / 2,\
    \ p);\n        return (t * t) % p;\n    } else {\n        return (modp(n - 1,\
    \ p) * n) % p;\n    }\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpmr2cy092: /tmp/tmpmr2cy092.cpp:28: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n;\n    if (n % 2 == 0) {\n        long r = modp(n/2, p);\n        return (r*r)\
    \ % p;\n    }\n    else {\n        long r = modp(n/2, p);\n        return (r*r*n)\
    \ % p;\n    }\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp31p_lcz3: /tmp/tmp31p_lcz3.cpp:29: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    long res = modp(n/2,\
    \ p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n\
    \    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp4innmdhk: /tmp/tmp4innmdhk.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    long ans = modp(n\
    \ / 2, p);\n    ans = (ans * ans) % p;\n    if (n % 2 == 1) ans = (ans * 2) %\
    \ p;\n    return ans;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpu9jdqrbf: /tmp/tmpu9jdqrbf.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpn6ptt1fo: /tmp/tmpn6ptt1fo.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long x = modp(n/2, p);\n        return (x*x) % p;\n    } else\
    \ {\n        return (modp(n-1, p) * n) % p;\n    }\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpze62y8tz: /tmp/tmpze62y8tz.cpp:26: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n;\n    long res = 1;\n    while (n > 0) {\n        if (n & 1) res = (res *\
    \ n) % p;\n        n = n >> 1;\n        n = (n * n) % p;\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t *\
    \ t) % p;\n    }\n    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp5bbzidue: /tmp/tmp5bbzidue.cpp:26: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n;\n    long res = 1;\n    while (n > 0) {\n        if (n & 1) res = (res *\
    \ n) % p;\n        n = n >> 1;\n        n = (n * n) % p;\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n;\n    long res = 1;\n    while (n > 0) {\n        if (n % 2 == 1) {\n    \
    \        res = (res * n) % p;\n        }\n        n = n / 2;\n        n = (n *\
    \ n) % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n > 0) {\n     \
    \   if (n % 2 == 1) {\n            r = (r * 2) % p;\n        }\n        n = n\
    \ / 2;\n        if (n > 0) {\n            r = (r * r) % p;\n        }\n    }\n\
    \    return r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmppd51r2zd: /tmp/tmppd51r2zd.cpp:30: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) {\n        return 1;\n    }\n\
    \    if (n % 2 == 0) {\n        long tmp = modp(n / 2, p);\n        return (tmp\
    \ * tmp) % p;\n    }\n    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpr5v37zj4: /tmp/tmpr5v37zj4.cpp:27: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n == 1) return n % p;\n    long res = 1;\n    while (n > 0) {\n     \
    \   if (n & 1) {\n            res = (res * n) % p;\n        }\n        n = n >>\
    \ 1;\n        n = (n * n) % p;\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t *\
    \ t) % p;\n    }\n    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmptc8ll38m: /tmp/tmptc8ll38m.cpp:26: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ else {\n        return (modp(n-1, p) * n) % p;\n    }\n}\nint main() {\n   \
    \ auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpk8d3kqce: /tmp/tmpk8d3kqce.cpp:27: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n\tif (n == 0) return 1;\n\tif (n % 2 == 0) {\n\
    \t\tlong t = modp(n / 2, p);\n\t\treturn (t * t) % p;\n\t}\n\telse return (modp(n\
    \ - 1, p) * 2) % p;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) {\n        return 1;\n    }\n\
    \    if (n % 2 == 0) {\n        long half = modp(n / 2, p);\n        return (half\
    \ * half) % p;\n    }\n    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpwhqbd9ex: /tmp/tmpwhqbd9ex.cpp:27: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t *\
    \ t) % p;\n    }\n    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp120_y7wh: /tmp/tmp120_y7wh.cpp:26: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n;\n    long res = 1;\n    while (n > 0) {\n        if (n & 1) {\n         \
    \   res = (res * n) % p;\n        }\n        n = n >> 1;\n        n = (n * n)\
    \ % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpke7t8_h9: /tmp/tmpke7t8_h9.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long y = modp(n/2, p);\n        return (y*y) %\
    \ p;\n    } else {\n        return (n * modp(n-1, p)) % p;\n    }\n}\nint main()\
    \ {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n   \
    \ assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) ==\
    \ (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp37a6o669: /tmp/tmp37a6o669.cpp:27: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long res = modp(n/2, p);\n        return (res * res) % p;\n  \
    \  }\n    return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp15z8ayfu: /tmp/tmp15z8ayfu.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    long res = modp(n/2,\
    \ p);\n    res = (res * res) % p;\n    if (n % 2 == 1) {\n        res = (res *\
    \ 2) % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long r = modp(n / 2, p);\n        return (r * r) % p;\n    } else\
    \ {\n        return (modp(n - 1, p) * n) % p;\n    }\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp_rg8c6mo: /tmp/tmp_rg8c6mo.cpp:26: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpj4pe4bus: /tmp/tmpj4pe4bus.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    long res = modp(n/2,\
    \ p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n\
    \    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmppicl8690: /tmp/tmppicl8690.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpdj5d2t2f: /tmp/tmpdj5d2t2f.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long r = modp(n / 2, p);\n        return (r * r) % p;\n    }\n\
    \    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpxwl6q36i: /tmp/tmpxwl6q36i.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long r = modp(n / 2, p);\n        return (r * r) % p;\n    }\n\
    \    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp6_h9oh6o: /tmp/tmp6_h9oh6o.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpe8w6ujrr: /tmp/tmpe8w6ujrr.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long x = modp(n/2, p);\n        return (x * x) % p;\n    } else\
    \ {\n        return (n * modp(n-1, p)) % p;\n    }\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmptxshcs9o: /tmp/tmptxshcs9o.cpp:26: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    long res = modp(n/2,\
    \ p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n\
    \    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) {\n        return 1;\n    }\n\
    \    long res = modp(n / 2, p);\n    res = (res * res) % p;\n    if (n % 2 ==\
    \ 1) {\n        res = (res * 2) % p;\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  long res = 1;\n  while (n > 0) {\n    if (n\
    \ & 1) {\n      res = (res * n) % p;\n    }\n    n = n >> 1;\n    n = (n * n)\
    \ % p;\n  }\n  return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpd3p4vi4x: /tmp/tmpd3p4vi4x.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n;\n    if (n % 2 == 0) {\n        long r = modp(n/2, p);\n        return (r*r)\
    \ % p;\n    }\n    else {\n        long r = modp(n/2, p);\n        return (r*r*n)\
    \ % p;\n    }\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpq9_9bmqy: /tmp/tmpq9_9bmqy.cpp:29: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpa8ntu8th: /tmp/tmpa8ntu8th.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp17lwxix4: /tmp/tmp17lwxix4.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) {\n        return 1;\n    }\n\
    \    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t *\
    \ t) % p;\n    }\n    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp6576nbxc: /tmp/tmp6576nbxc.cpp:27: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpc2gkfa8s: /tmp/tmpc2gkfa8s.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  if (n == 0) return 1;\n\
    \  if (n % 2 == 0) {\n    long t = modp(n / 2, p);\n    return (t * t) % p;\n\
    \  } else {\n    return (modp(n - 1, p) * n) % p;\n  }\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpz4dffj49: /tmp/tmpz4dffj49.cpp:27: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpvhp9cycm: /tmp/tmpvhp9cycm.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n % p;\n    long res = modp(n/2, p);\n    res = (res * res) % p;\n    if (n\
    \ % 2 == 1) {\n        res = (res * n) % p;\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n   \
    \ assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) ==\
    \ (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpc_hes7nb: /tmp/tmpc_hes7nb.cpp:27: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp1kde8qhf: /tmp/tmp1kde8qhf.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n % p;\n    long res = 1;\n    while (n > 0) {\n        if (n & 1) res = (res\
    \ * n) % p;\n        n = n >> 1;\n        n = (n * n) % p;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp_mj0oex5: /tmp/tmp_mj0oex5.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    long res = modp(n/2,\
    \ p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n\
    \    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) {\n        return 1;\n    }\n\
    \    if (n % 2 == 0) {\n        long r = modp(n / 2, p);\n        return (r *\
    \ r) % p;\n    }\n    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpxadkysxc: /tmp/tmpxadkysxc.cpp:27: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp1_qfmg6a: /tmp/tmp1_qfmg6a.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long x = modp(n/2, p);\n        return (x * x) % p;\n    } else\
    \ {\n        return (modp(n-1, p) * n) % p;\n    }\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp69jhkv4j: /tmp/tmp69jhkv4j.cpp:26: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    for (int i = 0; i < n;\
    \ i++) {\n        res = (res * 2) % p;\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n   \
    \ assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) ==\
    \ (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  if (n < 0)\n    n = (n %\
    \ p) + p;\n  if (n == 0)\n    return 1;\n  long res = 1;\n  while (n > 0) {\n\
    \    if (n & 1)\n      res = (res * 2) % p;\n    n >>= 1;\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmprq0h1uhx: /tmp/tmprq0h1uhx.cpp:30: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpk_t5jpju: /tmp/tmpk_t5jpju.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp_dr1h7x5: /tmp/tmp_dr1h7x5.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t *\
    \ t) % p;\n    }\n    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpdmm6clhu: /tmp/tmpdmm6clhu.cpp:26: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t *\
    \ t) % p;\n    }\n    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp5be8xf42: /tmp/tmp5be8xf42.cpp:26: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n % p;\n    long half = modp(n / 2, p);\n    long half_sq = (half * half) %\
    \ p;\n    if (n % 2 == 0) {\n        return half_sq;\n    } else {\n        return\
    \ (half_sq * n) % p;\n    }\n}\nint main() {\n    auto candidate = modp;\n   \
    \ assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101)) ==\
    \ (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpz279cgwx: /tmp/tmpz279cgwx.cpp:28: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n;\n    long res = 1;\n    while (n > 0) {\n        if (n % 2 == 1) {\n    \
    \        res = (res * n) % p;\n        }\n        n = n / 2;\n        n = (n *\
    \ n) % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpoytux_tp: /tmp/tmpoytux_tp.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    long res = modp(n/2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1)\
    \ res = (res * 2) % p;\n    return res;\n}\nint main() {\n    auto candidate =\
    \ modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long res = modp(n/2, p);\n        return (res * res) % p;\n  \
    \  }\n    return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmplg363ydj: /tmp/tmplg363ydj.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n == 1) return n % p;\n    if (n % 2 == 0) {\n        long t = modp(n\
    \ / 2, p);\n        return (t * t) % p;\n    }\n    return (n * modp(n - 1, p))\
    \ % p;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp4e0ja_bs: /tmp/tmp4e0ja_bs.cpp:27: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n % p;\n    long res = modp(n / 2, p);\n    res = (res * res) % p;\n    if (n\
    \ % 2) res = (res * n) % p;\n    return res;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpm51yaxvj: /tmp/tmpm51yaxvj.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n % p;\n    long res = 1;\n    while (n > 0) {\n        if (n & 1) res = (res\
    \ * n) % p;\n        n = n >> 1;\n        n = (n * n) % p;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n > 0) {\n   \
    \     if (n & 1)\n            res = (res * 2) % p;\n        n >>= 1;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmphx4c6syx: /tmp/tmphx4c6syx.cpp:25: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpbogpmnel: /tmp/tmpbogpmnel.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n % p;\n    long long res = modp(n/2, p);\n    res = (res * res) % p;\n    if\
    \ (n % 2 == 1) res = (res * n) % p;\n    return res;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpwsv6bqhu: /tmp/tmpwsv6bqhu.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n;\n    long res = 1;\n    while (n > 0) {\n        if (n & 1) res = (res *\
    \ n) % p;\n        n = n >> 1;\n        n = (n * n) % p;\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpjgfxaz4z: /tmp/tmpjgfxaz4z.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    long res = modp(n/2,\
    \ p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n\
    \    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    long res = modp(n/2,\
    \ p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n\
    \    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t *\
    \ t) % p;\n    }\n    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpg524aich: /tmp/tmpg524aich.cpp:26: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp6eqxn29k: /tmp/tmp6eqxn29k.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long x = modp(n/2, p);\n        return (x * x) % p;\n    } else\
    \ {\n        return (modp(n-1, p) * n) % p;\n    }\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpt_ee8_kd: /tmp/tmpt_ee8_kd.cpp:26: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(n >= 0);\n    assert(p > 0);\n  \
    \  if (n == 0) return 1;\n    if (n == 1) return n % p;\n    long half = modp(n\
    \ / 2, p);\n    long result = (half * half) % p;\n    if (n % 2 == 1) result =\
    \ (result * n) % p;\n    return result;\n}\nint main() {\n    auto candidate =\
    \ modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpgtparlxw: /tmp/tmpgtparlxw.cpp:27: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n;\n    long res = 1;\n    while (n > 0) {\n        if (n % 2 == 1) {\n    \
    \        res = (res * n) % p;\n        }\n        n = n / 2;\n        n = (n *\
    \ n) % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n  long r = modp(n/2,\
    \ p);\n  r = (r*r) % p;\n  if (n % 2 == 1) r = (r*2) % p;\n  return r;\n}\nint\
    \ main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n\
    \    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101))\
    \ == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpahlmavn_: /tmp/tmpahlmavn_.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ (n & 1) {\n            r = (r * 2) % p;\n        }\n        n >>= 1;\n    }\n\
    \    return r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp47hss9e0: /tmp/tmp47hss9e0.cpp:26: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpjcm49aje: /tmp/tmpjcm49aje.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    long res = modp(n/2,\
    \ p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n\
    \    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t *\
    \ t) % p;\n    }\n    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp1f5dntum: /tmp/tmp1f5dntum.cpp:26: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmplpgv132w: /tmp/tmplpgv132w.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    long res = modp(n\
    \ / 2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) %\
    \ p;\n    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmppqzkw5xl: /tmp/tmppqzkw5xl.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n % p;\n    long r = modp(n/2, p);\n    r = (r * r) % p;\n    if (n % 2 == 1)\
    \ r = (r * n) % p;\n    return r;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpbs072pr5: /tmp/tmpbs072pr5.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    long res = modp(n/2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1)\
    \ res = (res * 2) % p;\n    return res;\n}\nint main() {\n    auto candidate =\
    \ modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long m = modp(n / 2, p);\n        return (m *\
    \ m) % p;\n    } else {\n        return (modp(n - 1, p) * n) % p;\n    }\n}\n\
    int main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n\
    \    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101))\
    \ == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmppkddb4y0: /tmp/tmppkddb4y0.cpp:27: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t *\
    \ t) % p;\n    }\n    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpll1_4kis: /tmp/tmpll1_4kis.cpp:26: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp94rk59cf: /tmp/tmp94rk59cf.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n > 0) {\n   \
    \     if (n % 2 == 1) {\n            res = (res * n) % p;\n        }\n       \
    \ n = n >> 1;\n        n = (n * n) % p;\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n   \
    \ assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) ==\
    \ (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    long res = modp(n/2,\
    \ p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n\
    \    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long y = modp(n/2, p);\n        return (y*y) %\
    \ p;\n    } else {\n        return (n % p) * modp(n-1, p) % p;\n    }\n}\nint\
    \ main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n\
    \    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101))\
    \ == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpjm9fdh8l: /tmp/tmpjm9fdh8l.cpp:27: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmppizyyjbb: /tmp/tmppizyyjbb.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpwwaey41g: /tmp/tmpwwaey41g.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpo39ipgzw: /tmp/tmpo39ipgzw.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    long res = modp(n/2,\
    \ p);\n    if (n % 2 == 0) {\n        return (res * res) % p;\n    } else {\n\
    \        return (res * res * 2) % p;\n    }\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpp4g6byx1: /tmp/tmpp4g6byx1.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t *\
    \ t) % p;\n    }\n    else {\n        return (modp(n - 1, p) * n) % p;\n    }\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp836t1r2m: /tmp/tmp836t1r2m.cpp:28: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n % p;\n    long x = modp(n/2, p);\n    x = (x * x) % p;\n    if (n % 2 == 1)\
    \ x = (x * n) % p;\n    return x;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpjtnkwfca: /tmp/tmpjtnkwfca.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n;\n    long tmp = modp(n/2, p);\n    if (n % 2 == 0) return (tmp * tmp) % p;\n\
    \    else return (tmp * tmp * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpe9zk2502: /tmp/tmpe9zk2502.cpp:24: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n > 0) {\n   \
    \     if (n & 1) {\n            res = (res * n) % p;\n        }\n        n = n\
    \ >> 1;\n        n = (n * n) % p;\n    }\n    return res;\n}\nint main() {\n \
    \   auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpn3u82rje: /tmp/tmpn3u82rje.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) {\n        return 1;\n    }\n\
    \    long res = modp(n / 2, p);\n    res = (res * res) % p;\n    if (n % 2 ==\
    \ 1) {\n        res = (res * 2) % p;\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    assert(n >= 0);\n  \
    \  if (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n / 2,\
    \ p);\n        return (t * t) % p;\n    } else {\n        return (modp(n - 1,\
    \ p) * 2) % p;\n    }\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    long res = modp(n/2,\
    \ p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n\
    \    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp2bdc26a0: /tmp/tmp2bdc26a0.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpztoiw118: /tmp/tmpztoiw118.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) {\n        return 1;\n    }\n\
    \    long res = modp(n / 2, p);\n    res = (res * res) % p;\n    if (n % 2 ==\
    \ 1) {\n        res = (res * 2) % p;\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long r = modp(n / 2, p);\n        return (r * r) % p;\n    } else\
    \ {\n        return (modp(n - 1, p) * n) % p;\n    }\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpevd50bhh: /tmp/tmpevd50bhh.cpp:26: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n;\n    long half = modp(n/2, p);\n    long result = (half * half) % p;\n  \
    \  if (n % 2 == 1) result = (result * n) % p;\n    return result;\n}\nint main()\
    \ {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n   \
    \ assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) ==\
    \ (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpymx849lk: /tmp/tmpymx849lk.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  if (n < 0) {\n    n = (n\
    \ % p) + p;\n  }\n  return n % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpqqddbvg7: /tmp/tmpqqddbvg7.cpp:24: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) {\n        return 1;\n    }\n\
    \    if (n % 2 == 0) {\n        long tmp = modp(n / 2, p);\n        return (tmp\
    \ * tmp) % p;\n    }\n    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpzb4xyf2y: /tmp/tmpzb4xyf2y.cpp:27: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n > 0) {\n   \
    \     if (n & 1)\n            res = (res * 2) % p;\n        n >>= 1;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpi8391q0l: /tmp/tmpi8391q0l.cpp:25: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long tmp = modp(n/2, p);\n        return (tmp * tmp) % p;\n  \
    \  } else {\n        return (modp(n-1, p) * n) % p;\n    }\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpkqt10swz: /tmp/tmpkqt10swz.cpp:26: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t *\
    \ t) % p;\n    }\n    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpplx8kqx8: /tmp/tmpplx8kqx8.cpp:26: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n;\n    long res = modp(n/2, p);\n    res = (res * res) % p;\n    if (n % 2\
    \ == 1) res = (res * n) % p;\n    return res;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpe57rkc8i: /tmp/tmpe57rkc8i.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n;\n    long res = modp(n/2, p);\n    res = (res * res) % p;\n    if (n % 2\
    \ == 1) res = (res * n) % p;\n    return res;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmphir5cjhk: /tmp/tmphir5cjhk.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) {\n        return 1;\n    }\n\
    \    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t *\
    \ t) % p;\n    }\n    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpk9ufkxys: /tmp/tmpk9ufkxys.cpp:27: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n;\n    long res = 1;\n    while (n > 0) {\n        if (n % 2 == 1) {\n    \
    \        res = (res * n) % p;\n        }\n        n = n / 2;\n        n = (n *\
    \ n) % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpr8acs5h6: /tmp/tmpr8acs5h6.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp3v_sq5h6: /tmp/tmp3v_sq5h6.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n == 1) return n;\n    if (n % 2 == 0) {\n        long x = modp(n/2,\
    \ p);\n        return (x * x) % p;\n    } else {\n        return (n * modp(n-1,\
    \ p)) % p;\n    }\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpixhswfov: /tmp/tmpixhswfov.cpp:28: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    long res = modp(n\
    \ / 2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) %\
    \ p;\n    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long res = modp(n/2, p);\n        return (res * res) % p;\n  \
    \  }\n    return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpzvu_1s0z: /tmp/tmpzvu_1s0z.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n) {\n       \
    \ if (n & 1) {\n            res = (res * 2) % p;\n        }\n        n >>= 1;\n\
    \        if (n) {\n            res = (res * res) % p;\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpmoo0h6id: /tmp/tmpmoo0h6id.cpp:30: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n;\n    long res = 1;\n    while (n > 0) {\n        if (n % 2 == 1) {\n    \
    \        res = (res * n) % p;\n        }\n        n = n / 2;\n        n = (n *\
    \ n) % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n > 0) {\n   \
    \     if (n & 1) {\n            res = (res * 2) % p;\n        }\n        n >>=\
    \ 1;\n    }\n    return res;\n}\nint main() {\n    auto candidate = modp;\n  \
    \  assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101)) ==\
    \ (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpbgfdfsrz: /tmp/tmpbgfdfsrz.cpp:26: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpylwrwti9: /tmp/tmpylwrwti9.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n > 0) {\n   \
    \     if (n & 1) {\n            res = (res * n) % p;\n        }\n        n = n\
    \ >> 1;\n        n = (n * n) % p;\n    }\n    return res;\n}\nint main() {\n \
    \   auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmptmr_gqep: /tmp/tmptmr_gqep.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    for (int i = 0; i < n;\
    \ i++) {\n        res = (res * 2) % p;\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n   \
    \ assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) ==\
    \ (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp2wi1ywj7: /tmp/tmp2wi1ywj7.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmped5rsejm: /tmp/tmped5rsejm.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    long res = modp(n\
    \ / 2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) %\
    \ p;\n    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n % p;\n    long res = modp(n/2, p);\n    res = (res * res) % p;\n    if (n\
    \ % 2 == 1) res = (res * 2) % p;\n    return res;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp_h5jljke: /tmp/tmp_h5jljke.cpp:24: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t *\
    \ t) % p;\n    }\n    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpy2ec_3hg: /tmp/tmpy2ec_3hg.cpp:26: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n;\n    long res = 1;\n    while (n > 0) {\n        if (n % 2 == 1) {\n    \
    \        res = (res * 2) % p;\n        }\n        n /= 2;\n        if (n > 0)\
    \ {\n            res = (res * res) % p;\n        }\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n\
    \    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101))\
    \ == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpmmz2l505: /tmp/tmpmmz2l505.cpp:32: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpgq6ror_h: /tmp/tmpgq6ror_h.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    long res = modp(n\
    \ / 2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) %\
    \ p;\n    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n % p;\n    long res = modp(n / 2, p);\n    res = (res * res) % p;\n    if (n\
    \ % 2 == 1) res = (res * n) % p;\n    return res;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpjgzziyh9: /tmp/tmpjgzziyh9.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n > 0) {\n     \
    \   if (n % 2 == 1) {\n            r = (r * 2) % p;\n        }\n        n = n\
    \ / 2;\n        if (n > 0) {\n            r = (r * r) % p;\n        }\n    }\n\
    \    return r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmptiv00fjs: /tmp/tmptiv00fjs.cpp:30: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp7vbj_vos: /tmp/tmp7vbj_vos.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n % p;\n    long res = 1;\n    while (n > 0) {\n        if (n & 1) res = (res\
    \ * n) % p;\n        n = n >> 1;\n        n = (n * n) % p;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t *\
    \ t) % p;\n    }\n    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp0047stw8: /tmp/tmp0047stw8.cpp:26: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp_h9iev7m: /tmp/tmp_h9iev7m.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long y = modp(n/2, p);\n        return (y*y) %\
    \ p;\n    } else {\n        return (n*modp(n-1, p)) % p;\n    }\n}\nint main()\
    \ {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n   \
    \ assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) ==\
    \ (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpqag8mefh: /tmp/tmpqag8mefh.cpp:27: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpllztv2pf: /tmp/tmpllztv2pf.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp3mrnzkeg: /tmp/tmp3mrnzkeg.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpj4ntm9v7: /tmp/tmpj4ntm9v7.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    long res = modp(n\
    \ / 2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) %\
    \ p;\n    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t *\
    \ t) % p;\n    }\n    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmptj02q896: /tmp/tmptj02q896.cpp:26: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(n >= 0);\n    assert(p > 0);\n  \
    \  if (n == 0) {\n        return 1;\n    }\n    long half = modp(n / 2, p);\n\
    \    long result = half * half % p;\n    if (n % 2 == 1) {\n        result = result\
    \ * 2 % p;\n    }\n    return result;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long r = modp(n / 2, p);\n        return (r * r) % p;\n    }\n\
    \    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpop4noapg: /tmp/tmpop4noapg.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t *\
    \ t) % p;\n    }\n    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpe7574sd8: /tmp/tmpe7574sd8.cpp:26: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    long res = modp(n\
    \ / 2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) %\
    \ p;\n    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpa52flljg: /tmp/tmpa52flljg.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  if (n == 0) return 1;\n\
    \  if (n % 2 == 0) {\n    long t = modp(n / 2, p);\n    return (t * t) % p;\n\
    \  } else {\n    return (modp(n - 1, p) * n) % p;\n  }\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmposp0b2fz: /tmp/tmposp0b2fz.cpp:27: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp07xd69ff: /tmp/tmp07xd69ff.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpwq730zk7: /tmp/tmpwq730zk7.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n % p;\n    long res = 1;\n    while (n > 0) {\n        if (n & 1) res = (res\
    \ * n) % p;\n        n = n >> 1;\n        n = (n * n) % p;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpbd9gjohz: /tmp/tmpbd9gjohz.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    long ans = modp(n/2,\
    \ p);\n    ans = (ans * ans) % p;\n    if (n % 2 == 1) ans = (ans * 2) % p;\n\
    \    return ans;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long r = modp(n / 2, p);\n        return (r * r) % p;\n    }\n\
    \    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpxrgcp_dh: /tmp/tmpxrgcp_dh.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    long r = modp(n\
    \ >> 1, p);\n    r = (r * r) % p;\n    if (n & 1) r = (r * 2) % p;\n    return\
    \ r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5))\
    \ == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    assert(n >= 0);\n  \
    \  if (n == 0) return 1;\n    long res = modp(n/2, p);\n    res = (res * res)\
    \ % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n    return res;\n}\nint main()\
    \ {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n   \
    \ assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) ==\
    \ (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n;\n    long res = 1;\n    while (n > 0) {\n        if (n & 1) res = (res *\
    \ n) % p;\n        n = n >> 1;\n        n = (n * n) % p;\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp1mqpswrw: /tmp/tmp1mqpswrw.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t *\
    \ t) % p;\n    }\n    else {\n        return (modp(n - 1, p) * n) % p;\n    }\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpbnf2c2r5: /tmp/tmpbnf2c2r5.cpp:28: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t *\
    \ t) % p;\n    }\n    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmphtm6bm_o: /tmp/tmphtm6bm_o.cpp:26: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n\tif (n == 0) return 1;\n\tif (n == 1) return\
    \ n;\n\tlong res = modp(n / 2, p);\n\tres = (res * res) % p;\n\tif (n % 2 == 1)\
    \ res = (res * n) % p;\n\treturn res;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmphb5e7gjp: /tmp/tmphb5e7gjp.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t *\
    \ t) % p;\n    }\n    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpx5z61_cu: /tmp/tmpx5z61_cu.cpp:26: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp9b83okk6: /tmp/tmp9b83okk6.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp1_9j90up: /tmp/tmp1_9j90up.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpgdqk051h: /tmp/tmpgdqk051h.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    long res = modp(n\
    \ / 2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) %\
    \ p;\n    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t *\
    \ t) % p;\n    }\n    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpldedeh7w: /tmp/tmpldedeh7w.cpp:26: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    long r = modp(n/2,\
    \ p);\n    r = (r*r) % p;\n    if (n % 2 == 1) r = (r*2) % p;\n    return r;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n;\n    if (n % 2 == 0) {\n        long x = modp(n/2, p);\n        return (x*x)\
    \ % p;\n    }\n    return (n*modp(n-1, p)) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpgby44avr: /tmp/tmpgby44avr.cpp:26: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    long res = 1;\n    for\
    \ (long i = 0; i < n; i++) {\n        res = (res * 2) % p;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n  if (n % 2 == 0) {\n\
    \    long t = modp(n / 2, p);\n    return (t * t) % p;\n  }\n  return (modp(n\
    \ - 1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpjatxk250: /tmp/tmpjatxk250.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    long res = modp(n\
    \ / 2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) %\
    \ p;\n    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n;\n    long res = 1;\n    while (n > 0) {\n        if (n & 1) {\n         \
    \   res = (res * n) % p;\n        }\n        n = n >> 1;\n        n = (n * n)\
    \ % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ else {\n        return (modp(n-1, p) * n) % p;\n    }\n}\nint main() {\n   \
    \ auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpyx8czqqm: /tmp/tmpyx8czqqm.cpp:27: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    long res = modp(n\
    \ / 2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) %\
    \ p;\n    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t *\
    \ t) % p;\n    }\n    return (modp(n - 1, p) * n) % p;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp6_qva4es: /tmp/tmp6_qva4es.cpp:26: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  if (n == 0) return 1;\n\
    \  if (n % 2 == 0) {\n    long x = modp(n/2, p);\n    return (x * x) % p;\n  }\
    \ else {\n    return (modp(n-1, p) * n) % p;\n  }\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp33monopg: /tmp/tmp33monopg.cpp:27: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n == 1) return n % p;\n    if (n % 2 == 0) {\n        long t = modp(n\
    \ / 2, p);\n        return (t * t) % p;\n    }\n    return (n * modp(n - 1, p))\
    \ % p;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpsrxpkqiy: /tmp/tmpsrxpkqiy.cpp:27: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n % p;\n    long res = 1;\n    while (n > 0) {\n        if (n & 1) res = (res\
    \ * n) % p;\n        n = n >> 1;\n        n = (n * n) % p;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpc33bzmig: /tmp/tmpc33bzmig.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmph3gouf_s: /tmp/tmph3gouf_s.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpe5agqeoh: /tmp/tmpe5agqeoh.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    long res = modp(n/2,\
    \ p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n\
    \    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    long res = modp(n/2,\
    \ p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n\
    \    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpcqqtv2k4: /tmp/tmpcqqtv2k4.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n\tif (n == 0) return 1;\n\tif (n % 2 == 0) {\n\
    \t\tlong t = modp(n / 2, p);\n\t\treturn (t * t) % p;\n\t}\n\telse {\n\t\treturn\
    \ (2 * modp(n - 1, p)) % p;\n\t}\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    long res = modp(n/2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1)\
    \ res = (res * 2) % p;\n    return res;\n}\nint main() {\n    auto candidate =\
    \ modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    assert(p > 0);\n    assert(n >= 0);\n  \
    \  if (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n / 2,\
    \ p);\n        return (t * t) % p;\n    } else {\n        return (modp(n - 1,\
    \ p) * n) % p;\n    }\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpq_jmoigl: /tmp/tmpq_jmoigl.cpp:28: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n;\n    if (n % 2 == 0) {\n        long r = modp(n/2, p);\n        return (r*r)\
    \ % p;\n    }\n    else {\n        long r = modp(n/2, p);\n        return (r*r*n)\
    \ % p;\n    }\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpulwx1sj8: /tmp/tmpulwx1sj8.cpp:29: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    long res = modp(n/2,\
    \ p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n\
    \    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmppwimttdt: /tmp/tmppwimttdt.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    long ans = modp(n\
    \ / 2, p);\n    ans = (ans * ans) % p;\n    if (n % 2 == 1) ans = (ans * 2) %\
    \ p;\n    return ans;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpimo__7ty: /tmp/tmpimo__7ty.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp84k4_zdp: /tmp/tmp84k4_zdp.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long x = modp(n/2, p);\n        return (x*x) % p;\n    } else\
    \ {\n        return (modp(n-1, p) * n) % p;\n    }\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpy2kwzqdk: /tmp/tmpy2kwzqdk.cpp:26: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
