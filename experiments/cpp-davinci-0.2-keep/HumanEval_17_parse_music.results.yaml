language: cpp
name: HumanEval_17_parse_music
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"o\")\n\
    \            result.push_back(4);\n        else if (temp == \"o|\")\n        \
    \    result.push_back(2);\n        else if (temp == \".|\")\n            result.push_back(1);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        if\
    \ (item == \"o\") {\n            result.push_back(4);\n        } else if (item\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (item == \"\
    .|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        if\
    \ (item == \"o\") {\n            result.push_back(4);\n        } else if (item\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (item == \"\
    .|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"o\") {\n\
    \            result.push_back(4);\n        } else if (word == \"o|\") {\n    \
    \        result.push_back(2);\n        } else if (word == \".|\") {\n        \
    \    result.push_back(1);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> beats;\n    std::stringstream ss(music_string);\n \
    \   std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            beats.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            beats.push_back(2);\n        } else if (token == \"\
    .|\") {\n            beats.push_back(1);\n        }\n    }\n    return beats;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085774
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> beats;\n    for (auto i : music_string) {\n       \
    \ if (i == 'o') {\n            beats.push_back(4);\n        } else if (i == '|')\
    \ {\n            beats.push_back(2);\n        } else if (i == '.') {\n       \
    \     beats.push_back(1);\n        }\n    }\n    return beats;\n}\nint main()\
    \ {\n    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmp7fubl8zz: /tmp/tmp7fubl8zz.cpp:29: int main(): Assertion `candidate((".|
    .| .| .|")) == (std::vector<long>({(long)1, (long)1, (long)1, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085775
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n\tstd::vector<long> result;\n\tlong count = 0;\n\tfor (int i = 0; i < music_string.size();\
    \ i++) {\n\t\tif (music_string[i] == 'o') {\n\t\t\tif (music_string[i + 1] ==\
    \ ' ') {\n\t\t\t\tresult.push_back(4);\n\t\t\t}\n\t\t\telse if (music_string[i\
    \ + 1] == '|') {\n\t\t\t\tresult.push_back(2);\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\
    \t\telse if (music_string[i] == '.') {\n\t\t\tresult.push_back(1);\n\t\t\ti++;\n\
    \t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpary9537t: /tmp/tmpary9537t.cpp:35: int main(): Assertion `candidate(("o
    o o o")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string note;\n    while (ss >> note) {\n        if (note == \"o\") {\n\
    \            result.push_back(4);\n        } else if (note == \"o|\") {\n    \
    \        result.push_back(2);\n        } else if (note == \".|\") {\n        \
    \    result.push_back(1);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"o\") {\n\
    \            result.push_back(4);\n        } else if (temp == \"o|\") {\n    \
    \        result.push_back(2);\n        } else if (temp == \".|\") {\n        \
    \    result.push_back(1);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> beats;\n    std::stringstream ss(music_string);\n \
    \   std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            beats.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            beats.push_back(2);\n        } else if (token == \"\
    .|\") {\n            beats.push_back(1);\n        }\n    }\n    return beats;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085774
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> beats;\n    std::stringstream ss(music_string);\n \
    \   std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            beats.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            beats.push_back(2);\n        } else if (token == \"\
    .|\") {\n            beats.push_back(1);\n        }\n    }\n    return beats;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085774
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string note;\n    while (ss >> note) {\n        if (note == \"o\") {\n\
    \            result.push_back(4);\n        } else if (note == \"o|\") {\n    \
    \        result.push_back(2);\n        } else if (note == \".|\") {\n        \
    \    result.push_back(1);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> beats;\n    std::stringstream ss(music_string);\n \
    \   std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            beats.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            beats.push_back(2);\n        } else if (token == \"\
    .|\") {\n            beats.push_back(1);\n        }\n    }\n    return beats;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085774
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string note;\n    while (ss >> note) {\n        if (note == \"o\") {\n\
    \            result.push_back(4);\n        } else if (note == \"o|\") {\n    \
    \        result.push_back(2);\n        } else if (note == \".|\") {\n        \
    \    result.push_back(1);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string note;\n    while (ss >> note) {\n        if (note == \"o\") {\n\
    \            result.push_back(4);\n        } else if (note == \"o|\") {\n    \
    \        result.push_back(2);\n        } else if (note == \".|\") {\n        \
    \    result.push_back(1);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string note;\n    while (std::getline(ss, note, ' ')) {\n        if\
    \ (note == \"o\") {\n            result.push_back(4);\n        } else if (note\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (note == \"\
    .|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        if\
    \ (item == \"o\") {\n            result.push_back(4);\n        } else if (item\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (item == \"\
    .|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> res;\n    std::stringstream ss(music_string);\n   \
    \ std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if (token\
    \ == \"o\") {\n            res.push_back(4);\n        } else if (token == \"o|\"\
    ) {\n            res.push_back(2);\n        } else if (token == \".|\") {\n  \
    \          res.push_back(1);\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        if\
    \ (item == \"o\") {\n            result.push_back(4);\n        } else if (item\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (item == \"\
    .|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        if\
    \ (item == \"o\") {\n            result.push_back(4);\n        } else if (item\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (item == \"\
    .|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> beats;\n    std::stringstream ss(music_string);\n \
    \   std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            beats.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            beats.push_back(2);\n        } else if (token == \"\
    .|\") {\n            beats.push_back(1);\n        }\n    }\n    return beats;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085774
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> beats;\n    std::stringstream ss(music_string);\n \
    \   std::string note;\n    while (ss >> note) {\n        if (note == \"o\") {\n\
    \            beats.push_back(4);\n        } else if (note == \"o|\") {\n     \
    \       beats.push_back(2);\n        } else if (note == \".|\") {\n          \
    \  beats.push_back(1);\n        }\n    }\n    return beats;\n}\nint main() {\n\
    \    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        if\
    \ (item == \"o\") {\n            result.push_back(4);\n        } else if (item\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (item == \"\
    .|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string note;\n    while (ss >> note) {\n        if (note == \"o\") {\n\
    \            result.push_back(4);\n        } else if (note == \"o|\") {\n    \
    \        result.push_back(2);\n        } else if (note == \".|\") {\n        \
    \    result.push_back(1);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string note;\n    while (ss >> note) {\n        if (note == \"o\") {\n\
    \            result.push_back(4);\n        } else if (note == \"o|\") {\n    \
    \        result.push_back(2);\n        } else if (note == \".|\") {\n        \
    \    result.push_back(1);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    long count = 0;\n    for (auto i : music_string)\
    \ {\n        if (i == 'o') {\n            count += 4;\n        } else if (i ==\
    \ '|') {\n            result.push_back(count);\n            count = 0;\n     \
    \   } else if (i == '.') {\n            count += 1;\n        }\n    }\n    result.push_back(count);\n\
    \    return result;\n}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
    \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpxrzh5s8n: /tmp/tmpxrzh5s8n.cpp:30: int main(): Assertion `candidate((""))
    == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> beats;\n    std::stringstream ss(music_string);\n \
    \   std::string note;\n    while (ss >> note) {\n        if (note == \"o\") {\n\
    \            beats.push_back(4);\n        } else if (note == \"o|\") {\n     \
    \       beats.push_back(2);\n        } else if (note == \".|\") {\n          \
    \  beats.push_back(1);\n        }\n    }\n    return beats;\n}\nint main() {\n\
    \    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string note;\n    while (std::getline(ss, note, ' ')) {\n        if\
    \ (note == \"o\") {\n            result.push_back(4);\n        } else if (note\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (note == \"\
    .|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        if\
    \ (item == \"o\") {\n            result.push_back(4);\n        } else if (item\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (item == \"\
    .|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"o\") {\n\
    \            result.push_back(4);\n        } else if (temp == \"o|\") {\n    \
    \        result.push_back(2);\n        } else if (temp == \".|\") {\n        \
    \    result.push_back(1);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n  std::vector<long> result;\n  std::stringstream ss(music_string);\n  std::string\
    \ token;\n  while (std::getline(ss, token, ' ')) {\n    if (token == \"o\") {\n\
    \      result.push_back(4);\n    } else if (token == \"o|\") {\n      result.push_back(2);\n\
    \    } else if (token == \".|\") {\n      result.push_back(1);\n    }\n  }\n \
    \ return result;\n}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
    \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"o\") {\n\
    \            result.push_back(4);\n        } else if (temp == \"o|\") {\n    \
    \        result.push_back(2);\n        } else if (temp == \".|\") {\n        \
    \    result.push_back(1);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        if\
    \ (item == \"o\") {\n            result.push_back(4);\n        } else if (item\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (item == \"\
    .|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string note;\n    while (ss >> note) {\n        if (note == \"o\") {\n\
    \            result.push_back(4);\n        } else if (note == \"o|\") {\n    \
    \        result.push_back(2);\n        } else if (note == \".|\") {\n        \
    \    result.push_back(1);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string note;\n    while (ss >> note) {\n        if (note == \"o\") {\n\
    \            result.push_back(4);\n        } else if (note == \"o|\") {\n    \
    \        result.push_back(2);\n        } else if (note == \".|\") {\n        \
    \    result.push_back(1);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string note;\n    while (ss >> note) {\n        if (note == \"o\") {\n\
    \            result.push_back(4);\n        } else if (note == \"o|\") {\n    \
    \        result.push_back(2);\n        } else if (note == \".|\") {\n        \
    \    result.push_back(1);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string note;\n    while (ss >> note) {\n        if (note == \"o\") {\n\
    \            result.push_back(4);\n        } else if (note == \"o|\") {\n    \
    \        result.push_back(2);\n        } else if (note == \".|\") {\n        \
    \    result.push_back(1);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        if\
    \ (item == \"o\") {\n            result.push_back(4);\n        } else if (item\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (item == \"\
    .|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    long count = 0;\n    for (auto i : music_string)\
    \ {\n        if (i == 'o') {\n            if (count != 0) {\n                result.push_back(count);\n\
    \                count = 0;\n            }\n            result.push_back(4);\n\
    \        } else if (i == '|') {\n            count++;\n        } else if (i ==\
    \ '.') {\n            if (count != 0) {\n                result.push_back(count);\n\
    \                count = 0;\n            }\n            result.push_back(1);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: Exception
  stderr: 'tmpco6x6hrz: /tmp/tmpco6x6hrz.cpp:38: int main(): Assertion `candidate((".|
    .| .| .|")) == (std::vector<long>({(long)1, (long)1, (long)1, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string note;\n    while (ss >> note) {\n        if (note == \"o\") {\n\
    \            result.push_back(4);\n        } else if (note == \"o|\") {\n    \
    \        result.push_back(2);\n        } else if (note == \".|\") {\n        \
    \    result.push_back(1);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n\tstd::vector<long> result;\n\tstd::stringstream ss(music_string);\n\tstd::string\
    \ note;\n\twhile (ss >> note) {\n\t\tif (note == \"o\") {\n\t\t\tresult.push_back(4);\n\
    \t\t}\n\t\telse if (note == \"o|\") {\n\t\t\tresult.push_back(2);\n\t\t}\n\t\t\
    else if (note == \".|\") {\n\t\t\tresult.push_back(1);\n\t\t}\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        if\
    \ (item == \"o\") {\n            result.push_back(4);\n        } else if (item\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (item == \"\
    .|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    long count = 0;\n    for (auto i = 0;\
    \ i < music_string.size(); i++) {\n        if (music_string[i] == 'o') {\n   \
    \         if (music_string[i + 1] == ' ') {\n                result.push_back(4);\n\
    \            } else if (music_string[i + 1] == '|') {\n                result.push_back(2);\n\
    \            }\n        } else if (music_string[i] == '.') {\n            if (music_string[i\
    \ + 1] == '|') {\n                result.push_back(1);\n            }\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: Exception
  stderr: 'tmp3lr7zfko: /tmp/tmp3lr7zfko.cpp:33: int main(): Assertion `candidate(("o
    o o o")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string note;\n    while (ss >> note) {\n        if (note == \"o\") {\n\
    \            result.push_back(4);\n        } else if (note == \"o|\") {\n    \
    \        result.push_back(2);\n        } else if (note == \".|\") {\n        \
    \    result.push_back(1);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    // your code goes here\n    for(int i=0;i<music_string.size();i++)\n\
    \    {\n        if(music_string[i]=='o')\n        {\n            if(music_string[i+1]=='\
    \ ')\n            {\n                result.push_back(4);\n            }\n   \
    \         else if(music_string[i+1]=='|')\n            {\n                result.push_back(2);\n\
    \                i++;\n            }\n        }\n        else if(music_string[i]=='.')\n\
    \        {\n            result.push_back(1);\n            i++;\n        }\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = parse_music;\n\
    \    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: Exception
  stderr: 'tmps4d8436t: /tmp/tmps4d8436t.cpp:40: int main(): Assertion `candidate(("o
    o o o")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string note;\n    while (ss >> note) {\n        if (note == \"o\") {\n\
    \            result.push_back(4);\n        } else if (note == \"o|\") {\n    \
    \        result.push_back(2);\n        } else if (note == \".|\") {\n        \
    \    result.push_back(1);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n\tstd::vector<long> result;\n\tstd::stringstream ss(music_string);\n\tstd::string\
    \ token;\n\twhile (std::getline(ss, token, ' ')) {\n\t\tif (token == \"o\") {\n\
    \t\t\tresult.push_back(4);\n\t\t}\n\t\telse if (token == \"o|\") {\n\t\t\tresult.push_back(2);\n\
    \t\t}\n\t\telse if (token == \".|\") {\n\t\t\tresult.push_back(1);\n\t\t}\n\t\
    }\n\treturn result;\n}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
    \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        if\
    \ (item == \"o\") {\n            result.push_back(4);\n        } else if (item\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (item == \"\
    .|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        if\
    \ (item == \"o\") {\n            result.push_back(4);\n        } else if (item\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (item == \"\
    .|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string note;\n    while (std::getline(ss, note, ' ')) {\n        if\
    \ (note == \"o\") {\n            result.push_back(4);\n        } else if (note\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (note == \"\
    .|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        if\
    \ (item == \"o\") {\n            result.push_back(4);\n        } else if (item\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (item == \"\
    .|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> beats;\n    std::stringstream ss(music_string);\n \
    \   std::string note;\n    while (ss >> note) {\n        if (note == \"o\") {\n\
    \            beats.push_back(4);\n        } else if (note == \"o|\") {\n     \
    \       beats.push_back(2);\n        } else if (note == \".|\") {\n          \
    \  beats.push_back(1);\n        }\n    }\n    return beats;\n}\nint main() {\n\
    \    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> beats;\n    std::stringstream ss(music_string);\n \
    \   std::string note;\n    while (ss >> note) {\n        if (note == \"o\") {\n\
    \            beats.push_back(4);\n        } else if (note == \"o|\") {\n     \
    \       beats.push_back(2);\n        } else if (note == \".|\") {\n          \
    \  beats.push_back(1);\n        }\n    }\n    return beats;\n}\nint main() {\n\
    \    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        if\
    \ (item == \"o\") {\n            result.push_back(4);\n        } else if (item\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (item == \"\
    .|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> beats;\n    long beat = 0;\n    for (int i = 0; i <\
    \ music_string.size(); i++) {\n        if (music_string[i] == 'o') {\n       \
    \     beat = 4;\n        } else if (music_string[i] == '|') {\n            if\
    \ (music_string[i - 1] == 'o') {\n                beat = 2;\n            } else\
    \ {\n                beat = 1;\n            }\n        } else if (music_string[i]\
    \ == '.') {\n            beat = 0;\n        }\n        if (beat != 0) {\n    \
    \        beats.push_back(beat);\n        }\n    }\n    return beats;\n}\nint main()\
    \ {\n    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: Exception
  stderr: 'tmp0r6pyt1a: /tmp/tmp0r6pyt1a.cpp:36: int main(): Assertion `candidate(("o
    o o o")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660085774
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        if\
    \ (item == \"o\") {\n            result.push_back(4);\n        } else if (item\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (item == \"\
    .|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> beats;\n    std::stringstream ss(music_string);\n \
    \   std::string note;\n    while (ss >> note) {\n        if (note == \"o\") {\n\
    \            beats.push_back(4);\n        } else if (note == \"o|\") {\n     \
    \       beats.push_back(2);\n        } else if (note == \".|\") {\n          \
    \  beats.push_back(1);\n        }\n    }\n    return beats;\n}\nint main() {\n\
    \    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string note;\n    while (ss >> note) {\n        if (note == \"o\") {\n\
    \            result.push_back(4);\n        } else if (note == \"o|\") {\n    \
    \        result.push_back(2);\n        } else if (note == \".|\") {\n        \
    \    result.push_back(1);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> beats;\n    std::stringstream ss(music_string);\n \
    \   std::string note;\n    while (ss >> note) {\n        if (note == \"o\") {\n\
    \            beats.push_back(4);\n        } else if (note == \"o|\") {\n     \
    \       beats.push_back(2);\n        } else if (note == \".|\") {\n          \
    \  beats.push_back(1);\n        }\n    }\n    return beats;\n}\nint main() {\n\
    \    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string)\
    \ {\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") {\n            result.push_back(4);\n        } else if (token\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (token ==\
    \ \".|\") {\n            result.push_back(1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085775
