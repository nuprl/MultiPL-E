name: HumanEval_104_unique_digits
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(long i = 0; i < x.size(); i++) {\n  \
    \      long num = x[i];\n        bool flag = true;\n        while(num > 0) {\n\
    \            if((num % 10) % 2 == 0) {\n                flag = false;\n      \
    \          break;\n            }\n            num /= 10;\n        }\n        if(flag)\
    \ {\n            res.push_back(x[i]);\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        while(x[i]>0){\n            int rem=x[i]%10;\n            if(rem%2==0){\n\
    \                flag=1;\n                break;\n            }\n            x[i]=x[i]/10;\n\
    \        }\n        if(flag==0){\n            ans.push_back(x[i]);\n        }\n\
    \    }\n    std::sort(ans.begin(),ans.end());\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmpga4tyu8m: /tmp/tmpga4tyu8m.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool is_unique\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  is_unique = false;\n                    break;\n          \
    \      }\n                i /= 10;\n            }\n            if (is_unique)\
    \ {\n                result.push_back(i);\n            }\n        }\n    }\n \
    \   std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmp994dkjzr: /tmp/tmp994dkjzr.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (long i = 0; i < x.size(); i++) {\n\
    \        long num = x[i];\n        bool is_unique = true;\n        while (num\
    \ > 0) {\n            if (num % 2 == 0) {\n                is_unique = false;\n\
    \                break;\n            }\n            num /= 10;\n        }\n  \
    \      if (is_unique) {\n            result.push_back(x[i]);\n        }\n    }\n\
    \    std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        long num = x[i];\n        bool is_unique = true;\n        while (num\
    \ > 0) {\n            if (num % 2 == 0) {\n                is_unique = false;\n\
    \                break;\n            }\n            num /= 10;\n        }\n  \
    \      if (is_unique) {\n            result.push_back(x[i]);\n        }\n    }\n\
    \    std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        long\
    \ num = x[i];\n        while(num>0){\n            int rem = num%10;\n        \
    \    if(rem%2==0){\n                break;\n            }\n            num = num/10;\n\
    \        }\n        if(num==0){\n            res.push_back(x[i]);\n        }\n\
    \    }\n    sort(res.begin(),res.end());\n    return res;\n}\nint main() {\n \
    \   auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long temp=x[i];\n        while(temp>0){\n            if(temp%10==0\
    \ || temp%10==2 || temp%10==4 || temp%10==6 || temp%10==8){\n                flag=1;\n\
    \                break;\n            }\n            temp/=10;\n        }\n   \
    \     if(flag==0){\n            res.push_back(x[i]);\n        }\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        while(x[i]>0){\n            int rem=x[i]%10;\n            if(rem%2==0){\n\
    \                flag=1;\n                break;\n            }\n            x[i]=x[i]/10;\n\
    \        }\n        if(flag==0){\n            res.push_back(x[i]);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmp_zytdrif: /tmp/tmp_zytdrif.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool flag\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  flag = false;\n                    break;\n               \
    \ }\n                i /= 10;\n            }\n            if (flag) {\n      \
    \          result.push_back(i);\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmp837ynoh0: /tmp/tmp837ynoh0.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i == 0)\
    \ {\n            result.push_back(i);\n            continue;\n        }\n    \
    \    bool flag = true;\n        while (i) {\n            if (i % 2 == 0) {\n \
    \               flag = false;\n                break;\n            }\n       \
    \     i /= 10;\n        }\n        if (flag) {\n            result.push_back(i);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmpvxoexa4m: /tmp/tmpvxoexa4m.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long temp=x[i];\n        while(temp!=0){\n            if((temp%10)%2==0){\n\
    \                flag=1;\n                break;\n            }\n            temp/=10;\n\
    \        }\n        if(flag==0){\n            res.push_back(x[i]);\n        }\n\
    \    }\n    std::sort(res.begin(),res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool flag\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  flag = false;\n                    break;\n               \
    \ }\n                i /= 10;\n            }\n            if (flag) {\n      \
    \          result.push_back(i);\n            }\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmpkbstc3u_: /tmp/tmpkbstc3u_.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long num=x[i];\n        while(num!=0){\n            int rem=num%10;\n\
    \            if(rem%2==0){\n                flag=1;\n                break;\n\
    \            }\n            num=num/10;\n        }\n        if(flag==0){\n   \
    \         res.push_back(x[i]);\n        }\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (long i = 0; i < x.size(); i++) {\n\
    \        bool flag = true;\n        long num = x[i];\n        while (num > 0)\
    \ {\n            if (num % 2 == 0) {\n                flag = false;\n        \
    \        break;\n            }\n            num /= 10;\n        }\n        if\
    \ (flag) {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        int count = 0;\n        long num = x[i];\n        while (num > 0) {\n\
    \            int digit = num % 10;\n            if (digit % 2 == 0) {\n      \
    \          count++;\n            }\n            num = num / 10;\n        }\n \
    \       if (count == 0) {\n            result.push_back(x[i]);\n        }\n  \
    \  }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool flag\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  flag = false;\n                    break;\n               \
    \ }\n                i /= 10;\n            }\n            if (flag) {\n      \
    \          result.push_back(i);\n            }\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmp6bjqg084: /tmp/tmp6bjqg084.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool flag\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  flag = false;\n                    break;\n               \
    \ }\n                i /= 10;\n            }\n            if (flag) {\n      \
    \          result.push_back(i);\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmp3nelbtk4: /tmp/tmp3nelbtk4.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        long num = x[i];\n        bool is_unique = true;\n        while (num\
    \ > 0) {\n            if (num % 2 == 0) {\n                is_unique = false;\n\
    \                break;\n            }\n            num /= 10;\n        }\n  \
    \      if (is_unique) {\n            result.push_back(x[i]);\n        }\n    }\n\
    \    std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        bool flag\
    \ = true;\n        while (i > 0) {\n            if (i % 2 == 0) {\n          \
    \      flag = false;\n                break;\n            }\n            i /=\
    \ 10;\n        }\n        if (flag) {\n            result.push_back(i);\n    \
    \    }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmpje1d36zo: /tmp/tmpje1d36zo.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool flag\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  flag = false;\n                    break;\n               \
    \ }\n                i /= 10;\n            }\n            if (flag) {\n      \
    \          result.push_back(i);\n            }\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmpqzp217t_: /tmp/tmpqzp217t_.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(auto i : x) {\n        int flag = 0;\n\
    \        while(i > 0) {\n            int rem = i % 10;\n            if(rem % 2\
    \ == 0) {\n                flag = 1;\n                break;\n            }\n\
    \            i /= 10;\n        }\n        if(flag == 0) {\n            res.push_back(i);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmp82iijoyl: /tmp/tmp82iijoyl.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(long i = 0; i < x.size(); i++) {\n  \
    \      long num = x[i];\n        bool flag = true;\n        while(num > 0) {\n\
    \            if(num % 2 == 0) {\n                flag = false;\n             \
    \   break;\n            }\n            num /= 10;\n        }\n        if(flag)\
    \ {\n            res.push_back(x[i]);\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(auto i:x){\n        if(i<10){\n     \
    \       res.push_back(i);\n        }\n        else{\n            int flag=0;\n\
    \            while(i>0){\n                int rem=i%10;\n                if(rem%2==0){\n\
    \                    flag=1;\n                    break;\n                }\n\
    \                i=i/10;\n            }\n            if(flag==0){\n          \
    \      res.push_back(i);\n            }\n        }\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmpdz2kwwts: /tmp/tmpdz2kwwts.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (long i = 0; i < x.size(); i++) {\n\
    \        long num = x[i];\n        bool flag = true;\n        while (num > 0)\
    \ {\n            if (num % 2 == 0) {\n                flag = false;\n        \
    \        break;\n            }\n            num /= 10;\n        }\n        if\
    \ (flag) {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(auto i : x) {\n        if(i < 10) {\n\
    \            res.push_back(i);\n        } else {\n            bool flag = true;\n\
    \            while(i) {\n                if(i % 10 % 2 == 0) {\n             \
    \       flag = false;\n                    break;\n                }\n       \
    \         i /= 10;\n            }\n            if(flag) {\n                res.push_back(i);\n\
    \            }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmp7fo5hj6q: /tmp/tmp7fo5hj6q.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        bool flag\
    \ = true;\n        while (i > 0) {\n            if ((i % 10) % 2 == 0) {\n   \
    \             flag = false;\n                break;\n            }\n         \
    \   i /= 10;\n        }\n        if (flag) {\n            result.push_back(i);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmp9996sgf6: /tmp/tmp9996sgf6.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long temp=x[i];\n        while(temp>0){\n            if(temp%10%2==0){\n\
    \                flag=1;\n                break;\n            }\n            temp/=10;\n\
    \        }\n        if(flag==0){\n            res.push_back(x[i]);\n        }\n\
    \    }\n    std::sort(res.begin(),res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (long i = 0; i < x.size(); i++) {\n\
    \        long num = x[i];\n        bool flag = true;\n        while (num > 0)\
    \ {\n            if (num % 2 == 0) {\n                flag = false;\n        \
    \        break;\n            }\n            num /= 10;\n        }\n        if\
    \ (flag) {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        long num = x[i];\n        bool flag = true;\n        while (num > 0)\
    \ {\n            if (num % 2 == 0) {\n                flag = false;\n        \
    \        break;\n            }\n            num /= 10;\n        }\n        if\
    \ (flag) {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        long\
    \ num = x[i];\n        bool flag = true;\n        while(num>0){\n            int\
    \ rem = num%10;\n            if(rem%2==0){\n                flag = false;\n  \
    \              break;\n            }\n            num = num/10;\n        }\n \
    \       if(flag){\n            res.push_back(x[i]);\n        }\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        while(x[i]>0){\n            int rem=x[i]%10;\n            if(rem%2==0){\n\
    \                flag=1;\n                break;\n            }\n            x[i]=x[i]/10;\n\
    \        }\n        if(flag==0){\n            res.push_back(x[i]);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmp4gwn1o97: /tmp/tmp4gwn1o97.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool flag\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  flag = false;\n                    break;\n               \
    \ }\n                i /= 10;\n            }\n            if (flag) {\n      \
    \          result.push_back(i);\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmpzk7bq5vt: /tmp/tmpzk7bq5vt.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (long i = 0; i < x.size(); i++) {\n\
    \        bool is_unique = true;\n        long num = x[i];\n        while (num\
    \ > 0) {\n            if (num % 2 == 0) {\n                is_unique = false;\n\
    \                break;\n            }\n            num /= 10;\n        }\n  \
    \      if (is_unique) {\n            result.push_back(x[i]);\n        }\n    }\n\
    \    std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        int flag = 0;\n        while (x[i] > 0) {\n            if ((x[i] % 10)\
    \ % 2 == 0) {\n                flag = 1;\n                break;\n           \
    \ }\n            x[i] /= 10;\n        }\n        if (flag == 0) {\n          \
    \  result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmp4n8k3syf: /tmp/tmp4n8k3syf.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long temp=x[i];\n        while(temp!=0){\n            if((temp%10)%2==0){\n\
    \                flag=1;\n                break;\n            }\n            temp/=10;\n\
    \        }\n        if(flag==0){\n            res.push_back(x[i]);\n        }\n\
    \    }\n    std::sort(res.begin(),res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        long num = x[i];\n        bool is_unique = true;\n        while (num\
    \ > 0) {\n            if (num % 2 == 0) {\n                is_unique = false;\n\
    \                break;\n            }\n            num /= 10;\n        }\n  \
    \      if (is_unique) {\n            result.push_back(x[i]);\n        }\n    }\n\
    \    std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (long i = 0; i < x.size(); i++) {\n\
    \        long num = x[i];\n        bool is_unique = true;\n        while (num\
    \ > 0) {\n            if (num % 2 == 0) {\n                is_unique = false;\n\
    \                break;\n            }\n            num /= 10;\n        }\n  \
    \      if (is_unique) {\n            result.push_back(x[i]);\n        }\n    }\n\
    \    std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (long i = 0; i < x.size(); i++) {\n\
    \        long num = x[i];\n        bool flag = true;\n        while (num > 0)\
    \ {\n            if (num % 2 == 0) {\n                flag = false;\n        \
    \        break;\n            }\n            num /= 10;\n        }\n        if\
    \ (flag) {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(auto i:x){\n        if(i<10){\n     \
    \       res.push_back(i);\n        }\n        else{\n            int flag=0;\n\
    \            while(i){\n                int rem=i%10;\n                if(rem%2==0){\n\
    \                    flag=1;\n                    break;\n                }\n\
    \                i=i/10;\n            }\n            if(flag==0){\n          \
    \      res.push_back(i);\n            }\n        }\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmpq53scb17: /tmp/tmpq53scb17.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        long\
    \ num = x[i];\n        bool flag = true;\n        while(num){\n            if(num%10%2==0){\n\
    \                flag = false;\n                break;\n            }\n      \
    \      num = num/10;\n        }\n        if(flag) res.push_back(x[i]);\n    }\n\
    \    std::sort(res.begin(),res.end());\n    return res;\n}\nint main() {\n   \
    \ auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool is_unique\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  is_unique = false;\n                    break;\n          \
    \      }\n                i /= 10;\n            }\n            if (is_unique)\
    \ {\n                result.push_back(i);\n            }\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = unique_digits;\n   \
    \ assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmpqtm9vw8w: /tmp/tmpqtm9vw8w.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    for(int i=0;i<x.size();i++){\n        long\
    \ temp = x[i];\n        bool flag = true;\n        while(temp!=0){\n         \
    \   if(temp%2==0){\n                flag = false;\n                break;\n  \
    \          }\n            temp = temp/10;\n        }\n        if(flag)\n     \
    \       ans.push_back(x[i]);\n    }\n    std::sort(ans.begin(),ans.end());\n \
    \   return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long num=x[i];\n        while(num>0){\n            if(num%10==0\
    \ || num%10==2 || num%10==4 || num%10==6 || num%10==8){\n                flag=1;\n\
    \                break;\n            }\n            num=num/10;\n        }\n \
    \       if(flag==0){\n            res.push_back(x[i]);\n        }\n    }\n   \
    \ std::sort(res.begin(),res.end());\n    return res;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        long num = x[i];\n        bool flag = true;\n        while (num > 0)\
    \ {\n            if (num % 2 == 0) {\n                flag = false;\n        \
    \        break;\n            }\n            num /= 10;\n        }\n        if\
    \ (flag) {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        bool flag = true;\n        long temp = x[i];\n        while (temp > 0)\
    \ {\n            if (temp % 2 == 0) {\n                flag = false;\n       \
    \         break;\n            }\n            temp /= 10;\n        }\n        if\
    \ (flag) {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        int temp = x[i];\n        bool flag = true;\n        while (temp > 0)\
    \ {\n            if (temp % 2 == 0) {\n                flag = false;\n       \
    \         break;\n            }\n            temp /= 10;\n        }\n        if\
    \ (flag) {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        bool flag\
    \ = true;\n        while (i) {\n            if (i % 2 == 0) {\n              \
    \  flag = false;\n                break;\n            }\n            i /= 10;\n\
    \        }\n        if (flag)\n            result.push_back(i);\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmpnj5a9iml: /tmp/tmpnj5a9iml.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (long i = 0; i < x.size(); i++) {\n\
    \        long num = x[i];\n        bool flag = true;\n        while (num > 0)\
    \ {\n            if (num % 2 == 0) {\n                flag = false;\n        \
    \        break;\n            }\n            num /= 10;\n        }\n        if\
    \ (flag) {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (long i = 0; i < x.size(); i++) {\n\
    \        bool is_unique = true;\n        long n = x[i];\n        while (n > 0)\
    \ {\n            if (n % 2 == 0) {\n                is_unique = false;\n     \
    \           break;\n            }\n            n /= 10;\n        }\n        if\
    \ (is_unique) {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        bool flag\
    \ = true;\n        while (i > 0) {\n            if (i % 2 == 0) {\n          \
    \      flag = false;\n                break;\n            }\n            i /=\
    \ 10;\n        }\n        if (flag) {\n            result.push_back(i);\n    \
    \    }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmpqaoer5b_: /tmp/tmpqaoer5b_.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        long\
    \ num = x[i];\n        bool flag = true;\n        while(num){\n            int\
    \ rem = num%10;\n            if(rem%2==0){\n                flag = false;\n  \
    \              break;\n            }\n            num = num/10;\n        }\n \
    \       if(flag){\n            res.push_back(x[i]);\n        }\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        long number = x[i];\n        bool is_unique = true;\n        while (number\
    \ > 0) {\n            if (number % 2 == 0) {\n                is_unique = false;\n\
    \                break;\n            }\n            number /= 10;\n        }\n\
    \        if (is_unique) {\n            result.push_back(x[i]);\n        }\n  \
    \  }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(auto i:x){\n        if(i<10){\n     \
    \       res.push_back(i);\n        }\n        else{\n            bool flag=true;\n\
    \            while(i>0){\n                if(i%10%2==0){\n                   \
    \ flag=false;\n                    break;\n                }\n               \
    \ i/=10;\n            }\n            if(flag){\n                res.push_back(i);\n\
    \            }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmpx1rq6yqc: /tmp/tmpx1rq6yqc.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n\tstd::vector<long> result;\n\tfor (int i = 0; i < x.size(); i++) {\n\t\t\
    int num = x[i];\n\t\tbool flag = true;\n\t\twhile (num > 0) {\n\t\t\tint digit\
    \ = num % 10;\n\t\t\tif (digit % 2 == 0) {\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t\tnum = num / 10;\n\t\t}\n\t\tif (flag) {\n\t\t\tresult.push_back(x[i]);\n\
    \t\t}\n\t}\n\tstd::sort(result.begin(), result.end());\n\treturn result;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool is_unique\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  is_unique = false;\n                    break;\n          \
    \      }\n                i /= 10;\n            }\n            if (is_unique)\
    \ {\n                result.push_back(i);\n            }\n        }\n    }\n \
    \   std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmpce4pmsa9: /tmp/tmpce4pmsa9.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(auto i : x) {\n        if(i < 10) {\n\
    \            res.push_back(i);\n        } else {\n            bool flag = true;\n\
    \            while(i > 0) {\n                if(i % 2 == 0) {\n              \
    \      flag = false;\n                    break;\n                }\n        \
    \        i /= 10;\n            }\n            if(flag) {\n                res.push_back(i);\n\
    \            }\n        }\n    }\n    std::sort(res.begin(), res.end());\n   \
    \ return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmpeq5bcs83: /tmp/tmpeq5bcs83.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  std::vector<long> res;\n  for (int i = 0; i < x.size(); i++) {\n    bool\
    \ flag = true;\n    long num = x[i];\n    while (num > 0) {\n      if (num % 2\
    \ == 0) {\n        flag = false;\n        break;\n      }\n      num /= 10;\n\
    \    }\n    if (flag) {\n      res.push_back(x[i]);\n    }\n  }\n  std::sort(res.begin(),\
    \ res.end());\n  return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool flag\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  flag = false;\n                    break;\n               \
    \ }\n                i /= 10;\n            }\n            if (flag) {\n      \
    \          result.push_back(i);\n            }\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmpguq5lu7l: /tmp/tmpguq5lu7l.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        int temp = x[i];\n        bool flag = true;\n        while (temp > 0)\
    \ {\n            if (temp % 2 == 0) {\n                flag = false;\n       \
    \         break;\n            }\n            temp /= 10;\n        }\n        if\
    \ (flag) {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(auto i : x) {\n        if(i < 10) {\n\
    \            res.push_back(i);\n        } else {\n            bool is_unique =\
    \ true;\n            while(i > 0) {\n                if(i % 2 == 0) {\n      \
    \              is_unique = false;\n                    break;\n              \
    \  }\n                i /= 10;\n            }\n            if(is_unique) {\n \
    \               res.push_back(i);\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmpnz7hf9kw: /tmp/tmpnz7hf9kw.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        int flag = 0;\n        long num = x[i];\n        while (num != 0) {\n\
    \            if ((num % 10) % 2 == 0) {\n                flag = 1;\n         \
    \       break;\n            }\n            num /= 10;\n        }\n        if (flag\
    \ == 0) {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool flag\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  flag = false;\n                    break;\n               \
    \ }\n                i /= 10;\n            }\n            if (flag) {\n      \
    \          result.push_back(i);\n            }\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmp1r9ehjri: /tmp/tmp1r9ehjri.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        bool flag\
    \ = true;\n        while (i > 0) {\n            if (i % 2 == 0) {\n          \
    \      flag = false;\n                break;\n            }\n            i /=\
    \ 10;\n        }\n        if (flag) {\n            result.push_back(i);\n    \
    \    }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmpt1vp3jlx: /tmp/tmpt1vp3jlx.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool flag\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  flag = false;\n                    break;\n               \
    \ }\n                i /= 10;\n            }\n            if (flag) {\n      \
    \          result.push_back(i);\n            }\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmpd7iwkfsb: /tmp/tmpd7iwkfsb.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool flag\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  flag = false;\n                    break;\n               \
    \ }\n                i /= 10;\n            }\n            if (flag) {\n      \
    \          result.push_back(i);\n            }\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmpn7vxi2z4: /tmp/tmpn7vxi2z4.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        long num = x[i];\n        bool is_unique = true;\n        while (num\
    \ > 0) {\n            if (num % 2 == 0) {\n                is_unique = false;\n\
    \                break;\n            }\n            num /= 10;\n        }\n  \
    \      if (is_unique) {\n            result.push_back(x[i]);\n        }\n    }\n\
    \    std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(auto i:x){\n        bool flag = true;\n\
    \        while(i){\n            if(i%2==0){\n                flag = false;\n \
    \               break;\n            }\n            i/=10;\n        }\n       \
    \ if(flag) res.push_back(i);\n    }\n    std::sort(res.begin(),res.end());\n \
    \   return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmpaxzphtdj: /tmp/tmpaxzphtdj.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long num=x[i];\n        while(num>0){\n            int rem=num%10;\n\
    \            if(rem%2==0){\n                flag=1;\n                break;\n\
    \            }\n            num=num/10;\n        }\n        if(flag==0){\n   \
    \         res.push_back(x[i]);\n        }\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool flag\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  flag = false;\n                    break;\n               \
    \ }\n                i /= 10;\n            }\n            if (flag) {\n      \
    \          result.push_back(i);\n            }\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmp9w0pqvpi: /tmp/tmp9w0pqvpi.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (long i = 0; i < x.size(); i++) {\n\
    \        long num = x[i];\n        bool is_unique = true;\n        while (num\
    \ > 0) {\n            if (num % 2 == 0) {\n                is_unique = false;\n\
    \                break;\n            }\n            num /= 10;\n        }\n  \
    \      if (is_unique) {\n            result.push_back(x[i]);\n        }\n    }\n\
    \    std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(auto i:x){\n        if(i<10){\n     \
    \       res.push_back(i);\n        }\n        else{\n            int flag=0;\n\
    \            while(i>0){\n                if(i%10%2==0){\n                   \
    \ flag=1;\n                    break;\n                }\n                i=i/10;\n\
    \            }\n            if(flag==0){\n                res.push_back(i);\n\
    \            }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmp82qe9grj: /tmp/tmp82qe9grj.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    for(int i=0;i<x.size();i++){\n        long\
    \ temp = x[i];\n        int flag = 0;\n        while(temp!=0){\n            int\
    \ rem = temp%10;\n            if(rem%2==0){\n                flag = 1;\n     \
    \           break;\n            }\n            temp = temp/10;\n        }\n  \
    \      if(flag==0){\n            ans.push_back(x[i]);\n        }\n    }\n    sort(ans.begin(),ans.end());\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        bool is_unique\
    \ = true;\n        while (i > 0) {\n            if ((i % 10) % 2 == 0) {\n   \
    \             is_unique = false;\n                break;\n            }\n    \
    \        i /= 10;\n        }\n        if (is_unique) {\n            result.push_back(i);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmpnazjtnhg: /tmp/tmpnazjtnhg.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            long temp\
    \ = i;\n            bool flag = true;\n            while (temp > 0) {\n      \
    \          if (temp % 2 == 0) {\n                    flag = false;\n         \
    \           break;\n                }\n                temp /= 10;\n         \
    \   }\n            if (flag) {\n                result.push_back(i);\n       \
    \     }\n        }\n    }\n    std::sort(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool is_unique\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  is_unique = false;\n                    break;\n          \
    \      }\n                i /= 10;\n            }\n            if (is_unique)\
    \ {\n                result.push_back(i);\n            }\n        }\n    }\n \
    \   std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmpjd5vpkx7: /tmp/tmpjd5vpkx7.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        bool flag = true;\n        long num = x[i];\n        while (num > 0)\
    \ {\n            if (num % 2 == 0) {\n                flag = false;\n        \
    \        break;\n            }\n            num /= 10;\n        }\n        if\
    \ (flag) {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long temp=x[i];\n        while(temp>0){\n            if(temp%10==0\
    \ || temp%10==2 || temp%10==4 || temp%10==6 || temp%10==8){\n                flag=1;\n\
    \                break;\n            }\n            temp/=10;\n        }\n   \
    \     if(flag==0){\n            res.push_back(x[i]);\n        }\n    }\n    sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        bool is_unique = true;\n        long num = x[i];\n        while (num\
    \ > 0) {\n            if (num % 2 == 0) {\n                is_unique = false;\n\
    \                break;\n            }\n            num /= 10;\n        }\n  \
    \      if (is_unique) {\n            result.push_back(x[i]);\n        }\n    }\n\
    \    std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long num=x[i];\n        while(num>0){\n            int rem=num%10;\n\
    \            if(rem%2==0){\n                flag=1;\n                break;\n\
    \            }\n            num=num/10;\n        }\n        if(flag==0){\n   \
    \         res.push_back(x[i]);\n        }\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(auto i:x){\n        if(i<10){\n     \
    \       res.push_back(i);\n        }\n        else{\n            int flag=0;\n\
    \            while(i>0){\n                if(i%10%2==0){\n                   \
    \ flag=1;\n                    break;\n                }\n                i=i/10;\n\
    \            }\n            if(flag==0){\n                res.push_back(i);\n\
    \            }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmpjdr0465k: /tmp/tmpjdr0465k.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            while (i\
    \ > 0) {\n                if (i % 2 == 0) {\n                    break;\n    \
    \            }\n                i /= 10;\n            }\n            if (i ==\
    \ 0) {\n                result.push_back(i);\n            }\n        }\n    }\n\
    \    std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmpci22v7dj: /tmp/tmpci22v7dj.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        while(x[i]>0){\n            int rem=x[i]%10;\n            if(rem%2==0){\n\
    \                flag=1;\n                break;\n            }\n            x[i]=x[i]/10;\n\
    \        }\n        if(flag==0){\n            res.push_back(x[i]);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmplk1pp6su: /tmp/tmplk1pp6su.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n\tstd::vector<long> result;\n\tfor (int i = 0; i < x.size(); i++) {\n\t\t\
    int flag = 0;\n\t\twhile (x[i] > 0) {\n\t\t\tint digit = x[i] % 10;\n\t\t\tif\
    \ (digit % 2 == 0) {\n\t\t\t\tflag = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tx[i] =\
    \ x[i] / 10;\n\t\t}\n\t\tif (flag == 0) {\n\t\t\tresult.push_back(x[i]);\n\t\t\
    }\n\t}\n\tstd::sort(result.begin(), result.end());\n\treturn result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmpmvighxuo: /tmp/tmpmvighxuo.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            int flag\
    \ = 0;\n            while (i > 0) {\n                if (i % 2 == 0) {\n     \
    \               flag = 1;\n                    break;\n                }\n   \
    \             i /= 10;\n            }\n            if (flag == 0) {\n        \
    \        result.push_back(i);\n            }\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmpn23orj2n: /tmp/tmpn23orj2n.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        long num = x[i];\n        bool is_unique = true;\n        while (num\
    \ > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n\
    \                is_unique = false;\n                break;\n            }\n \
    \           num /= 10;\n        }\n        if (is_unique) {\n            result.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        while(x[i]>0){\n            int rem=x[i]%10;\n            if(rem%2==0){\n\
    \                flag=1;\n                break;\n            }\n            x[i]=x[i]/10;\n\
    \        }\n        if(flag==0){\n            ans.push_back(x[i]);\n        }\n\
    \    }\n    sort(ans.begin(),ans.end());\n    return ans;\n}\nint main() {\n \
    \   auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmpryzyrsc9: /tmp/tmpryzyrsc9.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool is_unique\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  is_unique = false;\n                    break;\n          \
    \      }\n                i /= 10;\n            }\n            if (is_unique)\
    \ {\n                result.push_back(i);\n            }\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = unique_digits;\n   \
    \ assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmpxc96thtv: /tmp/tmpxc96thtv.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        if (x[i] < 10) {\n            result.push_back(x[i]);\n        } else\
    \ {\n            int flag = 0;\n            while (x[i] > 0) {\n             \
    \   if ((x[i] % 10) % 2 == 0) {\n                    flag = 1;\n             \
    \       break;\n                }\n                x[i] /= 10;\n            }\n\
    \            if (flag == 0) {\n                result.push_back(x[i]);\n     \
    \       }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmp090zzj_0: /tmp/tmp090zzj_0.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        long\
    \ num = x[i];\n        bool flag = true;\n        while(num){\n            if(num%10%2==0){\n\
    \                flag = false;\n                break;\n            }\n      \
    \      num = num/10;\n        }\n        if(flag) res.push_back(x[i]);\n    }\n\
    \    std::sort(res.begin(),res.end());\n    return res;\n}\nint main() {\n   \
    \ auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        long\
    \ num = x[i];\n        int flag = 0;\n        while(num){\n            int digit\
    \ = num%10;\n            if(digit%2==0){\n                flag = 1;\n        \
    \        break;\n            }\n            num = num/10;\n        }\n       \
    \ if(flag==0){\n            res.push_back(x[i]);\n        }\n    }\n    sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(auto i : x) {\n        if(i < 10) {\n\
    \            res.push_back(i);\n        } else {\n            bool flag = true;\n\
    \            while(i > 0) {\n                if(i % 2 == 0) {\n              \
    \      flag = false;\n                    break;\n                }\n        \
    \        i /= 10;\n            }\n            if(flag) {\n                res.push_back(i);\n\
    \            }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmphf855ow4: /tmp/tmphf855ow4.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(auto i:x){\n        if(i<10){\n     \
    \       res.push_back(i);\n        }\n        else{\n            int flag=0;\n\
    \            while(i>0){\n                int rem=i%10;\n                if(rem%2==0){\n\
    \                    flag=1;\n                    break;\n                }\n\
    \                i=i/10;\n            }\n            if(flag==0){\n          \
    \      res.push_back(i);\n            }\n        }\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmpxgp6_vpi: /tmp/tmpxgp6_vpi.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> unique_digits_list;\n    for(int i=0;i<x.size();i++){\n\
    \        long num = x[i];\n        bool is_unique = true;\n        while(num>0){\n\
    \            if(num%10%2==0){\n                is_unique = false;\n          \
    \      break;\n            }\n            num = num/10;\n        }\n        if(is_unique){\n\
    \            unique_digits_list.push_back(x[i]);\n        }\n    }\n    std::sort(unique_digits_list.begin(),unique_digits_list.end());\n\
    \    return unique_digits_list;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        if (x[i] % 2 != 0) {\n            result.push_back(x[i]);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmpfws5mg33: /tmp/tmpfws5mg33.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        long\
    \ num = x[i];\n        bool flag = true;\n        while(num){\n            if(num%10%2==0){\n\
    \                flag = false;\n                break;\n            }\n      \
    \      num/=10;\n        }\n        if(flag){\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(),res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long num=x[i];\n        while(num>0){\n            if(num%10%2==0){\n\
    \                flag=1;\n                break;\n            }\n            num=num/10;\n\
    \        }\n        if(flag==0){\n            res.push_back(x[i]);\n        }\n\
    \    }\n    sort(res.begin(),res.end());\n    return res;\n}\nint main() {\n \
    \   auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        int flag = 0;\n        long temp = x[i];\n        while (temp > 0) {\n\
    \            if ((temp % 10) % 2 == 0) {\n                flag = 1;\n        \
    \        break;\n            }\n            temp /= 10;\n        }\n        if\
    \ (flag == 0) {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        long num = x[i];\n        bool is_unique = true;\n        while (num\
    \ > 0) {\n            if (num % 2 == 0) {\n                is_unique = false;\n\
    \                break;\n            }\n            num /= 10;\n        }\n  \
    \      if (is_unique) {\n            result.push_back(x[i]);\n        }\n    }\n\
    \    std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool is_even\
    \ = false;\n            while (i > 0) {\n                if ((i % 10) % 2 == 0)\
    \ {\n                    is_even = true;\n                    break;\n       \
    \         }\n                i /= 10;\n            }\n            if (!is_even)\
    \ {\n                result.push_back(i);\n            }\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = unique_digits;\n   \
    \ assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmp6iw3ig77: /tmp/tmp6iw3ig77.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        long\
    \ num = x[i];\n        bool flag = true;\n        while(num){\n            int\
    \ rem = num%10;\n            if(rem%2==0){\n                flag = false;\n  \
    \              break;\n            }\n            num = num/10;\n        }\n \
    \       if(flag)\n            res.push_back(x[i]);\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(auto i:x){\n        if(i%2!=0){\n   \
    \         res.push_back(i);\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmpr4frwu35: /tmp/tmpr4frwu35.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        int flag = 0;\n        long num = x[i];\n        while (num > 0) {\n\
    \            int digit = num % 10;\n            if (digit % 2 == 0) {\n      \
    \          flag = 1;\n                break;\n            }\n            num =\
    \ num / 10;\n        }\n        if (flag == 0) {\n            result.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        long\
    \ num = x[i];\n        bool flag = true;\n        while(num>0){\n            if(num%10%2==0){\n\
    \                flag = false;\n                break;\n            }\n      \
    \      num/=10;\n        }\n        if(flag) res.push_back(x[i]);\n    }\n   \
    \ std::sort(res.begin(),res.end());\n    return res;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool flag\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  flag = false;\n                    break;\n               \
    \ }\n                i /= 10;\n            }\n            if (flag) {\n      \
    \          result.push_back(i);\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmp4xr00if3: /tmp/tmp4xr00if3.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (std::to_string(i).find_first_of(\"\
    02468\") == std::string::npos) {\n            result.push_back(i);\n        }\n\
    \    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long num=x[i];\n        while(num>0){\n            if(num%10==0||num%10==2||num%10==4||num%10==6||num%10==8){\n\
    \                flag=1;\n                break;\n            }\n            num=num/10;\n\
    \        }\n        if(flag==0){\n            res.push_back(x[i]);\n        }\n\
    \    }\n    std::sort(res.begin(),res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        long\
    \ num = x[i];\n        bool flag = true;\n        while(num){\n            if(num%10%2==0){\n\
    \                flag = false;\n                break;\n            }\n      \
    \      num = num/10;\n        }\n        if(flag)\n            res.push_back(x[i]);\n\
    \    }\n    std::sort(res.begin(),res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(auto i:x){\n        int flag=0;\n   \
    \     while(i){\n            int r=i%10;\n            if(r%2==0){\n          \
    \      flag=1;\n                break;\n            }\n            i/=10;\n  \
    \      }\n        if(flag==0){\n            res.push_back(i);\n        }\n   \
    \ }\n    std::sort(res.begin(),res.end());\n    return res;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmpmhw3aq5r: /tmp/tmpmhw3aq5r.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (std::to_string(i).find_first_of(\"\
    02468\") == std::string::npos) {\n            result.push_back(i);\n        }\n\
    \    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        bool flag = true;\n        for (int j = 0; j < std::to_string(x[i]).length();\
    \ j++) {\n            if (std::to_string(x[i])[j] == '2' || std::to_string(x[i])[j]\
    \ == '4' || std::to_string(x[i])[j] == '6' || std::to_string(x[i])[j] == '8' ||\
    \ std::to_string(x[i])[j] == '0') {\n                flag = false;\n         \
    \       break;\n            }\n        }\n        if (flag) {\n            result.push_back(x[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmph269pe3s: /tmp/tmph269pe3s.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        int temp = x[i];\n        bool flag = true;\n        while (temp > 0)\
    \ {\n            if (temp % 2 == 0) {\n                flag = false;\n       \
    \         break;\n            }\n            temp /= 10;\n        }\n        if\
    \ (flag) {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long num=x[i];\n        while(num>0){\n            if(num%10%2==0){\n\
    \                flag=1;\n                break;\n            }\n            num=num/10;\n\
    \        }\n        if(flag==0){\n            res.push_back(x[i]);\n        }\n\
    \    }\n    std::sort(res.begin(),res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        int flag = 0;\n        long temp = x[i];\n        while (temp > 0) {\n\
    \            if ((temp % 10) % 2 == 0) {\n                flag = 1;\n        \
    \        break;\n            }\n            temp /= 10;\n        }\n        if\
    \ (flag == 0) {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        bool flag\
    \ = true;\n        while (i > 0) {\n            int digit = i % 10;\n        \
    \    if (digit % 2 == 0) {\n                flag = false;\n                break;\n\
    \            }\n            i /= 10;\n        }\n        if (flag) {\n       \
    \     result.push_back(i);\n        }\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmpx5ltqyes: /tmp/tmpx5ltqyes.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        int flag = 0;\n        while (x[i] > 0) {\n            if (x[i] % 2 ==\
    \ 0) {\n                flag = 1;\n                break;\n            }\n   \
    \         x[i] /= 10;\n        }\n        if (flag == 0) {\n            result.push_back(x[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmpxssdjnyw: /tmp/tmpxssdjnyw.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        bool flag\
    \ = true;\n        while (i > 0) {\n            if (i % 2 == 0) {\n          \
    \      flag = false;\n                break;\n            }\n            i /=\
    \ 10;\n        }\n        if (flag) {\n            result.push_back(i);\n    \
    \    }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmp7r_wto3f: /tmp/tmp7r_wto3f.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            long temp\
    \ = i;\n            bool flag = true;\n            while (temp > 0) {\n      \
    \          if (temp % 2 == 0) {\n                    flag = false;\n         \
    \           break;\n                }\n                temp /= 10;\n         \
    \   }\n            if (flag) {\n                result.push_back(i);\n       \
    \     }\n        }\n    }\n    std::sort(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long temp=x[i];\n        while(temp!=0){\n            if(temp%10%2==0){\n\
    \                flag=1;\n                break;\n            }\n            temp/=10;\n\
    \        }\n        if(flag==0){\n            res.push_back(x[i]);\n        }\n\
    \    }\n    std::sort(res.begin(),res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        int flag =\
    \ 0;\n        while (i > 0) {\n            int digit = i % 10;\n            if\
    \ (digit % 2 == 0) {\n                flag = 1;\n                break;\n    \
    \        }\n            i /= 10;\n        }\n        if (flag == 0) {\n      \
    \      result.push_back(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmp8wnyk7ug: /tmp/tmp8wnyk7ug.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (long i = 0; i < x.size(); i++) {\n\
    \        long temp = x[i];\n        bool flag = true;\n        while (temp > 0)\
    \ {\n            if (temp % 2 == 0) {\n                flag = false;\n       \
    \         break;\n            }\n            temp /= 10;\n        }\n        if\
    \ (flag) {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        bool is_unique\
    \ = true;\n        while (i > 0) {\n            if ((i % 10) % 2 == 0) {\n   \
    \             is_unique = false;\n                break;\n            }\n    \
    \        i /= 10;\n        }\n        if (is_unique) {\n            result.push_back(i);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmp0uusevdx: /tmp/tmp0uusevdx.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool is_unique\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  is_unique = false;\n                    break;\n          \
    \      }\n                i /= 10;\n            }\n            if (is_unique)\
    \ {\n                result.push_back(i);\n            }\n        }\n    }\n \
    \   std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmplozr582k: /tmp/tmplozr582k.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool flag\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  flag = false;\n                    break;\n               \
    \ }\n                i /= 10;\n            }\n            if (flag) {\n      \
    \          result.push_back(i);\n            }\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmpankqe2wo: /tmp/tmpankqe2wo.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool flag\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  flag = false;\n                    break;\n               \
    \ }\n                i /= 10;\n            }\n            if (flag) {\n      \
    \          result.push_back(i);\n            }\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmp827svqcd: /tmp/tmp827svqcd.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(auto i : x) {\n        if(i < 10) {\n\
    \            res.push_back(i);\n        } else {\n            int flag = 0;\n\
    \            while(i > 0) {\n                if(i % 2 == 0) {\n              \
    \      flag = 1;\n                    break;\n                }\n            \
    \    i /= 10;\n            }\n            if(flag == 0) {\n                res.push_back(i);\n\
    \            }\n        }\n    }\n    std::sort(res.begin(), res.end());\n   \
    \ return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmpknqa4_8l: /tmp/tmpknqa4_8l.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long num=x[i];\n        while(num>0){\n            if(num%10%2==0){\n\
    \                flag=1;\n                break;\n            }\n            num=num/10;\n\
    \        }\n        if(flag==0){\n            res.push_back(x[i]);\n        }\n\
    \    }\n    std::sort(res.begin(),res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool is_unique\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  is_unique = false;\n                    break;\n          \
    \      }\n                i /= 10;\n            }\n            if (is_unique)\
    \ {\n                result.push_back(i);\n            }\n        }\n    }\n \
    \   std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmpi9ruacs7: /tmp/tmpi9ruacs7.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        bool isUnique = true;\n        long num = x[i];\n        while (num >\
    \ 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n\
    \                isUnique = false;\n                break;\n            }\n  \
    \          num /= 10;\n        }\n        if (isUnique) {\n            result.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        bool flag = true;\n        long num = x[i];\n        while (num > 0)\
    \ {\n            if (num % 2 == 0) {\n                flag = false;\n        \
    \        break;\n            }\n            num /= 10;\n        }\n        if\
    \ (flag) {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool is_unique\
    \ = true;\n            while (i > 0) {\n                int digit = i % 10;\n\
    \                if (digit % 2 == 0) {\n                    is_unique = false;\n\
    \                    break;\n                }\n                i /= 10;\n   \
    \         }\n            if (is_unique) {\n                result.push_back(i);\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmpb8du4wiw: /tmp/tmpb8du4wiw.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (long i = 0; i < x.size(); i++) {\n\
    \        long num = x[i];\n        bool flag = true;\n        while (num > 0)\
    \ {\n            if (num % 2 == 0) {\n                flag = false;\n        \
    \        break;\n            }\n            num /= 10;\n        }\n        if\
    \ (flag) {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long temp=x[i];\n        while(temp>0){\n            if(temp%10%2==0){\n\
    \                flag=1;\n                break;\n            }\n            temp/=10;\n\
    \        }\n        if(flag==0){\n            res.push_back(x[i]);\n        }\n\
    \    }\n    std::sort(res.begin(),res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long num=x[i];\n        while(num>0){\n            int rem=num%10;\n\
    \            if(rem%2==0){\n                flag=1;\n                break;\n\
    \            }\n            num=num/10;\n        }\n        if(flag==0){\n   \
    \         res.push_back(x[i]);\n        }\n    }\n    sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        while(x[i]>0){\n            int rem=x[i]%10;\n            if(rem%2==0){\n\
    \                flag=1;\n                break;\n            }\n            x[i]=x[i]/10;\n\
    \        }\n        if(flag==0){\n            res.push_back(x[i]);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmprfacg621: /tmp/tmprfacg621.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        if (x[i] % 2 != 0) {\n            result.push_back(x[i]);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmp9fbk98_p: /tmp/tmp9fbk98_p.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        int temp = x[i];\n        int flag = 0;\n        while (temp > 0) {\n\
    \            if (temp % 2 == 0) {\n                flag = 1;\n               \
    \ break;\n            }\n            temp /= 10;\n        }\n        if (flag\
    \ == 0) {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        bool flag\
    \ = false;\n        while (i > 0) {\n            if (i % 2 == 0) {\n         \
    \       flag = true;\n                break;\n            }\n            i /=\
    \ 10;\n        }\n        if (!flag) {\n            result.push_back(i);\n   \
    \     }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmpwscyngn6: /tmp/tmpwscyngn6.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        bool flag\
    \ = true;\n        while (i > 0) {\n            if (i % 2 == 0) {\n          \
    \      flag = false;\n                break;\n            }\n            i /=\
    \ 10;\n        }\n        if (flag) {\n            result.push_back(i);\n    \
    \    }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmpoufo3rsc: /tmp/tmpoufo3rsc.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(auto i:x){\n        if(i%2!=0){\n   \
    \         res.push_back(i);\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmp29rtc9rn: /tmp/tmp29rtc9rn.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        int flag = 0;\n        long temp = x[i];\n        while (temp > 0) {\n\
    \            if ((temp % 10) % 2 == 0) {\n                flag = 1;\n        \
    \        break;\n            }\n            temp /= 10;\n        }\n        if\
    \ (flag == 0) {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool flag\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  flag = false;\n                    break;\n               \
    \ }\n                i /= 10;\n            }\n            if (flag) {\n      \
    \          result.push_back(i);\n            }\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmpefqosh6p: /tmp/tmpefqosh6p.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool is_unique\
    \ = true;\n            while (i > 0) {\n                int digit = i % 10;\n\
    \                if (digit % 2 == 0) {\n                    is_unique = false;\n\
    \                    break;\n                }\n                i /= 10;\n   \
    \         }\n            if (is_unique) {\n                result.push_back(i);\n\
    \            }\n        }\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmp5_dqxst1: /tmp/tmp5_dqxst1.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long num=x[i];\n        while(num>0){\n            if(num%10%2==0){\n\
    \                flag=1;\n                break;\n            }\n            num=num/10;\n\
    \        }\n        if(flag==0){\n            res.push_back(x[i]);\n        }\n\
    \    }\n    std::sort(res.begin(),res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool is_unique\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  is_unique = false;\n                    break;\n          \
    \      }\n                i /= 10;\n            }\n            if (is_unique)\
    \ {\n                result.push_back(i);\n            }\n        }\n    }\n \
    \   std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmpx33rafwq: /tmp/tmpx33rafwq.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        int flag = 0;\n        long num = x[i];\n        while (num > 0) {\n\
    \            int digit = num % 10;\n            if (digit % 2 == 0) {\n      \
    \          flag = 1;\n                break;\n            }\n            num =\
    \ num / 10;\n        }\n        if (flag == 0) {\n            result.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        long\
    \ num = x[i];\n        bool flag = true;\n        while(num>0){\n            int\
    \ rem = num%10;\n            if(rem%2==0){\n                flag = false;\n  \
    \              break;\n            }\n            num = num/10;\n        }\n \
    \       if(flag){\n            res.push_back(x[i]);\n        }\n    }\n    sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long temp=x[i];\n        while(temp>0){\n            if(temp%10==0\
    \ || temp%10==2 || temp%10==4 || temp%10==6 || temp%10==8){\n                flag=1;\n\
    \                break;\n            }\n            temp/=10;\n        }\n   \
    \     if(flag==0){\n            res.push_back(x[i]);\n        }\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(auto i:x){\n        if(i<10){\n     \
    \       res.push_back(i);\n        }\n        else{\n            bool flag=true;\n\
    \            while(i>0){\n                if(i%10%2==0){\n                   \
    \ flag=false;\n                    break;\n                }\n               \
    \ i/=10;\n            }\n            if(flag){\n                res.push_back(i);\n\
    \            }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmphkuif34q: /tmp/tmphkuif34q.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        long\
    \ num = x[i];\n        bool flag = true;\n        while(num>0){\n            if(num%10%2==0){\n\
    \                flag = false;\n                break;\n            }\n      \
    \      num = num/10;\n        }\n        if(flag){\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(),res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long temp=x[i];\n        while(temp>0){\n            if(temp%10%2==0){\n\
    \                flag=1;\n                break;\n            }\n            temp/=10;\n\
    \        }\n        if(flag==0){\n            res.push_back(x[i]);\n        }\n\
    \    }\n    std::sort(res.begin(),res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        bool flag\
    \ = true;\n        while (i > 0) {\n            if ((i % 10) % 2 == 0) {\n   \
    \             flag = false;\n                break;\n            }\n         \
    \   i /= 10;\n        }\n        if (flag) {\n            result.push_back(i);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmpw1zow1kf: /tmp/tmpw1zow1kf.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        long\
    \ temp = x[i];\n        bool flag = true;\n        while(temp>0){\n          \
    \  if(temp%2==0){\n                flag = false;\n                break;\n   \
    \         }\n            temp/=10;\n        }\n        if(flag)\n            res.push_back(x[i]);\n\
    \    }\n    std::sort(res.begin(),res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(long i = 0; i < x.size(); i++) {\n  \
    \      bool flag = true;\n        long temp = x[i];\n        while(temp > 0) {\n\
    \            if(temp % 10 % 2 == 0) {\n                flag = false;\n       \
    \         break;\n            }\n            temp /= 10;\n        }\n        if(flag)\
    \ {\n            res.push_back(x[i]);\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        long num = x[i];\n        bool flag = true;\n        while (num > 0)\
    \ {\n            if (num % 2 == 0) {\n                flag = false;\n        \
    \        break;\n            }\n            num /= 10;\n        }\n        if\
    \ (flag) {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        long num = x[i];\n        bool is_unique = true;\n        while (num\
    \ > 0) {\n            if (num % 2 == 0) {\n                is_unique = false;\n\
    \                break;\n            }\n            num /= 10;\n        }\n  \
    \      if (is_unique) {\n            result.push_back(x[i]);\n        }\n    }\n\
    \    std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool flag\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  flag = false;\n                    break;\n               \
    \ }\n                i /= 10;\n            }\n            if (flag) {\n      \
    \          result.push_back(i);\n            }\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmphr54vsbb: /tmp/tmphr54vsbb.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        long num = x[i];\n        bool is_unique = true;\n        while (num\
    \ > 0) {\n            if (num % 2 == 0) {\n                is_unique = false;\n\
    \                break;\n            }\n            num /= 10;\n        }\n  \
    \      if (is_unique) {\n            result.push_back(x[i]);\n        }\n    }\n\
    \    std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        bool is_unique = true;\n        long num = x[i];\n        while (num\
    \ > 0) {\n            if (num % 2 == 0) {\n                is_unique = false;\n\
    \                break;\n            }\n            num /= 10;\n        }\n  \
    \      if (is_unique) {\n            result.push_back(x[i]);\n        }\n    }\n\
    \    std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long temp=x[i];\n        while(temp>0){\n            if(temp%10%2==0){\n\
    \                flag=1;\n                break;\n            }\n            temp/=10;\n\
    \        }\n        if(flag==0){\n            res.push_back(x[i]);\n        }\n\
    \    }\n    sort(res.begin(),res.end());\n    return res;\n}\nint main() {\n \
    \   auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        if (x[i] % 2 != 0) {\n            result.push_back(x[i]);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmpus0c85di: /tmp/tmpus0c85di.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        long\
    \ num = x[i];\n        bool flag = true;\n        while(num>0){\n            if(num%10%2==0){\n\
    \                flag = false;\n                break;\n            }\n      \
    \      num = num/10;\n        }\n        if(flag)\n            res.push_back(x[i]);\n\
    \    }\n    std::sort(res.begin(),res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool is_unique\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  is_unique = false;\n                    break;\n          \
    \      }\n                i /= 10;\n            }\n            if (is_unique)\
    \ {\n                result.push_back(i);\n            }\n        }\n    }\n \
    \   std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmpzyowk0ay: /tmp/tmpzyowk0ay.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n\tstd::vector<long> res;\n\tfor (auto i : x) {\n\t\tif (i < 10) {\n\t\t\t\
    res.push_back(i);\n\t\t}\n\t\telse {\n\t\t\tbool flag = true;\n\t\t\twhile (i\
    \ > 0) {\n\t\t\t\tif (i % 2 == 0) {\n\t\t\t\t\tflag = false;\n\t\t\t\t\tbreak;\n\
    \t\t\t\t}\n\t\t\t\ti /= 10;\n\t\t\t}\n\t\t\tif (flag) {\n\t\t\t\tres.push_back(i);\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmpo05iws09: /tmp/tmpo05iws09.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(auto i : x) {\n        if(i == 0) {\n\
    \            res.push_back(i);\n            continue;\n        }\n        bool\
    \ flag = true;\n        while(i) {\n            if(i % 10 % 2 == 0) {\n      \
    \          flag = false;\n                break;\n            }\n            i\
    \ /= 10;\n        }\n        if(flag) {\n            res.push_back(i);\n     \
    \   }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmp0yz2ffrk: /tmp/tmp0yz2ffrk.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        int flag = 0;\n        long num = x[i];\n        while (num != 0) {\n\
    \            if ((num % 10) % 2 == 0) {\n                flag = 1;\n         \
    \       break;\n            }\n            num /= 10;\n        }\n        if (flag\
    \ == 0) {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long temp=x[i];\n        while(temp>0){\n            if(temp%10%2==0){\n\
    \                flag=1;\n                break;\n            }\n            temp/=10;\n\
    \        }\n        if(flag==0){\n            res.push_back(x[i]);\n        }\n\
    \    }\n    std::sort(res.begin(),res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long temp=x[i];\n        while(temp>0){\n            int rem=temp%10;\n\
    \            if(rem%2==0){\n                flag=1;\n                break;\n\
    \            }\n            temp=temp/10;\n        }\n        if(flag==0){\n \
    \           res.push_back(x[i]);\n        }\n    }\n    sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        long\
    \ num = x[i];\n        bool flag = true;\n        while(num>0){\n            int\
    \ rem = num%10;\n            if(rem%2==0){\n                flag = false;\n  \
    \              break;\n            }\n            num = num/10;\n        }\n \
    \       if(flag){\n            res.push_back(x[i]);\n        }\n    }\n    sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        int num = x[i];\n        bool flag = true;\n        while (num != 0)\
    \ {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n  \
    \              flag = false;\n                break;\n            }\n        \
    \    num /= 10;\n        }\n        if (flag) {\n            result.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        int flag = 0;\n        while (x[i] > 0) {\n            if ((x[i] % 10)\
    \ % 2 == 0) {\n                flag = 1;\n                break;\n           \
    \ }\n            x[i] /= 10;\n        }\n        if (flag == 0) {\n          \
    \  result.push_back(x[i]);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmpm6t9wmnl: /tmp/tmpm6t9wmnl.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool is_unique\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  is_unique = false;\n                    break;\n          \
    \      }\n                i /= 10;\n            }\n            if (is_unique)\
    \ {\n                result.push_back(i);\n            }\n        }\n    }\n \
    \   std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmpqz90oy8t: /tmp/tmpqz90oy8t.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i = x.begin(); i != x.end();\
    \ i++) {\n        bool flag = true;\n        long number = *i;\n        while\
    \ (number > 0) {\n            if (number % 2 == 0) {\n                flag = false;\n\
    \                break;\n            }\n            number /= 10;\n        }\n\
    \        if (flag) {\n            result.push_back(*i);\n        }\n    }\n  \
    \  std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        long\
    \ num = x[i];\n        bool flag = true;\n        while(num>0){\n            if(num%10%2==0){\n\
    \                flag = false;\n                break;\n            }\n      \
    \      num/=10;\n        }\n        if(flag)\n            res.push_back(x[i]);\n\
    \    }\n    std::sort(res.begin(),res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long num=x[i];\n        while(num>0){\n            int rem=num%10;\n\
    \            if(rem%2==0){\n                flag=1;\n                break;\n\
    \            }\n            num=num/10;\n        }\n        if(flag==0){\n   \
    \         res.push_back(x[i]);\n        }\n    }\n    sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long num=x[i];\n        while(num!=0){\n            if((num%10)%2==0){\n\
    \                flag=1;\n                break;\n            }\n            num=num/10;\n\
    \        }\n        if(flag==0){\n            res.push_back(x[i]);\n        }\n\
    \    }\n    std::sort(res.begin(),res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool has_even\
    \ = false;\n            while (i > 0) {\n                if ((i % 10) % 2 == 0)\
    \ {\n                    has_even = true;\n                    break;\n      \
    \          }\n                i /= 10;\n            }\n            if (!has_even)\
    \ {\n                result.push_back(i);\n            }\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = unique_digits;\n   \
    \ assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmprrbau0ty: /tmp/tmprrbau0ty.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool flag\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  flag = false;\n                    break;\n               \
    \ }\n                i /= 10;\n            }\n            if (flag) {\n      \
    \          result.push_back(i);\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmp8chnku7c: /tmp/tmp8chnku7c.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long num=x[i];\n        while(num>0){\n            int r=num%10;\n\
    \            if(r%2==0){\n                flag=1;\n                break;\n  \
    \          }\n            num=num/10;\n        }\n        if(flag==0){\n     \
    \       res.push_back(x[i]);\n        }\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        long\
    \ num = x[i];\n        bool flag = true;\n        while(num>0){\n            if(num%10%2==0){\n\
    \                flag = false;\n                break;\n            }\n      \
    \      num = num/10;\n        }\n        if(flag){\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(),res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        bool is_unique = true;\n        long num = x[i];\n        while (num\
    \ > 0) {\n            if (num % 2 == 0) {\n                is_unique = false;\n\
    \                break;\n            }\n            num /= 10;\n        }\n  \
    \      if (is_unique) {\n            result.push_back(x[i]);\n        }\n    }\n\
    \    std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(auto i:x){\n        if(i<10){\n     \
    \       res.push_back(i);\n        }\n        else{\n            int flag=0;\n\
    \            while(i>0){\n                if(i%10%2==0){\n                   \
    \ flag=1;\n                    break;\n                }\n                i=i/10;\n\
    \            }\n            if(flag==0){\n                res.push_back(i);\n\
    \            }\n        }\n    }\n    std::sort(res.begin(),res.end());\n    return\
    \ res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmplv83ev6l: /tmp/tmplv83ev6l.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool is_unique\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  is_unique = false;\n                    break;\n          \
    \      }\n                i /= 10;\n            }\n            if (is_unique)\
    \ {\n                result.push_back(i);\n            }\n        }\n    }\n \
    \   std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmpxcerd8v_: /tmp/tmpxcerd8v_.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (std::to_string(i).find_first_of(\"\
    02468\") == std::string::npos) {\n            result.push_back(i);\n        }\n\
    \    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        int num = x[i];\n        bool is_unique = true;\n        while (num >\
    \ 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n\
    \                is_unique = false;\n                break;\n            }\n \
    \           num /= 10;\n        }\n        if (is_unique) {\n            result.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        long\
    \ num = x[i];\n        bool flag = true;\n        while(num>0){\n            if(num%10%2==0){\n\
    \                flag = false;\n                break;\n            }\n      \
    \      num = num/10;\n        }\n        if(flag){\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(),res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(auto i : x) {\n        if(i < 10) {\n\
    \            res.push_back(i);\n        } else {\n            bool flag = true;\n\
    \            while(i > 0) {\n                if(i % 2 == 0) {\n              \
    \      flag = false;\n                    break;\n                }\n        \
    \        i /= 10;\n            }\n            if(flag) {\n                res.push_back(i);\n\
    \            }\n        }\n    }\n    std::sort(res.begin(), res.end());\n   \
    \ return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmpw_u_qk57: /tmp/tmpw_u_qk57.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool is_unique\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  is_unique = false;\n                    break;\n          \
    \      }\n                i /= 10;\n            }\n            if (is_unique)\
    \ {\n                result.push_back(i);\n            }\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = unique_digits;\n   \
    \ assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmprji2afmq: /tmp/tmprji2afmq.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> y;\n    for(int i=0;i<x.size();i++){\n        long\
    \ n=x[i];\n        bool flag=true;\n        while(n>0){\n            if(n%2==0){\n\
    \                flag=false;\n                break;\n            }\n        \
    \    n=n/10;\n        }\n        if(flag){\n            y.push_back(x[i]);\n \
    \       }\n    }\n    std::sort(y.begin(),y.end());\n    return y;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    for(auto i:x){\n        if(i<10){\n     \
    \       ans.push_back(i);\n        }\n        else{\n            int flag=0;\n\
    \            while(i>0){\n                if(i%10%2==0){\n                   \
    \ flag=1;\n                    break;\n                }\n                i/=10;\n\
    \            }\n            if(flag==0){\n                ans.push_back(i);\n\
    \            }\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmprvheenvh: /tmp/tmprvheenvh.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        long\
    \ num = x[i];\n        int flag = 0;\n        while(num){\n            int rem\
    \ = num%10;\n            if(rem%2==0){\n                flag = 1;\n          \
    \      break;\n            }\n            num = num/10;\n        }\n        if(flag==0){\n\
    \            res.push_back(x[i]);\n        }\n    }\n    sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool flag\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  flag = false;\n                    break;\n               \
    \ }\n                i /= 10;\n            }\n            if (flag) {\n      \
    \          result.push_back(i);\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmp70h74xn7: /tmp/tmp70h74xn7.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool isEven\
    \ = false;\n            while (i > 0) {\n                if ((i % 10) % 2 == 0)\
    \ {\n                    isEven = true;\n                    break;\n        \
    \        }\n                i /= 10;\n            }\n            if (!isEven)\
    \ {\n                result.push_back(i);\n            }\n        }\n    }\n \
    \   std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmp9raa2l_y: /tmp/tmp9raa2l_y.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        long num = x[i];\n        bool flag = true;\n        while (num > 0)\
    \ {\n            if (num % 2 == 0) {\n                flag = false;\n        \
    \        break;\n            }\n            num /= 10;\n        }\n        if\
    \ (flag) {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long temp=x[i];\n        while(temp>0){\n            if(temp%10%2==0){\n\
    \                flag=1;\n                break;\n            }\n            temp/=10;\n\
    \        }\n        if(flag==0){\n            res.push_back(x[i]);\n        }\n\
    \    }\n    std::sort(res.begin(),res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> v;\n    for(int i=0;i<x.size();i++){\n        int flag=0;\n\
    \        long num=x[i];\n        while(num>0){\n            if(num%10%2==0){\n\
    \                flag=1;\n                break;\n            }\n            num=num/10;\n\
    \        }\n        if(flag==0){\n            v.push_back(x[i]);\n        }\n\
    \    }\n    std::sort(v.begin(),v.end());\n    return v;\n}\nint main() {\n  \
    \  auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool flag\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  flag = false;\n                    break;\n               \
    \ }\n                i /= 10;\n            }\n            if (flag) {\n      \
    \          result.push_back(i);\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmpjdkwb2u0: /tmp/tmpjdkwb2u0.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        bool flag\
    \ = true;\n        while (i > 0) {\n            if (i % 2 == 0) {\n          \
    \      flag = false;\n                break;\n            }\n            i /=\
    \ 10;\n        }\n        if (flag) {\n            result.push_back(i);\n    \
    \    }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmp2igmiu4i: /tmp/tmp2igmiu4i.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long num=x[i];\n        while(num>0){\n            int digit=num%10;\n\
    \            if(digit%2==0){\n                flag=1;\n                break;\n\
    \            }\n            num=num/10;\n        }\n        if(flag==0){\n   \
    \         res.push_back(x[i]);\n        }\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        while(x[i]>0){\n            int rem=x[i]%10;\n            if(rem%2==0){\n\
    \                flag=1;\n                break;\n            }\n            x[i]=x[i]/10;\n\
    \        }\n        if(flag==0){\n            res.push_back(x[i]);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmptq0p6dl7: /tmp/tmptq0p6dl7.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool flag\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  flag = false;\n                    break;\n               \
    \ }\n                i /= 10;\n            }\n            if (flag) {\n      \
    \          result.push_back(i);\n            }\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  stdout: ''
  stderr: "tmpgrcxwqfi: /tmp/tmpgrcxwqfi.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33}))' failed.\n"
  exit_code: -6
  status: Exception
